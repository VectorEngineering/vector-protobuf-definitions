syntax = "proto3";

package lead_scraper_service.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "lead_scraper_service/v1/request_response.proto";

option go_package = "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/lead_scraper_service/v1";

/**
 * LeadScraperService provides functionality for managing Google Maps scraping jobs.
 * This service allows users to create, monitor, and retrieve results from scraping tasks
 * that extract data from Google Maps based on specified search criteria.
 *
 * Key features:
 * - Create and manage scraping jobs
 * - Monitor job status and progress
 * - Download scraped results
 * - Multi-tenant support with organization and user context
 *
 * Usage example:
 * ```go
 * client := workspace_service.NewLeadScraperServiceClient(conn)
 * resp, err := client.CreateScrapingJob(ctx, &CreateScrapingJobRequest{
 *     Name: "Coffee shops in Athens",
 *     Keywords: []string{"coffee", "caf√©"},
 *     Lang: "el",
 * })
 * ```
 */
service LeadScraperService {
    // Create a new Google Maps scraping job
    //
    // This endpoint initiates a new scraping task with the specified parameters.
    // The job will be queued and processed asynchronously. The response includes
    // a job ID that can be used to track the job's progress.
    //
    // Common use cases:
    // - Scrape business listings for market research
    // - Collect location data for geographic analysis
    // - Extract contact information for lead generation
    rpc CreateScrapingJob(CreateScrapingJobRequest) returns (CreateScrapingJobResponse) {
        option (google.api.http) = {
            post: "/lead-scraper-microservice/api/v1/jobs"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a new job scraping task"
            tags: ["lead-scraper-service"]
            operation_id: "CreateScrapingJob"
            description: "This endpoint creates a new Google Maps scraping job"
            responses: {
                key: "201"
                value: {
                    description: "Job created successfully"
                    schema: {
                        json_schema: { ref: ".lead_scraper_service.v1.CreateScrapingJobResponse" }
                    }
                }
            }
        };
    }

    // Get all scraping jobs
    //
    // Retrieves a list of all scraping jobs for the authenticated user within their
    // organization context. The results can be filtered by status and other criteria.
    //
    // The response includes basic job information and status. For detailed job data,
    // use GetScrapingJob with a specific job ID.
    rpc ListScrapingJobs(ListScrapingJobsRequest) returns (ListScrapingJobsResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/jobs"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get all jobs"
            tags: ["lead-scraper-service"]
            operation_id: "ListScrapingJobs"
            description: "This endpoint retrieves all Google Maps scraping jobs"
            responses: {
                key: "200"
                value: {
                    description: "Successful response"
                    schema: {
                        json_schema: { ref: ".lead_scraper_service.v1.ListScrapingJobsResponse" }
                    }
                }
            }
        };
    }

    // Get a specific scraping job
    //
    // Retrieves detailed information about a specific scraping job, including its
    // current status, configuration, and progress metrics.
    //
    // This endpoint is useful for:
    // - Monitoring job progress
    // - Debugging failed jobs
    // - Retrieving job configuration details
    rpc GetScrapingJob(GetScrapingJobRequest) returns (GetScrapingJobResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/jobs/{job_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get a specific job"
            tags: ["lead-scraper-service"]
            operation_id: "GetScrapingJob"
            description: "This endpoint retrieves a specific Google Maps scraping job"
            responses: {
                key: "200"
                value: {
                    description: "Successful response"
                    schema: {
                        json_schema: { ref: ".lead_scraper_service.v1.GetScrapingJobResponse" }
                    }
                }
            }
        };
    }

    // Delete a specific scraping job
    //
    // Permanently removes a scraping job and its associated data. This action cannot
    // be undone. If the job is currently running, it will be stopped.
    //
    // Security note:
    // - Requires authentication
    // - User must have appropriate permissions
    // - Job must belong to user's organization
    rpc DeleteScrapingJob(DeleteScrapingJobRequest) returns (DeleteScrapingJobResponse) {
        option (google.api.http) = {
            delete: "/lead-scraper-microservice/api/v1/jobs/{job_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete a specific job"
            tags: ["lead-scraper-service"]
            operation_id: "DeleteScrapingJob"
            description: "This endpoint deletes a specific Google Maps scraping job"
            responses: {
                key: "200"
                value: {
                    description: "Job deleted successfully"
                    schema: {
                        json_schema: { ref: ".lead_scraper_service.v1.DeleteScrapingJobResponse" }
                    }
                }
            }
        };
    }

    // Download job results
    //
    // Downloads the results of a completed scraping job in CSV format. The response
    // includes the file content and appropriate headers for browser download.
    //
    // The CSV file includes:
    // - Business names and addresses
    // - Contact information
    // - Rating and review counts
    // - Operating hours
    // - Additional metadata based on job configuration
    rpc DownloadScrapingResults(DownloadScrapingResultsRequest) returns (DownloadScrapingResultsResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/jobs/{job_id}/download"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Download job results as CSV"
            tags: ["lead-scraper-service"]
            operation_id: "DownloadScrapingResults"
            description: "This endpoint downloads the results of a Google Maps scraping job as CSV"
            responses: {
                key: "200"
                value: {
                    description: "Successful response"
                    schema: {
                        json_schema: { ref: ".lead_scraper_service.v1.DownloadScrapingResultsResponse" }
                    }
                }
            }
        };
    }

    // Create a new account
    //
    // This endpoint creates a new user account in the workspace service.
    // It sets up the necessary infrastructure for the user to start managing
    // scraping jobs and other workspace resources.
    //
    // Required permissions:
    // - create:account
    rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {
        option (google.api.http) = {
            post: "/lead-scraper-microservice/api/v1/accounts"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a new account"
            tags: ["lead-scraper-service"]
            operation_id: "CreateAccount"
            description: "Creates a new user account in the workspace service"
            responses: {
                key: "201"
                value: {
                    description: "Account created successfully"
                    schema: {
                        json_schema: { ref: ".lead_scraper_service.v1.CreateAccountResponse" }
                    }
                }
            }
        };
    }

    // Get account details
    //
    // Retrieves detailed information about a specific account, including
    // associated scraping jobs and account settings.
    //
    // Required permissions:
    // - read:account
    rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/accounts/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get account details"
            tags: ["lead-scraper-service"]
            operation_id: "GetAccount"
            description: "Retrieves details of a specific account"
            responses: {
                key: "200"
                value: {
                    description: "Account details retrieved successfully"
                    schema: {
                        json_schema: { ref: ".lead_scraper_service.v1.GetAccountResponse" }
                    }
                }
            }
        };
    }

    // Update account
    //
    // Updates the specified fields of an existing account. Only provided
    // fields will be modified.
    //
    // Required permissions:
    // - update:account
    rpc UpdateAccount(UpdateAccountRequest) returns (UpdateAccountResponse) {
        option (google.api.http) = {
            put: "/lead-scraper-microservice/api/v1/accounts"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Update account details"
            tags: ["lead-scraper-service"]
            operation_id: "UpdateAccount"
            description: "Updates specified fields of an existing account"
            responses: {
                key: "200"
                value: {
                    description: "Account updated successfully"
                    schema: {
                        json_schema: { ref: ".lead_scraper_service.v1.UpdateAccountResponse" }
                    }
                }
            }
        };
    }

    // Delete account
    //
    // Permanently deletes an account and all associated resources.
    // This action cannot be undone.
    //
    // Required permissions:
    // - delete:account
    rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {
        option (google.api.http) = {
            delete: "/lead-scraper-microservice/api/v1/accounts/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete account"
            tags: ["lead-scraper-service"]
            operation_id: "DeleteAccount"
            description: "Permanently deletes an account and associated resources"
            responses: {
                key: "200"
                value: {
                    description: "Account deleted successfully"
                    schema: {
                        json_schema: { ref: ".lead_scraper_service.v1.DeleteAccountResponse" }
                    }
                }
            }
        };
    }

    /**
     * CreateWorkspace establishes a new organizational workspace for managing scraping jobs
     * 
     * This endpoint creates a dedicated workspace with configurable:
     * - Access controls and permissions
     * - Resource quotas
     * - Team member associations
     * - Job execution environments
     * 
     * Required parameters:
     * - account_id: Parent account ID
     * - name: Human-readable workspace name
     * - region: Deployment region for workspace resources
     * 
     * Example:
     * ```curl
     * POST /lead-scraper-microservice/api/v1/workspaces
     * {
     *   "name": "European Market Research",
     *   "region": "eu-west-1",
     *   "default_job_parameters": {
     *     "lang": "en",
     *     "country_code": "GR"
     *   }
     * }
     * ```
     */
    rpc CreateWorkspace(CreateWorkspaceRequest) returns (CreateWorkspaceResponse) {
        option (google.api.http) = {
            post: "/lead-scraper-microservice/api/v1/workspaces"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a new workspace"
            tags: ["lead-scraper-service"],
            operation_id: "CreateWorkspace",
            description: "Creates a new workspace for a given account",
            responses: {
                key: "201"
                value: {
                    description: "Workspace created successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.CreateWorkspaceResponse" } }
                }
            }
        };

    }

    /**
     * ListWorkspaces retrieves all workspaces associated with an account
     * 
     * Features:
     * - Pagination support via limit/offset parameters
     * - Filtering by creation date, region, and status
     * - Summary statistics for quick overview
     * 
     * Response includes:
     * - Basic workspace metadata
     * - Job execution statistics
     * - Resource utilization metrics
     */
    rpc ListWorkspaces(ListWorkspacesRequest) returns (ListWorkspacesResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/workspaces"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List workspaces"
            tags: ["lead-scraper-service"],
            operation_id: "ListWorkspaces",
            description: "Retrieves a list of workspaces for a given account",
            responses: {
                key: "200"
                value: {
                    description: "Workspaces retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.ListWorkspacesResponse" } }
                }
            }
        };
    }

    /**
     * GetAccountUsage provides detailed usage metrics for an account
     * 
     * Metrics include:
     * - Active scraping jobs
     * - API call statistics
     * - Storage utilization
     * - Data processing throughput
     * - Historical usage trends
     * 
     * Usage scenarios:
     * - Billing and invoicing
     * - Resource planning
     * - Usage quota enforcement
     */
    rpc GetAccountUsage(GetAccountUsageRequest) returns (GetAccountUsageResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/accounts/{id}/usage"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get account usage"
            tags: ["lead-scraper-service"],
            operation_id: "GetAccountUsage",
            description: "Retrieves usage details for a given account",
            responses: {    
                key: "200"
                value: {
                    description: "Usage details retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.GetAccountUsageResponse" } }
                }
            }
        };
    }

    /**
     * UpdateAccountSettings modifies configurable account parameters
     * 
     * Configurable settings:
     * - Notification preferences
     * - API rate limits
     * - Data retention policies
     * - Security settings (2FA, IP whitelisting)
     * - Default job parameters
     * 
     * Example update:
     * ```json
     * {
     *   "notification_settings": {
     *     "job_completion_webhook": "https://example.com/webhooks/jobs"
     *   },
     *   "data_retention_days": 30
     * }
     * ```
     */
    rpc UpdateAccountSettings(UpdateAccountSettingsRequest) returns (UpdateAccountSettingsResponse) {
        option (google.api.http) = {
            put: "/lead-scraper-microservice/api/v1/accounts/settings"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Update account settings"
            tags: ["lead-scraper-service"],
            operation_id: "UpdateAccountSettings",
            description: "Updates the settings for a given account",
            responses: {
                key: "200"
                value: {
                    description: "Settings updated successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.UpdateAccountSettingsResponse" } }
                }
            }
        };
    }

    /**
     * ListAccounts retrieves paginated account information
     * 
     * Features:
     * - Server-side filtering by organization, status, and region
     * - Sorting by creation date, last active, etc.
     * - Partial response field masking
     * 
     * Security:
     * - Requires admin privileges
     * - Results filtered by organization context
     * - Sensitive fields omitted by default
     */
    rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/accounts"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List all accounts"
            tags: ["lead-scraper-service"],
            operation_id: "ListAccounts",
            description: "Retrieves a list of accounts",
            responses: {
                key: "200"
                value: {
                    description: "Accounts retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.ListAccountsResponse" } }
                }
            }
        };
    }

     // Workflow Management
     /**
     * CreateWorkflow establishes a new workflow for a workspace
     * 
     * This endpoint creates a new workflow configuration for a specific workspace
     * 
     * Required parameters:
     * - workspace_id: Parent workspace ID
     * - name: Human-readable workflow name
     * - description: Optional workflow description
     * - parameters: Job parameters for the workflow
     * 
     * Example:
     * ```json
     */
    rpc CreateWorkflow(CreateWorkflowRequest) returns (CreateWorkflowResponse) {
        option (google.api.http) = {
            post: "/lead-scraper-microservice/api/v1/workspaces/{workspace_id}/workflows"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a new workflow"
            tags: ["lead-scraper-service"],
            responses: {
                key: "201"
                value: {
                    description: "Workflow created successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.CreateWorkflowResponse" } }
                }
            }
        };
    }

    /**
     * GetWorkflow retrieves detailed information about a specific workflow
     * 
     * This endpoint provides comprehensive details about a workflow, including:
     * - Workflow configuration
     * - Job execution history
     * - Associated workspaces
     */
    rpc GetWorkflow(GetWorkflowRequest) returns (GetWorkflowResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/workspaces/{workspace_id}/workflows/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get workflow details"
            tags: ["lead-scraper-service"],
            operation_id: "GetWorkflow",
            description: "Retrieves details of a specific workflow",
            responses: {
                key: "200"
                value: {
                    description: "Workflow retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.GetWorkflowResponse" } }
                }
            }
        };
    }

    /**
     * UpdateWorkflow modifies the configuration of a specific workflow
     * 
     * This endpoint allows updating the details of a workflow, including:
     * - Workflow name and description
     * - Job parameters
     * 
     * Example update:
     * ```json
     * {
     *   "name": "Updated Workflow",
     *   "description": "Updated description"
     * }
     * ```
     */
    rpc UpdateWorkflow(UpdateWorkflowRequest) returns (UpdateWorkflowResponse) {
        option (google.api.http) = {
            put: "/lead-scraper-microservice/api/v1/workspaces/workflow"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Update workflow details"
            tags: ["lead-scraper-service"],
            operation_id: "UpdateWorkflow",
            description: "Updates the details of a specific workflow",
            responses: {
                key: "200"
                value: {
                    description: "Workflow updated successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.UpdateWorkflowResponse" } }
                }
            }
        };
    }

    /**
     * ListWorkflows retrieves all workflows in a workspace
     * 
     * Features:
     * - Pagination support with customizable page size
     * - Filtering by status, creation date, and type
     * - Sorting options for various workflow attributes
     * 
     * Response includes:
     * - Workflow metadata and configuration
     * - Execution statistics and status
     * - Last run information
     * - Associated resource usage
     * 
     * Common use cases:
     * - Monitoring workflow health
     * - Auditing workflow configurations
     * - Resource utilization analysis
     */
    rpc ListWorkflows(ListWorkflowsRequest) returns (ListWorkflowsResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/workspaces/{workspace_id}/workflows"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List workflows"
            tags: ["lead-scraper-service"],
            operation_id: "ListWorkflows",
            description: "Retrieves a list of workflows for a given workspace",
            responses: {
                key: "200"
                value: {
                    description: "Workflows retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.ListWorkflowsResponse" } }
                }
            }
        };
    }

    // Execution Control
    /**
     * TriggerWorkflow initiates workflow execution with specified parameters
     * 
     * Features:
     * - Immediate or scheduled execution
     * - Custom parameter overrides
     * - Dependency chain validation
     * - Resource availability check
     * 
     * Execution process:
     * 1. Validates workflow configuration
     * 2. Checks resource availability
     * 3. Initializes execution environment
     * 4. Starts job processing
     * 5. Monitors progress and updates status
     * 
     * Error handling:
     * - Automatic retry for transient failures
     * - Configurable timeout settings
     * - Detailed error reporting
     */
    rpc TriggerWorkflow(TriggerWorkflowRequest) returns (TriggerWorkflowResponse) {
        option (google.api.http) = {
            post: "/lead-scraper-microservice/api/v1/workspaces/{workspace_id}/workflows/{id}/trigger"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Trigger workflow execution"
            tags: ["lead-scraper-service"],
            operation_id: "TriggerWorkflow",
            description: "Triggers the execution of a specific workflow",
            responses: {
                key: "200"
                value: {
                    description: "Workflow triggered successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.TriggerWorkflowResponse" } }
                }
            }
        };
    }

    /**
     * PauseWorkflow safely suspends workflow execution
     * 
     * Behavior:
     * - Gracefully stops job processing
     * - Maintains workflow state
     * - Preserves partial results
     * - Allows resume from last checkpoint
     * 
     * Safety measures:
     * - Completes in-progress tasks
     * - Saves checkpoint data
     * - Updates workflow status
     * - Notifies dependent systems
     * 
     * Use cases:
     * - System maintenance
     * - Resource reallocation
     * - Error investigation
     * - Configuration updates
     */
    rpc PauseWorkflow(PauseWorkflowRequest) returns (PauseWorkflowResponse) {
        option (google.api.http) = {
            post: "/lead-scraper-microservice/api/v1/workspaces/{workspace_id}/workflows/{id}/pause"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Pause workflow execution"
            tags: ["lead-scraper-service"],
            operation_id: "PauseWorkflow",
            description: "Pauses the execution of a specific workflow",
            responses: {
                key: "200"
                value: {
                    description: "Workflow paused successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.PauseWorkflowResponse" } }
                }
            }
        };
    }

    // Analytics
    /**
     * GetWorkspaceAnalytics provides comprehensive workspace metrics
     * 
     * Metrics categories:
     * - Resource utilization (CPU, memory, storage)
     * - Job execution statistics
     * - Error rates and types
     * - Performance trends
     * - Cost analysis
     * 
     * Time ranges:
     * - Real-time metrics
     * - Historical data (configurable periods)
     * - Trend analysis
     * 
     * Aggregation options:
     * - By workflow
     * - By job type
     * - By time period
     * - By resource type
     */
    rpc GetWorkspaceAnalytics(GetWorkspaceAnalyticsRequest) returns (GetWorkspaceAnalyticsResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/workspaces/{workspace_id}/analytics"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get workspace analytics"
            tags: ["lead-scraper-service"],
            operation_id: "GetWorkspaceAnalytics",
            description: "Retrieves analytics data for a specific workspace",
            responses: {
                key: "200"
                value: {
                    description: "Analytics data retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.GetWorkspaceAnalyticsResponse" } }
                }
            }
        };
    }

    /**
     * GetWorkspace retrieves detailed workspace information
     * 
     * Response includes:
     * - Basic metadata (name, ID, creation date)
     * - Access control configuration
     * - Resource quotas and usage
     * - Workflow inventory
     * - Integration settings
     * 
     * Security features:
     * - Role-based access control
     * - Audit log integration
     * - Resource isolation validation
     * 
     * Common use cases:
     * - Workspace administration
     * - Configuration management
     * - Compliance auditing
     * - Resource planning
     */
    rpc GetWorkspace(GetWorkspaceRequest) returns (GetWorkspaceResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/workspace/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get workspace details"
            tags: ["lead-scraper-service"],
            operation_id: "GetWorkspace",
            description: "Retrieves details of a specific workspace",
            responses: {
                key: "200"
                value: {
                    description: "Workspace retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.GetWorkspaceResponse" } }
                }
            }
        };
    }

    /**
     * UpdateWorkspace modifies workspace configuration
     * 
     * Modifiable settings:
     * - Basic information (name, description)
     * - Access control lists
     * - Resource quotas
     * - Default parameters
     * - Integration configurations
     * - Notification preferences
     * 
     * Update process:
     * 1. Validates new configuration
     * 2. Checks resource implications
     * 3. Applies changes atomically
     * 4. Updates dependent systems
     * 5. Logs modifications
     * 
     * Safety features:
     * - Configuration validation
     * - Atomic updates
     * - Rollback capability
     * - Audit trail
     */
    rpc UpdateWorkspace(UpdateWorkspaceRequest) returns (UpdateWorkspaceResponse) {
        option (google.api.http) = {
            put: "/lead-scraper-microservice/api/v1/workspace"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Update workspace details"
            tags: ["lead-scraper-service"],
            operation_id: "UpdateWorkspace",
            description: "Updates the details of a specific workspace",
            responses: {
                key: "200"
                value: {
                    description: "Workspace updated successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.UpdateWorkspaceResponse" } }
                }
            }
        };
    }

    /**
     * DeleteWorkspace removes a workspace and associated resources
     * 
     * Deletion process:
     * 1. Validation checks
     *    - Resource dependencies
     *    - Active workflows
     *    - User permissions
     * 
     * 2. Resource cleanup
     *    - Workflow termination
     *    - Data archival
     *    - Resource deallocation
     * 
     * Safety measures:
     * - Soft delete with recovery window
     * - Dependency validation
     * - Resource cleanup confirmation
     * - Audit trail preservation
     * 
     * Post-deletion:
     * - Notification to stakeholders
     * - Resource reclamation
     * - Audit log finalization
     */
    rpc DeleteWorkspace(DeleteWorkspaceRequest) returns (DeleteWorkspaceResponse) {
        option (google.api.http) = {
            delete: "/lead-scraper-microservice/api/v1/workspace/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete a workspace"
            tags: ["lead-scraper-service"],
            operation_id: "DeleteWorkspace",
            description: "Deletes a specific workspace",
            responses: {
                key: "200"
                value: {
                    description: "Workspace deleted successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.DeleteWorkspaceResponse" } }
                }
            }
        };
    }

    // Tenant Management
    /**
     * CreateTenant establishes a new tenant in the system
     * 
     * A tenant represents the top-level organizational unit that can contain
     * multiple organizations. This endpoint sets up the necessary infrastructure
     * for multi-tenant isolation.
     * 
     * Features:
     * - Automatic resource provisioning
     * - Custom domain support
     * - Billing configuration
     * - Security policy initialization
     * 
     * Required permissions:
     * - create:tenant (system admin only)
     */
    rpc CreateTenant(CreateTenantRequest) returns (CreateTenantResponse) {
        option (google.api.http) = {
            post: "/lead-scraper-microservice/api/v1/organizations/{organization_id}/tenants"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a new tenant"
            tags: ["lead-scraper-service"],
            operation_id: "CreateTenant",
            description: "Creates a new tenant in the system",
            responses: {
                key: "201"
                value: {
                    description: "Tenant created successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.CreateTenantResponse" } }
                }
            }
        };
    }

    /**
     * GetTenant retrieves detailed tenant information
     * 
     * Returns comprehensive information about a tenant including:
     * - Basic metadata
     * - Resource utilization
     * - Organization list
     * - Configuration settings
     * - Billing status
     * 
     * Required permissions:
     * - read:tenant
     */
    rpc GetTenant(GetTenantRequest) returns (GetTenantResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/organizations/tenants/{organization_id}/{tenant_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get tenant details"
            tags: ["lead-scraper-service"],
            operation_id: "GetTenant",
            description: "Retrieves details of a specific tenant",
            responses: {
                key: "200"
                value: {
                    description: "Tenant retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.GetTenantResponse" } }
                }
            }
        };
    }

    /**
     * UpdateTenant modifies tenant configuration
     * 
     * Allows updating various tenant settings including:
     * - Name and description
     * - Domain configuration
     * - Security policies
     * - Resource limits
     * - Billing settings
     * 
     * Required permissions:
     * - update:tenant
     */
    rpc UpdateTenant(UpdateTenantRequest) returns (UpdateTenantResponse) {
        option (google.api.http) = {
            put: "/lead-scraper-microservice/api/v1/organizations/tenants"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Update tenant details"
            tags: ["lead-scraper-service"],
            operation_id: "UpdateTenant",
            description: "Updates the configuration of a specific tenant",
            responses: {
                key: "200"
                value: {
                    description: "Tenant updated successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.UpdateTenantResponse" } }
                }
            }
        };
    }

    /**
     * DeleteTenant removes a tenant and all associated resources
     * 
     * This is a destructive operation that:
     * - Removes all tenant data
     * - Deletes associated organizations
     * - Cleans up resources
     * - Archives audit logs
     * 
     * Required permissions:
     * - delete:tenant (system admin only)
     */
    rpc DeleteTenant(DeleteTenantRequest) returns (DeleteTenantResponse) {
        option (google.api.http) = {
            delete: "/lead-scraper-microservice/api/v1/organization/tenants/{organization_id}/{tenant_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete a tenant"
            tags: ["lead-scraper-service"],
            operation_id: "DeleteTenant",
            description: "Permanently deletes a tenant and all associated resources",
            responses: {
                key: "200"
                value: {
                    description: "Tenant deleted successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.DeleteTenantResponse" } }
                }
            }
        };
    }

    /**
     * ListTenants retrieves all tenants in the system
     * 
     * Features:
     * - Pagination support
     * - Filtering options
     * - Sorting capabilities
     * - Field selection
     * 
     * Required permissions:
     * - list:tenant (system admin only)
     */
    rpc ListTenants(ListTenantsRequest) returns (ListTenantsResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/organization/tenants/{organization_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List all tenants"
            tags: ["lead-scraper-service"],
            operation_id: "ListTenants",
            description: "Retrieves a list of all tenants in the system",
            responses: {
                key: "200"
                value: {
                    description: "Tenants retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.ListTenantsResponse" } }
                }
            }
        };
    }

    // Organization Management
    /**
     * CreateOrganization establishes a new organization within a tenant
     * 
     * Organizations represent business units within a tenant that can:
     * - Manage their own users
     * - Have separate billing
     * - Maintain isolated resources
     * - Configure custom policies
     * 
     * Required permissions:
     * - create:organization
     */
    rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {
        option (google.api.http) = {
            post: "/lead-scraper-microservice/api/v1/organization"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a new organization"
            tags: ["lead-scraper-service"],
            operation_id: "CreateOrganization",
            description: "Creates a new organization within a tenant",
            responses: {
                key: "201"
                value: {
                    description: "Organization created successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.CreateOrganizationResponse" } }
                }
            }
        };
    }

    /**
     * GetOrganization retrieves detailed organization information
     * 
     * Returns comprehensive information including:
     * - Basic metadata
     * - Member list
     * - Resource usage
     * - Billing status
     * - Policy configuration
     * 
     * Required permissions:
     * - read:organization
     */
    rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/organization/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get organization details"
            tags: ["lead-scraper-service"],
            operation_id: "GetOrganization",
            description: "Retrieves details of a specific organization",
            responses: {
                key: "200"
                value: {
                    description: "Organization retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.GetOrganizationResponse" } }
                }
            }
        };
    }

    /**
     * UpdateOrganization modifies organization configuration
     * 
     * Allows updating:
     * - Basic information
     * - Security policies
     * - Resource limits
     * - Member permissions
     * - Integration settings
     * 
     * Required permissions:
     * - update:organization
     */
    rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {
        option (google.api.http) = {
            put: "/lead-scraper-microservice/api/v1/organization"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Update organization details"
            tags: ["lead-scraper-service"],
            operation_id: "UpdateOrganization",
            description: "Updates the configuration of a specific organization",
            responses: {
                key: "200"
                value: {
                    description: "Organization updated successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.UpdateOrganizationResponse" } }
                }
            }
        };
    }

    /**
     * DeleteOrganization removes an organization and its resources
     * 
     * This operation:
     * - Removes organization data
     * - Deletes member associations
     * - Cleans up resources
     * - Archives audit logs
     * 
     * Required permissions:
     * - delete:organization
     */
    rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
        option (google.api.http) = {
            delete: "/lead-scraper-microservice/api/v1/organization/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete an organization"
            tags: ["lead-scraper-service"],
            operation_id: "DeleteOrganization",
            description: "Permanently deletes an organization and all associated resources",
            responses: {
                key: "200"
                value: {
                    description: "Organization deleted successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.DeleteOrganizationResponse" } }
                }
            }
        };
    }

    /**
     * ListOrganizations retrieves all organizations in a tenant
     * 
     * Features:
     * - Pagination support
     * - Filtering by status
     * - Sorting options
     * - Field selection
     * 
     * Required permissions:
     * - list:organization
     */
    rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/organization"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List all organizations"
            tags: ["lead-scraper-service"],
            operation_id: "ListOrganizations",
            description: "Retrieves a list of all organizations in a tenant",
            responses: {
                key: "200"
                value: {
                    description: "Organizations retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.ListOrganizationsResponse" } }
                }
            }
        };
    }

    /**
     * CreateTenantAPIKey generates a new API key for a tenant
     * 
     * Features:
     * - Secure key generation
     * - Configurable permissions
     * - Automatic expiration
     * - Usage quotas
     * 
     * Required validation:
     * - Valid tenant ID
     * - Authorization check
     * - Rate limit verification
     * 
     * Required permissions:
     * - create:tenant_api_key
     */
    rpc CreateTenantAPIKey(CreateTenantAPIKeyRequest) returns (CreateTenantAPIKeyResponse) {
        option (google.api.http) = {
            post: "/lead-scraper-microservice/api/v1/organizations/tenants/api-keys"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a new tenant API key"
            tags: ["lead-scraper-service"]
            operation_id: "CreateTenantAPIKey"
            description: "Creates a new API key for a tenant with specified permissions"
            responses: {
                key: "200"
                value: {
                    description: "Organizations retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.CreateTenantAPIKeyResponse" } }
                }
            }
        };
        
    }

    /**
     * GetTenantAPIKey retrieves details of a specific API key
     * 
     * Returns:
     * - Key metadata
     * - Usage statistics
     * - Permission details
     * - Expiration status
     * 
     * Security:
     * - Never returns full key value
     * - Validates tenant context
     * 
     * Required permissions:
     * - read:tenant_api_key
     */
    rpc GetTenantAPIKey(GetTenantAPIKeyRequest) returns (GetTenantAPIKeyResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/organizations/tenants/api-keys/{key_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get tenant API key details"
            tags: ["lead-scraper-service"]
            operation_id: "GetTenantAPIKey"
            description: "Retrieves details of a specific tenant API key"
            responses: {
                key: "200"
                value: {
                    description: "Tenant API key retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.GetTenantAPIKeyResponse" } }
                }
            }
        };
    }

    /**
     * UpdateTenantAPIKey modifies an existing API key
     * 
     * Modifiable attributes:
     * - Name and description
     * - Permissions
     * - Usage quotas
     * - Expiration time
     * 
     * Security:
     * - Validates tenant context
     * - Preserves key value
     * 
     * Required permissions:
     * - update:tenant_api_key
     */
    rpc UpdateTenantAPIKey(UpdateTenantAPIKeyRequest) returns (UpdateTenantAPIKeyResponse) {
        option (google.api.http) = {
            put: "/lead-scraper-microservice/api/v1/organizations/tenants/api-keys"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Update tenant API key"
            tags: ["lead-scraper-service"]
            operation_id: "UpdateTenantAPIKey"
            description: "Updates an existing tenant API key's configuration"
            responses: {
                key: "200"
                value: {
                    description: "Tenant API key updated successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.UpdateTenantAPIKeyResponse" } }
                }
            }
        };
    }

    /**
     * DeleteTenantAPIKey revokes and removes an API key
     * 
     * Process:
     * 1. Immediate key revocation
     * 2. Usage cleanup
     * 3. Audit log creation
     * 
     * Security:
     * - Validates tenant context
     * - Immediate invalidation
     * 
     * Required permissions:
     * - delete:tenant_api_key
     */
    rpc DeleteTenantAPIKey(DeleteTenantAPIKeyRequest) returns (DeleteTenantAPIKeyResponse) {
        option (google.api.http) = {
            delete: "/lead-scraper-microservice/api/v1/organizations/tenants/api-keys/{key_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete tenant API key"
            tags: ["lead-scraper-service"]
            operation_id: "DeleteTenantAPIKey"
            description: "Permanently deletes a tenant API key"
            responses: {
                key: "200"
                value: {
                    description: "Tenant API key deleted successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.DeleteTenantAPIKeyResponse" } }
                }
            }
        };
    }

    /**
     * ListTenantAPIKeys retrieves all API keys for a tenant
     * 
     * Features:
     * - Pagination support
     * - Filtering options
     * - Usage statistics
     * - Status filtering
     * 
     * Security:
     * - Validates tenant context
     * - Masks key values
     * 
     * Required permissions:
     * - list:tenant_api_key
     */
    rpc ListTenantAPIKeys(ListTenantAPIKeysRequest) returns (ListTenantAPIKeysResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/organizations/tenants/api-keys/list"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List tenant API keys"
            tags: ["lead-scraper-service"]
            operation_id: "ListTenantAPIKeys"
            description: "Retrieves all API keys for a specific tenant"
            responses: {
                key: "200"
                value: {
                    description: "Tenant API keys retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.ListTenantAPIKeysResponse" } }
                }
            }
        };
    }

    /**
     * RotateTenantAPIKey generates a new key while invalidating the old one
     * 
     * Process:
     * 1. Generate new key
     * 2. Copy permissions
     * 3. Invalidate old key
     * 4. Return new key
     * 
     * Security:
     * - Grace period option
     * - Audit logging
     * 
     * Required permissions:
     * - rotate:tenant_api_key
     */
    rpc RotateTenantAPIKey(RotateTenantAPIKeyRequest) returns (RotateTenantAPIKeyResponse) {
        option (google.api.http) = {
            post: "/lead-scraper-microservice/api/v1/organizations/tenants/api-keys/{key_id}/rotate"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Rotate tenant API key"
            tags: ["lead-scraper-service"]
            operation_id: "RotateTenantAPIKey"
            description: "Rotates a tenant API key while maintaining its configuration"
            responses: {
                key: "200"
                value: {
                    description: "Tenant API key rotated successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.RotateTenantAPIKeyResponse" } }
                }
            }
        };
    }
    /**
     * CreateAPIKey generates a new API key
     * 
     * Features:
     * - Secure key generation
     * - Configurable permissions and scopes
     * - Automatic expiration
     * - Rate limiting and usage quotas
     * 
     * Security:
     * - Validates organization and workspace context
     * - Enforces permission checks
     * - Audit logging
     * 
     * Required permissions:
     * - create:api_key
     */
    rpc CreateAPIKey(CreateAPIKeyRequest) returns (CreateAPIKeyResponse) {
        option (google.api.http) = {
            post: "/lead-scraper-microservice/api/v1/api-keys"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a new API key"
            tags: ["lead-scraper-service"]
            operation_id: "CreateAPIKey"
            description: "Creates a new API key with specified permissions and settings"
            responses: {
                key: "200"
                value: {
                    description: "API key created successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.CreateAPIKeyResponse" } }
                }
            }
        };
    }

    /**
     * GetAPIKey retrieves details of a specific API key
     * 
     * Returns:
     * - Key metadata
     * - Usage statistics
     * - Permission details
     * - Expiration status
     * 
     * Security:
     * - Never returns full key value
     * - Validates access permissions
     * 
     * Required permissions:
     * - read:api_key
     */
    rpc GetAPIKey(GetAPIKeyRequest) returns (GetAPIKeyResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/api-keys/{key_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get API key details"
            tags: ["lead-scraper-service"]
            operation_id: "GetAPIKey"
            description: "Retrieves details of a specific API key"
            responses: {
                key: "200"
                value: {
                    description: "API key retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.GetAPIKeyResponse" } }
                }
            }
        };
    }
    /**
     * UpdateAPIKey modifies an existing API key
     * 
     * Modifiable attributes:
     * - Name and description
     * - Permissions and scopes
     * - Usage quotas
     * - Rate limits
     * - Expiration time
     * - IP restrictions
     * 
     * Security:
     * - Validates modification permissions
     * - Preserves key value
     * - Audit logging
     * 
     * Required permissions:
     * - update:api_key
     */
    rpc UpdateAPIKey(UpdateAPIKeyRequest) returns (UpdateAPIKeyResponse) {
        option (google.api.http) = {
            put: "/lead-scraper-microservice/api/v1/api-keys"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Update API key"
            tags: ["lead-scraper-service"]
            operation_id: "UpdateAPIKey"
            description: "Updates an existing API key's configuration"
            responses: {
                key: "200"
                value: {
                    description: "API key updated successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.UpdateAPIKeyResponse" } }
                }
            }
        };
    }

    /**
     * DeleteAPIKey revokes and removes an API key
     * 
     * Process:
     * 1. Immediate key revocation
     * 2. Usage cleanup
     * 3. Audit log creation
     * 4. Notification to relevant parties
     * 
     * Security:
     * - Validates deletion permissions
     * - Immediate invalidation
     * - Cannot delete last admin key
     * 
     * Required permissions:
     * - delete:api_key
     */
    rpc DeleteAPIKey(DeleteAPIKeyRequest) returns (DeleteAPIKeyResponse) {
        option (google.api.http) = {
            delete: "/lead-scraper-microservice/api/v1/api-keys/{key_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete API key"
            tags: ["lead-scraper-service"]
            operation_id: "DeleteAPIKey"
            description: "Permanently deletes an API key"
            responses: {
                key: "200"
                value: {
                    description: "API key deleted successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.DeleteAPIKeyResponse" } }
                }
            }
        };
    }

    /**
     * ListAPIKeys retrieves all API keys
     * 
     * Features:
     * - Pagination support
     * - Filtering by status, type, and usage
     * - Sorting options
     * - Usage statistics
     * 
     * Security:
     * - Filters based on permissions
     * - Masks sensitive data
     * 
     * Required permissions:
     * - list:api_key
     */
    rpc ListAPIKeys(ListAPIKeysRequest) returns (ListAPIKeysResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/api-keys/list"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List API keys"
            tags: ["lead-scraper-service"]
            operation_id: "ListAPIKeys"
            description: "Retrieves a list of API keys with optional filtering"
            responses: {
                key: "200"
                value: {
                    description: "API keys retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.ListAPIKeysResponse" } }
                }
            }
        };
    }

    /**
     * RotateAPIKey generates a new key while invalidating the old one
     * 
     * Process:
     * 1. Generate new key
     * 2. Copy existing configuration
     * 3. Set up grace period
     * 4. Invalidate old key
     * 
     * Security:
     * - Validates rotation permissions
     * - Grace period for transition
     * - Audit logging
     * 
     * Required permissions:
     * - rotate:api_key
     */
    rpc RotateAPIKey(RotateAPIKeyRequest) returns (RotateAPIKeyResponse) {
        option (google.api.http) = {
            post: "/lead-scraper-microservice/api/v1/api-keys/rotate"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Rotate API key"
            tags: ["lead-scraper-service"]
            operation_id: "RotateAPIKey"
            description: "Rotates an API key while maintaining its configuration"
            responses: {
                key: "200"
                value: {
                    description: "API key rotated successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.RotateAPIKeyResponse" } }
                }
            }
        };
    }

    /**
     * ListLeads retrieves a paginated list of leads with comprehensive filtering options.
     * 
     * Key features:
     * - Pagination support
     * - Rich filtering options
     * - Sorting capabilities
     * - Field selection
     * - Tenant context validation
     * 
     * Required permissions:
     * - read:leads
     */
    rpc ListLeads(ListLeadsRequest) returns (ListLeadsResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/leads"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List leads"
            tags: ["lead-scraper-service"]
            operation_id: "ListLeads"
            description: "Retrieves a paginated list of leads with comprehensive filtering options"
            responses: {
                key: "200"
                value: {
                    description: "Leads retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.ListLeadsResponse" } }
                }
            }
        };
    }
    /**
     * GetLead retrieves detailed information about a specific lead.
     * 
     * Key features:
     * - Full lead details
     * - Associated metadata
     * - Audit information
     * - Tenant context validation
     * 
     * Required permissions:
     * - read:leads
     */
    rpc GetLead(GetLeadRequest) returns (GetLeadResponse) {
        option (google.api.http) = {
            get: "/lead-scraper-microservice/api/v1/leads/{lead_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get lead details"
            tags: ["lead-scraper-service"]
            operation_id: "GetLead"
            description: "Retrieves detailed information about a specific lead"
            responses: {
                key: "200"
                value: {
                    description: "Lead retrieved successfully"
                    schema: { json_schema: { ref: ".lead_scraper_service.v1.GetLeadResponse" } }
                }
            }
        };
    }
}
