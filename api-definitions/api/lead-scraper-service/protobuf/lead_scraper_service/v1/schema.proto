syntax = "proto3";

package lead_scraper_service.v1;

import "protoc-gen-gorm/options/gorm.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "validate/validate.proto";

option go_package = "github.com/Vector/vector-protobuf-definitions/api-definitions/pkg/generated/lead_scraper_service/v1";

/**
 * BackgroundJobStatus represents the possible states of a background job.
 * This enum is used to track the lifecycle of asynchronous tasks like scraping jobs.
 *
 * State transitions:
 * 1. QUEUED -> IN_PROGRESS
 * 2. IN_PROGRESS -> COMPLETED/FAILED/CANCELLED/TIMED_OUT
 *
 * Usage example:
 * ```go
 * job := &ScrapingJob{
 *     Status: BackgroundJobStatus_BACKGROUND_JOB_STATUS_IN_PROGRESS,
 * }
 * ```
 */
enum BackgroundJobStatus {
    // Default state, should not be used explicitly
    BACKGROUND_JOB_STATUS_UNSPECIFIED = 0;
    // Job is queued and waiting to be processed
    BACKGROUND_JOB_STATUS_QUEUED = 1;
    // Job is currently being processed
    BACKGROUND_JOB_STATUS_IN_PROGRESS = 2;
    // Job has completed successfully
    BACKGROUND_JOB_STATUS_COMPLETED = 3;
    // Job encountered an error and failed
    BACKGROUND_JOB_STATUS_FAILED = 4;
    // Job was manually cancelled by user
    BACKGROUND_JOB_STATUS_CANCELLED = 5;
    // Job exceeded its maximum execution time
    BACKGROUND_JOB_STATUS_TIMED_OUT = 6;
}

/**
 * Account represents a user account within the workspace service.
 * It serves as the top-level container for all user-specific workspaces and settings.
 *
 * Key features:
 * - Unique identification via Auth0
 * - Organization and tenant context
 * - Audit timestamps
 * - Associated scraping jobs
 *
 * Database considerations:
 * - Uses GORM for ORM mapping
 * - Includes indexes for efficient querying
 * - Supports soft deletes via deleted_at
 *
 * Usage example:
 * ```go
 * account := &Account{
 *     AuthPlatformUserId: "auth0|123",
 *     OrgId: "org_123",
 *     TenantId: "tenant_456",
 * }
 * ```
 */
message Account {
    option (gorm.opts) = {
        ormable: true
        table: "accounts"
    };

    // Unique identifier for the account
    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];

    // Auth0 user identifier for authentication
    string auth_platform_user_id = 2 [
        (gorm.field).tag = {index: "idx_user_auth_platform_user_id"},
        (validate.rules).string = {pattern: "^auth0\\|.*$", max_len: 128}
    ];

    // Organization identifier for multi-org support
    string org_id = 3 [(gorm.field).tag = {index: "idx_accounts_org_id"}];

    // Tenant identifier for multi-tenant support
    string tenant_id = 4 [(gorm.field).tag = {index: "idx_accounts_tenant_id"}];

    // User's email address
    string email = 5 [(gorm.field).tag = {index: "idx_accounts_email"}];

    // Timestamp of last modification
    google.protobuf.Timestamp last_modified_at = 6 [(gorm.field).tag = {index: "idx_accounts_last_modified"}];

    // Soft delete timestamp
    google.protobuf.Timestamp deleted_at = 7;

    // Account creation timestamp
    google.protobuf.Timestamp created_at = 8;

    // Associated scraping jobs for this account
    repeated ScrapingJob scraping_jobs = 9 [(gorm.field).has_many = {
        disable_association_autocreate: false
        disable_association_autoupdate: false
        preload: true
    }];

    // Account status and permissions
    enum AccountStatus {
        ACCOUNT_STATUS_UNSPECIFIED = 0;
        ACCOUNT_STATUS_ACTIVE = 1;
        ACCOUNT_STATUS_SUSPENDED = 2;
        ACCOUNT_STATUS_PENDING_VERIFICATION = 3;
    }
    AccountStatus account_status = 10;

    // Role-based access control
    repeated string roles = 11 [(gorm.field).tag = {type: "text[]"}];
    repeated string permissions = 12 [(gorm.field).tag = {type: "text[]"}];

    // Security settings
    bool mfa_enabled = 13;
    google.protobuf.Timestamp last_login_at = 14;
    string timezone = 15;

    // Usage tracking
    int32 total_jobs_run = 17;
    int32 monthly_job_limit = 18 [(validate.rules).int32 = {gt: 0}];
    int32 concurrent_job_limit = 19 [(validate.rules).int32 = {gt: 0}];

    // Relationships
    repeated Workspace workspaces = 20 [
        (gorm.field).has_many = {
            disable_association_autocreate: false
            disable_association_autoupdate: false
            preload: true
        }
    ];
    AccountSettings settings = 21 [
        (gorm.field).has_one = {
            disable_association_autocreate: false
            disable_association_autoupdate: false
            preload: true
        }
    ];
}

/**
 * Workspace represents a business entity with multiple accounts
 */
message Workspace {
    option (gorm.opts) = {
        ormable: true,
        table: "workspaces"
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    string name = 2 [
        (validate.rules).string.min_len = 1,
        (gorm.field).tag = {index: "idx_workspaces_name"}
    ];
    string industry = 3;
    string domain = 4 [
        (validate.rules).string = {
            email: true,
            max_len: 253  // Max DNS label length
        },
        (gorm.field).tag = {index: "idx_workspaces_domain"}
    ];
    
    // Compliance settings
    bool gdpr_compliant = 5;
    bool hipaa_compliant = 6;
    bool soc2_compliant = 7;
    
    // Storage quotas
    int64 storage_quota = 8;  // in bytes
    int64 used_storage = 9;
    
    // Audit fields
    google.protobuf.Timestamp created_at = 10;
    google.protobuf.Timestamp updated_at = 11;
    google.protobuf.Timestamp deleted_at = 12;

    // Relationships
    repeated ScrapingWorkflow workflows = 14 [(gorm.field).has_many = {}];

    // Job tracking
    int32 jobs_run_this_month = 15;
    int32 workspace_job_limit = 16 [(validate.rules).int32 = {gt: 0}];
    int32 daily_job_quota = 17;
    
    // Usage metrics
    int32 active_scrapers = 18;
    int32 total_leads_collected = 19;
    google.protobuf.Timestamp last_job_run = 20;
}

/**
 * ScrapingJob represents a Google Maps scraping task.
 * This message defines both the configuration and current state of a scraping operation.
 *
 * Key components:
 * - Basic metadata (id, name, timestamps)
 * - Job status tracking
 * - Search configuration parameters
 * - Geographic settings
 * - Performance options
 * - Multi-tenant context
 *
 * Database considerations:
 * - Stored in "gmaps_jobs" table
 * - Uses GORM for ORM mapping
 * - Includes foreign key to Account
 * - Supports soft deletes
 *
 * Usage example:
 * ```go
 * job := &ScrapingJob{
 *     Name: "Athens Cafes",
 *     Status: BackgroundJobStatus_BACKGROUND_JOB_STATUS_QUEUED,
 *     Keywords: []string{"cafe", "coffee"},
 *     Lang: "el",
 *     Zoom: 15,
 *     FastMode: true,
 *     MaxTime: 3600,
 * }
 * ```
 */
message ScrapingJob {
    option (gorm.opts) = {
        ormable: true
        table: "gmaps_jobs"
    };

    // Changed from uint64 to string to support UUID
    string id = 1 [(gorm.field).tag = {primary_key: true}];
    
    // Core fields matching DB schema
    int32 priority = 2;
    string payload_type = 3;
    bytes payload = 4;
    google.protobuf.Timestamp created_at = 5;
    string status = 6;

    // Human-readable name for the job
    string name = 7 [(gorm.field).tag = {index: "idx_scraping_jobs_name"}];

    // Search terms for Google Maps
    repeated string keywords = 8;

    // ISO 639-1 language code (e.g., "en", "el")
    string lang = 9;

    // Map zoom level (1-20)
    int32 zoom = 10 [
        (validate.rules).int32 = {gte: 1, lte: 20}
    ];

    // Latitude coordinate
    string lat = 11 [
        (validate.rules).string = {pattern: "^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?)$"}
    ];

    // Longitude coordinate
    string lon = 12;

    // Enable faster but potentially less thorough scraping
    bool fast_mode = 13;

    // Search radius in meters
    int32 radius = 14;

    // Depth of recursive search (1-10)
    int32 depth = 15;

    // Whether to extract email addresses
    bool email = 16;

    // Maximum execution time in seconds
    int32 max_time = 17;

    // List of proxy servers to use
    repeated string proxies = 18;

    // Last update timestamp
    google.protobuf.Timestamp updated_at = 19;

    // Soft delete timestamp
    google.protobuf.Timestamp deleted_at = 20;

    // Lead tracking
    repeated Lead leads = 21 [(gorm.field).has_many = {}];
    
    // Workflow context
    string workflow_id = 22 [(gorm.field).tag = {index: "idx_workflow_id"}];
}

/**
 * ScrapingWorkflow defines recurring scraping configurations
 */
message ScrapingWorkflow {
    option (gorm.opts) = {
        ormable: true,
        table: "scraping_workflows"
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    
    // Scheduling options
   string cron_expression = 2;
    // Execution settings
    google.protobuf.Timestamp next_run_time = 4;
    google.protobuf.Timestamp last_run_time = 5;
    BackgroundJobStatus status = 6;
    
    // Failure handling
    int32 retry_count = 7;
    int32 max_retries = 8 [(validate.rules).int32 = {gt: 0}];
    string alert_emails = 9;
    
    // Org context
    string org_id = 10 [(validate.rules).string.min_len = 1];
    string tenant_id = 11 [(validate.rules).string.min_len = 1];
    
    // Audit fields
    google.protobuf.Timestamp created_at = 12;
    google.protobuf.Timestamp updated_at = 13;
    google.protobuf.Timestamp deleted_at = 14;

    // Relationships
    repeated ScrapingJob jobs = 15 [(gorm.field).has_many = {}];
    Workspace workspace = 16 [(gorm.field).belongs_to = {}];

    // Advanced scraping configuration
    float geo_fencing_radius = 18;
    double geo_fencing_lat = 19;
    double geo_fencing_lon = 20;
    int32 geo_fencing_zoom_min = 21;
    int32 geo_fencing_zoom_max = 22;

    // Data collection parameters
    bool include_reviews = 23;
    bool include_photos = 24;
    bool include_business_hours = 25;
    int32 max_reviews_per_business = 26 [(validate.rules).int32 = {lte: 500}];
    
    // Result handling
    enum OutputFormat {
        OUTPUT_FORMAT_UNSPECIFIED = 0;
        OUTPUT_FORMAT_JSON = 1;
        OUTPUT_FORMAT_CSV = 2;
        OUTPUT_FORMAT_BIGQUERY = 3;
        OUTPUT_FORMAT_POSTGRES = 4;
    }
    OutputFormat output_format = 27;
    string output_destination = 28; // URI or dataset name
    
    // Data retention
    google.protobuf.Duration data_retention = 29;
    bool anonymize_pii = 30;

    string notification_webhook_url = 31;
    string notification_slack_channel = 32;
    string notification_email_group = 33;
    bool notification_notify_on_start = 34;
    bool notification_notify_on_complete = 35;
    bool notification_notify_on_failure = 36;

    repeated string content_filter_allowed_countries = 37;
    repeated string content_filter_excluded_types = 38;
    float content_filter_minimum_rating = 39;
    int32 content_filter_minimum_reviews = 40;

    int32 qos_max_concurrent_requests = 41 [(validate.rules).int32 = {lte: 100}];
    int32 qos_max_retries = 42;
    google.protobuf.Duration qos_request_timeout = 43;
    bool qos_enable_javascript = 44; // For full page rendering

    // Compliance
    bool respect_robots_txt = 45;
    bool accept_terms_of_service = 46;
    string user_agent = 47;
}

/**
 * Lead represents a scraped business entity
 */
message Lead {
    option (gorm.opts) = {
        ormable: true,
        table: "leads"
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    
    // Business details
    string name = 2 [
        (validate.rules).string.min_len = 1,
        (gorm.field).tag = {index: "idx_leads_name"}
    ];
    string website = 3 [(validate.rules).string.uri = true];
    string phone = 4 [(gorm.field).tag = {index: "idx_leads_phone"}];
    string address = 5;
    string city = 6 [(gorm.field).tag = {index: "idx_leads_city"}];
    string state = 7 [(gorm.field).tag = {index: "idx_leads_state"}];
    string country = 8 [(gorm.field).tag = {index: "idx_leads_country"}];
    
    // Scraped data
    double latitude = 9;
    double longitude = 10;
    float google_rating = 11;
    int32 review_count = 12;
    
    // Enrichment data
    string industry = 13;
    int32 employee_count = 14;
    int64 estimated_revenue = 15;
    
    // Org context
    string org_id = 16 [
        (validate.rules).string.min_len = 1,
        (gorm.field).tag = {index: "idx_leads_org_id"}
    ];
    string tenant_id = 17 [
        (validate.rules).string.min_len = 1,
        (gorm.field).tag = {index: "idx_leads_tenant_id"}
    ];
    
    // Audit fields
    google.protobuf.Timestamp created_at = 18 [(gorm.field).tag = {index: "idx_leads_created_at"}];
    google.protobuf.Timestamp updated_at = 19;
    google.protobuf.Timestamp deleted_at = 20;
    
    // Relationships
    ScrapingJob job = 21 [(gorm.field).belongs_to = {}];
    Workspace workspace = 22 [(gorm.field).belongs_to = {}];

    // Detailed Google Maps metadata
    string place_id = 23 [
        (validate.rules).string.min_len = 1,
        (gorm.field).tag = {index: "idx_leads_place_id", unique: true}
    ];
    string google_maps_url = 24 [(validate.rules).string.uri = true];
    string business_status = 25; // OPERATIONAL, CLOSED_TEMPORARILY, etc
    
    repeated BusinessHours regular_hours = 26 [(gorm.field).has_many = {}];
    repeated BusinessHours special_hours = 27 [(gorm.field).has_many = {}];

    // Rich media
    repeated string photo_references = 28; // Google Places photo IDs
    string main_photo_url = 29;

    repeated Review reviews = 30 [(gorm.field).has_many = {}];

    // Categories and attributes
    repeated string types = 31; // Google Places types
    repeated string amenities = 32; // wheelchair_accessible, restroom, etc
    bool serves_vegetarian_food = 33;
    bool outdoor_seating = 34;

    // Payment and accessibility
    repeated string payment_methods = 36; // visa, amex, cash, etc
    bool wheelchair_accessible = 37;
    bool parking_available = 38;
    
    // Social media links
    map<string, string> social_media = 39; // platform -> url
    
    string rating_category = 40;
    float rating = 41;  
    int32 count = 42;

    // Metadata
    google.protobuf.Timestamp last_updated = 43;
    string data_source_version = 44;
    string scraping_session_id = 45;

    // =============================================
    // Enhanced Business Metadata
    // =============================================
    
    // Contact Information
    repeated string alternate_phones = 46 [(gorm.field).tag = {type: "text[]"}];
    string contact_person_name = 47;
    string contact_person_title = 48;
    string contact_email = 49 [
        (validate.rules).string.email = true
    ];
    
    // Business Operations
    int32 founded_year = 50 [
        (validate.rules).int32 = {
            gte: 1600,
            lte: 2025  // Update annually
        }
    ];
    string business_type = 51 [  // Could also be enum
        (gorm.field).tag = {type: "text"}
    ];
    repeated string certifications = 52 [(gorm.field).tag = {type: "text[]"}];  // ISO, LEED, etc
    string license_number = 53;
    
    // Financial Metrics
    enum RevenueRange {
        REVENUE_RANGE_UNSPECIFIED = 0;
        REVENUE_RANGE_UNDER_100K = 1;
        REVENUE_RANGE_100K_TO_1M = 2;
        REVENUE_RANGE_1M_TO_10M = 3;
        REVENUE_RANGE_10M_TO_50M = 4;
        REVENUE_RANGE_OVER_50M = 5;
    }
    RevenueRange revenue_range = 54;
    string funding_stage = 55;  // Seed, Series A, etc
    bool is_public_company = 56;
    
    // Online Presence Metrics
    float website_load_speed = 57;  // In seconds
    bool has_ssl_certificate = 58;
    string cms_used = 59;  // e.g., WordPress, Shopify
    repeated string ecommerce_platforms = 60 [(gorm.field).tag = {type: "text[]"}];
    
    // Location Enhancements
    string timezone = 61;
    string neighborhood = 62;
    repeated string nearby_landmarks = 63 [(gorm.field).tag = {type: "text[]"}];
    string transportation_access = 64;  // Near subway, parking, etc
    
    // Employee & HR Data
    enum EmployeeBenefit {
        EMPLOYEE_BENEFIT_UNSPECIFIED = 0;
        EMPLOYEE_BENEFIT_HEALTH_INSURANCE = 1;
        EMPLOYEE_BENEFIT_RETIREMENT_PLAN = 2;
        EMPLOYEE_BENEFIT_PAID_TIME_OFF = 3;
        EMPLOYEE_BENEFIT_REMOTE_WORK = 4;
    }

    repeated EmployeeBenefit employee_benefits = 66 [(gorm.field).tag = {type: "text[]"}];
    
    // Partnerships & Affiliations
    string parent_company = 67;
    repeated string subsidiaries = 68 [(gorm.field).tag = {type: "text[]"}];
    bool is_franchise = 69;
    
    // Marketing & SEO
    repeated string seo_keywords = 70 [(gorm.field).tag = {type: "text[]"}];
    bool uses_google_ads = 71;
    string google_my_business_category = 72;
    
    // Industry Classification
    string naics_code = 73 [(validate.rules).string.pattern = "^[0-9]{6}$"];
    string sic_code = 74 [(validate.rules).string.pattern = "^[0-9]{4}$"];
    string unspsc_code = 75 [(validate.rules).string.pattern = "^[0-9]{8}$"];
    
    // Sustainability
    bool is_green_certified = 76;
    repeated string energy_sources = 77 [(gorm.field).tag = {type: "text[]"}];  // Solar, Wind, etc
    string sustainability_rating = 78;
    
    // Recent Activity
    repeated string recent_announcements = 79 [(gorm.field).tag = {type: "text[]"}];
    google.protobuf.Timestamp last_product_launch = 80;
    
    // Legal & Compliance
    bool has_litigation_history = 81;
    string export_control_status = 82;  // EAR, ITAR, etc
}

// Detailed reviews
message Review {
    option (gorm.opts) = {
        ormable: true,
        table: "reviews"
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    string author = 2 [(gorm.field).tag = {index: "idx_reviews_author"}];
    float rating = 3;
    string text = 4;
    google.protobuf.Timestamp time = 5 [(gorm.field).tag = {index: "idx_reviews_time"}];
    string language = 6;
    string profile_photo_url = 7;
    int32 review_count = 8;

    google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10;
    google.protobuf.Timestamp deleted_at = 11;
}

// Temporal data
message BusinessHours {
    option (gorm.opts) = {
        ormable: true,
        table: "business_hours"
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    enum DayOfWeek {
        DAY_OF_WEEK_UNSPECIFIED = 0;
        DAY_OF_WEEK_MONDAY = 1;
        DAY_OF_WEEK_TUESDAY = 2;
        DAY_OF_WEEK_WEDNESDAY = 3;
        DAY_OF_WEEK_THURSDAY = 4;
        DAY_OF_WEEK_FRIDAY = 5;
        DAY_OF_WEEK_SATURDAY = 6;
        DAY_OF_WEEK_SUNDAY = 7;
    }
    DayOfWeek day = 2;
    string open_time = 3 [
        (validate.rules).string = {
            pattern: "^([01]\\d|2[0-3]):[0-5]\\d$",  // HH:MM 24h format
            max_len: 5
        }
    ];
    string close_time = 4;
    bool closed = 5;

     google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10;
    google.protobuf.Timestamp deleted_at = 11;
}

// Account-wide settings
message AccountSettings {
    option (gorm.opts) = {
        ormable: true,
        table: "account_settings"
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    
    // Notification preferences
    bool email_notifications = 3;
    bool slack_notifications = 4;
    
    // Data retention
    google.protobuf.Duration default_data_retention = 5;
    bool auto_purge_enabled = 6;
    
    // Security
    bool require_2fa = 7;
    google.protobuf.Duration session_timeout = 8;

    google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10;
    google.protobuf.Timestamp deleted_at = 11;
}

/**
 * APIKey represents an authentication token for accessing the API.
 * It includes features for rate limiting, permissions, and usage tracking.
 *
 * Key features:
 * - Unique key identification
 * - Scope-based access control
 * - Rate limiting
 * - Usage tracking
 * - Expiration management
 * - Multi-tenant support
 *
 * Database considerations:
 * - Uses GORM for ORM mapping
 * - Includes indexes for efficient querying
 * - Supports soft deletes
 *
 * Usage example:
 * ```go
 * apiKey := &APIKey{
 *     Name: "Production API Key",
 *     Scopes: []string{"leads:read", "leads:write"},
 *     ExpiresAt: timestamppb.New(time.Now().AddDate(1, 0, 0)),
 * }
 * ```
 */
message APIKey {
    option (gorm.opts) = {
        ormable: true
        table: "api_keys"
    };

    // Unique identifier
    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];

    // Human-readable name for the key
    string name = 2 [
        (validate.rules).string.min_len = 1,
        (gorm.field).tag = {index: "idx_api_keys_name"}
    ];

    // The actual API key value (hashed in storage)
    string key_hash = 3 [(gorm.field).tag = {unique: true}];

    // Key prefix for display/reference (first 8 chars)
    string key_prefix = 4 [(gorm.field).tag = {index: "idx_api_keys_prefix"}];

    // Multi-tenant context
    string org_id = 5 [
        (validate.rules).string.min_len = 1,
        (gorm.field).tag = {index: "idx_api_keys_org_id"}
    ];
    string tenant_id = 6 [
        (validate.rules).string.min_len = 1,
        (gorm.field).tag = {index: "idx_api_keys_tenant_id"}
    ];

    // Access control and permissions
    repeated string scopes = 9 [(gorm.field).tag = {type: "text[]"}];
    repeated string allowed_ips = 10 [(gorm.field).tag = {type: "text[]"}];
    repeated string allowed_domains = 11 [(gorm.field).tag = {type: "text[]"}];
    repeated string allowed_environments = 12 [(gorm.field).tag = {type: "text[]"}]; // e.g., dev, staging, prod
    bool is_test_key = 13; // Indicates if this is a test API key

    // Rate limiting and quotas
    int32 requests_per_second = 14 [(validate.rules).int32.gt = 0];
    int32 requests_per_day = 15 [(validate.rules).int32.gt = 0];
    int32 concurrent_requests = 16 [(validate.rules).int32.gt = 0];
    int64 monthly_request_quota = 17;
    float cost_per_request = 18; // For usage-based billing
    string billing_tier = 19; // e.g., free, basic, premium

    // Usage tracking and analytics
    int64 total_requests = 20;
    int64 total_errors = 21;
    google.protobuf.Timestamp last_used_at = 22 [(gorm.field).tag = {index: "idx_api_keys_last_used"}];
    float average_response_time = 23;
    
    // Store maps as JSONB in PostgreSQL
    bytes endpoint_usage_json = 24 [(gorm.field).tag = {type: "jsonb"}]; // Tracks usage per endpoint
    bytes error_rates_json = 25 [(gorm.field).tag = {type: "jsonb"}]; // Error rates by error type
    bytes recent_errors = 26 [(gorm.field).tag = {type: "jsonb"}]; // Recent error details with timestamps
    int32 successful_requests_count = 27;
    float success_rate = 28;

    // Key status and lifecycle
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_ACTIVE = 1;
        STATUS_REVOKED = 2;
        STATUS_EXPIRED = 3;
        STATUS_RATE_LIMITED = 4;
        STATUS_SUSPENDED = 5;
        STATUS_PENDING_REVIEW = 6;
        STATUS_DEPRECATED = 7;
    }
    Status status = 29 [(gorm.field).tag = {index: "idx_api_keys_status"}];

    // Timestamps
    google.protobuf.Timestamp created_at = 30;
    google.protobuf.Timestamp updated_at = 31;
    google.protobuf.Timestamp expires_at = 32 [(gorm.field).tag = {index: "idx_api_keys_expires"}];
    google.protobuf.Timestamp deleted_at = 33;
    google.protobuf.Timestamp last_rotated_at = 34;
    google.protobuf.Timestamp last_security_review_at = 35;

    // Security features
    bool requires_client_secret = 36;
    string client_secret_hash = 37;
    bool enforce_https = 38 [(validate.rules).bool.const = true];
    bool enforce_signing = 39;
    repeated string allowed_signature_algorithms = 40 [(gorm.field).tag = {type: "text[]"}];
    bool enforce_mutual_tls = 41;
    string client_certificate_hash = 42;
    bool require_request_signing = 43;

    // Developer experience
    string description = 44; // Detailed description of key usage
    bytes metadata_json = 45 [(gorm.field).tag = {type: "jsonb"}]; // Custom metadata stored as JSONB
    repeated string tags = 46 [(gorm.field).tag = {type: "text[]"}];
    string api_version = 47; // API version this key is valid for
    repeated string supported_features = 48 [(gorm.field).tag = {type: "text[]"}];
    string documentation_url = 49;
    string support_contact = 50;

    // Relationships
    Account account = 51 [(gorm.field).belongs_to = {}];
    Workspace workspace = 52 [(gorm.field).belongs_to = {}];

    // Compliance and auditing
    bool log_all_requests = 53;
    string last_rotation_reason = 54;
    google.protobuf.Timestamp last_rotation_date = 55;
    int32 rotation_frequency_days = 56 [(validate.rules).int32.gt = 0];
    repeated string compliance_standards = 57 [(gorm.field).tag = {type: "text[]"}]; // e.g., SOC2, GDPR
    bool requires_audit_logging = 58;
    string data_residency = 59; // Geographic location of data storage
    repeated string approved_integrations = 60 [(gorm.field).tag = {type: "text[]"}];

    // Monitoring and alerts
    repeated string alert_emails = 61 [(gorm.field).tag = {type: "text[]"}];
    string webhook_url = 62;
    bool alert_on_quota_threshold = 63;
    float quota_alert_threshold = 64;
    bool alert_on_error_spike = 65;
    float error_alert_threshold = 66;
    repeated string monitoring_integrations = 67 [(gorm.field).tag = {type: "text[]"}];
}

/**
 * Result represents a scraped business result stored in JSONB format
 * This aligns with the results table in the database
 */
message Result {
    option (gorm.opts) = {
        ormable: true
        table: "results"
    };

    int32 id = 1 [(gorm.field).tag = {primary_key: true}];
    
    // JSONB data field containing all business details
    bytes data = 2;
}