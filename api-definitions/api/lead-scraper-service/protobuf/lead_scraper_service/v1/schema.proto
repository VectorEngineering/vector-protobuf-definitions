syntax = "proto3";

package lead_scraper_service.v1;

import "protoc-gen-gorm/options/gorm.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "validate/validate.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/lead_scraper_service/v1";

/**
 * BackgroundJobStatus represents the possible states of a background job.
 * This enum is used to track the lifecycle of asynchronous tasks like scraping jobs.
 *
 * State transitions:
 * 1. QUEUED -> IN_PROGRESS
 * 2. IN_PROGRESS -> COMPLETED/FAILED/CANCELLED/TIMED_OUT
 *
 * Usage example:
 * ```go
 * job := &ScrapingJob{
 *     Status: BackgroundJobStatus_BACKGROUND_JOB_STATUS_IN_PROGRESS,
 * }
 * ```
 */
enum BackgroundJobStatus {
    // Default state, should not be used explicitly
    BACKGROUND_JOB_STATUS_UNSPECIFIED = 0;
    // Job is queued and waiting to be processed
    BACKGROUND_JOB_STATUS_QUEUED = 1;
    // Job is currently being processed
    BACKGROUND_JOB_STATUS_IN_PROGRESS = 2;
    // Job has completed successfully
    BACKGROUND_JOB_STATUS_COMPLETED = 3;
    // Job encountered an error and failed
    BACKGROUND_JOB_STATUS_FAILED = 4;
    // Job was manually cancelled by user
    BACKGROUND_JOB_STATUS_CANCELLED = 5;
    // Job exceeded its maximum execution time
    BACKGROUND_JOB_STATUS_TIMED_OUT = 6;
}

/**
 * WorkflowStatus represents the current state of a scraping workflow.
 * This enum tracks the lifecycle of automated, recurring scraping configurations.
 *
 * State transitions:
 * 1. DRAFT -> ACTIVE/ARCHIVED
 * 2. ACTIVE -> PAUSED/FAILED/COMPLETED/ARCHIVED
 * 3. PAUSED -> ACTIVE/ARCHIVED
 * 4. FAILED -> ACTIVE/ARCHIVED
 */
enum WorkflowStatus {
    // Default state, should not be used explicitly
    WORKFLOW_STATUS_UNSPECIFIED = 0;
    
    // Initial draft state before activation
    WORKFLOW_STATUS_DRAFT = 1;
    
    // Workflow is actively running on schedule
    WORKFLOW_STATUS_ACTIVE = 2;
    
    // Workflow is temporarily suspended
    WORKFLOW_STATUS_PAUSED = 3;
    
    // Workflow encountered an error
    WORKFLOW_STATUS_FAILED = 4;
    
    // Workflow completed all scheduled runs
    WORKFLOW_STATUS_COMPLETED = 5;
    
    // Workflow is archived (soft-deleted)
    WORKFLOW_STATUS_ARCHIVED = 6;
    
    // Workflow is pending approval
    WORKFLOW_STATUS_PENDING_APPROVAL = 7;
    
    // Workflow is being validated
    WORKFLOW_STATUS_VALIDATING = 8;
    
    // Workflow exceeded resource quotas
    WORKFLOW_STATUS_QUOTA_EXCEEDED = 9;
    
    // Workflow is running but with warnings
    WORKFLOW_STATUS_WARNING = 10;
}

// Status
enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_ACTIVE = 1;
    STATUS_SUSPENDED = 2;
    STATUS_PENDING_VERIFICATION = 3;
    STATUS_REVOKED = 4;
    STATUS_EXPIRED = 5;
    STATUS_RATE_LIMITED = 6;
    STATUS_PENDING_REVIEW = 7;
    STATUS_DEPRECATED = 8;
    STATUS_MAINTENANCE = 9;
}

/**
 * Organization represents a company using the platform
 * 
 * Key features:
 * - Multi-tenant support
 * - Hierarchical structure
 * - Enterprise features
 * - Billing management
 * 
 * Use cases:
 * - Company creates multiple apps/tenants
 * - Enterprise manages business units
 * - Usage tracking across tenants
 */
message Organization {
    option (gorm.opts) = {
        ormable: true
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    
    // Basic Information
    string name = 2 [(validate.rules).string.min_len = 1];
    string display_name = 3;
    string website = 4 [(validate.rules).string.uri = true];
    string description = 5;
    
    // Contact Information
    string billing_email = 6 [(validate.rules).string.email = true];
    string technical_email = 7 [(validate.rules).string.email = true];
    string phone = 8;
    string address = 9;
    
    // Enterprise Features
    bool sso_enabled = 10;
    string sso_provider = 11; // e.g., "okta", "azure_ad"
    string sso_domain = 12;
    repeated string allowed_domains = 13 [(gorm.field).tag = {type: "text[]"}];
    bool enforce_2fa = 14;
    
    // Billing
    enum BillingPlan {
        BILLING_PLAN_UNSPECIFIED = 0;
        BILLING_PLAN_STARTUP = 1;
        BILLING_PLAN_BUSINESS = 2;
        BILLING_PLAN_ENTERPRISE = 3;
    }
    BillingPlan billing_plan = 15;
    string billing_currency = 16;
    bool auto_billing = 17;
    string tax_id = 18;
    
    // Compliance
    repeated string compliance_frameworks = 19 [(gorm.field).tag = {type: "text[]"}]; // SOC2, GDPR, etc
    bool data_processing_agreement = 20;
    string data_region = 21; // Primary data storage region
    
    // Resource Limits
    int32 max_tenants = 22;
    int64 total_storage_limit = 23;
    int32 max_api_keys = 24;
    int32 max_users = 25;
    
    // Relationships
    repeated Tenant tenants = 26 [(gorm.field).has_many = {}];
    Subscription subscriptions = 27 [(gorm.field).has_one = {}];
    
    // Audit
    google.protobuf.Timestamp created_at = 28;
    google.protobuf.Timestamp updated_at = 29;
    google.protobuf.Timestamp deleted_at = 30;
    string created_by = 31;
    

    Status status = 32;
}

/**
 * Tenant represents an application/project within an organization
 * 
 * Key features:
 * - Resource isolation
 * - Independent configuration
 * - Usage tracking
 * - Service subscriptions
 */
message Tenant {
    option (gorm.opts) = {
        ormable: true
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    
    // Basic Information
    string name = 2 [(validate.rules).string.min_len = 1];
    string display_name = 3;
    string description = 4;
    
    // Configuration
    string api_base_url = 7;
    map<string, string> environment_variables = 8;
    repeated string allowed_origins = 9 [(gorm.field).tag = {type: "text[]"}];
    
    // Resource Management
    int64 storage_quota = 10;
    int64 monthly_request_limit = 11;
    int32 max_concurrent_jobs = 12;
    
    // Feature Flags
    bool enable_caching = 13;
    bool enable_rate_limiting = 14;
    bool enable_request_logging = 15;
    
    // Relationships
    repeated Account accounts = 16 [(gorm.field).has_many = {}];
    repeated TenantAPIKey api_keys = 17 [(gorm.field).has_many = {}];

    // Usage Metrics
    int64 total_requests = 19;
    int64 total_storage_used = 20;
    float average_response_time = 21;
    
    // Audit
    google.protobuf.Timestamp created_at = 22;
    google.protobuf.Timestamp updated_at = 23;
    google.protobuf.Timestamp deleted_at = 24;
    
    // Status
    Status status = 25;
}

/**
 * Subscription represents a tenant's Stripe-based subscription
 * 
 * Key features:
 * - Stripe integration
 * - Usage-based billing
 * - Metered pricing
 * - Feature flags
 * 
 * Database considerations:
 * - Syncs with Stripe webhooks
 * - Tracks usage for metered billing
 * - Maintains subscription lifecycle
 */
message Subscription {
    option (gorm.opts) = {
        ormable: true
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    
    // Stripe Integration
    string stripe_customer_id = 4 [(gorm.field).tag = {index: "idx_subscriptions_stripe_customer"}];
    string stripe_subscription_id = 5 [(gorm.field).tag = {index: "idx_subscriptions_stripe_subscription"}];
    string stripe_price_id = 6;
    string stripe_product_id = 7;
    
    // Plan Details
    enum PlanTier {
        PLAN_TIER_UNSPECIFIED = 0;
        PLAN_TIER_FREE = 1;
        PLAN_TIER_STARTER = 2;
        PLAN_TIER_PROFESSIONAL = 3;
        PLAN_TIER_ENTERPRISE = 4;
    }
    PlanTier plan_tier = 8;
    
    // Billing Mode
    enum BillingMode {
        BILLING_MODE_UNSPECIFIED = 0;
        BILLING_MODE_LICENSED = 1;    // Fixed price per seat
        BILLING_MODE_METERED = 2;     // Usage-based
        BILLING_MODE_HYBRID = 3;      // Base price + usage
    }
    BillingMode billing_mode = 9;
    
    // Usage Limits
    int32 included_jobs = 10;         // Jobs included in base price
    float per_job_rate = 11;          // Cost per additional job
    int32 max_concurrent_jobs = 12;
    int64 included_storage = 13;      // Storage included in base price
    float per_gb_rate = 14;           // Cost per additional GB
    
    // Feature Entitlements
    bool advanced_filtering_enabled = 15;
    bool priority_support_enabled = 16;
    bool custom_exports_enabled = 17;
    bool api_access_enabled = 18;
    bool custom_proxies_enabled = 19;
    bool advanced_analytics_enabled = 20;
    int32 retention_days = 21;
    int32 max_results_per_job = 22;
    
    // Current Period
    google.protobuf.Timestamp current_period_start = 23;
    google.protobuf.Timestamp current_period_end = 24;
    float current_period_usage = 25;   // Usage amount for current period
    
    // Billing
    string currency = 26;              // e.g., "usd"
    float base_price = 27;             // Monthly/yearly base price
    enum Interval {
        INTERVAL_UNSPECIFIED = 0;
        INTERVAL_MONTHLY = 1;
        INTERVAL_YEARLY = 2;
    }
    Interval billing_interval = 28;
    bool auto_renew = 29;
    
    // Payment Status
    enum PaymentStatus {
        PAYMENT_STATUS_UNSPECIFIED = 0;
        PAYMENT_STATUS_PAID = 1;
        PAYMENT_STATUS_PAST_DUE = 2;
        PAYMENT_STATUS_FAILED = 3;
        PAYMENT_STATUS_CANCELED = 4;
    }
    PaymentStatus payment_status = 30;

    
    // Trial
    bool is_trial = 31;
    google.protobuf.Timestamp trial_start = 32;
    google.protobuf.Timestamp trial_end = 33;
    
    // Timestamps
    google.protobuf.Timestamp created_at = 34;
    google.protobuf.Timestamp updated_at = 35;
    google.protobuf.Timestamp canceled_at = 36;
    google.protobuf.Timestamp ended_at = 37;
}

/**
 * Account represents a user account within the workspace service.
 * It serves as the top-level container for all user-specific workspaces and settings.
 *
 * Key features:
 * - Unique identification via Auth0
 * - Organization and tenant context
 * - Audit timestamps
 * - Associated scraping jobs
 *
 * Database considerations:
 * - Uses GORM for ORM mapping
 * - Includes indexes for efficient querying
 * - Supports soft deletes via deleted_at
 *
 * Usage example:
 * ```go
 * account := &Account{
 *     AuthPlatformUserId: "auth0|123",
 *     OrgId: "org_123",
 *     TenantId: "tenant_456",
 * }
 * ```
 */
message Account {
    option (gorm.opts) = {
        ormable: true
    };

    // Unique identifier for the account
    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];

    // Auth0 user identifier for authentication
    string auth_platform_user_id = 2 [
        (gorm.field).tag = {index: "idx_user_auth_platform_user_id"},
        (validate.rules).string = {pattern: "^auth0\\|.*$", max_len: 128}
    ];

    // User's email address
    string email = 5 [(gorm.field).tag = {index: "idx_accounts_email"}];

    // Soft delete timestamp
    google.protobuf.Timestamp deleted_at = 7;

    // Account creation timestamp
    google.protobuf.Timestamp created_at = 8;

    // Account status and permissions
    enum AccountStatus {
        ACCOUNT_STATUS_UNSPECIFIED = 0;
        ACCOUNT_STATUS_ACTIVE = 1;
        ACCOUNT_STATUS_SUSPENDED = 2;
        ACCOUNT_STATUS_PENDING_VERIFICATION = 3;
    }
    AccountStatus account_status = 10;
    // Role-based access control
    enum Role {
        ROLE_UNSPECIFIED = 0;
        ROLE_ADMIN = 1;
        ROLE_USER = 2;
        ROLE_VIEWER = 3;
        ROLE_MANAGER = 4;
    }
    repeated Role roles = 11 [
        (gorm.field).tag = {index: "idx_accounts_roles"}
    ];

    enum Permission {
        PERMISSION_UNSPECIFIED = 0;
        PERMISSION_READ = 1;
        PERMISSION_WRITE = 2;
        PERMISSION_DELETE = 3;
        PERMISSION_MANAGE_USERS = 4;
        PERMISSION_MANAGE_BILLING = 5;
        PERMISSION_VIEW_ANALYTICS = 6;
        PERMISSION_MANAGE_WORKFLOWS = 7;
    }
    repeated Permission permissions = 12 [
        (gorm.field).tag = {index: "idx_accounts_permissions"}
    ];

    // Security settings
    bool mfa_enabled = 13;
    google.protobuf.Timestamp last_login_at = 14;
    enum Timezone {
        TIMEZONE_UNSPECIFIED = 0;
        TIMEZONE_UTC = 1;
        TIMEZONE_EST = 2;
        TIMEZONE_CST = 3;
        TIMEZONE_MST = 4;
        TIMEZONE_PST = 5;
        TIMEZONE_GMT = 6;
        TIMEZONE_CET = 7;
        TIMEZONE_IST = 8;
        TIMEZONE_JST = 9;
        TIMEZONE_AEST = 10;
    }
    Timezone timezone = 15;

    // Usage tracking
    int32 total_jobs_run = 17;
    int32 monthly_job_limit = 18 [(validate.rules).int32 = {gt: 0}];
    int32 concurrent_job_limit = 19 [(validate.rules).int32 = {gt: 0}];

    // Relationships
    repeated Workspace workspaces = 20 [
        (gorm.field).has_many = {
            disable_association_autocreate: false
            disable_association_autoupdate: false
            preload: true
        }
    ];
    AccountSettings settings = 21 [
        (gorm.field).has_one = {
            disable_association_autocreate: false
            disable_association_autoupdate: false
            preload: true
        }
    ];
}

/**
 * Workspace represents a business entity with multiple accounts
 */
message Workspace {
    option (gorm.opts) = {
        ormable: true,
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    string name = 2 [
        (validate.rules).string.min_len = 1,
        (gorm.field).tag = {index: "idx_workspace_name"}
    ];
    string industry = 3;
    string domain = 4 [
        (validate.rules).string = {
            email: true,
            max_len: 253  // Max DNS label length
        },
        (gorm.field).tag = {index: "idx_workspace_domain"}
    ];
    
    // Compliance settings
    bool gdpr_compliant = 5;
    bool hipaa_compliant = 6;
    bool soc2_compliant = 7;
    
    // Storage quotas
    int64 storage_quota = 8;  // in bytes
    int64 used_storage = 9;
    
    // Audit fields
    google.protobuf.Timestamp created_at = 10;
    google.protobuf.Timestamp updated_at = 11;
    google.protobuf.Timestamp deleted_at = 12;

    // Relationships
    repeated ScrapingWorkflow workflows = 14 [(gorm.field).has_many = {}];

    // Job tracking
    int32 jobs_run_this_month = 15;
    int32 workspace_job_limit = 16 [(validate.rules).int32 = {gt: 0}];
    int32 daily_job_quota = 17;
    
    // Usage metrics
    int32 active_scrapers = 18;
    int32 total_leads_collected = 19;
    google.protobuf.Timestamp last_job_run = 20;


    // Associated scraping jobs for this workspace
    repeated ScrapingJob scraping_jobs = 22 [(gorm.field).has_many = {
    }];

    repeated APIKey api_keys = 23 [(gorm.field).has_many = {
    }];

    // embedded webhook config with relationship
    repeated WebhookConfig webhooks = 24 [(gorm.field).has_many = {
    }];
}

/**
 * ScrapingJob represents a Google Maps scraping task.
 * This message defines both the configuration and current state of a scraping operation.
 *
 * Key components:
 * - Basic metadata (id, name, timestamps)
 * - Job status tracking
 * - Search configuration parameters
 * - Geographic settings
 * - Performance options
 * - Multi-tenant context
 *
 * Database considerations:
 * - Stored in "gmaps_jobs" table
 * - Uses GORM for ORM mapping
 * - Includes foreign key to Account
 * - Supports soft deletes
 *
 * Usage example:
 * ```go
 * job := &ScrapingJob{
 *     Name: "Athens Cafes",
 *     Status: BackgroundJobStatus_BACKGROUND_JOB_STATUS_QUEUED,
 *     Keywords: []string{"cafe", "coffee"},
 *     Lang: "el",
 *     Zoom: 15,
 *     FastMode: true,
 *     MaxTime: 3600,
 * }
 * ```
 */
message ScrapingJob {
    option (gorm.opts) = {
        ormable: true
    };

    // Changed from uint64 to string to support UUID
    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    
    // Core fields matching DB schema
    int32 priority = 2;
    string payload_type = 3;
    bytes payload = 4;
    google.protobuf.Timestamp created_at = 5;
    BackgroundJobStatus status = 6;

    // Human-readable name for the job
    string name = 7 [(gorm.field).tag = {index: "idx_scraping_jobs_name"}];

    // Search terms for Google Maps
    repeated string keywords = 8;

    // ISO 639-1 language code (e.g., "en", "el")
    enum Language {
        LANGUAGE_UNSPECIFIED = 0;
        LANGUAGE_ENGLISH = 1;    // en
        LANGUAGE_SPANISH = 2;    // es
        LANGUAGE_FRENCH = 3;     // fr
        LANGUAGE_GERMAN = 4;     // de
        LANGUAGE_ITALIAN = 5;    // it
        LANGUAGE_PORTUGUESE = 6; // pt
        LANGUAGE_DUTCH = 7;      // nl
        LANGUAGE_RUSSIAN = 8;    // ru
        LANGUAGE_CHINESE = 9;    // zh
        LANGUAGE_JAPANESE = 10;  // ja
        LANGUAGE_KOREAN = 11;    // ko
        LANGUAGE_ARABIC = 12;    // ar
        LANGUAGE_HINDI = 13;     // hi
        LANGUAGE_GREEK = 14;     // el
        LANGUAGE_TURKISH = 15;   // tr
    }
    Language lang = 9 [(validate.rules).enum.defined_only = true];

    // Map zoom level (1-20)
    int32 zoom = 10 [
        (validate.rules).int32 = {gte: 1, lte: 20}
    ];

    // Latitude coordinate
    string lat = 11;

    // Longitude coordinate
    string lon = 12;

    // Enable faster but potentially less thorough scraping
    bool fast_mode = 13;

    // Search radius in meters
    int32 radius = 14;

    // Depth of recursive search (1-10)
    int32 depth = 15 [(validate.rules).int32 = {gte: 1, lte: 10}];

    // Whether to extract email addresses
    bool email = 16;

    // Maximum execution time in seconds
    int32 max_time = 17;

    // List of proxy servers to use
    repeated string proxies = 18;

    // Last update timestamp
    google.protobuf.Timestamp updated_at = 19;

    // Soft delete timestamp
    google.protobuf.Timestamp deleted_at = 20;

    // Lead tracking
    repeated Lead leads = 21 [(gorm.field).has_many = {}];

    // URL of the Google Maps page
    string url = 22 [(validate.rules).string.uri = true];
}

/**
 * ScrapingWorkflow defines recurring scraping configurations
 */
message ScrapingWorkflow {
    option (gorm.opts) = {
        ormable: true,
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    
    string name = 2 [(gorm.field).tag = {index: "idx_scraping_workflows_name"}];
    // Scheduling options
    string cron_expression = 3;
    // Execution settings
    google.protobuf.Timestamp next_run_time = 4;
    google.protobuf.Timestamp last_run_time = 5;
    WorkflowStatus status = 6;
    
    // Failure handling
    int32 retry_count = 7;
    int32 max_retries = 8 [(validate.rules).int32 = {gt: 0}];
    string alert_emails = 9;
    
    // Audit fields
    google.protobuf.Timestamp created_at = 12;
    google.protobuf.Timestamp updated_at = 13;
    google.protobuf.Timestamp deleted_at = 14;

    // Relationships
    repeated ScrapingJob jobs = 15 [(gorm.field).has_many = {}];

    // Advanced scraping configuration
    float geo_fencing_radius = 18 [(validate.rules).float = {gte: 0, lte: 100000}];
    double geo_fencing_lat = 19 [(validate.rules).double = {gte: -90, lte: 90}];
    double geo_fencing_lon = 20 [(validate.rules).double = {gte: -180, lte: 180}];
    int32 geo_fencing_zoom_min = 21 [(validate.rules).int32 = {gte: 1, lte: 20}];
    int32 geo_fencing_zoom_max = 22 [(validate.rules).int32 = {gte: 1, lte: 20}];

    // Data collection parameters
    bool include_reviews = 23;
    bool include_photos = 24;
    bool include_business_hours = 25;
    int32 max_reviews_per_business = 26 [(validate.rules).int32 = {lte: 500}];
    
    // Result handling
    enum OutputFormat {
        OUTPUT_FORMAT_UNSPECIFIED = 0;
        OUTPUT_FORMAT_JSON = 1;
        OUTPUT_FORMAT_CSV = 2;
        OUTPUT_FORMAT_BIGQUERY = 3;
        OUTPUT_FORMAT_POSTGRES = 4;
    }
    OutputFormat output_format = 27;
    string output_destination = 28; // URI or dataset name
    
    // Data retention
    google.protobuf.Duration data_retention = 29;
    bool anonymize_pii = 30;

    
    // Notification preferences can stay as they provide quick access to common notification channels
    string notification_slack_channel = 32;
    string notification_email_group = 33;
    bool notification_notify_on_start = 34;
    bool notification_notify_on_complete = 35;
    bool notification_notify_on_failure = 36;

    repeated string content_filter_allowed_countries = 37;
    repeated string content_filter_excluded_types = 38;
    float content_filter_minimum_rating = 39 [(validate.rules).float = {gte: 0}];
    int32 content_filter_minimum_reviews = 40 [(validate.rules).int32 = {gte: 0}];

    int32 qos_max_concurrent_requests = 41 [(validate.rules).int32 = {lte: 100}];
    int32 qos_max_retries = 42 [(validate.rules).int32 = {gte: 0}];
    google.protobuf.Duration qos_request_timeout = 43;
    bool qos_enable_javascript = 44; // For full page rendering

    // Compliance
    bool respect_robots_txt = 45;
    bool accept_terms_of_service = 46;
    string user_agent = 47;
    
    // Search terms
    repeated string search_terms = 48;

    // Scheduled entry ID
    string scheduled_entry_id = 49;
}

/**
 * WebhookConfig represents a webhook integration configuration
 * It defines how and when notifications should be sent to external systems
 */
message WebhookConfig {
    option (gorm.opts) = {
        ormable: true
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true, index: "idx_webhook_configs_id"}];
    
    // URL to send webhook notifications to
    string url = 2 [(validate.rules).string.uri = true];
    
    // Authentication
    string auth_type = 3; // e.g., "basic", "bearer", "custom"
    string auth_token = 4;
    map<string, string> custom_headers = 5;
    
    // Retry configuration
    int32 max_retries = 6 [(validate.rules).int32 = {gte: 0, lte: 5}];
    google.protobuf.Duration retry_interval = 7;
    
    // Event triggers using enum
    enum TriggerEvent {
        TRIGGER_EVENT_UNSPECIFIED = 0;
        TRIGGER_EVENT_JOB_STARTED = 1;
        TRIGGER_EVENT_JOB_COMPLETED = 2;
        TRIGGER_EVENT_JOB_FAILED = 3;
        TRIGGER_EVENT_LEAD_FOUND = 4;
        TRIGGER_EVENT_QUOTA_EXCEEDED = 5;
        TRIGGER_EVENT_ERROR_THRESHOLD_REACHED = 6;
        TRIGGER_EVENT_RATE_LIMIT_REACHED = 7;
        TRIGGER_EVENT_DATA_VALIDATION_FAILED = 8;
        TRIGGER_EVENT_NEW_PROXY_NEEDED = 9;
        TRIGGER_EVENT_SCHEDULED_MAINTENANCE = 10;
    }
    repeated TriggerEvent trigger_events = 8;
    
    // Payload customization with enum - aligned with Lead message fields
    enum IncludedField {
        INCLUDED_FIELD_UNSPECIFIED = 0;
        
        // Core business information
        INCLUDED_FIELD_NAME = 1;
        INCLUDED_FIELD_WEBSITE = 2;
        INCLUDED_FIELD_PHONE = 3;
        INCLUDED_FIELD_ADDRESS = 4;
        INCLUDED_FIELD_LOCATION = 5;  // city, state, country
        
        // Geographic data
        INCLUDED_FIELD_COORDINATES = 6;  // latitude, longitude
        
        // Ratings and reviews
        INCLUDED_FIELD_GOOGLE_RATING = 7;
        INCLUDED_FIELD_REVIEW_COUNT = 8;
        INCLUDED_FIELD_REVIEWS = 9;
        
        // Business details
        INCLUDED_FIELD_BUSINESS_HOURS = 10;
        INCLUDED_FIELD_BUSINESS_STATUS = 11;
        INCLUDED_FIELD_PLACE_ID = 12;
        INCLUDED_FIELD_GOOGLE_MAPS_URL = 13;
        
        // Rich media
        INCLUDED_FIELD_PHOTOS = 14;
        INCLUDED_FIELD_MAIN_PHOTO = 15;
        
        // Categories and attributes
        INCLUDED_FIELD_BUSINESS_TYPES = 16;
        INCLUDED_FIELD_AMENITIES = 17;
        INCLUDED_FIELD_PAYMENT_METHODS = 18;
        
        // Social media
        INCLUDED_FIELD_SOCIAL_PROFILES = 19;
        
        // Enhanced business data
        INCLUDED_FIELD_EMPLOYEE_COUNT = 20;
        INCLUDED_FIELD_REVENUE_INFO = 21;
        INCLUDED_FIELD_FOUNDED_YEAR = 22;
        INCLUDED_FIELD_CERTIFICATIONS = 23;
        
        // Industry classification
        INCLUDED_FIELD_NAICS_CODE = 24;
        INCLUDED_FIELD_SIC_CODE = 25;
        
        // Metadata
        INCLUDED_FIELD_SCRAPING_METADATA = 26;  // timestamps, session info
        INCLUDED_FIELD_COMPLIANCE_INFO = 27;    // sustainability, certifications
        
        // Contact information
        INCLUDED_FIELD_ALTERNATE_PHONES = 28;
        INCLUDED_FIELD_CONTACT_PERSON = 29;
        INCLUDED_FIELD_CONTACT_EMAIL = 30;
    }
    repeated IncludedField included_fields = 10;
    
    // Payload format enum
    enum PayloadFormat {
        PAYLOAD_FORMAT_UNSPECIFIED = 0;
        PAYLOAD_FORMAT_JSON = 1;
        PAYLOAD_FORMAT_XML = 2;
        PAYLOAD_FORMAT_FORM_DATA = 3;
        PAYLOAD_FORMAT_PROTOBUF = 4;
        PAYLOAD_FORMAT_YAML = 5;
    }
    
    bool include_full_results = 9;
    PayloadFormat payload_format = 11 [(validate.rules).enum.defined_only = true];
    
    // Security
    bool verify_ssl = 12;
    string signing_secret = 13;
    
    // Rate limiting
    int32 rate_limit = 14;
    google.protobuf.Duration rate_limit_interval = 15;
    
    // Audit
    google.protobuf.Timestamp created_at = 16;
    google.protobuf.Timestamp updated_at = 17;
    google.protobuf.Timestamp last_triggered_at = 18;
    int32 successful_calls = 19;
    int32 failed_calls = 20;

    // Flexible metadata storage using Google struct
    google.protobuf.Struct metadata = 21;

    // Webhook name
    string webhook_name = 22 [(gorm.field).tag = {index: "idx_webhook_configs_webhook_name"}];
}

/**
 * Lead represents a scraped business entity
 */
message Lead {
    option (gorm.opts) = {
        ormable: true,
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    
    // Business details
    string name = 2 [
        (validate.rules).string.min_len = 1,
        (gorm.field).tag = {index: "idx_leads_name"}
    ];
    string website = 3 [(validate.rules).string.uri = true];
    string phone = 4 [(gorm.field).tag = {index: "idx_leads_phone"}];
    string address = 5;
    string city = 6 [(gorm.field).tag = {index: "idx_leads_city"}];
    string state = 7 [(gorm.field).tag = {index: "idx_leads_state"}];
    string country = 8 [(gorm.field).tag = {index: "idx_leads_country"}];
    
    // Scraped data
    double latitude = 9 [(validate.rules).double = {gte: -90, lte: 90}];
    double longitude = 10 [(validate.rules).double = {gte: -180, lte: 180}];
    float google_rating = 11 [(validate.rules).float = {gte: 0, lte: 10}];
    int32 review_count = 12 [(validate.rules).int32 = {gte: 0}];
    
    // Enrichment data
    string industry = 13;
    int32 employee_count = 14 [(validate.rules).int32 = {gte: 0}];
    int64 estimated_revenue = 15 [(validate.rules).int64 = {gte: 0}];
    
    // Audit fields
    google.protobuf.Timestamp created_at = 18 [(gorm.field).tag = {index: "idx_leads_created_at"}];
    google.protobuf.Timestamp updated_at = 19;
    google.protobuf.Timestamp deleted_at = 20;

    // Detailed Google Maps metadata
    string place_id = 23 [
        (validate.rules).string.min_len = 1
    ];
    string google_maps_url = 24 [(validate.rules).string.uri = true];
    string business_status = 25; // OPERATIONAL, CLOSED_TEMPORARILY, etc
    
    repeated BusinessHours regular_hours = 26 [(gorm.field).has_many = {}];
    repeated BusinessHours special_hours = 27 [(gorm.field).has_many = {}];

    // Rich media
    repeated string photo_references = 28; // Google Places photo IDs
    string main_photo_url = 29;

    repeated Review reviews = 30 [(gorm.field).has_many = {}];

    // Categories and attributes
    repeated string types = 31; // Google Places types
    repeated string amenities = 32; // wheelchair_accessible, restroom, etc
    bool serves_vegetarian_food = 33;
    bool outdoor_seating = 34;

    // Payment and accessibility
    repeated string payment_methods = 36; // visa, amex, cash, etc
    bool wheelchair_accessible = 37;
    bool parking_available = 38;
    
    // Social media links
    map<string, string> social_media = 39; // platform -> url
    
    string rating_category = 40;
    float rating = 41;  
    int32 count = 42;

    // Metadata
    google.protobuf.Timestamp last_updated = 43;
    string data_source_version = 44;
    string scraping_session_id = 45;

    // =============================================
    // Enhanced Business Metadata
    // =============================================
    
    // Contact Information
    repeated string alternate_phones = 46 [(gorm.field).tag = {type: "text[]"}];
    string contact_person_name = 47;
    string contact_person_title = 48;
    string contact_email = 49 [
        (validate.rules).string.email = true
    ];
    
    // Business Operations
    int32 founded_year = 50 [
        (validate.rules).int32 = {
            gte: 1600,
            lte: 2025  // Update annually
        }
    ];
    string business_type = 51 [  // Could also be enum
        (gorm.field).tag = {type: "text"}
    ];
    repeated string certifications = 52 [(gorm.field).tag = {type: "text[]"}];  // ISO, LEED, etc
    string license_number = 53;
    
    // Financial Metrics
    enum RevenueRange {
        REVENUE_RANGE_UNSPECIFIED = 0;
        REVENUE_RANGE_UNDER_100K = 1;
        REVENUE_RANGE_100K_TO_1M = 2;
        REVENUE_RANGE_1M_TO_10M = 3;
        REVENUE_RANGE_10M_TO_50M = 4;
        REVENUE_RANGE_OVER_50M = 5;
    }
    RevenueRange revenue_range = 54;
    string funding_stage = 55;  // Seed, Series A, etc
    bool is_public_company = 56;
    
    // Online Presence Metrics
    float website_load_speed = 57;  // In seconds
    bool has_ssl_certificate = 58;
    string cms_used = 59;  // e.g., WordPress, Shopify
    repeated string ecommerce_platforms = 60 [(gorm.field).tag = {type: "text[]"}];
    
    // Location Enhancements
    string timezone = 61;
    string neighborhood = 62;
    repeated string nearby_landmarks = 63 [(gorm.field).tag = {type: "text[]"}];
    string transportation_access = 64;  // Near subway, parking, etc
    
    // Employee & HR Data
    enum EmployeeBenefit {
        EMPLOYEE_BENEFIT_UNSPECIFIED = 0;
        EMPLOYEE_BENEFIT_HEALTH_INSURANCE = 1;
        EMPLOYEE_BENEFIT_RETIREMENT_PLAN = 2;
        EMPLOYEE_BENEFIT_PAID_TIME_OFF = 3;
        EMPLOYEE_BENEFIT_REMOTE_WORK = 4;
    }

    repeated EmployeeBenefit employee_benefits = 66 [(gorm.field).tag = {type: "text[]"}];
    
    // Partnerships & Affiliations
    string parent_company = 67;
    repeated string subsidiaries = 68 [(gorm.field).tag = {type: "text[]"}];
    bool is_franchise = 69;
    
    // Marketing & SEO
    repeated string seo_keywords = 70 [(gorm.field).tag = {type: "text[]"}];
    bool uses_google_ads = 71;
    string google_my_business_category = 72;
    
    // Industry Classification
    string naics_code = 73 [(validate.rules).string.pattern = "^[0-9]{6}$"];
    string sic_code = 74 [(validate.rules).string.pattern = "^[0-9]{4}$"];
    string unspsc_code = 75 [(validate.rules).string.pattern = "^[0-9]{8}$"];
    
    // Sustainability
    bool is_green_certified = 76;
    repeated string energy_sources = 77 [(gorm.field).tag = {type: "text[]"}];  // Solar, Wind, etc
    string sustainability_rating = 78;
    
    // Recent Activity
    repeated string recent_announcements = 79 [(gorm.field).tag = {type: "text[]"}];
    google.protobuf.Timestamp last_product_launch = 80;
    
    // Legal & Compliance
    bool has_litigation_history = 81;
    string export_control_status = 82;  // EAR, ITAR, etc
}

// Detailed reviews
message Review {
    option (gorm.opts) = {
        ormable: true,
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true, index: "idx_reviews_id"}];
    string author = 2 [(gorm.field).tag = {index: "idx_reviews_author"}];
    float rating = 3;
    string text = 4;
    google.protobuf.Timestamp time = 5 [(gorm.field).tag = {index: "idx_reviews_time"}];
    string language = 6;
    string profile_photo_url = 7;
    int32 review_count = 8;

    google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10;
    google.protobuf.Timestamp deleted_at = 11;
}

// Temporal data
message BusinessHours {
    option (gorm.opts) = {
        ormable: true,
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    enum DayOfWeek {
        DAY_OF_WEEK_UNSPECIFIED = 0;
        DAY_OF_WEEK_MONDAY = 1;
        DAY_OF_WEEK_TUESDAY = 2;
        DAY_OF_WEEK_WEDNESDAY = 3;
        DAY_OF_WEEK_THURSDAY = 4;
        DAY_OF_WEEK_FRIDAY = 5;
        DAY_OF_WEEK_SATURDAY = 6;
        DAY_OF_WEEK_SUNDAY = 7;
    }
    DayOfWeek day = 2;
    string open_time = 3 [
        (validate.rules).string = {
            pattern: "^([01]\\d|2[0-3]):[0-5]\\d$",  // HH:MM 24h format
            max_len: 5
        }
    ];
    string close_time = 4;
    bool closed = 5;

     google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10;
    google.protobuf.Timestamp deleted_at = 11;
}

// Account-wide settings
message AccountSettings {
    option (gorm.opts) = {
        ormable: true,
    };

    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    
    // Notification preferences
    bool email_notifications = 3;
    bool slack_notifications = 4;
    
    // Data retention
    google.protobuf.Duration default_data_retention = 5;
    bool auto_purge_enabled = 6;
    
    // Security
    bool require_2fa = 7;
    google.protobuf.Duration session_timeout = 8;

    google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10;
    google.protobuf.Timestamp deleted_at = 11;
}

/**
 * APIKey represents an authentication token for accessing the API.
 * It includes features for rate limiting, permissions, and usage tracking.
 *
 * Key features:
 * - Unique key identification
 * - Scope-based access control
 * - Rate limiting
 * - Usage tracking
 * - Expiration management
 * - Multi-tenant support
 *
 * Database considerations:
 * - Uses GORM for ORM mapping
 * - Includes indexes for efficient querying
 * - Supports soft deletes
 *
 * Usage example:
 * ```go
 * apiKey := &APIKey{
 *     Name: "Production API Key",
 *     Scopes: []string{"leads:read", "leads:write"},
 *     ExpiresAt: timestamppb.New(time.Now().AddDate(1, 0, 0)),
 * }
 * ```
 */
message APIKey {
    option (gorm.opts) = {
        ormable: true
    };

    // Unique identifier
    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];

    // Human-readable name for the key
    string name = 2 [
        (validate.rules).string.min_len = 1,
        (gorm.field).tag = {index: "idx_api_keys_name"}
    ];

    // The actual API key value (hashed in storage)
    string key_hash = 3;

    // Key prefix for display/reference (first 8 chars)
    string key_prefix = 4 [(gorm.field).tag = {index: "idx_api_keys_prefix"}];

    // Access control and permissions
    repeated string scopes = 9 [(gorm.field).tag = {type: "text[]"}];
    repeated string allowed_ips = 10 [(gorm.field).tag = {type: "text[]"}];
    repeated string allowed_domains = 11 [(gorm.field).tag = {type: "text[]"}];
    repeated string allowed_environments = 12 [(gorm.field).tag = {type: "text[]"}]; // e.g., dev, staging, prod
    bool is_test_key = 13; // Indicates if this is a test API key

    // Rate limiting and quotas
    int32 requests_per_second = 14 [(validate.rules).int32.gt = 0];
    int32 requests_per_day = 15 [(validate.rules).int32.gt = 0];
    int32 concurrent_requests = 16 [(validate.rules).int32.gt = 0];
    int64 monthly_request_quota = 17;
    float cost_per_request = 18; // For usage-based billing
    string billing_tier = 19; // e.g., free, basic, premium

    // Usage tracking and analytics
    int64 total_requests = 20;
    int64 total_errors = 21;
    google.protobuf.Timestamp last_used_at = 22 [(gorm.field).tag = {index: "idx_api_keys_last_used"}];
    float average_response_time = 23;
    
    // Store maps as JSONB in PostgreSQL
    bytes endpoint_usage_json = 24 [(gorm.field).tag = {type: "jsonb"}]; // Tracks usage per endpoint
    bytes error_rates_json = 25 [(gorm.field).tag = {type: "jsonb"}]; // Error rates by error type
    bytes recent_errors = 26 [(gorm.field).tag = {type: "jsonb"}]; // Recent error details with timestamps
    int32 successful_requests_count = 27;
    float success_rate = 28;

    // Key status and lifecycle
    Status status = 29 [(gorm.field).tag = {index: "idx_api_keys_status"}];

    // Timestamps
    google.protobuf.Timestamp created_at = 30;
    google.protobuf.Timestamp updated_at = 31;
    google.protobuf.Timestamp expires_at = 32 [(gorm.field).tag = {index: "idx_api_keys_expires"}];
    google.protobuf.Timestamp deleted_at = 33;
    google.protobuf.Timestamp last_rotated_at = 34;
    google.protobuf.Timestamp last_security_review_at = 35;

    // Security features
    bool requires_client_secret = 36;
    string client_secret_hash = 37;
    bool enforce_https = 38 [(validate.rules).bool.const = true];
    bool enforce_signing = 39;
    repeated string allowed_signature_algorithms = 40 [(gorm.field).tag = {type: "text[]"}];
    bool enforce_mutual_tls = 41;
    string client_certificate_hash = 42;
    bool require_request_signing = 43;

    // Developer experience
    string description = 44; // Detailed description of key usage
    bytes metadata_json = 45 [(gorm.field).tag = {type: "jsonb"}]; // Custom metadata stored as JSONB
    repeated string tags = 46 [(gorm.field).tag = {type: "text[]"}];
    string api_version = 47; // API version this key is valid for
    repeated string supported_features = 48 [(gorm.field).tag = {type: "text[]"}];
    string documentation_url = 49;
    string support_contact = 50;

    // Compliance and auditing
    bool log_all_requests = 53;
    string last_rotation_reason = 54;
    google.protobuf.Timestamp last_rotation_date = 55;
    int32 rotation_frequency_days = 56 [(validate.rules).int32.gt = 0];
    repeated string compliance_standards = 57 [(gorm.field).tag = {type: "text[]"}]; // e.g., SOC2, GDPR
    bool requires_audit_logging = 58;
    string data_residency = 59; // Geographic location of data storage
    repeated string approved_integrations = 60 [(gorm.field).tag = {type: "text[]"}];

    // Monitoring and alerts
    repeated string alert_emails = 61 [(gorm.field).tag = {type: "text[]"}];
    string webhook_url = 62;
    bool alert_on_quota_threshold = 63;
    float quota_alert_threshold = 64;
    bool alert_on_error_spike = 65;
    float error_alert_threshold = 66;
    repeated string monitoring_integrations = 67 [(gorm.field).tag = {type: "text[]"}];
    bool encrypted = 68;
    string data_classification = 69 [
        (validate.rules).string = {in: ["public", "confidential", "restricted"]}
    ];

    int32 max_uses = 70;
    int32 rate_limit = 71;
}

message TenantAPIKey {
    option (gorm.opts) = {
        ormable: true
    };
 
    uint64 id = 1 [(gorm.field).tag = {primary_key: true}];
    string key_hash = 2;
    string key_prefix = 3 [(gorm.field).tag = {index: "idx_tenant_api_keys_prefix"}];

    string name = 4 [(validate.rules).string.min_len = 1];
    string description = 5;
    
    Status status = 6;

    // Scopes and permissions
    repeated TenantAPIKeyScope scopes = 7;
    int32 max_uses = 8;
    repeated string allowed_ips = 9;
    
    // Usage tracking
    int32 use_count = 10;
    
    // Expiration and timestamps
    google.protobuf.Timestamp expires_at = 12;
    google.protobuf.Timestamp created_at = 13;
    google.protobuf.Timestamp updated_at = 14;
    google.protobuf.Timestamp deleted_at = 15;
}

/**
 * TenantAPIKeyScope defines the available permission scopes for tenant API keys
 * These scopes control what operations an API key can perform
 * 
 * Usage:
 * - Multiple scopes can be assigned to a single key
 * - Scopes follow a hierarchical pattern
 * - More specific scopes take precedence over general ones
 */
enum TenantAPIKeyScope {
    // Default state, should not be used explicitly
    TENANT_API_KEY_SCOPE_UNSPECIFIED = 0;

    // Read-only access scopes
    TENANT_API_KEY_SCOPE_READ_JOBS = 1;          // View scraping jobs
    TENANT_API_KEY_SCOPE_READ_LEADS = 2;         // View scraped leads
    TENANT_API_KEY_SCOPE_READ_WORKFLOWS = 3;     // View workflow configurations
    TENANT_API_KEY_SCOPE_READ_ANALYTICS = 4;     // View analytics and metrics
    TENANT_API_KEY_SCOPE_READ_SETTINGS = 5;      // View tenant settings

    // Write access scopes
    TENANT_API_KEY_SCOPE_WRITE_JOBS = 6;         // Create/modify scraping jobs
    TENANT_API_KEY_SCOPE_WRITE_LEADS = 7;        // Modify lead data
    TENANT_API_KEY_SCOPE_WRITE_WORKFLOWS = 8;    // Create/modify workflows
    TENANT_API_KEY_SCOPE_WRITE_SETTINGS = 9;     // Modify tenant settings

    // Delete access scopes
    TENANT_API_KEY_SCOPE_DELETE_JOBS = 10;       // Delete scraping jobs
    TENANT_API_KEY_SCOPE_DELETE_LEADS = 11;      // Delete lead data
    TENANT_API_KEY_SCOPE_DELETE_WORKFLOWS = 12;  // Delete workflows

    // Special access scopes
    TENANT_API_KEY_SCOPE_EXPORT_DATA = 13;       // Export data in various formats
    TENANT_API_KEY_SCOPE_MANAGE_KEYS = 14;       // Manage other API keys
    TENANT_API_KEY_SCOPE_BILLING_READ = 15;      // View billing information
    TENANT_API_KEY_SCOPE_BILLING_WRITE = 16;     // Modify billing settings

    // Full access scopes
    TENANT_API_KEY_SCOPE_ADMIN = 17;             // Full administrative access
}

/**
 * Result represents a scraped business result stored in JSONB format
 * This aligns with the results table in the database
 */
message Result {
    option (gorm.opts) = {
        ormable: true
    };

    int32 id = 1 [(gorm.field).tag = {primary_key: true}];
    
    // JSONB data field containing all business details
    bytes data = 2;
}