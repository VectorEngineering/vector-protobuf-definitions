openapi: 3.0.0
info:
  title: Social Service
  description: Vector Social Service
  version: "0.1"
  contact:
    name: YoanYomba
    url: https://solomon-ai.io
    email: yoanyomba@solomon-ai.co
  license:
    name: Apache-2.0
    url: https://github.com/openfga/openfga/blob/main/LICENSE
tags:
  - name: SocialService
paths:
  /api/v1/health:
    get:
      summary: health check
      description: This endpoint performs a healc check on the service
      operationId: HealthCheck
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      tags:
        - service health
  /api/v1/ready:
    get:
      summary: readyness check
      description: This endpoint performs a readiness check on the service
      operationId: ReadynessCheck
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadynessCheckResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      tags:
        - service readyness
  "/api/v1/social/block-profile/source/{sourceUserId}/target/{targetUserId}":
    post:
      summary: blocks a user profile
      description: This endpoint enables a client to block a user profile
      operationId: BlockUserProfile
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlockUserProfileResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: sourceUserId
          description: >-
            the user ID trying to block another user (NOTE: userID refers to the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
        - name: targetUserId
          description: >-
            the user ID being blocked by another user (NOTE: userID refers to
            the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
      tags:
        - block-profile
  "/api/v1/social/communities/page-size/{pageSize}/page-number/{pageNumber}":
    get:
      summary: Get Community Profiles
      description: This endpoint enables a client to get community profiles
      operationId: GetCommunityProfiles
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommunityProfilesResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: pageSize
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: pageNumber
          in: path
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - community profile
  "/api/v1/social/community/communities-following/{userId}":
    get:
      summary: Gets all the communities a user follows
      description: This endpoint enables a client to get all the communities a user follows
      operationId: GetCommunitiesUserFollows
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommunitiesUserFollowsResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID who's communities follow set we want to obtain (NOTE:
            userID

            refers to the ID from the vantage point of the user service. This ID is the

            single source of truth for a given user across our suite of services) |

            type: uint64
          in: path
          required: true
          schema:
            type: string
        - name: limit
          description: "the max number of communities to return | type: uint64"
          in: query
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - community profile
  "/api/v1/social/community/follow/{sourceUserId}/{targetCommunityProfileId}":
    post:
      summary: Follows A Community Profile
      description: This endpoint enables a client to follow a community profile
      operationId: FollowCommunityProfile
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowCommunityProfileResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: sourceUserId
          description: >-
            the user ID trying to follow another user (NOTE: userID refers to
            the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
        - name: targetCommunityProfileId
          description: the targetCommunityProfileID ID being followed by another user
          in: path
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - follow-community-profile
  "/api/v1/social/community/{communityId}/requestor/{requestorProfileId}/profile-type/{requestorProfileType}":
    get:
      summary: Get a community Profile
      description: This endpoint enables a client to get a community profile
      operationId: GetCommunityProfile
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommunityProfileResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: communityId
          description: >-
            The communityID associated with the community being requested  |
            type:

            uint64
          in: path
          required: true
          schema:
            type: string
            format: uint64
        - name: requestorProfileId
          description: >-
            The RequestorProfileID is an optional parameter used to check if the

            profileID (requestor) making a request for the record actually follows the

            record
          in: path
          required: true
          schema:
            type: string
            format: uint64
        - name: requestorProfileType
          description: >-
            The RequestorProfileType is an optional parameter which tells us
            what type

            of profile is the requestor
          in: path
          required: true
          schema:
            type: string
            enum:
              - ACCOUNT_TYPE_UNSPECIFIED
              - ACCOUNT_TYPE_USER
              - ACCOUNT_TYPE_COMMUNITY
      tags:
        - community profile
  "/api/v1/social/community/{communityProfileId}/posts/blog":
    get:
      summary: Get community blog posts
      description: This endpoint enables a client to get community blog posts
      operationId: GetCommunityBlogPosts
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommunityBlogPostsResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: communityProfileId
          in: path
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - post
  "/api/v1/social/community/{communityProfileId}/timeline":
    get:
      summary: Gets A Community Feed
      description: This endpoint enables a client query a community feed
      operationId: GetCommunityFeed
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommunityFeedResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: communityProfileId
          description:
            "The ID of the community we are trying to obtain the feed for |
            type: uint64"
          in: path
          required: true
          schema:
            type: string
            format: uint64
        - name: feedType
          description: >-
            The type of feed aiming to be obtained | type: string

             - FEED_TYPE_PERSONAL: UserFeed is a profile's personal feed
             - FEED_TYPE_NEWS: NewsFeed is a profile's timeline
             - FEED_TYPE_NOTIFICATION: NotificationFeed encompasses a profile's notification feed
          in: query
          required: true
          schema:
            type: string
            enum:
              - FEED_TYPE_UNSPECIFIED
              - FEED_TYPE_PERSONAL
              - FEED_TYPE_NEWS
              - FEED_TYPE_NOTIFICATION
            default: FEED_TYPE_UNSPECIFIED
        - name: accountType
          description:
            "The type of account making the request to obtain the feed | type:
            string"
          in: query
          required: true
          schema:
            type: string
            enum:
              - ACCOUNT_TYPE_UNSPECIFIED
              - ACCOUNT_TYPE_USER
              - ACCOUNT_TYPE_COMMUNITY
            default: ACCOUNT_TYPE_UNSPECIFIED
        - name: nextPageToken
          in: query
          required: false
          schema:
            type: string
      tags:
        - feed
  "/api/v1/social/community/{communityProfileId}/topic/{topicName}/posts":
    get:
      summary: Get all posts associated with a topic
      description: This endpoint enables a client to get all posts tied to a topic
      operationId: GetPostsByTopic
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPostsByTopicResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: communityProfileId
          description: "the community profile to associate the topic to | type: uint64"
          in: path
          required: true
          schema:
            type: string
            format: uint64
        - name: topicName
          description: "the name of a given topic | type: string"
          in: path
          required: true
          schema:
            type: string
      tags:
        - post
  "/api/v1/social/community/{userId}":
    post:
      summary: Create a community Profile
      description: This endpoint enables a client to create a community profile
      operationId: CreateCommunityProfile
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCommunityProfileResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to create this community profile (NOTE: userID
            refers to

            the ID from the vantage point of the user service. This ID is the single

            source of truth for a given user across our suite of services) | type:

            uint64
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCommunityProfileBody"
        required: true
      tags:
        - community profile
  "/api/v1/social/follow-profile/source/{sourceUserId}/target/{targetUserId}":
    post:
      summary: follow a user profile
      description: This endpoint enables a client to follow a user profile
      operationId: FollowProfile
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowProfileResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: sourceUserId
          description: >-
            the user ID trying to follow another user (NOTE: userID refers to
            the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
        - name: targetUserId
          description: >-
            the user ID being followed by another user (NOTE: userID refers to
            the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
      tags:
        - follow-profile
  "/api/v1/social/follow-profile/{followRecordId}/accept":
    post:
      summary: Accepts a user's follow request
      description:
        This endpoint enables a client to accept a follow request from a
        source a user profile
      operationId: AcceptFollowProfile
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcceptFollowProfileResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: followRecordId
          description: "The id of the follow record | type: uint64"
          in: path
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - follow-profile
  "/api/v1/social/post/{postId}/comment/{commentId}":
    delete:
      summary: Delete A Comment
      description: This endpoint enables a client to delete a comment
      operationId: DeleteComment
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCommentResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: postId
          description: "The ID of the post trying to be deleted | type: string"
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          description: "The ID of the comment trying to be delete | type: string"
          in: path
          required: true
          schema:
            type: string
        - name: postType
          description: "The type of post being reacted to | type: string"
          in: query
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
            default: POST_TYPE_UNSPECIFIED
      tags:
        - comment
  "/api/v1/social/posts/blog/tag/{tag}":
    get:
      summary: Get blog posts by tag
      description: This endpoint enables a client to query a set of blog posts tied to a tag
      operationId: GetBlogPostsByTag
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBlogPostsByTagResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: tag
          in: path
          required: true
          schema:
            type: string
        - name: postType
          description: "The type of post being reacted to | type: string"
          in: query
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
            default: POST_TYPE_UNSPECIFIED
      tags:
        - post
  "/api/v1/social/user/bookmarks/{userId}":
    get:
      summary: Get Bookmarked Posts
      description:
        This endpoint enables a client to get all bookmarked posts of a
        given user
      operationId: GetBookmarkedPosts
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBookmarkedPostsResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      tags:
        - bookmarks
  "/api/v1/social/user/post/{postId}/type/{postType}":
    put:
      summary: Edits a post by id
      description: This endpoint enables a client to edit a post by id
      operationId: EditPost
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditPostResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: postId
          description: "The ID of the post to be updated | type: string"
          in: path
          required: true
          schema:
            type: string
        - name: postType
          in: path
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
      requestBody:
        $ref: "#/components/requestBodies/Post"
      tags:
        - post
  "/api/v1/social/user/{adminUserId}/publication/{publicationId}":
    delete:
      summary: Deletes a publication
      description: This endpoint enables a client to delete a publication
      operationId: DeletePublication
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletePublicationResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: adminUserId
          in: path
          required: true
          schema:
            type: string
        - name: publicationId
          in: path
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - publication
  "/api/v1/social/user/{adminUserId}/publication/{publicationId}/editor/{editorUserId}":
    delete:
      summary: Deletes an editor to a publication
      description: This endpoint enables a client to add an editor to a publication
      operationId: DeletePublicationEditor
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletePublicationEditorResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: adminUserId
          in: path
          required: true
          schema:
            type: string
        - name: publicationId
          in: path
          required: true
          schema:
            type: string
            format: uint64
        - name: editorUserId
          in: path
          required: true
          schema:
            type: string
      tags:
        - publication
    put:
      summary: Adds an editor to a publication
      description: This endpoint enables a client to add an editor to a publication
      operationId: AddPublicationEditor
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddPublicationEditorResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: adminUserId
          in: path
          required: true
          schema:
            type: string
        - name: publicationId
          in: path
          required: true
          schema:
            type: string
            format: uint64
        - name: editorUserId
          in: path
          required: true
          schema:
            type: string
      tags:
        - publication
  "/api/v1/social/user/{editorUserId}/publication/{publicationId}":
    post:
      summary: Add a post to a publication
      description: This endpoint enables a client to add a post to a publication
      operationId: AddPostToPublication
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddPostToPublicationResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: editorUserId
          in: path
          required: true
          schema:
            type: string
        - name: publicationId
          in: path
          required: true
          schema:
            type: string
            format: uint64
      requestBody:
        $ref: "#/components/requestBodies/Post2"
      tags:
        - publication
  "/api/v1/social/user/{editorUserId}/publication/{publicationId}/post/{postId}":
    delete:
      summary: Deletes a post from a publication
      description: This endpoint enables a client to delete a post from a publication
      operationId: DeletePostFromPublication
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletePostFromPublicationResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: editorUserId
          in: path
          required: true
          schema:
            type: string
        - name: publicationId
          in: path
          required: true
          schema:
            type: string
            format: uint64
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: postType
          in: query
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
            default: POST_TYPE_UNSPECIFIED
      tags:
        - publication
  "/api/v1/social/user/{userId}":
    get:
      summary: gets a user profile
      description:
        This endpoint performs a query against the social service to obtain
        a user profile
      operationId: GetUserProfile
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserProfileResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description:
            "The user ID associated with the profile we want to get | type:
            uint64"
          in: path
          required: true
          schema:
            type: string
        - name: requestorProfileId
          description: >-
            The RequestorProfileID is an optional parameter used to check if the

            profileID (requestor) making a request for the record actually follows the

            record
          in: query
          required: false
          schema:
            type: string
        - name: requestorProfileType
          description: >-
            The RequestorProfileType is an optional parameter which tells us
            what type

            of profile is the requestor
          in: query
          required: false
          schema:
            type: string
            enum:
              - ACCOUNT_TYPE_UNSPECIFIED
              - ACCOUNT_TYPE_USER
              - ACCOUNT_TYPE_COMMUNITY
            default: ACCOUNT_TYPE_UNSPECIFIED
      tags:
        - user profile
    delete:
      summary: deletes a user profile
      description: This endpoint enables a client to delete a user profile
      operationId: DeleteUserProfile
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserProfileResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to delete this user profile (NOTE: userID refers
            to the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
      tags:
        - user profile
    post:
      summary: creates a user profile
      description: This endpoint enables a client to create a user profile
      operationId: CreateUserProfile
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserProfileResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to create this user profile (NOTE: userID refers
            to the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserProfileBody"
        required: true
      tags:
        - user profile
    put:
      summary: update a user profile
      description:
        This endpoint performs an updates operation on a user profile based
        on the provided parametersThis update operation can span multiple
        services on specific cases (such as when the client is explicitly
        attempting to update the email of the user)All update operations are
        atomic by nature hence we should not expect any form of divergent state
      operationId: EditUserProfile
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditUserProfileResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to update this user profile (NOTE: userID refers
            to the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
        description: "the profile payload | type: json_object"
        required: true
      tags:
        - user
  "/api/v1/social/user/{userId}/community/{communityProfileId}":
    delete:
      summary: Delete Community Profile
      description: This endpoint enables a client to delete a community profile
      operationId: DeleteCommunityProfile
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteCommunityProfileResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to delete this community profile (NOTE: userID
            refers to

            the ID from the vantage point of the user service. This ID is the single

            source of truth for a given user across our suite of services) | type:

            uint64
          in: path
          required: true
          schema:
            type: string
        - name: communityProfileId
          in: path
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - community profile
    put:
      summary: Edit a community Profile
      description: This endpoint enables a client to update a community profile
      operationId: EditCommunityProfile
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditCommunityProfileRequest"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to update this community profile (NOTE: userID
            refers to

            the ID from the vantage point of the user service. This ID is the single

            source of truth for a given user across our suite of services) | type:

            uint64
          in: path
          required: true
          schema:
            type: string
        - name: communityProfileId
          description:
            "The community profile ID of the community being updated | type:
            uint64"
          in: path
          required: true
          schema:
            type: string
            format: uint64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommunityProfile"
        description: "The community profile being updated | type: json_object"
        required: true
      tags:
        - community profile
  "/api/v1/social/user/{userId}/community/{communityProfileId}/topic":
    post:
      summary: Create A Topic
      description: This endpoint enables a client to create a topic
      operationId: CreateTopic
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTopicResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to whom the community is tied to (NOTE: userID
            refers to

            the ID from the vantage point of the user service. This ID is the single

            source of truth for a given user across our suite of services) | type:

            uint64
          in: path
          required: true
          schema:
            type: string
        - name: communityProfileId
          description: "the community profile to associate the topic to | type: uint64"
          in: path
          required: true
          schema:
            type: string
            format: uint64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Topic"
        description: "topic payload | type: json_object"
        required: true
      tags:
        - topic
  "/api/v1/social/user/{userId}/follow/pending-requests":
    get:
      summary: Get Pending Follow Requests
      description: This endpoint enables a client to get all the pending follow requests
      operationId: GetPendingFollows
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPendingFollowsResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID who's pending request we want to obtain (NOTE: userID
            refers to

            the ID from the vantage point of the user service. This ID is the single

            source of truth for a given user across our suite of services) | type:

            uint64
          in: path
          required: true
          schema:
            type: string
      tags:
        - follow
  "/api/v1/social/user/{userId}/poll":
    post:
      summary: Create a poll
      description: This endpoint enables a client to create a poll
      operationId: CreatePoll
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePollResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to create a post (NOTE: userID refers to the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PollPost"
        description: "The post payload | type: json_object"
        required: true
      tags:
        - poll
  "/api/v1/social/user/{userId}/poll/{pollId}":
    post:
      summary: Adds a user response to a given poll by a user
      description: This endpoint enables a client to response to a poll
      operationId: RespondToPoll
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespondToPollResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: pollId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RespondToPollBody"
        required: true
      tags:
        - poll
  "/api/v1/social/user/{userId}/poll/{postId}":
    get:
      summary: Get a poll
      description: This endpoint enables a client to query a poll by id
      operationId: GetPoll
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPollResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to delete this user profile (NOTE: userID refers
            to the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
        - name: postId
          description: "The ID of the post attempted to be delete | type: string"
          in: path
          required: true
          schema:
            type: string
      tags:
        - poll
    delete:
      summary: Delete a poll
      description: This endpoint enables a client to delete a poll
      operationId: DeletePoll
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletePollResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to delete this user profile (NOTE: userID refers
            to the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
        - name: postId
          description: "The ID of the post attempted to be delete | type: string"
          in: path
          required: true
          schema:
            type: string
      tags:
        - poll
  "/api/v1/social/user/{userId}/polls":
    get:
      summary: Get all the polls of a given user
      description: This endpoint enables a client to query all polls tied to a given user id
      operationId: GetPolls
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPollsResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to delete this user profile (NOTE: userID refers
            to the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
      tags:
        - poll
  "/api/v1/social/user/{userId}/post":
    post:
      summary: Create a post
      description: This endpoint enables a client to create a post
      operationId: CreatePost
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePostResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to create a post (NOTE: userID refers to the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
        - name: communityProfileId
          description: >-
            The ID of the community profile attempting to create the post  |
            type:

            uint64
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: accountType
          description: "The type of profile making the request | type: string"
          in: query
          required: true
          schema:
            type: string
            enum:
              - ACCOUNT_TYPE_UNSPECIFIED
              - ACCOUNT_TYPE_USER
              - ACCOUNT_TYPE_COMMUNITY
            default: ACCOUNT_TYPE_UNSPECIFIED
      requestBody:
        $ref: "#/components/requestBodies/Post"
      tags:
        - post
  "/api/v1/social/user/{userId}/post/{parentPostId}/type/{parentPostType}/share":
    post:
      summary: Share a post
      description: This endpoint enables a client to share a post
      operationId: SharePost
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharePostResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: parentPostId
          in: path
          required: true
          schema:
            type: string
        - name: parentPostType
          in: path
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
      requestBody:
        content:
          application/json:
            schema:
              type: string
              required:
                - content
        required: true
      tags:
        - feed
  "/api/v1/social/user/{userId}/post/{parentPostId}/type/{postType}/thread":
    post:
      summary: Adds A Post To A Thread
      description: This endpoint enables a client to add a post to a thread
      operationId: AddPostToThread
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddPostToThreadResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: parentPostId
          in: path
          required: true
          schema:
            type: string
        - name: postType
          in: path
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
      requestBody:
        $ref: "#/components/requestBodies/Post2"
      tags:
        - thread
  "/api/v1/social/user/{userId}/post/{parentPostId}/type/{postType}/thread/target/{participantPostId}":
    delete:
      summary: Deletes A Post From A Thread
      description: This endpoint enables a client to delete a post from a thread
      operationId: RemovePostFromThread
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemovePostFromThreadResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: parentPostId
          in: path
          required: true
          schema:
            type: string
        - name: postType
          in: path
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
        - name: participantPostId
          in: path
          required: true
          schema:
            type: string
      tags:
        - thread
  "/api/v1/social/user/{userId}/post/{postId}/account-type/{accountType}/reaction/{reaction}":
    post:
      summary: Reacts to a post
      description: This endpoint enables a client to react to a post
      operationId: ReactToPost
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReactToPostResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: accountType
          in: path
          required: true
          schema:
            type: string
            enum:
              - ACCOUNT_TYPE_UNSPECIFIED
              - ACCOUNT_TYPE_USER
              - ACCOUNT_TYPE_COMMUNITY
        - name: reaction
          in: path
          required: true
          schema:
            type: string
            enum:
              - REACTION_UNSPECIFIED
              - REACTION_LIKE
              - REACTION_LOVE
              - REACTION_HAHA
              - REACTION_WOW
              - REACTION_SAD
              - REACTION_ANGRY
              - REACTION_DISLIKE
        - name: postType
          in: query
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
            default: POST_TYPE_UNSPECIFIED
      tags:
        - reaction
  "/api/v1/social/user/{userId}/post/{postId}/bookmark":
    delete:
      summary: Deletes A Bookmarked Post
      description: This endpoint enables a client to delete a bookmarked post
      operationId: RemoveBookmarkedPost
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoveBookmarkedPostResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: postType
          in: query
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
            default: POST_TYPE_UNSPECIFIED
      tags:
        - bookmark
    post:
      summary: Bookmarks a post
      description: This endpoint enables a client to bookmark a post
      operationId: BookmarkPost
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookmarkPostResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
      tags:
        - bookmark
  "/api/v1/social/user/{userId}/post/{postId}/comment/{commentId}/account-type/{accountType}/reaction/{reaction}":
    post:
      summary: Reacts to a comment
      description: This endpoint enables a client to react to a comment
      operationId: ReactToComment
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReactToCommentResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
        - name: accountType
          in: path
          required: true
          schema:
            type: string
            enum:
              - ACCOUNT_TYPE_UNSPECIFIED
              - ACCOUNT_TYPE_USER
              - ACCOUNT_TYPE_COMMUNITY
        - name: reaction
          in: path
          required: true
          schema:
            type: string
            enum:
              - REACTION_UNSPECIFIED
              - REACTION_LIKE
              - REACTION_LOVE
              - REACTION_HAHA
              - REACTION_WOW
              - REACTION_SAD
              - REACTION_ANGRY
              - REACTION_DISLIKE
        - name: postType
          in: query
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
            default: POST_TYPE_UNSPECIFIED
      tags:
        - reaction
  "/api/v1/social/user/{userId}/post/{postId}/comment/{commentId}/quality":
    post:
      summary: Add Comment Quality Score
      description: This endpoint enables a client to add a quality score to a comment
      operationId: AddCommentQualityScore
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddCommentQualityScoreResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
        - name: postType
          description: "The type of post being reacted to | type: string"
          in: query
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
            default: POST_TYPE_UNSPECIFIED
      requestBody:
        $ref: "#/components/requestBodies/AddCommentQualityScoreQualityscore"
      tags:
        - comment
  "/api/v1/social/user/{userId}/post/{postId}/comment/{commentId}/replies":
    get:
      summary: Get Comment Replies
      description: This endpoint enables a client to get comment replies
      operationId: GetCommentReplies
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommentRepliesResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
        - name: postType
          in: query
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
            default: POST_TYPE_UNSPECIFIED
      tags:
        - comment reply
  "/api/v1/social/user/{userId}/post/{postId}/comment/{commentId}/reply":
    post:
      summary: Reply To A Comment
      description: This endpoint enables a client to reply to a comment
      operationId: CreateCommentReply
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCommentReplyResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCommentReplyBody"
        required: true
      tags:
        - comment reply
  "/api/v1/social/user/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}":
    delete:
      summary: Delete A Comment Reply
      description: This endpoint enables a client to delete a comment reply
      operationId: DeleteCommentReply
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteCommentReplyResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
        - name: replyId
          in: path
          required: true
          schema:
            type: string
        - name: postType
          in: query
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
            default: POST_TYPE_UNSPECIFIED
      tags:
        - comment reply
    put:
      summary: Edit A Comment Reply
      description: This endpoint enables a client to edit a comment reply
      operationId: EditCommentReply
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditCommentReplyResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
        - name: replyId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditCommentReplyBody"
        required: true
      tags:
        - comment reply
  "/api/v1/social/user/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}/account-type/{accountType}/reaction/{reaction}":
    post:
      summary: Reacts to a comment reply
      description: This endpoint enables a client to react to a comment reply
      operationId: ReactToCommentReply
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReactToCommentReplyResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
        - name: replyId
          in: path
          required: true
          schema:
            type: string
        - name: accountType
          in: path
          required: true
          schema:
            type: string
            enum:
              - ACCOUNT_TYPE_UNSPECIFIED
              - ACCOUNT_TYPE_USER
              - ACCOUNT_TYPE_COMMUNITY
        - name: reaction
          in: path
          required: true
          schema:
            type: string
            enum:
              - REACTION_UNSPECIFIED
              - REACTION_LIKE
              - REACTION_LOVE
              - REACTION_HAHA
              - REACTION_WOW
              - REACTION_SAD
              - REACTION_ANGRY
              - REACTION_DISLIKE
        - name: postType
          in: query
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
            default: POST_TYPE_UNSPECIFIED
      tags:
        - reaction
  "/api/v1/social/user/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}/report":
    post:
      summary: Report A Comment Reply
      description: This endpoint enables a client to report a comment reply
      operationId: ReportCommentReply
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportCommentReplyResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
        - name: replyId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportCommentReplyBody"
        required: true
      tags:
        - comment reply
  "/api/v1/social/user/{userId}/post/{postId}/comment/{commentId}/report":
    post:
      summary: Report A Comment
      description: This endpoint enables a client to report a comment
      operationId: ReportComment
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportCommentResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportCommentBody"
        required: true
      tags:
        - comment
  "/api/v1/social/user/{userId}/post/{postId}/note":
    post:
      summary: Creates and associates a note to a given post
      description: This endpoint enables a client to create and associate a not to a post
      operationId: CreateNote
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateNoteResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateNoteBody"
        required: true
      tags:
        - note
  "/api/v1/social/user/{userId}/post/{postId}/note/{noteId}":
    delete:
      summary: Delete a note
      description: This endpoint enables a client to delete a note
      operationId: DeleteNote
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteNoteResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          required: true
          schema:
            type: string
        - name: postType
          in: query
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
            default: POST_TYPE_UNSPECIFIED
      tags:
        - note
    put:
      summary: Update a note
      description: This endpoint enables a client to update a note
      operationId: EditNote
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditNoteResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          required: true
          schema:
            type: string
        - name: postType
          in: query
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
            default: POST_TYPE_UNSPECIFIED
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Note"
        required: true
      tags:
        - note
  "/api/v1/social/user/{userId}/post/{postId}/quality":
    post:
      summary: Adds a quality score to a post
      description: This endpoint enables a client add a quality score to a post
      operationId: AddPostQualityScore
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddPostQualityScoreResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: postType
          description: "The type of post being reacted to | type: string"
          in: query
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
            default: POST_TYPE_UNSPECIFIED
      requestBody:
        $ref: "#/components/requestBodies/AddCommentQualityScoreQualityscore"
      tags:
        - post
  "/api/v1/social/user/{userId}/post/{postId}/thread":
    get:
      summary: Gets A Post's Thread
      description: This endpoint enables a client to query a post's thread
      operationId: GetPostThread
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPostThreadResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: postType
          in: query
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
            default: POST_TYPE_UNSPECIFIED
      tags:
        - thread
  "/api/v1/social/user/{userId}/post/{postId}/type/{postType}":
    get:
      summary: Get a post
      description: This endpoint enables a client to get a post
      operationId: GetPost
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPostResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to obtain a post (NOTE: userID refers to the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
        - name: postId
          description: "The ID of the post to obtain | type: string"
          in: path
          required: true
          schema:
            type: string
        - name: postType
          in: path
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
      tags:
        - post
    delete:
      summary: Delete a post
      description: This endpoint enables a client to delete a post
      operationId: DeletePost
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletePostResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to delete a post (NOTE: userID refers to the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
        - name: postId
          description: "The ID of the post attempted to be delete | type: string"
          in: path
          required: true
          schema:
            type: string
        - name: postType
          in: path
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
      tags:
        - post
  "/api/v1/social/user/{userId}/post/{postId}/type/{postType}/report":
    post:
      summary: Report a post
      description: This endpoint enables a client to report a post
      operationId: ReportPost
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportPostResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: postType
          in: path
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
      tags:
        - post
  "/api/v1/social/user/{userId}/profile/{profileId}/account-type/{accountType}/following":
    get:
      summary: Get Communities and users you are following
      description:
        This endpoint enables a client to get all the accounts a given user
        follows
      operationId: GetAccountsFollowing
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAccountsFollowingResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: profileId
          in: path
          required: true
          schema:
            type: string
            format: uint64
        - name: accountType
          description: the account type of the user whoses followers are being requested
          in: path
          required: true
          schema:
            type: string
            enum:
              - ACCOUNT_TYPE_UNSPECIFIED
              - ACCOUNT_TYPE_USER
              - ACCOUNT_TYPE_COMMUNITY
        - name: limit
          in: query
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - follow
  "/api/v1/social/user/{userId}/profile/{profileId}/followers":
    get:
      summary: Get Users Following you
      description:
        This endpoint enables a client to get all the followers following a
        given user
      operationId: GetFollowers
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFollowersResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: profileId
          in: path
          required: true
          schema:
            type: string
            format: uint64
        - name: limit
          in: query
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - follow
  "/api/v1/social/user/{userId}/publication":
    post:
      summary: Creates a publication
      description: This endpoint enables a client to creare a publication
      operationId: CreatePublication
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePublicationResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Publication"
        required: true
      tags:
        - publication
  "/api/v1/social/user/{userId}/publication/{publicationId}":
    get:
      summary: Gets a publication
      description: This endpoint enables a client to get a publication
      operationId: GetPublication
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPublicationResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: publicationId
          in: path
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - publication
  "/api/v1/social/user/{userId}/publication/{publicationId}/bookmark":
    delete:
      summary: Deletes A Bookmarked Publication
      description: This endpoint enables a client to delete a bookmarked publication
      operationId: RemoveBookmarkedPublication
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoveBookmarkedPostResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: publicationId
          in: path
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - bookmark
    post:
      summary: Bookmarks a publication
      description: This endpoint enables a client to bookmark a publication
      operationId: BookmarkPublication
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookmarkPublicationResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: publicationId
          in: path
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - bookmark
  "/api/v1/social/user/{userId}/timeline":
    get:
      summary: Gets A Userfeed
      description: This endpoint enables a client query a user feed
      operationId: GetUserFeed
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserFeedResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to obtain a given feed (NOTE: userID refers to
            the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
        - name: feedType
          description: >-
            The type of feed aiming to be obtained | type: string

             - FEED_TYPE_PERSONAL: UserFeed is a profile's personal feed
             - FEED_TYPE_NEWS: NewsFeed is a profile's timeline
             - FEED_TYPE_NOTIFICATION: NotificationFeed encompasses a profile's notification feed
          in: query
          required: true
          schema:
            type: string
            enum:
              - FEED_TYPE_UNSPECIFIED
              - FEED_TYPE_PERSONAL
              - FEED_TYPE_NEWS
              - FEED_TYPE_NOTIFICATION
            default: FEED_TYPE_UNSPECIFIED
        - name: accountType
          description:
            "The type of account making the request to obtain the feed | type:
            string"
          in: query
          required: true
          schema:
            type: string
            enum:
              - ACCOUNT_TYPE_UNSPECIFIED
              - ACCOUNT_TYPE_USER
              - ACCOUNT_TYPE_COMMUNITY
            default: ACCOUNT_TYPE_UNSPECIFIED
        - name: nextPageToken
          in: query
          required: false
          schema:
            type: string
      tags:
        - feed
  "/api/v1/social/user/{userId}/topics":
    get:
      summary: Get Topics Of Communities User Follows
      description:
        This endpoint enables a client to get topics of communities a user
        follows
      operationId: GetTopicsOfCommunitiesUserFollows
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTopicsOfCommunitiesUserFollowsResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID whose communities topics follow set we want to obtain
            (NOTE:

            userID refers to the ID from the vantage point of the user service. This ID

            is the single source of truth for a given user across our suite of

            services) | type: uint64
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - topic
  "/api/v1/social/users/page-size/{pageSize}/page-number/{pageNumber}":
    get:
      summary: Gets a set of user profiles
      description:
        This endpoint enables a client to get a number of user profiles in
        a paginated manner
      operationId: GetUserProfiles
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserProfilesResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: pageSize
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: pageNumber
          in: path
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - user profile
  "/api/v1/social/users/{userId}/discover/limit/{limit}":
    get:
      summary: Discover Profiles
      description:
        This endpoint enables a client to discover a set of profiles he/she
        does not follow
      operationId: DiscoverProfiles
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscoverProfilesResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: path
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - user profile
  "/api/v1/social/{userId}/post/{postId}/comment":
    post:
      summary: Create A Commnet
      description: This endpoint enables a client to create a comment
      operationId: CreateComment
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCommentResponse"
        "400":
          description: Request failed due to invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
        "404":
          description: Request failed due to incorrect path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathUnknownErrorMessageResponse"
        "500":
          description: Request failed due to internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          description: >-
            the user ID trying to create a comment (NOTE: userID refers to the

            ID from the vantage point of the user service. This ID is the single source

            of truth for a given user across our suite of services) | type: uint64
          in: path
          required: true
          schema:
            type: string
        - name: postId
          description: "The ID of the post to whom to add the comment | type: string"
          in: path
          required: true
          schema:
            type: string
        - name: communityProfileId
          description: "The ID of the community trying to create a comment | type: uint64"
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: accountType
          description:
            "The type of account making the request to create a comment | type:
            string"
          in: query
          required: true
          schema:
            type: string
            enum:
              - ACCOUNT_TYPE_UNSPECIFIED
              - ACCOUNT_TYPE_USER
              - ACCOUNT_TYPE_COMMUNITY
            default: ACCOUNT_TYPE_UNSPECIFIED
        - name: postType
          description: "The type of post being reacted to | type: string"
          in: query
          required: true
          schema:
            type: string
            enum:
              - POST_TYPE_UNSPECIFIED
              - POST_TYPE_POST
              - POST_TYPE_REPOST
              - POST_TYPE_QUESTION
              - POST_TYPE_ACHIEVEMENT
              - POST_TYPE_ANNOUNCEMENT
              - POST_TYPE_POLL
              - POST_TYPE_ARTICLE
              - POST_TYPE_SHORT_STORY
            default: POST_TYPE_UNSPECIFIED
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
        description: "The actual comment payload | type: json_object"
        required: true
      tags:
        - comment
servers:
  - url: http://social-service.platform.svc.cluster.local:9896
  - url: https://user-service.platform.svc.cluster.local:9896
components:
  requestBodies:
    Post:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Post"
      description: "The post payload | type: json_object"
      required: true
    Post2:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Post"
      required: true
    AddCommentQualityScoreQualityscore:
      content:
        application/json:
          schema:
            type: string
            format: uint64
            required:
              - qualityScore
      required: true
  schemas:
    AcceptFollowProfileResponse:
      type: object
      properties:
        success:
          type: boolean
      title: |-
        AcceptFollowProfileRequestResponse: Represent the object returned as a
        response to the accept follow profile request
    AccountType:
      type: string
      enum:
        - ACCOUNT_TYPE_UNSPECIFIED
        - ACCOUNT_TYPE_USER
        - ACCOUNT_TYPE_COMMUNITY
      default: ACCOUNT_TYPE_UNSPECIFIED
      title: |-
        AccountType used to differ the type of profile an operation
        is being performed against
    Actor:
      type: object
      properties:
        userProfile:
          $ref: "#/components/schemas/UserProfile"
        community:
          $ref: "#/components/schemas/CommunityProfile"
        actorType:
          $ref: "#/components/schemas/AccountType"
      title: Actor references the profile performing an operation
      required:
        - userProfile
        - community
        - actorType
    AddCommentQualityScoreResponse:
      type: object
      properties:
        comment:
          $ref: "#/components/schemas/Comment"
    AddPostQualityScoreResponse:
      type: object
      properties:
        regularPost:
          $ref: "#/components/schemas/Post"
        sharedPost:
          $ref: "#/components/schemas/SharedPost"
        pollPost:
          $ref: "#/components/schemas/PollPost"
    AddPostToPublicationResponse:
      type: object
      properties:
        publication:
          $ref: "#/components/schemas/Publication"
    AddPostToThreadResponse:
      type: object
      properties:
        regularPost:
          $ref: "#/components/schemas/Post"
        sharedPost:
          $ref: "#/components/schemas/SharedPost"
        pollPost:
          $ref: "#/components/schemas/PollPost"
    AddPublicationEditorResponse:
      type: object
      properties:
        publication:
          $ref: "#/components/schemas/Publication"
    Any:
      type: object
      properties:
        "@type":
          type: string
      additionalProperties: {}
    BaseTimeline:
      type: object
      properties:
        activities:
          type: array
          items:
            $ref: "#/components/schemas/FeedActivity"
    BlockUserProfileResponse:
      type: object
      properties:
        success:
          type: boolean
      title: >-
        BlockUserProfileResponse: Represents the object returned as a response
        to the

        block user request
    Bookmark:
      type: object
      properties:
        id:
          type: string
          format: uint64
          title: the id of the blocked record
        postIds:
          type: array
          items:
            type: string
        publications:
          type: array
          items:
            $ref: "#/components/schemas/Publication"
    BookmarkPostResponse:
      type: object
      properties:
        bookmark:
          $ref: "#/components/schemas/Bookmark"
    BookmarkPublicationResponse:
      type: object
      properties:
        bookmark:
          $ref: "#/components/schemas/Bookmark"
    Comment:
      type: object
      properties:
        id:
          type: string
          title: |-
            Comment ID
            @gotag: bson:"_id,omitempty"
        backendPlatformUserId:
          type: string
          title: |-
            Platform wide ID of the user creating the comment
            @gotag: bson:"backendPlatformUserId"
        profileId:
          type: string
          format: uint64
          title: >-
            ID of either the user profile or the community profile creating the
            comment

            @gotag: bson:"profileId"
        media:
          $ref: "#/components/schemas/Media"
        mentions:
          type: array
          items:
            type: string
          title: |-
            Profiles mentioned in the comment
            @gotag: bson:"mentions"
        hashtags:
          type: array
          items:
            type: string
          title: |-
            Hashtags defined in the comment
            @gotag: bson:"hashtags"
        createdAt:
          type: string
          title: |-
            Time when the comment was created
            @gotag: bson:"createdAt"
        content:
          type: string
          title: |-
            Content defining the comment
            @gotag: bson:"content"
        replies:
          type: array
          items:
            $ref: "#/components/schemas/CommentReply"
          title: |-
            Responses to a given comment
            @gotag: bson:"replies"
        extra:
          type: object
          additionalProperties:
            type: string
          title: |-
            Blob of extra content tied to the comment
            @gotag: bson:"extra"
        authorUsername:
          type: string
          example: test-user
          title: |-
            Username of the person making the comment
            @gotag: bson:"authorUsername"
          minLength: 1
        authorProfileImage:
          type: string
          example: test-user
          title: |-
            Profile image of the person making this comment
            @gotag: bson:"authorProfileImage"
          minLength: 1
        affinityScore:
          type: string
          format: uint64
          title: >-
            AffinityScore is the average rating users on the platform associate
            with a

            piece of content. It is taken as the weighted average across all reactions

            for the particular post

            @gotag: bson:"affinityScore"
        qualityScore:
          type: string
          format: uint64
          title: >-
            QualityScore is the quality of the given piece of content.

            It is taken as the weighted average across all reactions for the particular

            post

            @gotag: bson:"qualityScore"
        userIdToAffinityScoreMap:
          type: object
          additionalProperties:
            type: string
            format: uint64
          title: >-
            UserIDToAffinityScoreMap witholds a mapping of all user profiles who
            left

            an affinity score

            @gotag: bson:"userIdToAffinityScoreMap"
        userIdToReportsMap:
          type: object
          additionalProperties:
            type: string
            format: uint64
          title: >-
            ReportCount details the number of reports were associated with a
            post

            A report is used as a signal to disclose the post's content are in

            violation of platform rules

            @gotag: bson:"userIdToReportsMap"
        authorAccountType:
          $ref: "#/components/schemas/AccountType"
        userIdToReactionMap:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Reaction"
          title: |-
            a map of user ids to reactions left by users
            @gotag: bson:"userIdToReactionMap"
        notes:
          type: array
          items:
            $ref: "#/components/schemas/Note"
          title: |-
            the set of notes associated to this piece of content
            @gotag: bson:"notes"
      required:
        - authorUsername
        - authorProfileImage
    CommentReply:
      type: object
      properties:
        id:
          type: string
          title: |-
            Response ID
            @gotag: bson:"_id,omitempty"
        backendPlatformUserId:
          type: string
          title: |-
            ID of the user creating the comment response
            @gotag: bson:"backendPlatformUserId"
        profileId:
          type: string
          format: uint64
          title: >-
            ID of either the user profile or the community profile creating the
            comment response

            @gotag: bson:"profileId"
        media:
          $ref: "#/components/schemas/Media"
        mentions:
          type: array
          items:
            type: string
          title: |-
            Profiles mentioned in the comment
            @gotag: bson:"mentions"
        hashtags:
          type: array
          items:
            type: string
          title: |-
            Hashtags defined in the comment
            @gotag: bson:"hashtags"
        createdAt:
          type: string
          title: |-
            Time when the comment was created
            @gotag: bson:"createdAt"
        content:
          type: string
          title: |-
            Content defining the comment
            @gotag: bson:"content"
        extra:
          type: object
          additionalProperties:
            type: string
          title: |-
            Blob of extra content tied to the comment response
            @gotag: bson:"extra"
        authorUsername:
          type: string
          example: test-user
          title: |-
            Username of the person making the comment
            @gotag: bson:"authorUsername"
          minLength: 1
        authorProfileImage:
          type: string
          example: test-user
          title: |-
            Profile image of the person making this comment
            @gotag: bson:"authorProfileImage"
          minLength: 1
        affinityScore:
          type: string
          format: uint64
          title: >-
            AffinityScore is the average rating users on the platform associate
            with a

            piece of content. It is taken as the weighted average across all reactions

            for the particular post

            @gotag: bson:"affinityScore"
        qualityScore:
          type: string
          format: uint64
          title: >-
            QualityScore is the quality of the given piece of content.

            It is taken as the weighted average across all reactions for the particular

            post

            @gotag: bson:"qualityScore"
        userIdToAffinityScoreMap:
          type: object
          additionalProperties:
            type: string
            format: uint64
          title: >-
            UserIDToAffinityScoreMap witholds a mapping of all user profiles who
            left

            an affinity score

            @gotag: bson:"userIdToAffinityScoreMap"
        authorAccountType:
          $ref: "#/components/schemas/AccountType"
        userIdToReactionMap:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Reaction"
          title: |-
            a map of user ids to reactions left by users
            @gotag: bson:"userIdToReactionMap"
        userIdToReportsMap:
          type: object
          additionalProperties:
            type: string
            format: uint64
          title: |-
            the report count for this comment reply
            @gotag: bson:"userIdToReportsMap"
      required:
        - authorUsername
        - authorProfileImage
    CommunityProfile:
      type: object
      properties:
        id:
          type: string
          format: uint64
          title: Community profile ID
        name:
          type: string
          example: test-community
          title: |-
            Community name is the name tied to the community profile
            community name must be at least 5 characters long
        description:
          type: string
          example:
            community description useful for generating a test community that we
            can test against. a community is really cool and ideal
          title: |-
            Desscription defines additional info about the community
            community description must be at least 5 characters long
        private:
          type: boolean
          title: >-
            Private defines wether only approved followers can see what this
            profile

            posts
        visible:
          type: boolean
          title: Visible defines wether just about anyone can find this group
        followers:
          type: string
          format: int64
          title: Followers outlines the number of followers this user profile has
        communityRules:
          type: string
          example:
            community rules useful for generating a test community that we can test
            against. a community is really cool and ideal
          title: |-
            Defines rules community members must abide by
            community rules must be at least 5 characters long
        topics:
          type: array
          items:
            $ref: "#/components/schemas/Topic"
          title: |-
            Defines topics assoociated with the community of interest
            must create at least 1 topic
        notificationFeedTimelineId:
          type: string
          example: asndlkhaskhdhasgdahsf-feed-id
          title: |-
            Notification timeline Id. Notification for anything a user/group is
            following
        personalFeedTimelineId:
          type: string
          example: asndlkhaskhdhasgdahsf-feed-id
          title: Personal timeline ID Has activities for a user that can be followed
        newsFeedTimelineId:
          type: string
          example: asndlkhaskhdhasgdahsf-feed-id
          title: >-
            Newsfeed timeline ID Displays all followed and group activities the
            user

            follows
        profileImageUrl:
          type: string
          example: asndlkhaskhdhasgdahsf.jpg
          title: ProfileImageUrl witholds the url of a given profile image
        algoliaId:
          type: string
          example: asndlkhaskhdhasgdahsf-feed-id
          title: The id of the algolia record referencing this community
      title: "CommunityProfile: The profile object tied to a given community"
      required:
        - name
        - description
        - private
        - visible
        - followers
        - communityRules
        - notificationFeedTimelineId
        - personalFeedTimelineId
        - newsFeedTimelineId
        - profileImageUrl
        - algoliaId
    ContentInsights:
      type: object
      properties:
        sentenceCount:
          type: string
          format: uint64
          example: 10
        wordCount:
          type: string
          format: uint64
        language:
          type: string
        languageConfidence:
          type: number
          format: float
        entities:
          type: array
          items:
            $ref: "#/components/schemas/Entities"
        sentiment:
          $ref: "#/components/schemas/Sentiment"
    CreateCommentReplyBody:
      type: object
      properties:
        reply:
          $ref: "#/components/schemas/CommentReply"
        postType:
          $ref: "#/components/schemas/PostType"
      required:
        - postType
    CreateCommentReplyResponse:
      type: object
      properties:
        comment:
          $ref: "#/components/schemas/Comment"
    CreateCommentResponse:
      type: object
      properties:
        regularPost:
          $ref: "#/components/schemas/Post"
        sharedPost:
          $ref: "#/components/schemas/SharedPost"
        pollPost:
          $ref: "#/components/schemas/PollPost"
      title: |-
        CreateCommentResponse: Represent the object returned as a
        response to the create comment request
    CreateCommunityProfileBody:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/CommunityProfile"
      title: >-
        CreateCommunityProfileRequest: Represents the request object invoked
        against

        the social service to create a community profile account
      required:
        - profile
    CreateCommunityProfileResponse:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/CommunityProfile"
      title: >-
        CreateCommunityProfileResponse: Represents the response object returned
        as a

        response to the `create-community` request
    CreateNoteBody:
      type: object
      properties:
        postType:
          $ref: "#/components/schemas/PostType"
        note:
          $ref: "#/components/schemas/Note"
      required:
        - postType
    CreateNoteResponse:
      type: object
      properties:
        regularPost:
          $ref: "#/components/schemas/Post"
        sharedPost:
          $ref: "#/components/schemas/SharedPost"
        pollPost:
          $ref: "#/components/schemas/PollPost"
    CreatePollResponse:
      type: object
      properties:
        pollId:
          type: string
    CreatePostResponse:
      type: object
      properties:
        post:
          $ref: "#/components/schemas/Post"
      title: |-
        CreatePostResponse: Represent the object returned as a
        response to the create post request
    CreatePublicationResponse:
      type: object
      properties:
        id:
          type: string
          format: uint64
    CreateTopicResponse:
      type: object
      properties:
        topicId:
          type: string
          format: uint64
      title: |-
        CreateTopicResponse: Represent the object returned as a response to the
        create topic request
    CreateUserProfileBody:
      type: object
      properties:
        idsOfCommunitiesToFollow:
          type: array
          items:
            type: string
            format: uint64
          title: the set of ids of community profiles to follow
        username:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/UserTags"
        isPrivate:
          type: boolean
        profileImageUrl:
          type: string
      title: >-
        CreateUserProfileRequest: Represents the request object invoked against
        the

        social service to create a user profile account
      required:
        - username
        - tags
        - profileImageUrl
    CreateUserProfileResponse:
      type: object
      properties:
        virtualProfileId:
          type: string
          format: uint64
      title: |-
        CreateUserProfileResponse: Represents the response object returned as a
        response to the `create-user` request
    DeleteCommentReplyResponse:
      type: object
      properties:
        comment:
          $ref: "#/components/schemas/Comment"
    DeleteCommentResponse:
      type: object
      properties:
        sucess:
          type: boolean
      title: |-
        DeleteCommentResponse: Represent the object returned as a
        response to the delete comment request
    DeleteCommunityProfileResponse:
      type: object
      properties:
        success:
          type: boolean
      title: >-
        DeleteCommunityProfileResponse: Represent the response object returned
        as a response

        to the `delete profile` and `delete-community` request
    DeleteNoteResponse:
      type: object
      properties:
        success:
          type: boolean
    DeletePollResponse:
      type: object
      properties:
        success:
          type: boolean
    DeletePostFromPublicationResponse:
      type: object
      properties:
        success:
          type: boolean
    DeletePostResponse:
      type: object
      properties:
        success:
          type: boolean
      title: |-
        DeletePostResponse: Represent the object returned as a
        response to the delete post request
    DeletePublicationEditorResponse:
      type: object
      properties:
        success:
          type: boolean
    DeletePublicationResponse:
      type: object
      properties:
        success:
          type: boolean
    DeleteUserProfileResponse:
      type: object
      properties:
        success:
          type: boolean
      title: >-
        DeleteUserProfileResponse: Represent the response object returned as a
        response

        to the `delete profile` and `delete-community` request
    DiscoverProfilesResponse:
      type: object
      properties:
        communityProfiles:
          type: array
          items:
            $ref: "#/components/schemas/CommunityProfile"
        userProfiles:
          type: array
          items:
            $ref: "#/components/schemas/UserProfile"
        topics:
          type: array
          items:
            $ref: "#/components/schemas/Topic"
    EditCommentReplyBody:
      type: object
      properties:
        reply:
          $ref: "#/components/schemas/CommentReply"
        postType:
          $ref: "#/components/schemas/PostType"
      required:
        - postType
    EditCommentReplyResponse:
      type: object
      properties:
        reply:
          $ref: "#/components/schemas/CommentReply"
    EditCommunityProfileRequest:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/CommunityProfile"
        userId:
          type: string
          title: >-
            the user ID trying to update this community profile (NOTE: userID
            refers to

            the ID from the vantage point of the user service. This ID is the single

            source of truth for a given user across our suite of services) | type:

            uint64
        communityProfileId:
          type: string
          format: uint64
          title: "The community profile ID of the community being updated | type: uint64"
      title: >-
        EditCommunityProfileRequest: Represents the request object invoked
        against

        the social service to update a community profile account
      required:
        - profile
        - userId
        - communityProfileId
    EditCommunityProfileResponse:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/CommunityProfile"
      title: >-
        UpdateCommunityProfileResponse: Represents the object returned as a
        response

        to `update-commmunity-profile` request
    EditNoteResponse:
      type: object
      properties:
        regularPost:
          $ref: "#/components/schemas/Post"
        sharedPost:
          $ref: "#/components/schemas/SharedPost"
        pollPost:
          $ref: "#/components/schemas/PollPost"
    EditPostResponse:
      type: object
      properties:
        success:
          type: boolean
      title: |-
        EditPostResponse: Represent the object returned as a
        response to the update post request
    EditUserProfileResponse:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/UserProfile"
      title: |-
        EditUserProfileResponse: Represents the object returned as a response to
        `update-user-profile` request
    Entities:
      type: object
      properties:
        text:
          type: string
        label:
          type: string
    ErrorCode:
      type: string
      enum:
        - no_error
        - validation_error
        - authorization_model_not_found
        - authorization_model_resolution_too_complex
        - invalid_write_input
        - cannot_allow_duplicate_tuples_in_one_request
        - cannot_allow_duplicate_types_in_one_request
        - cannot_allow_multiple_references_to_one_relation
        - invalid_continuation_token
        - invalid_tuple_set
        - invalid_check_input
        - invalid_expand_input
        - unsupported_user_set
        - invalid_object_format
        - write_failed_due_to_invalid_input
        - authorization_model_assertions_not_found
        - latest_authorization_model_not_found
        - type_not_found
        - relation_not_found
        - empty_relation_definition
        - invalid_user
        - invalid_tuple
        - unknown_relation
        - store_id_invalid_length
        - assertions_too_many_items
        - id_too_long
        - authorization_model_id_too_long
        - tuple_key_value_not_specified
        - tuple_keys_too_many_or_too_few_items
        - page_size_invalid
        - param_missing_value
        - difference_base_missing_value
        - subtract_base_missing_value
        - object_too_long
        - relation_too_long
        - type_definitions_too_few_items
        - type_invalid_length
        - type_invalid_pattern
        - relations_too_few_items
        - relations_too_long
        - relations_invalid_pattern
        - object_invalid_pattern
        - query_string_type_continuation_token_mismatch
        - exceeded_entity_limit
        - invalid_contextual_tuple
        - duplicate_contextual_tuple
        - invalid_authorization_model
        - unsupported_schema_version
      default: no_error
    FeedActivity:
      type: object
      properties:
        actor:
          $ref: "#/components/schemas/Actor"
        verb:
          $ref: "#/components/schemas/PostType"
        regularPost:
          $ref: "#/components/schemas/Post"
        sharedPost:
          $ref: "#/components/schemas/SharedPost"
        pollPost:
          $ref: "#/components/schemas/PollPost"
        foreignId:
          type: string
          title: |-
            ForeignID is used as a reference identifier between our datastore
            and getstream
        target:
          type: string
          description: >-
            Object	Describes the target of the activity. The precise meaning of
            the

            activity's target is dependent on the activities verb, but will often be

            the object the English preposition "to". For instance, in the activity,

            "John saved a movie to his wishlist", the target of the activity is

            "wishlist".
        time:
          type: string
          title: Time is the time this activity was created at
        origin:
          type: string
        to:
          type: array
          items:
            type: string
          description: >-
            The TO field allows you to specify a list of feeds to which the
            activity

            should be copied. One way to think about it is as the CC functionality of

            email.
        score:
          type: string
          format: uint64
          title: Score associated to an activity
        extra:
          type: object
          additionalProperties:
            type: string
          title: Extra encompasses any additional activity metadata
        getstreamActivityId:
          type: string
          title: The ID of the activity from the context of getstream
      title: FeedActivity references an actvitiy present in a given user's timeline
      required:
        - actor
        - getstreamActivityId
    FeedType:
      type: string
      enum:
        - FEED_TYPE_UNSPECIFIED
        - FEED_TYPE_PERSONAL
        - FEED_TYPE_NEWS
        - FEED_TYPE_NOTIFICATION
      default: FEED_TYPE_UNSPECIFIED
      description: >-
        FeedType encompasses the various types of feeds a profile can have

        (in conjuction) with getstream.

         - FEED_TYPE_PERSONAL: UserFeed is a profile's personal feed
         - FEED_TYPE_NEWS: NewsFeed is a profile's timeline
         - FEED_TYPE_NOTIFICATION: NotificationFeed encompasses a profile's notification feed
    FollowCommunityProfileResponse:
      type: object
      properties:
        success:
          type: boolean
      title: >-
        FollowProfileResponse: Represent the object returned as a response to
        the

        follow profile user request
    FollowProfileResponse:
      type: object
      properties:
        success:
          type: boolean
      title: >-
        FollowProfileResponse: Represent the object returned as a response to
        the

        follow profile user request
    GetAccountsFollowingResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserProfile"
        communities:
          type: array
          items:
            $ref: "#/components/schemas/CommunityProfile"
    GetBlogPostsByTagResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
    GetBookmarkedPostsResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
    GetCommentRepliesResponse:
      type: object
      properties:
        replies:
          type: array
          items:
            $ref: "#/components/schemas/CommentReply"
    GetCommunitiesUserFollowsResponse:
      type: object
      properties:
        communities:
          type: array
          items:
            $ref: "#/components/schemas/CommunityProfile"
      title: >-
        GetCommunitiesUserFollowsResponse: Represent the response object invoked

        against the social service to get all the communities a given user follows
    GetCommunityBlogPostsResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
    GetCommunityFeedResponse:
      type: object
      properties:
        baseTimeline:
          $ref: "#/components/schemas/BaseTimeline"
        notificationTimeline:
          $ref: "#/components/schemas/NotificationTimeline"
        nextPageToken:
          type: string
      title: |-
        GetCommunityFeedResponse: Represent the object returned as a
        response to the get community feed request
    GetCommunityProfileResponse:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/CommunityProfile"
        metadata:
          $ref: "#/components/schemas/SocialRelationshipMetadata"
      title: >-
        GetCommunityProfileResponse: Represents the object returned as a
        response to

        `get-commmunity-profile` request
    GetCommunityProfilesResponse:
      type: object
      properties:
        nextPageNumber:
          type: integer
          format: int32
        profiles:
          type: array
          items:
            $ref: "#/components/schemas/CommunityProfile"
    GetFollowersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserProfile"
    GetPendingFollowsResponse:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: "#/components/schemas/PendingFollowRequest"
      title: >-
        GetPendingFollowRequestsResponse: Represent the response object invoked

        against the social service to get all pending follow requests tied to a user
    GetPollResponse:
      type: object
      properties:
        poll:
          $ref: "#/components/schemas/PollPost"
    GetPollsResponse:
      type: object
      properties:
        polls:
          type: array
          items:
            $ref: "#/components/schemas/PollPost"
    GetPostResponse:
      type: object
      properties:
        post:
          $ref: "#/components/schemas/Post"
      title: |-
        GetPostResponse: Represent the object returned as a
        response to the get post request
    GetPostThreadResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
    GetPostsByTopicResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
      title: |-
        GetPostsByTopicResponse: Represent the object returned as a
        response to the get posts by topic request
    GetPublicationResponse:
      type: object
      properties:
        publication:
          $ref: "#/components/schemas/Publication"
    GetTopicsOfCommunitiesUserFollowsResponse:
      type: object
      properties:
        topic:
          type: array
          items:
            $ref: "#/components/schemas/Topic"
      title: >-
        GetTopicsOfCommunitiesUserFollowsResponse: Represent the response object

        invoked against the social service to get all the communities a given user

        follows
    GetUserFeedResponse:
      type: object
      properties:
        baseTimeline:
          $ref: "#/components/schemas/BaseTimeline"
        notificationTimeline:
          $ref: "#/components/schemas/NotificationTimeline"
        nextPageToken:
          type: string
      title: |-
        GetUserFeedResponse: Represent the object returned as a
        response to the get user feed request
    GetUserProfileResponse:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/UserProfile"
        metadata:
          $ref: "#/components/schemas/SocialRelationshipMetadata"
      title: |-
        GetUserProfileResponse: Represents the object returned as a response to
        `get-user-profile` request
    GetUserProfilesResponse:
      type: object
      properties:
        nextPageNumber:
          type: integer
          format: int32
        profiles:
          type: array
          items:
            $ref: "#/components/schemas/UserProfile"
    HealthCheckResponse:
      type: object
      properties:
        healthy:
          type: boolean
      title: >-
        ServiceHealthResponse: Represent the object returned as a response to
        the

        service health api invocation
    InternalErrorCode:
      type: string
      enum:
        - no_internal_error
        - internal_error
        - cancelled
        - deadline_exceeded
        - already_exists
        - resource_exhausted
        - failed_precondition
        - aborted
        - out_of_range
        - unavailable
        - data_loss
      default: no_internal_error
    InternalErrorMessageResponse:
      type: object
      example:
        code: internal_error
        message: Internal Server Error
      properties:
        code:
          $ref: "#/components/schemas/InternalErrorCode"
        message:
          type: string
    Media:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        link:
          type: string
        metadata:
          $ref: "#/components/schemas/MediaMetadata"
    MediaCrop:
      type: string
      enum:
        - MEDIA_CROP_UNSPECIFIED
        - MEDIA_CROP_TOP
        - MEDIA_CROP_BOTTOM
        - MEDIA_CROP_LEFT
        - MEDIA_CROP_RIGHT
        - MEDIA_CROP_CENTER
      default: MEDIA_CROP_UNSPECIFIED
    MediaMetadata:
      type: object
      properties:
        id:
          type: string
        resize:
          $ref: "#/components/schemas/MediaResize"
        crop:
          $ref: "#/components/schemas/MediaCrop"
        imageWidth:
          type: string
          format: int64
        imageHeight:
          type: string
          format: int64
        type:
          $ref: "#/components/schemas/MediaType"
    MediaResize:
      type: string
      enum:
        - MEDIA_RESIZE_UNSPECIFIED
        - MEDIA_RESIZE_CLIP
        - MEDIA_RESIZE_CROP
        - MEDIA_RESIZE_SCALE
      default: MEDIA_RESIZE_UNSPECIFIED
    MediaType:
      type: string
      enum:
        - MEDIA_TYPE_UNSPECIFIED
        - MEDIA_TYPE_IMAGE
        - MEDIA_TYPE_VIDEO
      default: MEDIA_TYPE_UNSPECIFIED
    NotFoundErrorCode:
      type: string
      enum:
        - no_not_found_error
        - undefined_endpoint
        - store_id_not_found
        - unimplemented
      default: no_not_found_error
    Note:
      type: object
      properties:
        id:
          type: string
          title: |-
            Note ID
            @gotag: bson:"_id,omitempty"
        backendPlatformUserId:
          type: string
          title: |-
            Platform wide ID of the user creating the note
            @gotag: bson:"backendPlatformUserId"
        profileId:
          type: string
          format: uint64
          title: >-
            ID of either the user profile or the community profile creating the
            note

            @gotag: bson:"profileId"
        media:
          $ref: "#/components/schemas/Media"
        mentions:
          type: array
          items:
            type: string
          title: >-
            Profiles mentioned in the note - NOTE: only the creator of the
            article whom this

            note is attached to and the mentioned members will be notified. Additionally, this note

            will only be viewable by those folks

            @gotag: bson:"mentions"
        hashtags:
          type: array
          items:
            type: string
          title: |-
            Hashtags defined in the note
            @gotag: bson:"hashtags"
        createdAt:
          type: string
          title: |-
            Time when the note was created
            @gotag: bson:"createdAt"
        content:
          type: string
          title: |-
            Content defining the note
            @gotag: bson:"content"
        authorAccountType:
          $ref: "#/components/schemas/AccountType"
        authorUserName:
          type: string
          title: |-
            Username of the person making the note
            @gotag: bson:"authorUserName"
        authorProfileImage:
          type: string
          title: |-
            Profile image of the person making this note
            @gotag: bson:"authorProfileImage"
      title: >-
        A note is a response a user can leave on another user's piece of
        content. Notes can

        only be seen by the user who created the content (private) and should serve as some form of

        intimate feedback protocol
      required:
        - content
        - authorUserName
        - authorProfileImage
    NotificationActivity:
      type: object
      properties:
        actorName:
          type: string
        foreignId:
          type: string
        activityId:
          type: string
        verb:
          type: string
        time:
          type: string
        target:
          type: string
        origin:
          type: string
        object:
          type: string
    NotificationFeedGroup:
      type: object
      properties:
        activityCount:
          type: string
          format: uint64
        actorCount:
          type: string
          format: uint64
        createdAt:
          type: string
        group:
          type: string
        feedGroupId:
          type: string
        isRead:
          type: boolean
        isSeen:
          type: boolean
        updatedAt:
          type: string
        verb:
          type: string
        activities:
          type: array
          items:
            $ref: "#/components/schemas/NotificationActivity"
    NotificationTimeline:
      type: object
      properties:
        activities:
          type: array
          items:
            $ref: "#/components/schemas/NotificationFeedGroup"
    PathUnknownErrorMessageResponse:
      type: object
      example:
        code: undefined_endpoint
        message: Endpoint not enabled
      properties:
        code:
          $ref: "#/components/schemas/NotFoundErrorCode"
        message:
          type: string
    PendingFollowRequest:
      type: object
      properties:
        followRequestId:
          type: string
          format: uint64
          title: The ID of the follow request
        followerRequestionToFollow:
          $ref: "#/components/schemas/UserProfile"
        createdAt:
          type: string
          title: The time the follow request originated
      title: >-
        PendingFollowRequest defines the record describing the given pending
        follow

        relationship
      required:
        - followerRequestionToFollow
        - createdAt
    PollPost:
      type: object
      properties:
        id:
          type: string
          title: |-
            Post ID
            @gotag: bson:"_id,omitempty"
        createdAt:
          type: string
          title: |-
            Time post was created at
            @gotag: bson:"createdAt"
        action:
          $ref: "#/components/schemas/PostType"
        content:
          type: string
          title: |-
            Content is the content the post witholds
            Content is a string of text that is at least 5 characters long
            @gotag: bson:"content"
        mentions:
          type: array
          items:
            type: string
          title: |-
            Profiles mentioned in the post
            @gotag: bson:"mentions"
        hashtags:
          type: array
          items:
            type: string
          title: |-
            Hashtags defined in the post
            @gotag: bson:"hashtags"
        media:
          $ref: "#/components/schemas/Media"
        extra:
          type: object
          additionalProperties:
            type: string
          title: |-
            Blob of extra content tied to the post
            @gotag: bson:"extra"
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
          title: |-
            Comments tied to the post
            @gotag: bson:"comments"
        backendPlatformUserId:
          type: string
          title: |-
            ID of the user creating the post
            @gotag: bson:"backendPlatformUserId"
        profileId:
          type: string
          format: uint64
          title: |-
            ID of the profile creating the post
            @gotag: bson:"profileId"
        title:
          type: string
          title: |-
            Title of the post
            @gotag: bson:"title"
        tags:
          type: array
          items:
            type: string
          title: |-
            Tags associated with the post
            @gotag: bson:"tags"
        topicName:
          type: string
          title: >-
            The topic to which this post is currently associated to. For
            non-community

            profiles, posts are not associated to any topic. However for the commmunity

            case, posts are associated to topic

            @gotag: bson:"topicName"
        authorUsername:
          type: string
          title: |-
            Username of the person making the comment
            @gotag: bson:"authorUsername"
        authorProfileImage:
          type: string
          title: |-
            Profile image of the person making this comment
            @gotag: bson:"authorProfileImage"
        affinityScore:
          type: string
          format: uint64
          title: >-
            AffinityScore is the average rating users on the platform associate
            with a

            piece of content. It is taken as the weighted average across all reactions

            for the particular post

            @gotag: bson:"affinityScore"
        qualityScore:
          type: string
          format: uint64
          title: >-
            QualityScore is the quality of the given piece of content.

            It is taken as the weighted average across all reactions for the particular

            post

            @gotag: bson:"qualityScore"
        userIdToAffinityScoreMap:
          type: object
          additionalProperties:
            type: string
            format: uint64
          title: >-
            UserIDToAffinityScoreMap witholds a mapping of all user profiles who
            left

            an affinity score

            @gotag: bson:"userIdToAffinityScoreMap"
        insights:
          $ref: "#/components/schemas/ContentInsights"
        userIdToReportsMap:
          type: object
          additionalProperties:
            type: string
            format: uint64
          title: >-
            ReportCount details the number of reports were associated with a
            post

            A report is used as a signal to disclose the post's content are in

            violation of platform rules

            @gotag: bson:"userIdToReportsMap"
        backgroundImageUrl:
          type: string
          title: >-
            BackgroundImageUrl signifies an image to associate to a post object.

            Such urls are only associated when a post is an article or short story

            @gotag: bson:"backgroundImageUrl"
        authorAccountType:
          $ref: "#/components/schemas/AccountType"
        userIdToPollResponsesMap:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PollResponse"
          title: |-
            A hash map of user ids to poll responses left by users
            @gotag: bson:"userIdToPollResponseMap"
        pollOptions:
          type: array
          items:
            type: string
          title: |-
            the set of options the poll witholds
            @gotag: bson:"pollOptions"
        pollDistribution:
          type: object
          additionalProperties:
            type: number
            format: double
          title: |-
            the distribution of poll responses (in percentage form)
            @gotag: bson:"pollDistribution"
        pollEndDate:
          type: string
          format: date-time
          title: |-
            the end date of the given poll
            @gotag: bson:"pollEndDate"
        notes:
          type: array
          items:
            $ref: "#/components/schemas/Note"
          title: |-
            the set of notes associated to this piece of content
            @gotag: bson:"notes"
        thread:
          $ref: "#/components/schemas/Thread"
        threadParticipantType:
          $ref: "#/components/schemas/ThreadParticipantType"
        userIdToReactionMap:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Reaction"
          title: |-
            a map of user ids to reactions left by users
            @gotag: bson:"userIdToReactionMap"
      required:
        - action
        - content
        - pollOptions
    PollResponse:
      type: object
      properties:
        id:
          type: string
          title: |-
            the id of the poll response
            @gotag: bson:"_id,omitempty"
        userId:
          type: string
          title: |-
            the user id who left the poll response
            @gotag: bson:"userId"
        responseValue:
          type: string
          title: |-
            the actual poll response left by the user
            @gotag: bson:"responseValue"
        responseIdx:
          type: string
          format: uint64
          title: |-
            the index of the given response
            @gotag: bson:"responseIdx"
    Post:
      type: object
      properties:
        id:
          type: string
          title: |-
            Post ID
            @gotag: bson:"_id,omitempty"
        createdAt:
          type: string
          title: |-
            Time post was created at
            @gotag: bson:"createdAt"
        action:
          $ref: "#/components/schemas/PostType"
        content:
          type: string
          title: |-
            Content is the content the post witholds
            Content is a string of text that is at least 5 characters long
            @gotag: bson:"content"
        mentions:
          type: array
          items:
            type: string
          title: |-
            Profiles mentioned in the post
            @gotag: bson:"mentions"
        hashtags:
          type: array
          items:
            type: string
          title: |-
            Hashtags defined in the post
            @gotag: bson:"hashtags"
        media:
          $ref: "#/components/schemas/Media"
        extra:
          type: object
          additionalProperties:
            type: string
          title: |-
            Blob of extra content tied to the post
            @gotag: bson:"extra"
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
          title: |-
            Comments tied to the post
            @gotag: bson:"comments"
        backendPlatformUserId:
          type: string
          title: |-
            ID of the user creating the post
            @gotag: bson:"backendPlatformUserId"
        profileId:
          type: string
          format: uint64
          title: '@gotag: bson:"profileId"'
        title:
          type: string
          title: '@gotag: bson:"title"'
        tags:
          type: array
          items:
            type: string
          title: '@gotag: bson:"tags"'
        topicName:
          type: string
          title: >-
            The topic to which this post is currently associated to. For
            non-community

            profiles, posts are not associated to any topic. However for the commmunity

            case, posts are associated to topic

            @gotag: bson:"topicName"
        authorUsername:
          type: string
          title: |-
            Username of the person making the comment
            @gotag: bson:"authorUsername"
        authorProfileImage:
          type: string
          title: |-
            Profile image of the person making this comment
            @gotag: bson:"authorProfileImage"
        affinityScore:
          type: string
          format: uint64
          title: >-
            AffinityScore is the average rating users on the platform associate
            with a

            piece of content. It is taken as the weighted average across all reactions

            for the particular post

            @gotag: bson:"affinityScore"
        qualityScore:
          type: string
          format: uint64
          title: |-
            QualityScore is the quality of the given piece of content.
            @gotag: bson:"qualityScore"
        userIdToAffinityScoreMap:
          type: object
          additionalProperties:
            type: string
            format: uint64
          title: >-
            UserIDToAffinityScoreMap witholds a mapping of all user profiles who
            left

            an affinity score

            @gotag: bson:"userIdToAffinityScoreMap"
        insights:
          $ref: "#/components/schemas/ContentInsights"
        userIdToReportsMap:
          type: object
          additionalProperties:
            type: string
            format: uint64
          title: >-
            ReportCount details the number of reports were associated with a
            post

            A report is used as a signal to disclose the post's content are in

            violation of platform rules

            @gotag: bson:"userIdToReportsMap"
        readingTime:
          type: string
          title: |-
            ReadingTime outlines the number of minutes it would take to read the
            contents of this post
            @gotag: bson:"readingTime"
        backgroundImageUrl:
          type: string
          title: >-
            BackgroundImageUrl signifies an image to associate to a post object.

            Such urls are only associated when a post is an article or short story

            @gotag: bson:"backgroundImageUrl"
        authorAccountType:
          $ref: "#/components/schemas/AccountType"
        notes:
          type: array
          items:
            $ref: "#/components/schemas/Note"
          title: |-
            the set of notes associated to this piece of content
            @gotag: bson:"notes"
        thread:
          $ref: "#/components/schemas/Thread"
        threadParticipantType:
          $ref: "#/components/schemas/ThreadParticipantType"
        userIdToReactionMap:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Reaction"
          title: |-
            a map of user ids to reactions left by users
            @gotag: bson:"userIdToReactionMap"
        aiGeneratedQuestionResponse:
          type: string
          title: >-
            if the post is a question, this field will hold the response to the
            question by the ai

            @gotag: bson:"aiGeneratedQuestionResponse"
      title: >-
        Posts: Critical to activities and define the content sent over by users
        and

        communities
      required:
        - action
        - content
    PostType:
      type: string
      enum:
        - POST_TYPE_UNSPECIFIED
        - POST_TYPE_POST
        - POST_TYPE_REPOST
        - POST_TYPE_QUESTION
        - POST_TYPE_ACHIEVEMENT
        - POST_TYPE_ANNOUNCEMENT
        - POST_TYPE_POLL
        - POST_TYPE_ARTICLE
        - POST_TYPE_SHORT_STORY
      default: POST_TYPE_UNSPECIFIED
      title: PostType defines the type of content present in a post
    Publication:
      type: object
      properties:
        id:
          type: string
          format: uint64
        postIds:
          type: array
          items:
            type: string
          title: stories are post that can be submitted only by the publication editors
        admin:
          $ref: "#/components/schemas/UserProfile"
        adminBackendPlatformUserId:
          type: string
        tags:
          type: array
          items:
            type: string
        editors:
          type: array
          items:
            $ref: "#/components/schemas/UserProfile"
        subjects:
          type: array
          items:
            type: string
        description:
          type: string
        createdAt:
          type: string
        type:
          $ref: "#/components/schemas/PublicationType"
        publicationName:
          type: string
      description: >-
        Use Case

        - An online magazine, a publication with a fixed publication staff that posts stories around a specific topic

        - A community publication, a publication that accepts stories published around Medium

        - A company blog, a publication that is created specifically to share company news

        - A collection of individual stories by a single author that are parts of a larger whole
      title: >-
        A Publication is a collections of stories based around a common theme.
        Anyone can create them

        As the creator of a publication, you're an editor by default, which means you have the ability to

        a) add writers to your publication,

        b) edit and publish the stories that are submitted by your writers, and

        c) review the metrics for all of the stories that are part of your publication.

        As the publication's creator, you'll also have the ability

        to appoint new editors (so they can do all of that stuff I just mentioned)
      required:
        - adminBackendPlatformUserId
        - tags
        - subjects
        - type
        - publicationName
    PublicationType:
      type: string
      enum:
        - PUBLICATION_TYPE_UNSPECIFIED
        - PUBLICATION_TYPE_MAGAZINE
        - PUBLICATION_TYPE_PLATFORM
        - PUBLICATION_TYPE_BLOG
        - PUBLICATION_TYPE_SUBJECTS
      default: PUBLICATION_TYPE_UNSPECIFIED
      title: >-
        - PUBLICATION_TYPE_MAGAZINE: a publication with a fixed publication
        staff that posts stories around a specific topic
         - PUBLICATION_TYPE_PLATFORM: a publication that accepts stories published around solomon
         - PUBLICATION_TYPE_BLOG: A community blog, a publication that is created specifically to share subset (community) news
         - PUBLICATION_TYPE_SUBJECTS: A collection of individual stories by a set of authors that are part of a whole
    ReactToCommentReplyResponse:
      type: object
      properties:
        reply:
          $ref: "#/components/schemas/CommentReply"
    ReactToCommentResponse:
      type: object
      properties:
        comment:
          $ref: "#/components/schemas/Comment"
    ReactToPostResponse:
      type: object
      properties:
        regularPost:
          $ref: "#/components/schemas/Post"
        sharedPost:
          $ref: "#/components/schemas/SharedPost"
        pollPost:
          $ref: "#/components/schemas/PollPost"
    Reaction:
      type: string
      enum:
        - REACTION_UNSPECIFIED
        - REACTION_LIKE
        - REACTION_LOVE
        - REACTION_HAHA
        - REACTION_WOW
        - REACTION_SAD
        - REACTION_ANGRY
        - REACTION_DISLIKE
      default: REACTION_UNSPECIFIED
    ReadynessCheckResponse:
      type: object
      properties:
        ready:
          type: boolean
      title: >-
        ReadynessCheckResponse Represents a request invoked against the social
        service for the

        readyness check response
    RemoveBookmarkedPostResponse:
      type: object
      properties:
        bookmark:
          $ref: "#/components/schemas/Bookmark"
    RemoveBookmarkedPublicationResponse:
      type: object
      properties:
        bookmark:
          $ref: "#/components/schemas/Bookmark"
    RemovePostFromThreadResponse:
      type: object
      properties:
        success:
          type: boolean
    ReportCommentBody:
      type: object
      properties:
        postType:
          $ref: "#/components/schemas/PostType"
      title: |-
        ReportCommentRequest: Represents the request object invoked against the
        social service to report a comment
      required:
        - postType
    ReportCommentReplyBody:
      type: object
      properties:
        postType:
          $ref: "#/components/schemas/PostType"
      required:
        - postType
    ReportCommentReplyResponse:
      type: object
      properties:
        reply:
          $ref: "#/components/schemas/CommentReply"
    ReportCommentResponse:
      type: object
      properties:
        comment:
          $ref: "#/components/schemas/Comment"
    ReportPostResponse:
      type: object
      properties:
        post:
          $ref: "#/components/schemas/Post"
      title: |-
        ReportPostResponse: Represent the object returned as a
        response to the report post request
    RespondToPollBody:
      type: object
      properties:
        pollOption:
          type: string
          title: the poll option the user is responding with
        pollOptionIdx:
          type: string
          format: uint64
          title: the index of the poll option the user is responding with
      required:
        - pollOption
        - pollOptionIdx
    RespondToPollResponse:
      type: object
      properties:
        poll:
          $ref: "#/components/schemas/PollPost"
    Sentiment:
      type: object
      properties:
        negative:
          type: number
          format: float
          example: 30
        neutral:
          type: number
          format: float
          example: 50
        positive:
          type: number
          format: float
          example: 89
        compound:
          type: number
          format: float
          example: 93
    SharePostResponse:
      type: object
      properties:
        success:
          type: boolean
    SharedPost:
      type: object
      properties:
        id:
          type: string
          title: |-
            RePost ID
            @gotag: bson:"_id,omitempty"
        originalPostId:
          type: string
          example: test-user
          title: |-
            Original Post ID
            @gotag: bson:"originalPostId"
          minLength: 1
        originalAuthorUsername:
          type: string
          title: |-
            The username of the original author
            @gotag: bson:"originalAuthorUsername"
        createdAt:
          type: string
          title: |-
            Time post was created at
            @gotag: bson:"createdAt"
        content:
          type: string
          title: |-
            Content is the content the post witholds
            Content is a string of text that is at least 5 characters long
            @gotag: bson:"content"
        mentions:
          type: array
          items:
            type: string
          title: |-
            Profiles mentioned in the post
            @gotag: bson:"mentions"
        hashtags:
          type: array
          items:
            type: string
          title: |-
            Hashtags defined in the post
            @gotag: bson:"hashtags"
        extra:
          type: object
          additionalProperties:
            type: string
          title: |-
            Blob of extra content tied to the post
            @gotag: bson:"extra"
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
          title: |-
            Comments tied to the post
            @gotag: bson:"comments"
        backendPlatformUserId:
          type: string
          title: |-
            ID of the user resharing the post
            @gotag: bson:"backendPlatformUserId"
        profileId:
          type: string
          format: uint64
          title: |-
            ID of the profile resharing the post
            @gotag: bson:"profileId"
        tags:
          type: array
          items:
            type: string
          title: |-
            Tags associated with the post
            @gotag: bson:"tags"
        authorUsername:
          type: string
          title: |-
            Username of the person making the comment
            @gotag: bson:"authorUsername"
        affinityScore:
          type: string
          format: uint64
          title: >-
            AffinityScore is the average rating users on the platform associate
            with a

            piece of content. It is taken as the weighted average across all reactions

            for the particular post

            @gotag: bson:"affinityScore"
        qualityScore:
          type: string
          format: uint64
          title: >-
            QualityScore is the quality of the given piece of content.

            It is taken as the weighted average across all reactions for the particular

            post

            @gotag: bson:"qualityScore"
        userIdToAffinityScoreMap:
          type: object
          additionalProperties:
            type: string
            format: uint64
          title: >-
            UserIDToAffinityScoreMap witholds a mapping of all user profiles who
            left

            an affinity score

            @gotag: bson:"userIdToAffinityScoreMap"
        userIdToReportsMap:
          type: object
          additionalProperties:
            type: string
            format: uint64
          description: |-
            AccountType is the account type of the creator of this piece of
             content
          title: >-
            ReportCount details the number of reports were associated with a
            post

            A report is used as a signal to disclose the post's content are in

            violation of platform rules

            @gotag: bson:"userIdToReportsMap"
        notes:
          type: array
          items:
            $ref: "#/components/schemas/Note"
          title: |-
            the set of notes associated to this piece of content
            @gotag: bson:"notes"
        thread:
          $ref: "#/components/schemas/Thread"
        authorAccountType:
          $ref: "#/components/schemas/AccountType"
        userIdToReactionMap:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Reaction"
          title: |-
            a map of user ids to reactions left by users
            @gotag: bson:"userIdToReactionMap"
        action:
          $ref: "#/components/schemas/PostType"
        originalPostUserProfileId:
          type: string
          format: uint64
          title: |-
            The profile Id of the user who owned the original post
            @gotag: bson:"originalPostUserProfileId"
        originalPostUserbackendPlaformId:
          type: string
          title: |-
            The backend wide user id of the profile who owned the original post
            @gotag: bson:"originalPostUserbackendPlaformId"
        originalPostAction:
          $ref: "#/components/schemas/PostType"
      title: |-
        SharedPost: Posts reshared by other profiles
        TODO: need to expose api endpoints to interact with shared posts
      required:
        - originalPostId
        - content
        - action
        - originalPostAction
    SocialProfileMetadata:
      type: object
      properties:
        profileType:
          $ref: "#/components/schemas/AccountType"
        profileId:
          type: string
          format: uint64
    SocialRelationshipMetadata:
      type: object
      properties:
        sourceProfile:
          $ref: "#/components/schemas/SocialProfileMetadata"
        targetProfile:
          $ref: "#/components/schemas/SocialProfileMetadata"
        following:
          type: boolean
        followingSince:
          type: string
      required:
        - sourceProfile
        - targetProfile
    Status:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: "#/components/schemas/Any"
    Thread:
      type: object
      properties:
        id:
          type: string
          title: |-
            Thread ID
            @gotag: bson:"_id,omitempty"
        postIds:
          type: array
          items:
            type: string
          title: |-
            a list of post ids associated to this thread
            @gotag: bson:"postIds"
        parentPostId:
          type: string
          title: |-
            the id of the parent post
            @gotag: bson:"parentPostId"
        createdAt:
          type: string
          title: '@gotag: bson:"createdAt"'
        updatedAt:
          type: string
          title: '@gotag: bson:"updatedAt"'
    ThreadParticipantType:
      type: string
      enum:
        - THREAD_PARTICIPANT_TYPE_UNSPECIFIED
        - THREAD_PARTICIPANT_TYPE_PARENT
        - THREAD_PARTICIPANT_TYPE_PARTICIPANT
      default: THREAD_PARTICIPANT_TYPE_UNSPECIFIED
    Topic:
      type: object
      properties:
        id:
          type: string
          format: uint64
          title: the id of the topic
        topicName:
          type: string
          example: test-tagname
          title: the name of the topic
        description:
          type: string
          example:
            test-description sakjlDKJGSAHGHFDHSGJHFGAHDFJKGSHAJDLgAKSGDHAS
            CSVDJKSADASKJHDASFDGJKJLHSAHGFJDSAHD kjskhdgfhgdhfgkhsdfdsdfdssdfsdf
          title: the description of the topic
        imageUrl:
          type: string
          example: test-tagname
          title: |-
            the url of the topic image
            the image url is required
          minLength: 1
      title: "Topic: topic that can be associated to a record"
      required:
        - topicName
        - description
        - imageUrl
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uint64
          title: User profile ID
        tags:
          type: array
          items:
            $ref: "#/components/schemas/UserTags"
          title: Tags are interests
        name:
          type: string
          example: test-user
          title: |-
            Profile name is the name tied to the user profile
            user name must be at least 5 characters long
        private:
          type: boolean
          title: >-
            Private defines wether only approved followers can see what this
            profile

            posts
        followers:
          type: string
          format: int64
          title: Followers outlines the number of followers this user profile has
        following:
          type: string
          format: int64
          title: Number of people account is following
        notificationFeedTimelineId:
          type: string
          example: asndlkhaskhdhasgdahsf-feed-id
          title: |-
            Notification timeline Id. Notification for anything a user/group is
            following
        personalFeedTimelineId:
          type: string
          example: asndlkhaskhdhasgdahsf-feed-id
          title: Personal timeline ID Has activities for a user that can be followed
        newsFeedTimelineId:
          type: string
          example: asndlkhaskhdhasgdahsf-feed-id
          title: >-
            Newsfeed timeline ID Displays all followed and group activities the
            user

            follows
        profileImageUrl:
          type: string
          example: asndlkhaskhdhasgdahsf.jpg
          title: ProfileImageUrl witholds the url of a given profile image
        bookmarks:
          $ref: "#/components/schemas/Bookmark"
        algoliaId:
          type: string
          example: asndlkhaskhdhasgdahsf-feed-id
          title: The id of the algolia record referencing this user
      title: "UserProfile: The profile object tied to a given user"
      required:
        - tags
        - name
        - private
        - followers
        - following
        - notificationFeedTimelineId
        - personalFeedTimelineId
        - newsFeedTimelineId
        - profileImageUrl
        - bookmarks
        - algoliaId
    UserTags:
      type: object
      properties:
        id:
          type: string
          format: uint64
          title: the id of the tag record
        tagName:
          type: string
          example: test-tagname
          title: the name of the tag ... tag must be at least 5 characters long
        description:
          type: string
          example:
            test-description sakjlDKJGSAHGHFDHSGJHFGAHDFJKGSHAJDLgAKSGDHAS
            CSVDJKSADASKJHDASFDGJKJLHSAHGFJDSAHD kjskhdgfhgdhfgkhsdfdsdfdssdfsdf
          title: the description of the tag ... tag must be at least 5 characters long
      title: "Tags: tags that can be associated to a record"
      required:
        - tagName
        - description
    ValidationErrorMessageResponse:
      type: object
      example:
        code: validation_error
        message: Generic validation error
      properties:
        code:
          $ref: "#/components/schemas/ErrorCode"
        message:
          type: string
