// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	lead_scraper_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/lead_scraper_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newAccountSettingsORM(db *gorm.DB, opts ...gen.DOOption) accountSettingsORM {
	_accountSettingsORM := accountSettingsORM{}

	_accountSettingsORM.accountSettingsORMDo.UseDB(db, opts...)
	_accountSettingsORM.accountSettingsORMDo.UseModel(&lead_scraper_servicev1.AccountSettingsORM{})

	tableName := _accountSettingsORM.accountSettingsORMDo.TableName()
	_accountSettingsORM.ALL = field.NewAsterisk(tableName)
	_accountSettingsORM.AccountId = field.NewUint64(tableName, "account_id")
	_accountSettingsORM.AutoPurgeEnabled = field.NewBool(tableName, "auto_purge_enabled")
	_accountSettingsORM.CreatedAt = field.NewTime(tableName, "created_at")
	_accountSettingsORM.DefaultDataRetention = field.NewInt64(tableName, "default_data_retention")
	_accountSettingsORM.DeletedAt = field.NewTime(tableName, "deleted_at")
	_accountSettingsORM.EmailNotifications = field.NewBool(tableName, "email_notifications")
	_accountSettingsORM.Id = field.NewUint64(tableName, "id")
	_accountSettingsORM.Require_2Fa = field.NewBool(tableName, "require_2_fa")
	_accountSettingsORM.SessionTimeout = field.NewInt64(tableName, "session_timeout")
	_accountSettingsORM.SlackNotifications = field.NewBool(tableName, "slack_notifications")
	_accountSettingsORM.UpdatedAt = field.NewTime(tableName, "updated_at")

	_accountSettingsORM.fillFieldMap()

	return _accountSettingsORM
}

type accountSettingsORM struct {
	accountSettingsORMDo

	ALL                  field.Asterisk
	AccountId            field.Uint64
	AutoPurgeEnabled     field.Bool
	CreatedAt            field.Time
	DefaultDataRetention field.Int64
	DeletedAt            field.Time
	EmailNotifications   field.Bool
	Id                   field.Uint64
	Require_2Fa          field.Bool
	SessionTimeout       field.Int64
	SlackNotifications   field.Bool
	UpdatedAt            field.Time

	fieldMap map[string]field.Expr
}

func (a accountSettingsORM) Table(newTableName string) *accountSettingsORM {
	a.accountSettingsORMDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountSettingsORM) As(alias string) *accountSettingsORM {
	a.accountSettingsORMDo.DO = *(a.accountSettingsORMDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountSettingsORM) updateTableName(table string) *accountSettingsORM {
	a.ALL = field.NewAsterisk(table)
	a.AccountId = field.NewUint64(table, "account_id")
	a.AutoPurgeEnabled = field.NewBool(table, "auto_purge_enabled")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.DefaultDataRetention = field.NewInt64(table, "default_data_retention")
	a.DeletedAt = field.NewTime(table, "deleted_at")
	a.EmailNotifications = field.NewBool(table, "email_notifications")
	a.Id = field.NewUint64(table, "id")
	a.Require_2Fa = field.NewBool(table, "require_2_fa")
	a.SessionTimeout = field.NewInt64(table, "session_timeout")
	a.SlackNotifications = field.NewBool(table, "slack_notifications")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *accountSettingsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountSettingsORM) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["account_id"] = a.AccountId
	a.fieldMap["auto_purge_enabled"] = a.AutoPurgeEnabled
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["default_data_retention"] = a.DefaultDataRetention
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["email_notifications"] = a.EmailNotifications
	a.fieldMap["id"] = a.Id
	a.fieldMap["require_2_fa"] = a.Require_2Fa
	a.fieldMap["session_timeout"] = a.SessionTimeout
	a.fieldMap["slack_notifications"] = a.SlackNotifications
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a accountSettingsORM) clone(db *gorm.DB) accountSettingsORM {
	a.accountSettingsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountSettingsORM) replaceDB(db *gorm.DB) accountSettingsORM {
	a.accountSettingsORMDo.ReplaceDB(db)
	return a
}

type accountSettingsORMDo struct{ gen.DO }

type IAccountSettingsORMDo interface {
	gen.SubQuery
	Debug() IAccountSettingsORMDo
	WithContext(ctx context.Context) IAccountSettingsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAccountSettingsORMDo
	WriteDB() IAccountSettingsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAccountSettingsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAccountSettingsORMDo
	Not(conds ...gen.Condition) IAccountSettingsORMDo
	Or(conds ...gen.Condition) IAccountSettingsORMDo
	Select(conds ...field.Expr) IAccountSettingsORMDo
	Where(conds ...gen.Condition) IAccountSettingsORMDo
	Order(conds ...field.Expr) IAccountSettingsORMDo
	Distinct(cols ...field.Expr) IAccountSettingsORMDo
	Omit(cols ...field.Expr) IAccountSettingsORMDo
	Join(table schema.Tabler, on ...field.Expr) IAccountSettingsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAccountSettingsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAccountSettingsORMDo
	Group(cols ...field.Expr) IAccountSettingsORMDo
	Having(conds ...gen.Condition) IAccountSettingsORMDo
	Limit(limit int) IAccountSettingsORMDo
	Offset(offset int) IAccountSettingsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountSettingsORMDo
	Unscoped() IAccountSettingsORMDo
	Create(values ...*lead_scraper_servicev1.AccountSettingsORM) error
	CreateInBatches(values []*lead_scraper_servicev1.AccountSettingsORM, batchSize int) error
	Save(values ...*lead_scraper_servicev1.AccountSettingsORM) error
	First() (*lead_scraper_servicev1.AccountSettingsORM, error)
	Take() (*lead_scraper_servicev1.AccountSettingsORM, error)
	Last() (*lead_scraper_servicev1.AccountSettingsORM, error)
	Find() ([]*lead_scraper_servicev1.AccountSettingsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.AccountSettingsORM, err error)
	FindInBatches(result *[]*lead_scraper_servicev1.AccountSettingsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*lead_scraper_servicev1.AccountSettingsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAccountSettingsORMDo
	Assign(attrs ...field.AssignExpr) IAccountSettingsORMDo
	Joins(fields ...field.RelationField) IAccountSettingsORMDo
	Preload(fields ...field.RelationField) IAccountSettingsORMDo
	FirstOrInit() (*lead_scraper_servicev1.AccountSettingsORM, error)
	FirstOrCreate() (*lead_scraper_servicev1.AccountSettingsORM, error)
	FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.AccountSettingsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAccountSettingsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result lead_scraper_servicev1.AccountSettingsORM, err error)
	GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.AccountSettingsORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.AccountSettingsORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result lead_scraper_servicev1.AccountSettingsORM, err error)
	GetByIDs(ids []uint64) (result []lead_scraper_servicev1.AccountSettingsORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.AccountSettingsORM, err error)
	GetDeleted() (result []lead_scraper_servicev1.AccountSettingsORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	CreateInBatch(items []lead_scraper_servicev1.AccountSettingsORM, batchSize int) (err error)
	DeleteInBatch(ids []uint64) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.AccountSettingsORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.AccountSettingsORM, err error)
	FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.AccountSettingsORM, err error)
	GetDistinct(columnName string) (result []lead_scraper_servicev1.AccountSettingsORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.AccountSettingsORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.AccountSettingsORM, err error)
	ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.AccountSettingsORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.AccountSettingsORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountSettingsORMDo) GetRecordByID(id uint64) (result lead_scraper_servicev1.AccountSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a accountSettingsORMDo) GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.AccountSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountSettingsORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (a accountSettingsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.AccountSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM account_settings ORDER BY " + a.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (a accountSettingsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM account_settings ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountSettingsORMDo) GetByID(id uint64) (result lead_scraper_servicev1.AccountSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a accountSettingsORMDo) GetByIDs(ids []uint64) (result []lead_scraper_servicev1.AccountSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (a accountSettingsORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.AccountSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_settings ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + a.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (a accountSettingsORMDo) GetDeleted() (result []lead_scraper_servicev1.AccountSettingsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_settings ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountSettingsORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE account_settings SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountSettingsORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE account_settings SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values...)
func (a accountSettingsORMDo) CreateInBatch(items []lead_scraper_servicev1.AccountSettingsORM, batchSize int) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO account_settings (columns) VALUES (values...) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a accountSettingsORMDo) DeleteInBatch(ids []uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (a accountSettingsORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.AccountSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (a accountSettingsORMDo) FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.AccountSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (a accountSettingsORMDo) FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.AccountSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (a accountSettingsORMDo) GetDistinct(columnName string) (result []lead_scraper_servicev1.AccountSettingsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM account_settings ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (a accountSettingsORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.AccountSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountSettingsORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE account_settings SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (a accountSettingsORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (a accountSettingsORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (a accountSettingsORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.AccountSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (a accountSettingsORMDo) ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.AccountSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM account_settings ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (a accountSettingsORMDo) ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.AccountSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM account_settings ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a accountSettingsORMDo) Debug() IAccountSettingsORMDo {
	return a.withDO(a.DO.Debug())
}

func (a accountSettingsORMDo) WithContext(ctx context.Context) IAccountSettingsORMDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountSettingsORMDo) ReadDB() IAccountSettingsORMDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountSettingsORMDo) WriteDB() IAccountSettingsORMDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountSettingsORMDo) Session(config *gorm.Session) IAccountSettingsORMDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountSettingsORMDo) Clauses(conds ...clause.Expression) IAccountSettingsORMDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountSettingsORMDo) Returning(value interface{}, columns ...string) IAccountSettingsORMDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountSettingsORMDo) Not(conds ...gen.Condition) IAccountSettingsORMDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountSettingsORMDo) Or(conds ...gen.Condition) IAccountSettingsORMDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountSettingsORMDo) Select(conds ...field.Expr) IAccountSettingsORMDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountSettingsORMDo) Where(conds ...gen.Condition) IAccountSettingsORMDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountSettingsORMDo) Order(conds ...field.Expr) IAccountSettingsORMDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountSettingsORMDo) Distinct(cols ...field.Expr) IAccountSettingsORMDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountSettingsORMDo) Omit(cols ...field.Expr) IAccountSettingsORMDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountSettingsORMDo) Join(table schema.Tabler, on ...field.Expr) IAccountSettingsORMDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountSettingsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAccountSettingsORMDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountSettingsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IAccountSettingsORMDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountSettingsORMDo) Group(cols ...field.Expr) IAccountSettingsORMDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountSettingsORMDo) Having(conds ...gen.Condition) IAccountSettingsORMDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountSettingsORMDo) Limit(limit int) IAccountSettingsORMDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountSettingsORMDo) Offset(offset int) IAccountSettingsORMDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountSettingsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountSettingsORMDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountSettingsORMDo) Unscoped() IAccountSettingsORMDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountSettingsORMDo) Create(values ...*lead_scraper_servicev1.AccountSettingsORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountSettingsORMDo) CreateInBatches(values []*lead_scraper_servicev1.AccountSettingsORM, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountSettingsORMDo) Save(values ...*lead_scraper_servicev1.AccountSettingsORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountSettingsORMDo) First() (*lead_scraper_servicev1.AccountSettingsORM, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.AccountSettingsORM), nil
	}
}

func (a accountSettingsORMDo) Take() (*lead_scraper_servicev1.AccountSettingsORM, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.AccountSettingsORM), nil
	}
}

func (a accountSettingsORMDo) Last() (*lead_scraper_servicev1.AccountSettingsORM, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.AccountSettingsORM), nil
	}
}

func (a accountSettingsORMDo) Find() ([]*lead_scraper_servicev1.AccountSettingsORM, error) {
	result, err := a.DO.Find()
	return result.([]*lead_scraper_servicev1.AccountSettingsORM), err
}

func (a accountSettingsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.AccountSettingsORM, err error) {
	buf := make([]*lead_scraper_servicev1.AccountSettingsORM, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountSettingsORMDo) FindInBatches(result *[]*lead_scraper_servicev1.AccountSettingsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountSettingsORMDo) Attrs(attrs ...field.AssignExpr) IAccountSettingsORMDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountSettingsORMDo) Assign(attrs ...field.AssignExpr) IAccountSettingsORMDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountSettingsORMDo) Joins(fields ...field.RelationField) IAccountSettingsORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountSettingsORMDo) Preload(fields ...field.RelationField) IAccountSettingsORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountSettingsORMDo) FirstOrInit() (*lead_scraper_servicev1.AccountSettingsORM, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.AccountSettingsORM), nil
	}
}

func (a accountSettingsORMDo) FirstOrCreate() (*lead_scraper_servicev1.AccountSettingsORM, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.AccountSettingsORM), nil
	}
}

func (a accountSettingsORMDo) FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.AccountSettingsORM, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountSettingsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountSettingsORMDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountSettingsORMDo) Delete(models ...*lead_scraper_servicev1.AccountSettingsORM) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountSettingsORMDo) withDO(do gen.Dao) *accountSettingsORMDo {
	a.DO = *do.(*gen.DO)
	return a
}
