// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	lead_scraper_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/lead_scraper_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newAPIKeyORM(db *gorm.DB, opts ...gen.DOOption) aPIKeyORM {
	_aPIKeyORM := aPIKeyORM{}

	_aPIKeyORM.aPIKeyORMDo.UseDB(db, opts...)
	_aPIKeyORM.aPIKeyORMDo.UseModel(&lead_scraper_servicev1.APIKeyORM{})

	tableName := _aPIKeyORM.aPIKeyORMDo.TableName()
	_aPIKeyORM.ALL = field.NewAsterisk(tableName)
	_aPIKeyORM.AccountId = field.NewUint64(tableName, "account_id")
	_aPIKeyORM.AlertEmails = field.NewField(tableName, "alert_emails")
	_aPIKeyORM.AlertOnErrorSpike = field.NewBool(tableName, "alert_on_error_spike")
	_aPIKeyORM.AlertOnQuotaThreshold = field.NewBool(tableName, "alert_on_quota_threshold")
	_aPIKeyORM.AllowedDomains = field.NewField(tableName, "allowed_domains")
	_aPIKeyORM.AllowedEnvironments = field.NewField(tableName, "allowed_environments")
	_aPIKeyORM.AllowedIps = field.NewField(tableName, "allowed_ips")
	_aPIKeyORM.AllowedSignatureAlgorithms = field.NewField(tableName, "allowed_signature_algorithms")
	_aPIKeyORM.ApiVersion = field.NewString(tableName, "api_version")
	_aPIKeyORM.ApprovedIntegrations = field.NewField(tableName, "approved_integrations")
	_aPIKeyORM.AverageResponseTime = field.NewFloat32(tableName, "average_response_time")
	_aPIKeyORM.BillingTier = field.NewString(tableName, "billing_tier")
	_aPIKeyORM.ClientCertificateHash = field.NewString(tableName, "client_certificate_hash")
	_aPIKeyORM.ClientSecretHash = field.NewString(tableName, "client_secret_hash")
	_aPIKeyORM.ComplianceStandards = field.NewField(tableName, "compliance_standards")
	_aPIKeyORM.ConcurrentRequests = field.NewInt32(tableName, "concurrent_requests")
	_aPIKeyORM.CostPerRequest = field.NewFloat32(tableName, "cost_per_request")
	_aPIKeyORM.CreatedAt = field.NewTime(tableName, "created_at")
	_aPIKeyORM.DataClassification = field.NewString(tableName, "data_classification")
	_aPIKeyORM.DataResidency = field.NewString(tableName, "data_residency")
	_aPIKeyORM.DeletedAt = field.NewTime(tableName, "deleted_at")
	_aPIKeyORM.Description = field.NewString(tableName, "description")
	_aPIKeyORM.DocumentationUrl = field.NewString(tableName, "documentation_url")
	_aPIKeyORM.Encrypted = field.NewBool(tableName, "encrypted")
	_aPIKeyORM.EndpointUsageJson = field.NewBytes(tableName, "endpoint_usage_json")
	_aPIKeyORM.EnforceHttps = field.NewBool(tableName, "enforce_https")
	_aPIKeyORM.EnforceMutualTls = field.NewBool(tableName, "enforce_mutual_tls")
	_aPIKeyORM.EnforceSigning = field.NewBool(tableName, "enforce_signing")
	_aPIKeyORM.ErrorAlertThreshold = field.NewFloat32(tableName, "error_alert_threshold")
	_aPIKeyORM.ErrorRatesJson = field.NewBytes(tableName, "error_rates_json")
	_aPIKeyORM.ExpiresAt = field.NewTime(tableName, "expires_at")
	_aPIKeyORM.Id = field.NewUint64(tableName, "id")
	_aPIKeyORM.IsTestKey = field.NewBool(tableName, "is_test_key")
	_aPIKeyORM.KeyHash = field.NewString(tableName, "key_hash")
	_aPIKeyORM.KeyPrefix = field.NewString(tableName, "key_prefix")
	_aPIKeyORM.LastRotatedAt = field.NewTime(tableName, "last_rotated_at")
	_aPIKeyORM.LastRotationDate = field.NewTime(tableName, "last_rotation_date")
	_aPIKeyORM.LastRotationReason = field.NewString(tableName, "last_rotation_reason")
	_aPIKeyORM.LastSecurityReviewAt = field.NewTime(tableName, "last_security_review_at")
	_aPIKeyORM.LastUsedAt = field.NewTime(tableName, "last_used_at")
	_aPIKeyORM.LogAllRequests = field.NewBool(tableName, "log_all_requests")
	_aPIKeyORM.MetadataJson = field.NewBytes(tableName, "metadata_json")
	_aPIKeyORM.MonitoringIntegrations = field.NewField(tableName, "monitoring_integrations")
	_aPIKeyORM.MonthlyRequestQuota = field.NewInt64(tableName, "monthly_request_quota")
	_aPIKeyORM.Name = field.NewString(tableName, "name")
	_aPIKeyORM.OrgId = field.NewString(tableName, "org_id")
	_aPIKeyORM.QuotaAlertThreshold = field.NewFloat32(tableName, "quota_alert_threshold")
	_aPIKeyORM.RecentErrors = field.NewBytes(tableName, "recent_errors")
	_aPIKeyORM.RequestsPerDay = field.NewInt32(tableName, "requests_per_day")
	_aPIKeyORM.RequestsPerSecond = field.NewInt32(tableName, "requests_per_second")
	_aPIKeyORM.RequireRequestSigning = field.NewBool(tableName, "require_request_signing")
	_aPIKeyORM.RequiresAuditLogging = field.NewBool(tableName, "requires_audit_logging")
	_aPIKeyORM.RequiresClientSecret = field.NewBool(tableName, "requires_client_secret")
	_aPIKeyORM.RotationFrequencyDays = field.NewInt32(tableName, "rotation_frequency_days")
	_aPIKeyORM.Scopes_ = field.NewField(tableName, "scopes")
	_aPIKeyORM.Status = field.NewString(tableName, "status")
	_aPIKeyORM.SuccessRate = field.NewFloat32(tableName, "success_rate")
	_aPIKeyORM.SuccessfulRequestsCount = field.NewInt32(tableName, "successful_requests_count")
	_aPIKeyORM.SupportContact = field.NewString(tableName, "support_contact")
	_aPIKeyORM.SupportedFeatures = field.NewField(tableName, "supported_features")
	_aPIKeyORM.Tags = field.NewField(tableName, "tags")
	_aPIKeyORM.TenantId = field.NewString(tableName, "tenant_id")
	_aPIKeyORM.TotalErrors = field.NewInt64(tableName, "total_errors")
	_aPIKeyORM.TotalRequests = field.NewInt64(tableName, "total_requests")
	_aPIKeyORM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_aPIKeyORM.WebhookUrl = field.NewString(tableName, "webhook_url")
	_aPIKeyORM.WorkspaceId = field.NewUint64(tableName, "workspace_id")
	_aPIKeyORM.Account = aPIKeyORMBelongsToAccount{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Account", "lead_scraper_servicev1.AccountORM"),
		Settings: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Account.Settings", "lead_scraper_servicev1.AccountSettingsORM"),
		},
		Workspaces: struct {
			field.RelationField
			ApiKeys struct {
				field.RelationField
				Account struct {
					field.RelationField
				}
				Workspace struct {
					field.RelationField
				}
			}
			ScrapingJobs struct {
				field.RelationField
				Leads struct {
					field.RelationField
					Job struct {
						field.RelationField
					}
					Workspace struct {
						field.RelationField
					}
					RegularHours struct {
						field.RelationField
					}
					Reviews struct {
						field.RelationField
					}
					SpecialHours struct {
						field.RelationField
					}
				}
			}
			Webhooks struct {
				field.RelationField
			}
			Workflows struct {
				field.RelationField
				Workspace struct {
					field.RelationField
				}
				Jobs struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Account.Workspaces", "lead_scraper_servicev1.WorkspaceORM"),
			ApiKeys: struct {
				field.RelationField
				Account struct {
					field.RelationField
				}
				Workspace struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Account.Workspaces.ApiKeys", "lead_scraper_servicev1.APIKeyORM"),
				Account: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.Workspaces.ApiKeys.Account", "lead_scraper_servicev1.AccountORM"),
				},
				Workspace: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.Workspaces.ApiKeys.Workspace", "lead_scraper_servicev1.WorkspaceORM"),
				},
			},
			ScrapingJobs: struct {
				field.RelationField
				Leads struct {
					field.RelationField
					Job struct {
						field.RelationField
					}
					Workspace struct {
						field.RelationField
					}
					RegularHours struct {
						field.RelationField
					}
					Reviews struct {
						field.RelationField
					}
					SpecialHours struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("Account.Workspaces.ScrapingJobs", "lead_scraper_servicev1.ScrapingJobORM"),
				Leads: struct {
					field.RelationField
					Job struct {
						field.RelationField
					}
					Workspace struct {
						field.RelationField
					}
					RegularHours struct {
						field.RelationField
					}
					Reviews struct {
						field.RelationField
					}
					SpecialHours struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Account.Workspaces.ScrapingJobs.Leads", "lead_scraper_servicev1.LeadORM"),
					Job: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Account.Workspaces.ScrapingJobs.Leads.Job", "lead_scraper_servicev1.ScrapingJobORM"),
					},
					Workspace: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Account.Workspaces.ScrapingJobs.Leads.Workspace", "lead_scraper_servicev1.WorkspaceORM"),
					},
					RegularHours: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Account.Workspaces.ScrapingJobs.Leads.RegularHours", "lead_scraper_servicev1.BusinessHoursORM"),
					},
					Reviews: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Account.Workspaces.ScrapingJobs.Leads.Reviews", "lead_scraper_servicev1.ReviewORM"),
					},
					SpecialHours: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Account.Workspaces.ScrapingJobs.Leads.SpecialHours", "lead_scraper_servicev1.BusinessHoursORM"),
					},
				},
			},
			Webhooks: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.Workspaces.Webhooks", "lead_scraper_servicev1.WebhookConfigORM"),
			},
			Workflows: struct {
				field.RelationField
				Workspace struct {
					field.RelationField
				}
				Jobs struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Account.Workspaces.Workflows", "lead_scraper_servicev1.ScrapingWorkflowORM"),
				Workspace: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.Workspaces.Workflows.Workspace", "lead_scraper_servicev1.WorkspaceORM"),
				},
				Jobs: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.Workspaces.Workflows.Jobs", "lead_scraper_servicev1.ScrapingJobORM"),
				},
			},
		},
	}

	_aPIKeyORM.Workspace = aPIKeyORMBelongsToWorkspace{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Workspace", "lead_scraper_servicev1.WorkspaceORM"),
	}

	_aPIKeyORM.fillFieldMap()

	return _aPIKeyORM
}

type aPIKeyORM struct {
	aPIKeyORMDo

	ALL                        field.Asterisk
	AccountId                  field.Uint64
	AlertEmails                field.Field
	AlertOnErrorSpike          field.Bool
	AlertOnQuotaThreshold      field.Bool
	AllowedDomains             field.Field
	AllowedEnvironments        field.Field
	AllowedIps                 field.Field
	AllowedSignatureAlgorithms field.Field
	ApiVersion                 field.String
	ApprovedIntegrations       field.Field
	AverageResponseTime        field.Float32
	BillingTier                field.String
	ClientCertificateHash      field.String
	ClientSecretHash           field.String
	ComplianceStandards        field.Field
	ConcurrentRequests         field.Int32
	CostPerRequest             field.Float32
	CreatedAt                  field.Time
	DataClassification         field.String
	DataResidency              field.String
	DeletedAt                  field.Time
	Description                field.String
	DocumentationUrl           field.String
	Encrypted                  field.Bool
	EndpointUsageJson          field.Bytes
	EnforceHttps               field.Bool
	EnforceMutualTls           field.Bool
	EnforceSigning             field.Bool
	ErrorAlertThreshold        field.Float32
	ErrorRatesJson             field.Bytes
	ExpiresAt                  field.Time
	Id                         field.Uint64
	IsTestKey                  field.Bool
	KeyHash                    field.String
	KeyPrefix                  field.String
	LastRotatedAt              field.Time
	LastRotationDate           field.Time
	LastRotationReason         field.String
	LastSecurityReviewAt       field.Time
	LastUsedAt                 field.Time
	LogAllRequests             field.Bool
	MetadataJson               field.Bytes
	MonitoringIntegrations     field.Field
	MonthlyRequestQuota        field.Int64
	Name                       field.String
	OrgId                      field.String
	QuotaAlertThreshold        field.Float32
	RecentErrors               field.Bytes
	RequestsPerDay             field.Int32
	RequestsPerSecond          field.Int32
	RequireRequestSigning      field.Bool
	RequiresAuditLogging       field.Bool
	RequiresClientSecret       field.Bool
	RotationFrequencyDays      field.Int32
	Scopes_                    field.Field
	Status                     field.String
	SuccessRate                field.Float32
	SuccessfulRequestsCount    field.Int32
	SupportContact             field.String
	SupportedFeatures          field.Field
	Tags                       field.Field
	TenantId                   field.String
	TotalErrors                field.Int64
	TotalRequests              field.Int64
	UpdatedAt                  field.Time
	WebhookUrl                 field.String
	WorkspaceId                field.Uint64
	Account                    aPIKeyORMBelongsToAccount

	Workspace aPIKeyORMBelongsToWorkspace

	fieldMap map[string]field.Expr
}

func (a aPIKeyORM) Table(newTableName string) *aPIKeyORM {
	a.aPIKeyORMDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPIKeyORM) As(alias string) *aPIKeyORM {
	a.aPIKeyORMDo.DO = *(a.aPIKeyORMDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPIKeyORM) updateTableName(table string) *aPIKeyORM {
	a.ALL = field.NewAsterisk(table)
	a.AccountId = field.NewUint64(table, "account_id")
	a.AlertEmails = field.NewField(table, "alert_emails")
	a.AlertOnErrorSpike = field.NewBool(table, "alert_on_error_spike")
	a.AlertOnQuotaThreshold = field.NewBool(table, "alert_on_quota_threshold")
	a.AllowedDomains = field.NewField(table, "allowed_domains")
	a.AllowedEnvironments = field.NewField(table, "allowed_environments")
	a.AllowedIps = field.NewField(table, "allowed_ips")
	a.AllowedSignatureAlgorithms = field.NewField(table, "allowed_signature_algorithms")
	a.ApiVersion = field.NewString(table, "api_version")
	a.ApprovedIntegrations = field.NewField(table, "approved_integrations")
	a.AverageResponseTime = field.NewFloat32(table, "average_response_time")
	a.BillingTier = field.NewString(table, "billing_tier")
	a.ClientCertificateHash = field.NewString(table, "client_certificate_hash")
	a.ClientSecretHash = field.NewString(table, "client_secret_hash")
	a.ComplianceStandards = field.NewField(table, "compliance_standards")
	a.ConcurrentRequests = field.NewInt32(table, "concurrent_requests")
	a.CostPerRequest = field.NewFloat32(table, "cost_per_request")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.DataClassification = field.NewString(table, "data_classification")
	a.DataResidency = field.NewString(table, "data_residency")
	a.DeletedAt = field.NewTime(table, "deleted_at")
	a.Description = field.NewString(table, "description")
	a.DocumentationUrl = field.NewString(table, "documentation_url")
	a.Encrypted = field.NewBool(table, "encrypted")
	a.EndpointUsageJson = field.NewBytes(table, "endpoint_usage_json")
	a.EnforceHttps = field.NewBool(table, "enforce_https")
	a.EnforceMutualTls = field.NewBool(table, "enforce_mutual_tls")
	a.EnforceSigning = field.NewBool(table, "enforce_signing")
	a.ErrorAlertThreshold = field.NewFloat32(table, "error_alert_threshold")
	a.ErrorRatesJson = field.NewBytes(table, "error_rates_json")
	a.ExpiresAt = field.NewTime(table, "expires_at")
	a.Id = field.NewUint64(table, "id")
	a.IsTestKey = field.NewBool(table, "is_test_key")
	a.KeyHash = field.NewString(table, "key_hash")
	a.KeyPrefix = field.NewString(table, "key_prefix")
	a.LastRotatedAt = field.NewTime(table, "last_rotated_at")
	a.LastRotationDate = field.NewTime(table, "last_rotation_date")
	a.LastRotationReason = field.NewString(table, "last_rotation_reason")
	a.LastSecurityReviewAt = field.NewTime(table, "last_security_review_at")
	a.LastUsedAt = field.NewTime(table, "last_used_at")
	a.LogAllRequests = field.NewBool(table, "log_all_requests")
	a.MetadataJson = field.NewBytes(table, "metadata_json")
	a.MonitoringIntegrations = field.NewField(table, "monitoring_integrations")
	a.MonthlyRequestQuota = field.NewInt64(table, "monthly_request_quota")
	a.Name = field.NewString(table, "name")
	a.OrgId = field.NewString(table, "org_id")
	a.QuotaAlertThreshold = field.NewFloat32(table, "quota_alert_threshold")
	a.RecentErrors = field.NewBytes(table, "recent_errors")
	a.RequestsPerDay = field.NewInt32(table, "requests_per_day")
	a.RequestsPerSecond = field.NewInt32(table, "requests_per_second")
	a.RequireRequestSigning = field.NewBool(table, "require_request_signing")
	a.RequiresAuditLogging = field.NewBool(table, "requires_audit_logging")
	a.RequiresClientSecret = field.NewBool(table, "requires_client_secret")
	a.RotationFrequencyDays = field.NewInt32(table, "rotation_frequency_days")
	a.Scopes_ = field.NewField(table, "scopes")
	a.Status = field.NewString(table, "status")
	a.SuccessRate = field.NewFloat32(table, "success_rate")
	a.SuccessfulRequestsCount = field.NewInt32(table, "successful_requests_count")
	a.SupportContact = field.NewString(table, "support_contact")
	a.SupportedFeatures = field.NewField(table, "supported_features")
	a.Tags = field.NewField(table, "tags")
	a.TenantId = field.NewString(table, "tenant_id")
	a.TotalErrors = field.NewInt64(table, "total_errors")
	a.TotalRequests = field.NewInt64(table, "total_requests")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.WebhookUrl = field.NewString(table, "webhook_url")
	a.WorkspaceId = field.NewUint64(table, "workspace_id")

	a.fillFieldMap()

	return a
}

func (a *aPIKeyORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPIKeyORM) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 69)
	a.fieldMap["account_id"] = a.AccountId
	a.fieldMap["alert_emails"] = a.AlertEmails
	a.fieldMap["alert_on_error_spike"] = a.AlertOnErrorSpike
	a.fieldMap["alert_on_quota_threshold"] = a.AlertOnQuotaThreshold
	a.fieldMap["allowed_domains"] = a.AllowedDomains
	a.fieldMap["allowed_environments"] = a.AllowedEnvironments
	a.fieldMap["allowed_ips"] = a.AllowedIps
	a.fieldMap["allowed_signature_algorithms"] = a.AllowedSignatureAlgorithms
	a.fieldMap["api_version"] = a.ApiVersion
	a.fieldMap["approved_integrations"] = a.ApprovedIntegrations
	a.fieldMap["average_response_time"] = a.AverageResponseTime
	a.fieldMap["billing_tier"] = a.BillingTier
	a.fieldMap["client_certificate_hash"] = a.ClientCertificateHash
	a.fieldMap["client_secret_hash"] = a.ClientSecretHash
	a.fieldMap["compliance_standards"] = a.ComplianceStandards
	a.fieldMap["concurrent_requests"] = a.ConcurrentRequests
	a.fieldMap["cost_per_request"] = a.CostPerRequest
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["data_classification"] = a.DataClassification
	a.fieldMap["data_residency"] = a.DataResidency
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["description"] = a.Description
	a.fieldMap["documentation_url"] = a.DocumentationUrl
	a.fieldMap["encrypted"] = a.Encrypted
	a.fieldMap["endpoint_usage_json"] = a.EndpointUsageJson
	a.fieldMap["enforce_https"] = a.EnforceHttps
	a.fieldMap["enforce_mutual_tls"] = a.EnforceMutualTls
	a.fieldMap["enforce_signing"] = a.EnforceSigning
	a.fieldMap["error_alert_threshold"] = a.ErrorAlertThreshold
	a.fieldMap["error_rates_json"] = a.ErrorRatesJson
	a.fieldMap["expires_at"] = a.ExpiresAt
	a.fieldMap["id"] = a.Id
	a.fieldMap["is_test_key"] = a.IsTestKey
	a.fieldMap["key_hash"] = a.KeyHash
	a.fieldMap["key_prefix"] = a.KeyPrefix
	a.fieldMap["last_rotated_at"] = a.LastRotatedAt
	a.fieldMap["last_rotation_date"] = a.LastRotationDate
	a.fieldMap["last_rotation_reason"] = a.LastRotationReason
	a.fieldMap["last_security_review_at"] = a.LastSecurityReviewAt
	a.fieldMap["last_used_at"] = a.LastUsedAt
	a.fieldMap["log_all_requests"] = a.LogAllRequests
	a.fieldMap["metadata_json"] = a.MetadataJson
	a.fieldMap["monitoring_integrations"] = a.MonitoringIntegrations
	a.fieldMap["monthly_request_quota"] = a.MonthlyRequestQuota
	a.fieldMap["name"] = a.Name
	a.fieldMap["org_id"] = a.OrgId
	a.fieldMap["quota_alert_threshold"] = a.QuotaAlertThreshold
	a.fieldMap["recent_errors"] = a.RecentErrors
	a.fieldMap["requests_per_day"] = a.RequestsPerDay
	a.fieldMap["requests_per_second"] = a.RequestsPerSecond
	a.fieldMap["require_request_signing"] = a.RequireRequestSigning
	a.fieldMap["requires_audit_logging"] = a.RequiresAuditLogging
	a.fieldMap["requires_client_secret"] = a.RequiresClientSecret
	a.fieldMap["rotation_frequency_days"] = a.RotationFrequencyDays
	a.fieldMap["scopes"] = a.Scopes_
	a.fieldMap["status"] = a.Status
	a.fieldMap["success_rate"] = a.SuccessRate
	a.fieldMap["successful_requests_count"] = a.SuccessfulRequestsCount
	a.fieldMap["support_contact"] = a.SupportContact
	a.fieldMap["supported_features"] = a.SupportedFeatures
	a.fieldMap["tags"] = a.Tags
	a.fieldMap["tenant_id"] = a.TenantId
	a.fieldMap["total_errors"] = a.TotalErrors
	a.fieldMap["total_requests"] = a.TotalRequests
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["webhook_url"] = a.WebhookUrl
	a.fieldMap["workspace_id"] = a.WorkspaceId

}

func (a aPIKeyORM) clone(db *gorm.DB) aPIKeyORM {
	a.aPIKeyORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPIKeyORM) replaceDB(db *gorm.DB) aPIKeyORM {
	a.aPIKeyORMDo.ReplaceDB(db)
	return a
}

type aPIKeyORMBelongsToAccount struct {
	db *gorm.DB

	field.RelationField

	Settings struct {
		field.RelationField
	}
	Workspaces struct {
		field.RelationField
		ApiKeys struct {
			field.RelationField
			Account struct {
				field.RelationField
			}
			Workspace struct {
				field.RelationField
			}
		}
		ScrapingJobs struct {
			field.RelationField
			Leads struct {
				field.RelationField
				Job struct {
					field.RelationField
				}
				Workspace struct {
					field.RelationField
				}
				RegularHours struct {
					field.RelationField
				}
				Reviews struct {
					field.RelationField
				}
				SpecialHours struct {
					field.RelationField
				}
			}
		}
		Webhooks struct {
			field.RelationField
		}
		Workflows struct {
			field.RelationField
			Workspace struct {
				field.RelationField
			}
			Jobs struct {
				field.RelationField
			}
		}
	}
}

func (a aPIKeyORMBelongsToAccount) Where(conds ...field.Expr) *aPIKeyORMBelongsToAccount {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a aPIKeyORMBelongsToAccount) WithContext(ctx context.Context) *aPIKeyORMBelongsToAccount {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a aPIKeyORMBelongsToAccount) Session(session *gorm.Session) *aPIKeyORMBelongsToAccount {
	a.db = a.db.Session(session)
	return &a
}

func (a aPIKeyORMBelongsToAccount) Model(m *lead_scraper_servicev1.APIKeyORM) *aPIKeyORMBelongsToAccountTx {
	return &aPIKeyORMBelongsToAccountTx{a.db.Model(m).Association(a.Name())}
}

type aPIKeyORMBelongsToAccountTx struct{ tx *gorm.Association }

func (a aPIKeyORMBelongsToAccountTx) Find() (result *lead_scraper_servicev1.AccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a aPIKeyORMBelongsToAccountTx) Append(values ...*lead_scraper_servicev1.AccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a aPIKeyORMBelongsToAccountTx) Replace(values ...*lead_scraper_servicev1.AccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a aPIKeyORMBelongsToAccountTx) Delete(values ...*lead_scraper_servicev1.AccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a aPIKeyORMBelongsToAccountTx) Clear() error {
	return a.tx.Clear()
}

func (a aPIKeyORMBelongsToAccountTx) Count() int64 {
	return a.tx.Count()
}

type aPIKeyORMBelongsToWorkspace struct {
	db *gorm.DB

	field.RelationField
}

func (a aPIKeyORMBelongsToWorkspace) Where(conds ...field.Expr) *aPIKeyORMBelongsToWorkspace {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a aPIKeyORMBelongsToWorkspace) WithContext(ctx context.Context) *aPIKeyORMBelongsToWorkspace {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a aPIKeyORMBelongsToWorkspace) Session(session *gorm.Session) *aPIKeyORMBelongsToWorkspace {
	a.db = a.db.Session(session)
	return &a
}

func (a aPIKeyORMBelongsToWorkspace) Model(m *lead_scraper_servicev1.APIKeyORM) *aPIKeyORMBelongsToWorkspaceTx {
	return &aPIKeyORMBelongsToWorkspaceTx{a.db.Model(m).Association(a.Name())}
}

type aPIKeyORMBelongsToWorkspaceTx struct{ tx *gorm.Association }

func (a aPIKeyORMBelongsToWorkspaceTx) Find() (result *lead_scraper_servicev1.WorkspaceORM, err error) {
	return result, a.tx.Find(&result)
}

func (a aPIKeyORMBelongsToWorkspaceTx) Append(values ...*lead_scraper_servicev1.WorkspaceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a aPIKeyORMBelongsToWorkspaceTx) Replace(values ...*lead_scraper_servicev1.WorkspaceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a aPIKeyORMBelongsToWorkspaceTx) Delete(values ...*lead_scraper_servicev1.WorkspaceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a aPIKeyORMBelongsToWorkspaceTx) Clear() error {
	return a.tx.Clear()
}

func (a aPIKeyORMBelongsToWorkspaceTx) Count() int64 {
	return a.tx.Count()
}

type aPIKeyORMDo struct{ gen.DO }

type IAPIKeyORMDo interface {
	gen.SubQuery
	Debug() IAPIKeyORMDo
	WithContext(ctx context.Context) IAPIKeyORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPIKeyORMDo
	WriteDB() IAPIKeyORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPIKeyORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPIKeyORMDo
	Not(conds ...gen.Condition) IAPIKeyORMDo
	Or(conds ...gen.Condition) IAPIKeyORMDo
	Select(conds ...field.Expr) IAPIKeyORMDo
	Where(conds ...gen.Condition) IAPIKeyORMDo
	Order(conds ...field.Expr) IAPIKeyORMDo
	Distinct(cols ...field.Expr) IAPIKeyORMDo
	Omit(cols ...field.Expr) IAPIKeyORMDo
	Join(table schema.Tabler, on ...field.Expr) IAPIKeyORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPIKeyORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPIKeyORMDo
	Group(cols ...field.Expr) IAPIKeyORMDo
	Having(conds ...gen.Condition) IAPIKeyORMDo
	Limit(limit int) IAPIKeyORMDo
	Offset(offset int) IAPIKeyORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIKeyORMDo
	Unscoped() IAPIKeyORMDo
	Create(values ...*lead_scraper_servicev1.APIKeyORM) error
	CreateInBatches(values []*lead_scraper_servicev1.APIKeyORM, batchSize int) error
	Save(values ...*lead_scraper_servicev1.APIKeyORM) error
	First() (*lead_scraper_servicev1.APIKeyORM, error)
	Take() (*lead_scraper_servicev1.APIKeyORM, error)
	Last() (*lead_scraper_servicev1.APIKeyORM, error)
	Find() ([]*lead_scraper_servicev1.APIKeyORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.APIKeyORM, err error)
	FindInBatches(result *[]*lead_scraper_servicev1.APIKeyORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*lead_scraper_servicev1.APIKeyORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPIKeyORMDo
	Assign(attrs ...field.AssignExpr) IAPIKeyORMDo
	Joins(fields ...field.RelationField) IAPIKeyORMDo
	Preload(fields ...field.RelationField) IAPIKeyORMDo
	FirstOrInit() (*lead_scraper_servicev1.APIKeyORM, error)
	FirstOrCreate() (*lead_scraper_servicev1.APIKeyORM, error)
	FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.APIKeyORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPIKeyORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result lead_scraper_servicev1.APIKeyORM, err error)
	GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.APIKeyORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.APIKeyORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result lead_scraper_servicev1.APIKeyORM, err error)
	GetByIDs(ids []uint64) (result []lead_scraper_servicev1.APIKeyORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.APIKeyORM, err error)
	GetDeleted() (result []lead_scraper_servicev1.APIKeyORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	CreateInBatch(items []lead_scraper_servicev1.APIKeyORM, batchSize int) (err error)
	DeleteInBatch(ids []uint64) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.APIKeyORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.APIKeyORM, err error)
	FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.APIKeyORM, err error)
	GetDistinct(columnName string) (result []lead_scraper_servicev1.APIKeyORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.APIKeyORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.APIKeyORM, err error)
	ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.APIKeyORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.APIKeyORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aPIKeyORMDo) GetRecordByID(id uint64) (result lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a aPIKeyORMDo) GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aPIKeyORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (a aPIKeyORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM api_keys ORDER BY " + a.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (a aPIKeyORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM api_keys ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aPIKeyORMDo) GetByID(id uint64) (result lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a aPIKeyORMDo) GetByIDs(ids []uint64) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (a aPIKeyORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + a.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (a aPIKeyORMDo) GetDeleted() (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aPIKeyORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE api_keys SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aPIKeyORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE api_keys SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values...)
func (a aPIKeyORMDo) CreateInBatch(items []lead_scraper_servicev1.APIKeyORM, batchSize int) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO api_keys (columns) VALUES (values...) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a aPIKeyORMDo) DeleteInBatch(ids []uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (a aPIKeyORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (a aPIKeyORMDo) FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (a aPIKeyORMDo) FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (a aPIKeyORMDo) GetDistinct(columnName string) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM api_keys ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (a aPIKeyORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aPIKeyORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE api_keys SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (a aPIKeyORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (a aPIKeyORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (a aPIKeyORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (a aPIKeyORMDo) ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM api_keys ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (a aPIKeyORMDo) ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM api_keys ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a aPIKeyORMDo) Debug() IAPIKeyORMDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIKeyORMDo) WithContext(ctx context.Context) IAPIKeyORMDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIKeyORMDo) ReadDB() IAPIKeyORMDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIKeyORMDo) WriteDB() IAPIKeyORMDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIKeyORMDo) Session(config *gorm.Session) IAPIKeyORMDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPIKeyORMDo) Clauses(conds ...clause.Expression) IAPIKeyORMDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIKeyORMDo) Returning(value interface{}, columns ...string) IAPIKeyORMDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIKeyORMDo) Not(conds ...gen.Condition) IAPIKeyORMDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIKeyORMDo) Or(conds ...gen.Condition) IAPIKeyORMDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIKeyORMDo) Select(conds ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIKeyORMDo) Where(conds ...gen.Condition) IAPIKeyORMDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIKeyORMDo) Order(conds ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIKeyORMDo) Distinct(cols ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIKeyORMDo) Omit(cols ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIKeyORMDo) Join(table schema.Tabler, on ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIKeyORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIKeyORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIKeyORMDo) Group(cols ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIKeyORMDo) Having(conds ...gen.Condition) IAPIKeyORMDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIKeyORMDo) Limit(limit int) IAPIKeyORMDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIKeyORMDo) Offset(offset int) IAPIKeyORMDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIKeyORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIKeyORMDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIKeyORMDo) Unscoped() IAPIKeyORMDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIKeyORMDo) Create(values ...*lead_scraper_servicev1.APIKeyORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIKeyORMDo) CreateInBatches(values []*lead_scraper_servicev1.APIKeyORM, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIKeyORMDo) Save(values ...*lead_scraper_servicev1.APIKeyORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIKeyORMDo) First() (*lead_scraper_servicev1.APIKeyORM, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.APIKeyORM), nil
	}
}

func (a aPIKeyORMDo) Take() (*lead_scraper_servicev1.APIKeyORM, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.APIKeyORM), nil
	}
}

func (a aPIKeyORMDo) Last() (*lead_scraper_servicev1.APIKeyORM, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.APIKeyORM), nil
	}
}

func (a aPIKeyORMDo) Find() ([]*lead_scraper_servicev1.APIKeyORM, error) {
	result, err := a.DO.Find()
	return result.([]*lead_scraper_servicev1.APIKeyORM), err
}

func (a aPIKeyORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.APIKeyORM, err error) {
	buf := make([]*lead_scraper_servicev1.APIKeyORM, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIKeyORMDo) FindInBatches(result *[]*lead_scraper_servicev1.APIKeyORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIKeyORMDo) Attrs(attrs ...field.AssignExpr) IAPIKeyORMDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIKeyORMDo) Assign(attrs ...field.AssignExpr) IAPIKeyORMDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIKeyORMDo) Joins(fields ...field.RelationField) IAPIKeyORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIKeyORMDo) Preload(fields ...field.RelationField) IAPIKeyORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIKeyORMDo) FirstOrInit() (*lead_scraper_servicev1.APIKeyORM, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.APIKeyORM), nil
	}
}

func (a aPIKeyORMDo) FirstOrCreate() (*lead_scraper_servicev1.APIKeyORM, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.APIKeyORM), nil
	}
}

func (a aPIKeyORMDo) FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.APIKeyORM, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIKeyORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIKeyORMDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIKeyORMDo) Delete(models ...*lead_scraper_servicev1.APIKeyORM) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIKeyORMDo) withDO(do gen.Dao) *aPIKeyORMDo {
	a.DO = *do.(*gen.DO)
	return a
}
