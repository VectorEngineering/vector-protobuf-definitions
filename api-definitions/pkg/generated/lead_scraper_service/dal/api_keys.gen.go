// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	lead_scraper_servicev1 "github.com/Vector/vector-lead-management/protobuf/api-definitions/pkg/generated/lead_scraper_service/v1"

	"time"
)

func newAPIKeyORM(db *gorm.DB, opts ...gen.DOOption) aPIKeyORM {
	_aPIKeyORM := aPIKeyORM{}

	_aPIKeyORM.aPIKeyORMDo.UseDB(db, opts...)
	_aPIKeyORM.aPIKeyORMDo.UseModel(&lead_scraper_servicev1.APIKeyORM{})

	tableName := _aPIKeyORM.aPIKeyORMDo.TableName()
	_aPIKeyORM.ALL = field.NewAsterisk(tableName)
	_aPIKeyORM.AccountId = field.NewUint64(tableName, "account_id")
	_aPIKeyORM.AllowedDomains = field.NewField(tableName, "allowed_domains")
	_aPIKeyORM.AllowedIps = field.NewField(tableName, "allowed_ips")
	_aPIKeyORM.AverageResponseTime = field.NewFloat32(tableName, "average_response_time")
	_aPIKeyORM.ClientSecretHash = field.NewString(tableName, "client_secret_hash")
	_aPIKeyORM.ConcurrentRequests = field.NewInt32(tableName, "concurrent_requests")
	_aPIKeyORM.CreatedAt = field.NewTime(tableName, "created_at")
	_aPIKeyORM.DeletedAt = field.NewTime(tableName, "deleted_at")
	_aPIKeyORM.EnforceHttps = field.NewBool(tableName, "enforce_https")
	_aPIKeyORM.EnforceSigning = field.NewBool(tableName, "enforce_signing")
	_aPIKeyORM.ExpiresAt = field.NewTime(tableName, "expires_at")
	_aPIKeyORM.Id = field.NewUint64(tableName, "id")
	_aPIKeyORM.KeyHash = field.NewString(tableName, "key_hash")
	_aPIKeyORM.KeyPrefix = field.NewString(tableName, "key_prefix")
	_aPIKeyORM.LastRotationDate = field.NewTime(tableName, "last_rotation_date")
	_aPIKeyORM.LastRotationReason = field.NewString(tableName, "last_rotation_reason")
	_aPIKeyORM.LastUsedAt = field.NewTime(tableName, "last_used_at")
	_aPIKeyORM.LogAllRequests = field.NewBool(tableName, "log_all_requests")
	_aPIKeyORM.Name = field.NewString(tableName, "name")
	_aPIKeyORM.OrgId = field.NewString(tableName, "org_id")
	_aPIKeyORM.RequestsPerDay = field.NewInt32(tableName, "requests_per_day")
	_aPIKeyORM.RequestsPerSecond = field.NewInt32(tableName, "requests_per_second")
	_aPIKeyORM.RequiresClientSecret = field.NewBool(tableName, "requires_client_secret")
	_aPIKeyORM.RotationFrequencyDays = field.NewInt32(tableName, "rotation_frequency_days")
	_aPIKeyORM.Scopes_ = field.NewField(tableName, "scopes")
	_aPIKeyORM.Status = field.NewString(tableName, "status")
	_aPIKeyORM.TenantId = field.NewString(tableName, "tenant_id")
	_aPIKeyORM.TotalErrors = field.NewInt64(tableName, "total_errors")
	_aPIKeyORM.TotalRequests = field.NewInt64(tableName, "total_requests")
	_aPIKeyORM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_aPIKeyORM.WorkspaceId = field.NewUint64(tableName, "workspace_id")
	_aPIKeyORM.Account = aPIKeyORMBelongsToAccount{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Account", "lead_scraper_servicev1.AccountORM"),
		Settings: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Account.Settings", "lead_scraper_servicev1.AccountSettingsORM"),
		},
		ScrapingJobs: struct {
			field.RelationField
			Leads struct {
				field.RelationField
				Job struct {
					field.RelationField
				}
				Workspace struct {
					field.RelationField
					Workflows struct {
						field.RelationField
						Workspace struct {
							field.RelationField
						}
						Jobs struct {
							field.RelationField
						}
					}
				}
				RegularHours struct {
					field.RelationField
				}
				Reviews struct {
					field.RelationField
				}
				SpecialHours struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Account.ScrapingJobs", "lead_scraper_servicev1.ScrapingJobORM"),
			Leads: struct {
				field.RelationField
				Job struct {
					field.RelationField
				}
				Workspace struct {
					field.RelationField
					Workflows struct {
						field.RelationField
						Workspace struct {
							field.RelationField
						}
						Jobs struct {
							field.RelationField
						}
					}
				}
				RegularHours struct {
					field.RelationField
				}
				Reviews struct {
					field.RelationField
				}
				SpecialHours struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Account.ScrapingJobs.Leads", "lead_scraper_servicev1.LeadORM"),
				Job: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.ScrapingJobs.Leads.Job", "lead_scraper_servicev1.ScrapingJobORM"),
				},
				Workspace: struct {
					field.RelationField
					Workflows struct {
						field.RelationField
						Workspace struct {
							field.RelationField
						}
						Jobs struct {
							field.RelationField
						}
					}
				}{
					RelationField: field.NewRelation("Account.ScrapingJobs.Leads.Workspace", "lead_scraper_servicev1.WorkspaceORM"),
					Workflows: struct {
						field.RelationField
						Workspace struct {
							field.RelationField
						}
						Jobs struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("Account.ScrapingJobs.Leads.Workspace.Workflows", "lead_scraper_servicev1.ScrapingWorkflowORM"),
						Workspace: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Account.ScrapingJobs.Leads.Workspace.Workflows.Workspace", "lead_scraper_servicev1.WorkspaceORM"),
						},
						Jobs: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Account.ScrapingJobs.Leads.Workspace.Workflows.Jobs", "lead_scraper_servicev1.ScrapingJobORM"),
						},
					},
				},
				RegularHours: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.ScrapingJobs.Leads.RegularHours", "lead_scraper_servicev1.BusinessHoursORM"),
				},
				Reviews: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.ScrapingJobs.Leads.Reviews", "lead_scraper_servicev1.ReviewORM"),
				},
				SpecialHours: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.ScrapingJobs.Leads.SpecialHours", "lead_scraper_servicev1.BusinessHoursORM"),
				},
			},
		},
		Workspaces: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Account.Workspaces", "lead_scraper_servicev1.WorkspaceORM"),
		},
	}

	_aPIKeyORM.Workspace = aPIKeyORMBelongsToWorkspace{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Workspace", "lead_scraper_servicev1.WorkspaceORM"),
	}

	_aPIKeyORM.fillFieldMap()

	return _aPIKeyORM
}

type aPIKeyORM struct {
	aPIKeyORMDo

	ALL                   field.Asterisk
	AccountId             field.Uint64
	AllowedDomains        field.Field
	AllowedIps            field.Field
	AverageResponseTime   field.Float32
	ClientSecretHash      field.String
	ConcurrentRequests    field.Int32
	CreatedAt             field.Time
	DeletedAt             field.Time
	EnforceHttps          field.Bool
	EnforceSigning        field.Bool
	ExpiresAt             field.Time
	Id                    field.Uint64
	KeyHash               field.String
	KeyPrefix             field.String
	LastRotationDate      field.Time
	LastRotationReason    field.String
	LastUsedAt            field.Time
	LogAllRequests        field.Bool
	Name                  field.String
	OrgId                 field.String
	RequestsPerDay        field.Int32
	RequestsPerSecond     field.Int32
	RequiresClientSecret  field.Bool
	RotationFrequencyDays field.Int32
	Scopes_               field.Field
	Status                field.String
	TenantId              field.String
	TotalErrors           field.Int64
	TotalRequests         field.Int64
	UpdatedAt             field.Time
	WorkspaceId           field.Uint64
	Account               aPIKeyORMBelongsToAccount

	Workspace aPIKeyORMBelongsToWorkspace

	fieldMap map[string]field.Expr
}

func (a aPIKeyORM) Table(newTableName string) *aPIKeyORM {
	a.aPIKeyORMDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPIKeyORM) As(alias string) *aPIKeyORM {
	a.aPIKeyORMDo.DO = *(a.aPIKeyORMDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPIKeyORM) updateTableName(table string) *aPIKeyORM {
	a.ALL = field.NewAsterisk(table)
	a.AccountId = field.NewUint64(table, "account_id")
	a.AllowedDomains = field.NewField(table, "allowed_domains")
	a.AllowedIps = field.NewField(table, "allowed_ips")
	a.AverageResponseTime = field.NewFloat32(table, "average_response_time")
	a.ClientSecretHash = field.NewString(table, "client_secret_hash")
	a.ConcurrentRequests = field.NewInt32(table, "concurrent_requests")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.DeletedAt = field.NewTime(table, "deleted_at")
	a.EnforceHttps = field.NewBool(table, "enforce_https")
	a.EnforceSigning = field.NewBool(table, "enforce_signing")
	a.ExpiresAt = field.NewTime(table, "expires_at")
	a.Id = field.NewUint64(table, "id")
	a.KeyHash = field.NewString(table, "key_hash")
	a.KeyPrefix = field.NewString(table, "key_prefix")
	a.LastRotationDate = field.NewTime(table, "last_rotation_date")
	a.LastRotationReason = field.NewString(table, "last_rotation_reason")
	a.LastUsedAt = field.NewTime(table, "last_used_at")
	a.LogAllRequests = field.NewBool(table, "log_all_requests")
	a.Name = field.NewString(table, "name")
	a.OrgId = field.NewString(table, "org_id")
	a.RequestsPerDay = field.NewInt32(table, "requests_per_day")
	a.RequestsPerSecond = field.NewInt32(table, "requests_per_second")
	a.RequiresClientSecret = field.NewBool(table, "requires_client_secret")
	a.RotationFrequencyDays = field.NewInt32(table, "rotation_frequency_days")
	a.Scopes_ = field.NewField(table, "scopes")
	a.Status = field.NewString(table, "status")
	a.TenantId = field.NewString(table, "tenant_id")
	a.TotalErrors = field.NewInt64(table, "total_errors")
	a.TotalRequests = field.NewInt64(table, "total_requests")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.WorkspaceId = field.NewUint64(table, "workspace_id")

	a.fillFieldMap()

	return a
}

func (a *aPIKeyORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPIKeyORM) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 33)
	a.fieldMap["account_id"] = a.AccountId
	a.fieldMap["allowed_domains"] = a.AllowedDomains
	a.fieldMap["allowed_ips"] = a.AllowedIps
	a.fieldMap["average_response_time"] = a.AverageResponseTime
	a.fieldMap["client_secret_hash"] = a.ClientSecretHash
	a.fieldMap["concurrent_requests"] = a.ConcurrentRequests
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["enforce_https"] = a.EnforceHttps
	a.fieldMap["enforce_signing"] = a.EnforceSigning
	a.fieldMap["expires_at"] = a.ExpiresAt
	a.fieldMap["id"] = a.Id
	a.fieldMap["key_hash"] = a.KeyHash
	a.fieldMap["key_prefix"] = a.KeyPrefix
	a.fieldMap["last_rotation_date"] = a.LastRotationDate
	a.fieldMap["last_rotation_reason"] = a.LastRotationReason
	a.fieldMap["last_used_at"] = a.LastUsedAt
	a.fieldMap["log_all_requests"] = a.LogAllRequests
	a.fieldMap["name"] = a.Name
	a.fieldMap["org_id"] = a.OrgId
	a.fieldMap["requests_per_day"] = a.RequestsPerDay
	a.fieldMap["requests_per_second"] = a.RequestsPerSecond
	a.fieldMap["requires_client_secret"] = a.RequiresClientSecret
	a.fieldMap["rotation_frequency_days"] = a.RotationFrequencyDays
	a.fieldMap["scopes"] = a.Scopes_
	a.fieldMap["status"] = a.Status
	a.fieldMap["tenant_id"] = a.TenantId
	a.fieldMap["total_errors"] = a.TotalErrors
	a.fieldMap["total_requests"] = a.TotalRequests
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["workspace_id"] = a.WorkspaceId

}

func (a aPIKeyORM) clone(db *gorm.DB) aPIKeyORM {
	a.aPIKeyORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPIKeyORM) replaceDB(db *gorm.DB) aPIKeyORM {
	a.aPIKeyORMDo.ReplaceDB(db)
	return a
}

type aPIKeyORMBelongsToAccount struct {
	db *gorm.DB

	field.RelationField

	Settings struct {
		field.RelationField
	}
	ScrapingJobs struct {
		field.RelationField
		Leads struct {
			field.RelationField
			Job struct {
				field.RelationField
			}
			Workspace struct {
				field.RelationField
				Workflows struct {
					field.RelationField
					Workspace struct {
						field.RelationField
					}
					Jobs struct {
						field.RelationField
					}
				}
			}
			RegularHours struct {
				field.RelationField
			}
			Reviews struct {
				field.RelationField
			}
			SpecialHours struct {
				field.RelationField
			}
		}
	}
	Workspaces struct {
		field.RelationField
	}
}

func (a aPIKeyORMBelongsToAccount) Where(conds ...field.Expr) *aPIKeyORMBelongsToAccount {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a aPIKeyORMBelongsToAccount) WithContext(ctx context.Context) *aPIKeyORMBelongsToAccount {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a aPIKeyORMBelongsToAccount) Session(session *gorm.Session) *aPIKeyORMBelongsToAccount {
	a.db = a.db.Session(session)
	return &a
}

func (a aPIKeyORMBelongsToAccount) Model(m *lead_scraper_servicev1.APIKeyORM) *aPIKeyORMBelongsToAccountTx {
	return &aPIKeyORMBelongsToAccountTx{a.db.Model(m).Association(a.Name())}
}

type aPIKeyORMBelongsToAccountTx struct{ tx *gorm.Association }

func (a aPIKeyORMBelongsToAccountTx) Find() (result *lead_scraper_servicev1.AccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a aPIKeyORMBelongsToAccountTx) Append(values ...*lead_scraper_servicev1.AccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a aPIKeyORMBelongsToAccountTx) Replace(values ...*lead_scraper_servicev1.AccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a aPIKeyORMBelongsToAccountTx) Delete(values ...*lead_scraper_servicev1.AccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a aPIKeyORMBelongsToAccountTx) Clear() error {
	return a.tx.Clear()
}

func (a aPIKeyORMBelongsToAccountTx) Count() int64 {
	return a.tx.Count()
}

type aPIKeyORMBelongsToWorkspace struct {
	db *gorm.DB

	field.RelationField
}

func (a aPIKeyORMBelongsToWorkspace) Where(conds ...field.Expr) *aPIKeyORMBelongsToWorkspace {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a aPIKeyORMBelongsToWorkspace) WithContext(ctx context.Context) *aPIKeyORMBelongsToWorkspace {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a aPIKeyORMBelongsToWorkspace) Session(session *gorm.Session) *aPIKeyORMBelongsToWorkspace {
	a.db = a.db.Session(session)
	return &a
}

func (a aPIKeyORMBelongsToWorkspace) Model(m *lead_scraper_servicev1.APIKeyORM) *aPIKeyORMBelongsToWorkspaceTx {
	return &aPIKeyORMBelongsToWorkspaceTx{a.db.Model(m).Association(a.Name())}
}

type aPIKeyORMBelongsToWorkspaceTx struct{ tx *gorm.Association }

func (a aPIKeyORMBelongsToWorkspaceTx) Find() (result *lead_scraper_servicev1.WorkspaceORM, err error) {
	return result, a.tx.Find(&result)
}

func (a aPIKeyORMBelongsToWorkspaceTx) Append(values ...*lead_scraper_servicev1.WorkspaceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a aPIKeyORMBelongsToWorkspaceTx) Replace(values ...*lead_scraper_servicev1.WorkspaceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a aPIKeyORMBelongsToWorkspaceTx) Delete(values ...*lead_scraper_servicev1.WorkspaceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a aPIKeyORMBelongsToWorkspaceTx) Clear() error {
	return a.tx.Clear()
}

func (a aPIKeyORMBelongsToWorkspaceTx) Count() int64 {
	return a.tx.Count()
}

type aPIKeyORMDo struct{ gen.DO }

type IAPIKeyORMDo interface {
	gen.SubQuery
	Debug() IAPIKeyORMDo
	WithContext(ctx context.Context) IAPIKeyORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPIKeyORMDo
	WriteDB() IAPIKeyORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPIKeyORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPIKeyORMDo
	Not(conds ...gen.Condition) IAPIKeyORMDo
	Or(conds ...gen.Condition) IAPIKeyORMDo
	Select(conds ...field.Expr) IAPIKeyORMDo
	Where(conds ...gen.Condition) IAPIKeyORMDo
	Order(conds ...field.Expr) IAPIKeyORMDo
	Distinct(cols ...field.Expr) IAPIKeyORMDo
	Omit(cols ...field.Expr) IAPIKeyORMDo
	Join(table schema.Tabler, on ...field.Expr) IAPIKeyORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPIKeyORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPIKeyORMDo
	Group(cols ...field.Expr) IAPIKeyORMDo
	Having(conds ...gen.Condition) IAPIKeyORMDo
	Limit(limit int) IAPIKeyORMDo
	Offset(offset int) IAPIKeyORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIKeyORMDo
	Unscoped() IAPIKeyORMDo
	Create(values ...*lead_scraper_servicev1.APIKeyORM) error
	CreateInBatches(values []*lead_scraper_servicev1.APIKeyORM, batchSize int) error
	Save(values ...*lead_scraper_servicev1.APIKeyORM) error
	First() (*lead_scraper_servicev1.APIKeyORM, error)
	Take() (*lead_scraper_servicev1.APIKeyORM, error)
	Last() (*lead_scraper_servicev1.APIKeyORM, error)
	Find() ([]*lead_scraper_servicev1.APIKeyORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.APIKeyORM, err error)
	FindInBatches(result *[]*lead_scraper_servicev1.APIKeyORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*lead_scraper_servicev1.APIKeyORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPIKeyORMDo
	Assign(attrs ...field.AssignExpr) IAPIKeyORMDo
	Joins(fields ...field.RelationField) IAPIKeyORMDo
	Preload(fields ...field.RelationField) IAPIKeyORMDo
	FirstOrInit() (*lead_scraper_servicev1.APIKeyORM, error)
	FirstOrCreate() (*lead_scraper_servicev1.APIKeyORM, error)
	FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.APIKeyORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPIKeyORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result lead_scraper_servicev1.APIKeyORM, err error)
	GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.APIKeyORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.APIKeyORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result lead_scraper_servicev1.APIKeyORM, err error)
	GetByIDs(ids []uint64) (result []lead_scraper_servicev1.APIKeyORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.APIKeyORM, err error)
	GetDeleted() (result []lead_scraper_servicev1.APIKeyORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	CreateInBatch(items []lead_scraper_servicev1.APIKeyORM, batchSize int) (err error)
	DeleteInBatch(ids []uint64) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.APIKeyORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.APIKeyORM, err error)
	FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.APIKeyORM, err error)
	GetDistinct(columnName string) (result []lead_scraper_servicev1.APIKeyORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.APIKeyORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.APIKeyORM, err error)
	ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.APIKeyORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.APIKeyORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aPIKeyORMDo) GetRecordByID(id uint64) (result lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a aPIKeyORMDo) GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aPIKeyORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (a aPIKeyORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM api_keys ORDER BY " + a.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (a aPIKeyORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM api_keys ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aPIKeyORMDo) GetByID(id uint64) (result lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a aPIKeyORMDo) GetByIDs(ids []uint64) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (a aPIKeyORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + a.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (a aPIKeyORMDo) GetDeleted() (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aPIKeyORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE api_keys SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aPIKeyORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE api_keys SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values...)
func (a aPIKeyORMDo) CreateInBatch(items []lead_scraper_servicev1.APIKeyORM, batchSize int) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO api_keys (columns) VALUES (values...) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a aPIKeyORMDo) DeleteInBatch(ids []uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (a aPIKeyORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (a aPIKeyORMDo) FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (a aPIKeyORMDo) FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (a aPIKeyORMDo) GetDistinct(columnName string) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM api_keys ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (a aPIKeyORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aPIKeyORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE api_keys SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (a aPIKeyORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (a aPIKeyORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (a aPIKeyORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (a aPIKeyORMDo) ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM api_keys ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (a aPIKeyORMDo) ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.APIKeyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM api_keys ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM api_keys ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a aPIKeyORMDo) Debug() IAPIKeyORMDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIKeyORMDo) WithContext(ctx context.Context) IAPIKeyORMDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIKeyORMDo) ReadDB() IAPIKeyORMDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIKeyORMDo) WriteDB() IAPIKeyORMDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIKeyORMDo) Session(config *gorm.Session) IAPIKeyORMDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPIKeyORMDo) Clauses(conds ...clause.Expression) IAPIKeyORMDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIKeyORMDo) Returning(value interface{}, columns ...string) IAPIKeyORMDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIKeyORMDo) Not(conds ...gen.Condition) IAPIKeyORMDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIKeyORMDo) Or(conds ...gen.Condition) IAPIKeyORMDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIKeyORMDo) Select(conds ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIKeyORMDo) Where(conds ...gen.Condition) IAPIKeyORMDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIKeyORMDo) Order(conds ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIKeyORMDo) Distinct(cols ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIKeyORMDo) Omit(cols ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIKeyORMDo) Join(table schema.Tabler, on ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIKeyORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIKeyORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIKeyORMDo) Group(cols ...field.Expr) IAPIKeyORMDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIKeyORMDo) Having(conds ...gen.Condition) IAPIKeyORMDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIKeyORMDo) Limit(limit int) IAPIKeyORMDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIKeyORMDo) Offset(offset int) IAPIKeyORMDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIKeyORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIKeyORMDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIKeyORMDo) Unscoped() IAPIKeyORMDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIKeyORMDo) Create(values ...*lead_scraper_servicev1.APIKeyORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIKeyORMDo) CreateInBatches(values []*lead_scraper_servicev1.APIKeyORM, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIKeyORMDo) Save(values ...*lead_scraper_servicev1.APIKeyORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIKeyORMDo) First() (*lead_scraper_servicev1.APIKeyORM, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.APIKeyORM), nil
	}
}

func (a aPIKeyORMDo) Take() (*lead_scraper_servicev1.APIKeyORM, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.APIKeyORM), nil
	}
}

func (a aPIKeyORMDo) Last() (*lead_scraper_servicev1.APIKeyORM, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.APIKeyORM), nil
	}
}

func (a aPIKeyORMDo) Find() ([]*lead_scraper_servicev1.APIKeyORM, error) {
	result, err := a.DO.Find()
	return result.([]*lead_scraper_servicev1.APIKeyORM), err
}

func (a aPIKeyORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.APIKeyORM, err error) {
	buf := make([]*lead_scraper_servicev1.APIKeyORM, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIKeyORMDo) FindInBatches(result *[]*lead_scraper_servicev1.APIKeyORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIKeyORMDo) Attrs(attrs ...field.AssignExpr) IAPIKeyORMDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIKeyORMDo) Assign(attrs ...field.AssignExpr) IAPIKeyORMDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIKeyORMDo) Joins(fields ...field.RelationField) IAPIKeyORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIKeyORMDo) Preload(fields ...field.RelationField) IAPIKeyORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIKeyORMDo) FirstOrInit() (*lead_scraper_servicev1.APIKeyORM, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.APIKeyORM), nil
	}
}

func (a aPIKeyORMDo) FirstOrCreate() (*lead_scraper_servicev1.APIKeyORM, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.APIKeyORM), nil
	}
}

func (a aPIKeyORMDo) FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.APIKeyORM, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIKeyORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIKeyORMDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIKeyORMDo) Delete(models ...*lead_scraper_servicev1.APIKeyORM) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIKeyORMDo) withDO(do gen.Dao) *aPIKeyORMDo {
	a.DO = *do.(*gen.DO)
	return a
}
