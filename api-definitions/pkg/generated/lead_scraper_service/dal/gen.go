// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	APIKeyORM           *aPIKeyORM
	AccountORM          *accountORM
	AccountSettingsORM  *accountSettingsORM
	BusinessHoursORM    *businessHoursORM
	LeadORM             *leadORM
	ResultORM           *resultORM
	ReviewORM           *reviewORM
	ScrapingJobORM      *scrapingJobORM
	ScrapingWorkflowORM *scrapingWorkflowORM
	WorkspaceORM        *workspaceORM
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	APIKeyORM = &Q.APIKeyORM
	AccountORM = &Q.AccountORM
	AccountSettingsORM = &Q.AccountSettingsORM
	BusinessHoursORM = &Q.BusinessHoursORM
	LeadORM = &Q.LeadORM
	ResultORM = &Q.ResultORM
	ReviewORM = &Q.ReviewORM
	ScrapingJobORM = &Q.ScrapingJobORM
	ScrapingWorkflowORM = &Q.ScrapingWorkflowORM
	WorkspaceORM = &Q.WorkspaceORM
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		APIKeyORM:           newAPIKeyORM(db, opts...),
		AccountORM:          newAccountORM(db, opts...),
		AccountSettingsORM:  newAccountSettingsORM(db, opts...),
		BusinessHoursORM:    newBusinessHoursORM(db, opts...),
		LeadORM:             newLeadORM(db, opts...),
		ResultORM:           newResultORM(db, opts...),
		ReviewORM:           newReviewORM(db, opts...),
		ScrapingJobORM:      newScrapingJobORM(db, opts...),
		ScrapingWorkflowORM: newScrapingWorkflowORM(db, opts...),
		WorkspaceORM:        newWorkspaceORM(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	APIKeyORM           aPIKeyORM
	AccountORM          accountORM
	AccountSettingsORM  accountSettingsORM
	BusinessHoursORM    businessHoursORM
	LeadORM             leadORM
	ResultORM           resultORM
	ReviewORM           reviewORM
	ScrapingJobORM      scrapingJobORM
	ScrapingWorkflowORM scrapingWorkflowORM
	WorkspaceORM        workspaceORM
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		APIKeyORM:           q.APIKeyORM.clone(db),
		AccountORM:          q.AccountORM.clone(db),
		AccountSettingsORM:  q.AccountSettingsORM.clone(db),
		BusinessHoursORM:    q.BusinessHoursORM.clone(db),
		LeadORM:             q.LeadORM.clone(db),
		ResultORM:           q.ResultORM.clone(db),
		ReviewORM:           q.ReviewORM.clone(db),
		ScrapingJobORM:      q.ScrapingJobORM.clone(db),
		ScrapingWorkflowORM: q.ScrapingWorkflowORM.clone(db),
		WorkspaceORM:        q.WorkspaceORM.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		APIKeyORM:           q.APIKeyORM.replaceDB(db),
		AccountORM:          q.AccountORM.replaceDB(db),
		AccountSettingsORM:  q.AccountSettingsORM.replaceDB(db),
		BusinessHoursORM:    q.BusinessHoursORM.replaceDB(db),
		LeadORM:             q.LeadORM.replaceDB(db),
		ResultORM:           q.ResultORM.replaceDB(db),
		ReviewORM:           q.ReviewORM.replaceDB(db),
		ScrapingJobORM:      q.ScrapingJobORM.replaceDB(db),
		ScrapingWorkflowORM: q.ScrapingWorkflowORM.replaceDB(db),
		WorkspaceORM:        q.WorkspaceORM.replaceDB(db),
	}
}

type queryCtx struct {
	APIKeyORM           IAPIKeyORMDo
	AccountORM          IAccountORMDo
	AccountSettingsORM  IAccountSettingsORMDo
	BusinessHoursORM    IBusinessHoursORMDo
	LeadORM             ILeadORMDo
	ResultORM           IResultORMDo
	ReviewORM           IReviewORMDo
	ScrapingJobORM      IScrapingJobORMDo
	ScrapingWorkflowORM IScrapingWorkflowORMDo
	WorkspaceORM        IWorkspaceORMDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		APIKeyORM:           q.APIKeyORM.WithContext(ctx),
		AccountORM:          q.AccountORM.WithContext(ctx),
		AccountSettingsORM:  q.AccountSettingsORM.WithContext(ctx),
		BusinessHoursORM:    q.BusinessHoursORM.WithContext(ctx),
		LeadORM:             q.LeadORM.WithContext(ctx),
		ResultORM:           q.ResultORM.WithContext(ctx),
		ReviewORM:           q.ReviewORM.WithContext(ctx),
		ScrapingJobORM:      q.ScrapingJobORM.WithContext(ctx),
		ScrapingWorkflowORM: q.ScrapingWorkflowORM.WithContext(ctx),
		WorkspaceORM:        q.WorkspaceORM.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
