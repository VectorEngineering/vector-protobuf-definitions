// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	lead_scraper_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/lead_scraper_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newLeadORM(db *gorm.DB, opts ...gen.DOOption) leadORM {
	_leadORM := leadORM{}

	_leadORM.leadORMDo.UseDB(db, opts...)
	_leadORM.leadORMDo.UseModel(&lead_scraper_servicev1.LeadORM{})

	tableName := _leadORM.leadORMDo.TableName()
	_leadORM.ALL = field.NewAsterisk(tableName)
	_leadORM.Address = field.NewString(tableName, "address")
	_leadORM.AlternatePhones = field.NewField(tableName, "alternate_phones")
	_leadORM.Amenities = field.NewField(tableName, "amenities")
	_leadORM.BusinessStatus = field.NewString(tableName, "business_status")
	_leadORM.BusinessType = field.NewString(tableName, "business_type")
	_leadORM.Certifications = field.NewField(tableName, "certifications")
	_leadORM.City = field.NewString(tableName, "city")
	_leadORM.CmsUsed = field.NewString(tableName, "cms_used")
	_leadORM.ContactEmail = field.NewString(tableName, "contact_email")
	_leadORM.ContactPersonName = field.NewString(tableName, "contact_person_name")
	_leadORM.ContactPersonTitle = field.NewString(tableName, "contact_person_title")
	_leadORM.Count_ = field.NewInt32(tableName, "count")
	_leadORM.Country = field.NewString(tableName, "country")
	_leadORM.CreatedAt = field.NewTime(tableName, "created_at")
	_leadORM.DataSourceVersion = field.NewString(tableName, "data_source_version")
	_leadORM.DeletedAt = field.NewTime(tableName, "deleted_at")
	_leadORM.EcommercePlatforms = field.NewField(tableName, "ecommerce_platforms")
	_leadORM.EmployeeCount = field.NewInt32(tableName, "employee_count")
	_leadORM.EnergySources = field.NewField(tableName, "energy_sources")
	_leadORM.EstimatedRevenue = field.NewInt64(tableName, "estimated_revenue")
	_leadORM.ExportControlStatus = field.NewString(tableName, "export_control_status")
	_leadORM.FoundedYear = field.NewInt32(tableName, "founded_year")
	_leadORM.FundingStage = field.NewString(tableName, "funding_stage")
	_leadORM.GoogleMapsUrl = field.NewString(tableName, "google_maps_url")
	_leadORM.GoogleMyBusinessCategory = field.NewString(tableName, "google_my_business_category")
	_leadORM.GoogleRating = field.NewFloat32(tableName, "google_rating")
	_leadORM.HasLitigationHistory = field.NewBool(tableName, "has_litigation_history")
	_leadORM.HasSslCertificate = field.NewBool(tableName, "has_ssl_certificate")
	_leadORM.Id = field.NewUint64(tableName, "id")
	_leadORM.Industry = field.NewString(tableName, "industry")
	_leadORM.IsFranchise = field.NewBool(tableName, "is_franchise")
	_leadORM.IsGreenCertified = field.NewBool(tableName, "is_green_certified")
	_leadORM.IsPublicCompany = field.NewBool(tableName, "is_public_company")
	_leadORM.LastProductLaunch = field.NewTime(tableName, "last_product_launch")
	_leadORM.LastUpdated = field.NewTime(tableName, "last_updated")
	_leadORM.Latitude = field.NewFloat64(tableName, "latitude")
	_leadORM.LicenseNumber = field.NewString(tableName, "license_number")
	_leadORM.Longitude = field.NewFloat64(tableName, "longitude")
	_leadORM.MainPhotoUrl = field.NewString(tableName, "main_photo_url")
	_leadORM.NaicsCode = field.NewString(tableName, "naics_code")
	_leadORM.Name = field.NewString(tableName, "name")
	_leadORM.NearbyLandmarks = field.NewField(tableName, "nearby_landmarks")
	_leadORM.Neighborhood = field.NewString(tableName, "neighborhood")
	_leadORM.OrgId = field.NewString(tableName, "org_id")
	_leadORM.OutdoorSeating = field.NewBool(tableName, "outdoor_seating")
	_leadORM.ParentCompany = field.NewString(tableName, "parent_company")
	_leadORM.ParkingAvailable = field.NewBool(tableName, "parking_available")
	_leadORM.PaymentMethods = field.NewField(tableName, "payment_methods")
	_leadORM.Phone = field.NewString(tableName, "phone")
	_leadORM.PhotoReferences = field.NewField(tableName, "photo_references")
	_leadORM.PlaceId = field.NewString(tableName, "place_id")
	_leadORM.Rating = field.NewFloat32(tableName, "rating")
	_leadORM.RatingCategory = field.NewString(tableName, "rating_category")
	_leadORM.RecentAnnouncements = field.NewField(tableName, "recent_announcements")
	_leadORM.RevenueRange = field.NewString(tableName, "revenue_range")
	_leadORM.ReviewCount = field.NewInt32(tableName, "review_count")
	_leadORM.ScrapingJobId = field.NewUint64(tableName, "scraping_job_id")
	_leadORM.ScrapingSessionId = field.NewString(tableName, "scraping_session_id")
	_leadORM.SeoKeywords = field.NewField(tableName, "seo_keywords")
	_leadORM.ServesVegetarianFood = field.NewBool(tableName, "serves_vegetarian_food")
	_leadORM.SicCode = field.NewString(tableName, "sic_code")
	_leadORM.State = field.NewString(tableName, "state")
	_leadORM.Subsidiaries = field.NewField(tableName, "subsidiaries")
	_leadORM.SustainabilityRating = field.NewString(tableName, "sustainability_rating")
	_leadORM.TenantId = field.NewString(tableName, "tenant_id")
	_leadORM.Timezone = field.NewString(tableName, "timezone")
	_leadORM.TransportationAccess = field.NewString(tableName, "transportation_access")
	_leadORM.Types = field.NewField(tableName, "types")
	_leadORM.UnspscCode = field.NewString(tableName, "unspsc_code")
	_leadORM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_leadORM.UsesGoogleAds = field.NewBool(tableName, "uses_google_ads")
	_leadORM.Website = field.NewString(tableName, "website")
	_leadORM.WebsiteLoadSpeed = field.NewFloat32(tableName, "website_load_speed")
	_leadORM.WheelchairAccessible = field.NewBool(tableName, "wheelchair_accessible")
	_leadORM.WorkspaceId = field.NewUint64(tableName, "workspace_id")
	_leadORM.RegularHours = leadORMHasManyRegularHours{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("RegularHours", "lead_scraper_servicev1.BusinessHoursORM"),
	}

	_leadORM.Reviews = leadORMHasManyReviews{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Reviews", "lead_scraper_servicev1.ReviewORM"),
	}

	_leadORM.SpecialHours = leadORMHasManySpecialHours{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SpecialHours", "lead_scraper_servicev1.BusinessHoursORM"),
	}

	_leadORM.Job = leadORMBelongsToJob{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Job", "lead_scraper_servicev1.ScrapingJobORM"),
		Leads: struct {
			field.RelationField
			Job struct {
				field.RelationField
			}
			Workspace struct {
				field.RelationField
				ApiKeys struct {
					field.RelationField
					Account struct {
						field.RelationField
						Settings struct {
							field.RelationField
						}
						Workspaces struct {
							field.RelationField
						}
					}
					Workspace struct {
						field.RelationField
					}
				}
				ScrapingJobs struct {
					field.RelationField
				}
				Webhooks struct {
					field.RelationField
				}
				Workflows struct {
					field.RelationField
					Workspace struct {
						field.RelationField
					}
					Jobs struct {
						field.RelationField
					}
				}
			}
			RegularHours struct {
				field.RelationField
			}
			Reviews struct {
				field.RelationField
			}
			SpecialHours struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Job.Leads", "lead_scraper_servicev1.LeadORM"),
			Job: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Job.Leads.Job", "lead_scraper_servicev1.ScrapingJobORM"),
			},
			Workspace: struct {
				field.RelationField
				ApiKeys struct {
					field.RelationField
					Account struct {
						field.RelationField
						Settings struct {
							field.RelationField
						}
						Workspaces struct {
							field.RelationField
						}
					}
					Workspace struct {
						field.RelationField
					}
				}
				ScrapingJobs struct {
					field.RelationField
				}
				Webhooks struct {
					field.RelationField
				}
				Workflows struct {
					field.RelationField
					Workspace struct {
						field.RelationField
					}
					Jobs struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("Job.Leads.Workspace", "lead_scraper_servicev1.WorkspaceORM"),
				ApiKeys: struct {
					field.RelationField
					Account struct {
						field.RelationField
						Settings struct {
							field.RelationField
						}
						Workspaces struct {
							field.RelationField
						}
					}
					Workspace struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Job.Leads.Workspace.ApiKeys", "lead_scraper_servicev1.APIKeyORM"),
					Account: struct {
						field.RelationField
						Settings struct {
							field.RelationField
						}
						Workspaces struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("Job.Leads.Workspace.ApiKeys.Account", "lead_scraper_servicev1.AccountORM"),
						Settings: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Job.Leads.Workspace.ApiKeys.Account.Settings", "lead_scraper_servicev1.AccountSettingsORM"),
						},
						Workspaces: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Job.Leads.Workspace.ApiKeys.Account.Workspaces", "lead_scraper_servicev1.WorkspaceORM"),
						},
					},
					Workspace: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Job.Leads.Workspace.ApiKeys.Workspace", "lead_scraper_servicev1.WorkspaceORM"),
					},
				},
				ScrapingJobs: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Job.Leads.Workspace.ScrapingJobs", "lead_scraper_servicev1.ScrapingJobORM"),
				},
				Webhooks: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Job.Leads.Workspace.Webhooks", "lead_scraper_servicev1.WebhookConfigORM"),
				},
				Workflows: struct {
					field.RelationField
					Workspace struct {
						field.RelationField
					}
					Jobs struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Job.Leads.Workspace.Workflows", "lead_scraper_servicev1.ScrapingWorkflowORM"),
					Workspace: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Job.Leads.Workspace.Workflows.Workspace", "lead_scraper_servicev1.WorkspaceORM"),
					},
					Jobs: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Job.Leads.Workspace.Workflows.Jobs", "lead_scraper_servicev1.ScrapingJobORM"),
					},
				},
			},
			RegularHours: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Job.Leads.RegularHours", "lead_scraper_servicev1.BusinessHoursORM"),
			},
			Reviews: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Job.Leads.Reviews", "lead_scraper_servicev1.ReviewORM"),
			},
			SpecialHours: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Job.Leads.SpecialHours", "lead_scraper_servicev1.BusinessHoursORM"),
			},
		},
	}

	_leadORM.Workspace = leadORMBelongsToWorkspace{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Workspace", "lead_scraper_servicev1.WorkspaceORM"),
	}

	_leadORM.fillFieldMap()

	return _leadORM
}

type leadORM struct {
	leadORMDo

	ALL                      field.Asterisk
	Address                  field.String
	AlternatePhones          field.Field
	Amenities                field.Field
	BusinessStatus           field.String
	BusinessType             field.String
	Certifications           field.Field
	City                     field.String
	CmsUsed                  field.String
	ContactEmail             field.String
	ContactPersonName        field.String
	ContactPersonTitle       field.String
	Count_                   field.Int32
	Country                  field.String
	CreatedAt                field.Time
	DataSourceVersion        field.String
	DeletedAt                field.Time
	EcommercePlatforms       field.Field
	EmployeeCount            field.Int32
	EnergySources            field.Field
	EstimatedRevenue         field.Int64
	ExportControlStatus      field.String
	FoundedYear              field.Int32
	FundingStage             field.String
	GoogleMapsUrl            field.String
	GoogleMyBusinessCategory field.String
	GoogleRating             field.Float32
	HasLitigationHistory     field.Bool
	HasSslCertificate        field.Bool
	Id                       field.Uint64
	Industry                 field.String
	IsFranchise              field.Bool
	IsGreenCertified         field.Bool
	IsPublicCompany          field.Bool
	LastProductLaunch        field.Time
	LastUpdated              field.Time
	Latitude                 field.Float64
	LicenseNumber            field.String
	Longitude                field.Float64
	MainPhotoUrl             field.String
	NaicsCode                field.String
	Name                     field.String
	NearbyLandmarks          field.Field
	Neighborhood             field.String
	OrgId                    field.String
	OutdoorSeating           field.Bool
	ParentCompany            field.String
	ParkingAvailable         field.Bool
	PaymentMethods           field.Field
	Phone                    field.String
	PhotoReferences          field.Field
	PlaceId                  field.String
	Rating                   field.Float32
	RatingCategory           field.String
	RecentAnnouncements      field.Field
	RevenueRange             field.String
	ReviewCount              field.Int32
	ScrapingJobId            field.Uint64
	ScrapingSessionId        field.String
	SeoKeywords              field.Field
	ServesVegetarianFood     field.Bool
	SicCode                  field.String
	State                    field.String
	Subsidiaries             field.Field
	SustainabilityRating     field.String
	TenantId                 field.String
	Timezone                 field.String
	TransportationAccess     field.String
	Types                    field.Field
	UnspscCode               field.String
	UpdatedAt                field.Time
	UsesGoogleAds            field.Bool
	Website                  field.String
	WebsiteLoadSpeed         field.Float32
	WheelchairAccessible     field.Bool
	WorkspaceId              field.Uint64
	RegularHours             leadORMHasManyRegularHours

	Reviews leadORMHasManyReviews

	SpecialHours leadORMHasManySpecialHours

	Job leadORMBelongsToJob

	Workspace leadORMBelongsToWorkspace

	fieldMap map[string]field.Expr
}

func (l leadORM) Table(newTableName string) *leadORM {
	l.leadORMDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l leadORM) As(alias string) *leadORM {
	l.leadORMDo.DO = *(l.leadORMDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *leadORM) updateTableName(table string) *leadORM {
	l.ALL = field.NewAsterisk(table)
	l.Address = field.NewString(table, "address")
	l.AlternatePhones = field.NewField(table, "alternate_phones")
	l.Amenities = field.NewField(table, "amenities")
	l.BusinessStatus = field.NewString(table, "business_status")
	l.BusinessType = field.NewString(table, "business_type")
	l.Certifications = field.NewField(table, "certifications")
	l.City = field.NewString(table, "city")
	l.CmsUsed = field.NewString(table, "cms_used")
	l.ContactEmail = field.NewString(table, "contact_email")
	l.ContactPersonName = field.NewString(table, "contact_person_name")
	l.ContactPersonTitle = field.NewString(table, "contact_person_title")
	l.Count_ = field.NewInt32(table, "count")
	l.Country = field.NewString(table, "country")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.DataSourceVersion = field.NewString(table, "data_source_version")
	l.DeletedAt = field.NewTime(table, "deleted_at")
	l.EcommercePlatforms = field.NewField(table, "ecommerce_platforms")
	l.EmployeeCount = field.NewInt32(table, "employee_count")
	l.EnergySources = field.NewField(table, "energy_sources")
	l.EstimatedRevenue = field.NewInt64(table, "estimated_revenue")
	l.ExportControlStatus = field.NewString(table, "export_control_status")
	l.FoundedYear = field.NewInt32(table, "founded_year")
	l.FundingStage = field.NewString(table, "funding_stage")
	l.GoogleMapsUrl = field.NewString(table, "google_maps_url")
	l.GoogleMyBusinessCategory = field.NewString(table, "google_my_business_category")
	l.GoogleRating = field.NewFloat32(table, "google_rating")
	l.HasLitigationHistory = field.NewBool(table, "has_litigation_history")
	l.HasSslCertificate = field.NewBool(table, "has_ssl_certificate")
	l.Id = field.NewUint64(table, "id")
	l.Industry = field.NewString(table, "industry")
	l.IsFranchise = field.NewBool(table, "is_franchise")
	l.IsGreenCertified = field.NewBool(table, "is_green_certified")
	l.IsPublicCompany = field.NewBool(table, "is_public_company")
	l.LastProductLaunch = field.NewTime(table, "last_product_launch")
	l.LastUpdated = field.NewTime(table, "last_updated")
	l.Latitude = field.NewFloat64(table, "latitude")
	l.LicenseNumber = field.NewString(table, "license_number")
	l.Longitude = field.NewFloat64(table, "longitude")
	l.MainPhotoUrl = field.NewString(table, "main_photo_url")
	l.NaicsCode = field.NewString(table, "naics_code")
	l.Name = field.NewString(table, "name")
	l.NearbyLandmarks = field.NewField(table, "nearby_landmarks")
	l.Neighborhood = field.NewString(table, "neighborhood")
	l.OrgId = field.NewString(table, "org_id")
	l.OutdoorSeating = field.NewBool(table, "outdoor_seating")
	l.ParentCompany = field.NewString(table, "parent_company")
	l.ParkingAvailable = field.NewBool(table, "parking_available")
	l.PaymentMethods = field.NewField(table, "payment_methods")
	l.Phone = field.NewString(table, "phone")
	l.PhotoReferences = field.NewField(table, "photo_references")
	l.PlaceId = field.NewString(table, "place_id")
	l.Rating = field.NewFloat32(table, "rating")
	l.RatingCategory = field.NewString(table, "rating_category")
	l.RecentAnnouncements = field.NewField(table, "recent_announcements")
	l.RevenueRange = field.NewString(table, "revenue_range")
	l.ReviewCount = field.NewInt32(table, "review_count")
	l.ScrapingJobId = field.NewUint64(table, "scraping_job_id")
	l.ScrapingSessionId = field.NewString(table, "scraping_session_id")
	l.SeoKeywords = field.NewField(table, "seo_keywords")
	l.ServesVegetarianFood = field.NewBool(table, "serves_vegetarian_food")
	l.SicCode = field.NewString(table, "sic_code")
	l.State = field.NewString(table, "state")
	l.Subsidiaries = field.NewField(table, "subsidiaries")
	l.SustainabilityRating = field.NewString(table, "sustainability_rating")
	l.TenantId = field.NewString(table, "tenant_id")
	l.Timezone = field.NewString(table, "timezone")
	l.TransportationAccess = field.NewString(table, "transportation_access")
	l.Types = field.NewField(table, "types")
	l.UnspscCode = field.NewString(table, "unspsc_code")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.UsesGoogleAds = field.NewBool(table, "uses_google_ads")
	l.Website = field.NewString(table, "website")
	l.WebsiteLoadSpeed = field.NewFloat32(table, "website_load_speed")
	l.WheelchairAccessible = field.NewBool(table, "wheelchair_accessible")
	l.WorkspaceId = field.NewUint64(table, "workspace_id")

	l.fillFieldMap()

	return l
}

func (l *leadORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *leadORM) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 80)
	l.fieldMap["address"] = l.Address
	l.fieldMap["alternate_phones"] = l.AlternatePhones
	l.fieldMap["amenities"] = l.Amenities
	l.fieldMap["business_status"] = l.BusinessStatus
	l.fieldMap["business_type"] = l.BusinessType
	l.fieldMap["certifications"] = l.Certifications
	l.fieldMap["city"] = l.City
	l.fieldMap["cms_used"] = l.CmsUsed
	l.fieldMap["contact_email"] = l.ContactEmail
	l.fieldMap["contact_person_name"] = l.ContactPersonName
	l.fieldMap["contact_person_title"] = l.ContactPersonTitle
	l.fieldMap["count"] = l.Count_
	l.fieldMap["country"] = l.Country
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["data_source_version"] = l.DataSourceVersion
	l.fieldMap["deleted_at"] = l.DeletedAt
	l.fieldMap["ecommerce_platforms"] = l.EcommercePlatforms
	l.fieldMap["employee_count"] = l.EmployeeCount
	l.fieldMap["energy_sources"] = l.EnergySources
	l.fieldMap["estimated_revenue"] = l.EstimatedRevenue
	l.fieldMap["export_control_status"] = l.ExportControlStatus
	l.fieldMap["founded_year"] = l.FoundedYear
	l.fieldMap["funding_stage"] = l.FundingStage
	l.fieldMap["google_maps_url"] = l.GoogleMapsUrl
	l.fieldMap["google_my_business_category"] = l.GoogleMyBusinessCategory
	l.fieldMap["google_rating"] = l.GoogleRating
	l.fieldMap["has_litigation_history"] = l.HasLitigationHistory
	l.fieldMap["has_ssl_certificate"] = l.HasSslCertificate
	l.fieldMap["id"] = l.Id
	l.fieldMap["industry"] = l.Industry
	l.fieldMap["is_franchise"] = l.IsFranchise
	l.fieldMap["is_green_certified"] = l.IsGreenCertified
	l.fieldMap["is_public_company"] = l.IsPublicCompany
	l.fieldMap["last_product_launch"] = l.LastProductLaunch
	l.fieldMap["last_updated"] = l.LastUpdated
	l.fieldMap["latitude"] = l.Latitude
	l.fieldMap["license_number"] = l.LicenseNumber
	l.fieldMap["longitude"] = l.Longitude
	l.fieldMap["main_photo_url"] = l.MainPhotoUrl
	l.fieldMap["naics_code"] = l.NaicsCode
	l.fieldMap["name"] = l.Name
	l.fieldMap["nearby_landmarks"] = l.NearbyLandmarks
	l.fieldMap["neighborhood"] = l.Neighborhood
	l.fieldMap["org_id"] = l.OrgId
	l.fieldMap["outdoor_seating"] = l.OutdoorSeating
	l.fieldMap["parent_company"] = l.ParentCompany
	l.fieldMap["parking_available"] = l.ParkingAvailable
	l.fieldMap["payment_methods"] = l.PaymentMethods
	l.fieldMap["phone"] = l.Phone
	l.fieldMap["photo_references"] = l.PhotoReferences
	l.fieldMap["place_id"] = l.PlaceId
	l.fieldMap["rating"] = l.Rating
	l.fieldMap["rating_category"] = l.RatingCategory
	l.fieldMap["recent_announcements"] = l.RecentAnnouncements
	l.fieldMap["revenue_range"] = l.RevenueRange
	l.fieldMap["review_count"] = l.ReviewCount
	l.fieldMap["scraping_job_id"] = l.ScrapingJobId
	l.fieldMap["scraping_session_id"] = l.ScrapingSessionId
	l.fieldMap["seo_keywords"] = l.SeoKeywords
	l.fieldMap["serves_vegetarian_food"] = l.ServesVegetarianFood
	l.fieldMap["sic_code"] = l.SicCode
	l.fieldMap["state"] = l.State
	l.fieldMap["subsidiaries"] = l.Subsidiaries
	l.fieldMap["sustainability_rating"] = l.SustainabilityRating
	l.fieldMap["tenant_id"] = l.TenantId
	l.fieldMap["timezone"] = l.Timezone
	l.fieldMap["transportation_access"] = l.TransportationAccess
	l.fieldMap["types"] = l.Types
	l.fieldMap["unspsc_code"] = l.UnspscCode
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["uses_google_ads"] = l.UsesGoogleAds
	l.fieldMap["website"] = l.Website
	l.fieldMap["website_load_speed"] = l.WebsiteLoadSpeed
	l.fieldMap["wheelchair_accessible"] = l.WheelchairAccessible
	l.fieldMap["workspace_id"] = l.WorkspaceId

}

func (l leadORM) clone(db *gorm.DB) leadORM {
	l.leadORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l leadORM) replaceDB(db *gorm.DB) leadORM {
	l.leadORMDo.ReplaceDB(db)
	return l
}

type leadORMHasManyRegularHours struct {
	db *gorm.DB

	field.RelationField
}

func (a leadORMHasManyRegularHours) Where(conds ...field.Expr) *leadORMHasManyRegularHours {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leadORMHasManyRegularHours) WithContext(ctx context.Context) *leadORMHasManyRegularHours {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leadORMHasManyRegularHours) Session(session *gorm.Session) *leadORMHasManyRegularHours {
	a.db = a.db.Session(session)
	return &a
}

func (a leadORMHasManyRegularHours) Model(m *lead_scraper_servicev1.LeadORM) *leadORMHasManyRegularHoursTx {
	return &leadORMHasManyRegularHoursTx{a.db.Model(m).Association(a.Name())}
}

type leadORMHasManyRegularHoursTx struct{ tx *gorm.Association }

func (a leadORMHasManyRegularHoursTx) Find() (result []*lead_scraper_servicev1.BusinessHoursORM, err error) {
	return result, a.tx.Find(&result)
}

func (a leadORMHasManyRegularHoursTx) Append(values ...*lead_scraper_servicev1.BusinessHoursORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leadORMHasManyRegularHoursTx) Replace(values ...*lead_scraper_servicev1.BusinessHoursORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leadORMHasManyRegularHoursTx) Delete(values ...*lead_scraper_servicev1.BusinessHoursORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leadORMHasManyRegularHoursTx) Clear() error {
	return a.tx.Clear()
}

func (a leadORMHasManyRegularHoursTx) Count() int64 {
	return a.tx.Count()
}

type leadORMHasManyReviews struct {
	db *gorm.DB

	field.RelationField
}

func (a leadORMHasManyReviews) Where(conds ...field.Expr) *leadORMHasManyReviews {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leadORMHasManyReviews) WithContext(ctx context.Context) *leadORMHasManyReviews {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leadORMHasManyReviews) Session(session *gorm.Session) *leadORMHasManyReviews {
	a.db = a.db.Session(session)
	return &a
}

func (a leadORMHasManyReviews) Model(m *lead_scraper_servicev1.LeadORM) *leadORMHasManyReviewsTx {
	return &leadORMHasManyReviewsTx{a.db.Model(m).Association(a.Name())}
}

type leadORMHasManyReviewsTx struct{ tx *gorm.Association }

func (a leadORMHasManyReviewsTx) Find() (result []*lead_scraper_servicev1.ReviewORM, err error) {
	return result, a.tx.Find(&result)
}

func (a leadORMHasManyReviewsTx) Append(values ...*lead_scraper_servicev1.ReviewORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leadORMHasManyReviewsTx) Replace(values ...*lead_scraper_servicev1.ReviewORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leadORMHasManyReviewsTx) Delete(values ...*lead_scraper_servicev1.ReviewORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leadORMHasManyReviewsTx) Clear() error {
	return a.tx.Clear()
}

func (a leadORMHasManyReviewsTx) Count() int64 {
	return a.tx.Count()
}

type leadORMHasManySpecialHours struct {
	db *gorm.DB

	field.RelationField
}

func (a leadORMHasManySpecialHours) Where(conds ...field.Expr) *leadORMHasManySpecialHours {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leadORMHasManySpecialHours) WithContext(ctx context.Context) *leadORMHasManySpecialHours {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leadORMHasManySpecialHours) Session(session *gorm.Session) *leadORMHasManySpecialHours {
	a.db = a.db.Session(session)
	return &a
}

func (a leadORMHasManySpecialHours) Model(m *lead_scraper_servicev1.LeadORM) *leadORMHasManySpecialHoursTx {
	return &leadORMHasManySpecialHoursTx{a.db.Model(m).Association(a.Name())}
}

type leadORMHasManySpecialHoursTx struct{ tx *gorm.Association }

func (a leadORMHasManySpecialHoursTx) Find() (result []*lead_scraper_servicev1.BusinessHoursORM, err error) {
	return result, a.tx.Find(&result)
}

func (a leadORMHasManySpecialHoursTx) Append(values ...*lead_scraper_servicev1.BusinessHoursORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leadORMHasManySpecialHoursTx) Replace(values ...*lead_scraper_servicev1.BusinessHoursORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leadORMHasManySpecialHoursTx) Delete(values ...*lead_scraper_servicev1.BusinessHoursORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leadORMHasManySpecialHoursTx) Clear() error {
	return a.tx.Clear()
}

func (a leadORMHasManySpecialHoursTx) Count() int64 {
	return a.tx.Count()
}

type leadORMBelongsToJob struct {
	db *gorm.DB

	field.RelationField

	Leads struct {
		field.RelationField
		Job struct {
			field.RelationField
		}
		Workspace struct {
			field.RelationField
			ApiKeys struct {
				field.RelationField
				Account struct {
					field.RelationField
					Settings struct {
						field.RelationField
					}
					Workspaces struct {
						field.RelationField
					}
				}
				Workspace struct {
					field.RelationField
				}
			}
			ScrapingJobs struct {
				field.RelationField
			}
			Webhooks struct {
				field.RelationField
			}
			Workflows struct {
				field.RelationField
				Workspace struct {
					field.RelationField
				}
				Jobs struct {
					field.RelationField
				}
			}
		}
		RegularHours struct {
			field.RelationField
		}
		Reviews struct {
			field.RelationField
		}
		SpecialHours struct {
			field.RelationField
		}
	}
}

func (a leadORMBelongsToJob) Where(conds ...field.Expr) *leadORMBelongsToJob {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leadORMBelongsToJob) WithContext(ctx context.Context) *leadORMBelongsToJob {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leadORMBelongsToJob) Session(session *gorm.Session) *leadORMBelongsToJob {
	a.db = a.db.Session(session)
	return &a
}

func (a leadORMBelongsToJob) Model(m *lead_scraper_servicev1.LeadORM) *leadORMBelongsToJobTx {
	return &leadORMBelongsToJobTx{a.db.Model(m).Association(a.Name())}
}

type leadORMBelongsToJobTx struct{ tx *gorm.Association }

func (a leadORMBelongsToJobTx) Find() (result *lead_scraper_servicev1.ScrapingJobORM, err error) {
	return result, a.tx.Find(&result)
}

func (a leadORMBelongsToJobTx) Append(values ...*lead_scraper_servicev1.ScrapingJobORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leadORMBelongsToJobTx) Replace(values ...*lead_scraper_servicev1.ScrapingJobORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leadORMBelongsToJobTx) Delete(values ...*lead_scraper_servicev1.ScrapingJobORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leadORMBelongsToJobTx) Clear() error {
	return a.tx.Clear()
}

func (a leadORMBelongsToJobTx) Count() int64 {
	return a.tx.Count()
}

type leadORMBelongsToWorkspace struct {
	db *gorm.DB

	field.RelationField
}

func (a leadORMBelongsToWorkspace) Where(conds ...field.Expr) *leadORMBelongsToWorkspace {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leadORMBelongsToWorkspace) WithContext(ctx context.Context) *leadORMBelongsToWorkspace {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leadORMBelongsToWorkspace) Session(session *gorm.Session) *leadORMBelongsToWorkspace {
	a.db = a.db.Session(session)
	return &a
}

func (a leadORMBelongsToWorkspace) Model(m *lead_scraper_servicev1.LeadORM) *leadORMBelongsToWorkspaceTx {
	return &leadORMBelongsToWorkspaceTx{a.db.Model(m).Association(a.Name())}
}

type leadORMBelongsToWorkspaceTx struct{ tx *gorm.Association }

func (a leadORMBelongsToWorkspaceTx) Find() (result *lead_scraper_servicev1.WorkspaceORM, err error) {
	return result, a.tx.Find(&result)
}

func (a leadORMBelongsToWorkspaceTx) Append(values ...*lead_scraper_servicev1.WorkspaceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leadORMBelongsToWorkspaceTx) Replace(values ...*lead_scraper_servicev1.WorkspaceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leadORMBelongsToWorkspaceTx) Delete(values ...*lead_scraper_servicev1.WorkspaceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leadORMBelongsToWorkspaceTx) Clear() error {
	return a.tx.Clear()
}

func (a leadORMBelongsToWorkspaceTx) Count() int64 {
	return a.tx.Count()
}

type leadORMDo struct{ gen.DO }

type ILeadORMDo interface {
	gen.SubQuery
	Debug() ILeadORMDo
	WithContext(ctx context.Context) ILeadORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILeadORMDo
	WriteDB() ILeadORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILeadORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILeadORMDo
	Not(conds ...gen.Condition) ILeadORMDo
	Or(conds ...gen.Condition) ILeadORMDo
	Select(conds ...field.Expr) ILeadORMDo
	Where(conds ...gen.Condition) ILeadORMDo
	Order(conds ...field.Expr) ILeadORMDo
	Distinct(cols ...field.Expr) ILeadORMDo
	Omit(cols ...field.Expr) ILeadORMDo
	Join(table schema.Tabler, on ...field.Expr) ILeadORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILeadORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILeadORMDo
	Group(cols ...field.Expr) ILeadORMDo
	Having(conds ...gen.Condition) ILeadORMDo
	Limit(limit int) ILeadORMDo
	Offset(offset int) ILeadORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILeadORMDo
	Unscoped() ILeadORMDo
	Create(values ...*lead_scraper_servicev1.LeadORM) error
	CreateInBatches(values []*lead_scraper_servicev1.LeadORM, batchSize int) error
	Save(values ...*lead_scraper_servicev1.LeadORM) error
	First() (*lead_scraper_servicev1.LeadORM, error)
	Take() (*lead_scraper_servicev1.LeadORM, error)
	Last() (*lead_scraper_servicev1.LeadORM, error)
	Find() ([]*lead_scraper_servicev1.LeadORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.LeadORM, err error)
	FindInBatches(result *[]*lead_scraper_servicev1.LeadORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*lead_scraper_servicev1.LeadORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILeadORMDo
	Assign(attrs ...field.AssignExpr) ILeadORMDo
	Joins(fields ...field.RelationField) ILeadORMDo
	Preload(fields ...field.RelationField) ILeadORMDo
	FirstOrInit() (*lead_scraper_servicev1.LeadORM, error)
	FirstOrCreate() (*lead_scraper_servicev1.LeadORM, error)
	FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.LeadORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILeadORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result lead_scraper_servicev1.LeadORM, err error)
	GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.LeadORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.LeadORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result lead_scraper_servicev1.LeadORM, err error)
	GetByIDs(ids []uint64) (result []lead_scraper_servicev1.LeadORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.LeadORM, err error)
	GetDeleted() (result []lead_scraper_servicev1.LeadORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	DeleteInBatch(ids []uint64, batchSize int) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.LeadORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.LeadORM, err error)
	FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.LeadORM, err error)
	GetDistinct(columnName string) (result []lead_scraper_servicev1.LeadORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.LeadORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.LeadORM, err error)
	ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.LeadORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.LeadORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (l leadORMDo) GetRecordByID(id uint64) (result lead_scraper_servicev1.LeadORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM leads ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (l leadORMDo) GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.LeadORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM leads ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (l leadORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM leads ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (l leadORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.LeadORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM leads ORDER BY " + l.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (l leadORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM leads ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (l leadORMDo) GetByID(id uint64) (result lead_scraper_servicev1.LeadORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM leads ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (l leadORMDo) GetByIDs(ids []uint64) (result []lead_scraper_servicev1.LeadORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM leads ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (l leadORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.LeadORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM leads ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + l.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (l leadORMDo) GetDeleted() (result []lead_scraper_servicev1.LeadORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM leads ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (l leadORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE leads SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (l leadORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE leads SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
// LIMIT @batchSize
func (l leadORMDo) DeleteInBatch(ids []uint64, batchSize int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM leads ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, batchSize)
	generateSQL.WriteString("LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (l leadORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.LeadORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM leads ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (l leadORMDo) FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.LeadORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM leads ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (l leadORMDo) FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.LeadORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM leads ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (l leadORMDo) GetDistinct(columnName string) (result []lead_scraper_servicev1.LeadORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM leads ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (l leadORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.LeadORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM leads ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (l leadORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE leads SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (l leadORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM leads ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (l leadORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM leads ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (l leadORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.LeadORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM leads ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (l leadORMDo) ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.LeadORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM leads ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM leads ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (l leadORMDo) ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.LeadORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM leads ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM leads ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (l leadORMDo) Debug() ILeadORMDo {
	return l.withDO(l.DO.Debug())
}

func (l leadORMDo) WithContext(ctx context.Context) ILeadORMDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l leadORMDo) ReadDB() ILeadORMDo {
	return l.Clauses(dbresolver.Read)
}

func (l leadORMDo) WriteDB() ILeadORMDo {
	return l.Clauses(dbresolver.Write)
}

func (l leadORMDo) Session(config *gorm.Session) ILeadORMDo {
	return l.withDO(l.DO.Session(config))
}

func (l leadORMDo) Clauses(conds ...clause.Expression) ILeadORMDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l leadORMDo) Returning(value interface{}, columns ...string) ILeadORMDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l leadORMDo) Not(conds ...gen.Condition) ILeadORMDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l leadORMDo) Or(conds ...gen.Condition) ILeadORMDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l leadORMDo) Select(conds ...field.Expr) ILeadORMDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l leadORMDo) Where(conds ...gen.Condition) ILeadORMDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l leadORMDo) Order(conds ...field.Expr) ILeadORMDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l leadORMDo) Distinct(cols ...field.Expr) ILeadORMDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l leadORMDo) Omit(cols ...field.Expr) ILeadORMDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l leadORMDo) Join(table schema.Tabler, on ...field.Expr) ILeadORMDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l leadORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILeadORMDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l leadORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ILeadORMDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l leadORMDo) Group(cols ...field.Expr) ILeadORMDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l leadORMDo) Having(conds ...gen.Condition) ILeadORMDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l leadORMDo) Limit(limit int) ILeadORMDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l leadORMDo) Offset(offset int) ILeadORMDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l leadORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILeadORMDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l leadORMDo) Unscoped() ILeadORMDo {
	return l.withDO(l.DO.Unscoped())
}

func (l leadORMDo) Create(values ...*lead_scraper_servicev1.LeadORM) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l leadORMDo) CreateInBatches(values []*lead_scraper_servicev1.LeadORM, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l leadORMDo) Save(values ...*lead_scraper_servicev1.LeadORM) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l leadORMDo) First() (*lead_scraper_servicev1.LeadORM, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.LeadORM), nil
	}
}

func (l leadORMDo) Take() (*lead_scraper_servicev1.LeadORM, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.LeadORM), nil
	}
}

func (l leadORMDo) Last() (*lead_scraper_servicev1.LeadORM, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.LeadORM), nil
	}
}

func (l leadORMDo) Find() ([]*lead_scraper_servicev1.LeadORM, error) {
	result, err := l.DO.Find()
	return result.([]*lead_scraper_servicev1.LeadORM), err
}

func (l leadORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.LeadORM, err error) {
	buf := make([]*lead_scraper_servicev1.LeadORM, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l leadORMDo) FindInBatches(result *[]*lead_scraper_servicev1.LeadORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l leadORMDo) Attrs(attrs ...field.AssignExpr) ILeadORMDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l leadORMDo) Assign(attrs ...field.AssignExpr) ILeadORMDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l leadORMDo) Joins(fields ...field.RelationField) ILeadORMDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l leadORMDo) Preload(fields ...field.RelationField) ILeadORMDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l leadORMDo) FirstOrInit() (*lead_scraper_servicev1.LeadORM, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.LeadORM), nil
	}
}

func (l leadORMDo) FirstOrCreate() (*lead_scraper_servicev1.LeadORM, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.LeadORM), nil
	}
}

func (l leadORMDo) FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.LeadORM, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l leadORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l leadORMDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l leadORMDo) Delete(models ...*lead_scraper_servicev1.LeadORM) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *leadORMDo) withDO(do gen.Dao) *leadORMDo {
	l.DO = *do.(*gen.DO)
	return l
}
