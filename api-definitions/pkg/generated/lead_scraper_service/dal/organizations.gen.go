// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	lead_scraper_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/lead_scraper_service/v1"

	"time"
)

func newOrganizationORM(db *gorm.DB, opts ...gen.DOOption) organizationORM {
	_organizationORM := organizationORM{}

	_organizationORM.organizationORMDo.UseDB(db, opts...)
	_organizationORM.organizationORMDo.UseModel(&lead_scraper_servicev1.OrganizationORM{})

	tableName := _organizationORM.organizationORMDo.TableName()
	_organizationORM.ALL = field.NewAsterisk(tableName)
	_organizationORM.Address = field.NewString(tableName, "address")
	_organizationORM.AllowedDomains = field.NewField(tableName, "allowed_domains")
	_organizationORM.AutoBilling = field.NewBool(tableName, "auto_billing")
	_organizationORM.BillingCurrency = field.NewString(tableName, "billing_currency")
	_organizationORM.BillingEmail = field.NewString(tableName, "billing_email")
	_organizationORM.BillingPlan = field.NewString(tableName, "billing_plan")
	_organizationORM.ComplianceFrameworks = field.NewField(tableName, "compliance_frameworks")
	_organizationORM.CreatedAt = field.NewTime(tableName, "created_at")
	_organizationORM.CreatedBy = field.NewString(tableName, "created_by")
	_organizationORM.DataProcessingAgreement = field.NewBool(tableName, "data_processing_agreement")
	_organizationORM.DataRegion = field.NewString(tableName, "data_region")
	_organizationORM.DeletedAt = field.NewTime(tableName, "deleted_at")
	_organizationORM.Description = field.NewString(tableName, "description")
	_organizationORM.DisplayName = field.NewString(tableName, "display_name")
	_organizationORM.Enforce_2Fa = field.NewBool(tableName, "enforce_2_fa")
	_organizationORM.Id = field.NewUint64(tableName, "id")
	_organizationORM.MaxApiKeys = field.NewInt32(tableName, "max_api_keys")
	_organizationORM.MaxTenants = field.NewInt32(tableName, "max_tenants")
	_organizationORM.MaxUsers = field.NewInt32(tableName, "max_users")
	_organizationORM.Name = field.NewString(tableName, "name")
	_organizationORM.Phone = field.NewString(tableName, "phone")
	_organizationORM.SsoDomain = field.NewString(tableName, "sso_domain")
	_organizationORM.SsoEnabled = field.NewBool(tableName, "sso_enabled")
	_organizationORM.SsoProvider = field.NewString(tableName, "sso_provider")
	_organizationORM.Status = field.NewString(tableName, "status")
	_organizationORM.TaxId = field.NewString(tableName, "tax_id")
	_organizationORM.TechnicalEmail = field.NewString(tableName, "technical_email")
	_organizationORM.TotalStorageLimit = field.NewInt64(tableName, "total_storage_limit")
	_organizationORM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_organizationORM.Website = field.NewString(tableName, "website")
	_organizationORM.Subscriptions = organizationORMHasOneSubscriptions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Subscriptions", "lead_scraper_servicev1.SubscriptionORM"),
	}

	_organizationORM.Tenants = organizationORMHasManyTenants{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Tenants", "lead_scraper_servicev1.TenantORM"),
		Accounts: struct {
			field.RelationField
			Settings struct {
				field.RelationField
			}
			Workspaces struct {
				field.RelationField
				ApiKeys struct {
					field.RelationField
				}
				ScrapingJobs struct {
					field.RelationField
					Leads struct {
						field.RelationField
						RegularHours struct {
							field.RelationField
						}
						Reviews struct {
							field.RelationField
						}
						SpecialHours struct {
							field.RelationField
						}
					}
				}
				Webhooks struct {
					field.RelationField
				}
				Workflows struct {
					field.RelationField
					Jobs struct {
						field.RelationField
					}
				}
			}
		}{
			RelationField: field.NewRelation("Tenants.Accounts", "lead_scraper_servicev1.AccountORM"),
			Settings: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Tenants.Accounts.Settings", "lead_scraper_servicev1.AccountSettingsORM"),
			},
			Workspaces: struct {
				field.RelationField
				ApiKeys struct {
					field.RelationField
				}
				ScrapingJobs struct {
					field.RelationField
					Leads struct {
						field.RelationField
						RegularHours struct {
							field.RelationField
						}
						Reviews struct {
							field.RelationField
						}
						SpecialHours struct {
							field.RelationField
						}
					}
				}
				Webhooks struct {
					field.RelationField
				}
				Workflows struct {
					field.RelationField
					Jobs struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("Tenants.Accounts.Workspaces", "lead_scraper_servicev1.WorkspaceORM"),
				ApiKeys: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Tenants.Accounts.Workspaces.ApiKeys", "lead_scraper_servicev1.APIKeyORM"),
				},
				ScrapingJobs: struct {
					field.RelationField
					Leads struct {
						field.RelationField
						RegularHours struct {
							field.RelationField
						}
						Reviews struct {
							field.RelationField
						}
						SpecialHours struct {
							field.RelationField
						}
					}
				}{
					RelationField: field.NewRelation("Tenants.Accounts.Workspaces.ScrapingJobs", "lead_scraper_servicev1.ScrapingJobORM"),
					Leads: struct {
						field.RelationField
						RegularHours struct {
							field.RelationField
						}
						Reviews struct {
							field.RelationField
						}
						SpecialHours struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("Tenants.Accounts.Workspaces.ScrapingJobs.Leads", "lead_scraper_servicev1.LeadORM"),
						RegularHours: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Tenants.Accounts.Workspaces.ScrapingJobs.Leads.RegularHours", "lead_scraper_servicev1.BusinessHoursORM"),
						},
						Reviews: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Tenants.Accounts.Workspaces.ScrapingJobs.Leads.Reviews", "lead_scraper_servicev1.ReviewORM"),
						},
						SpecialHours: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Tenants.Accounts.Workspaces.ScrapingJobs.Leads.SpecialHours", "lead_scraper_servicev1.BusinessHoursORM"),
						},
					},
				},
				Webhooks: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Tenants.Accounts.Workspaces.Webhooks", "lead_scraper_servicev1.WebhookConfigORM"),
				},
				Workflows: struct {
					field.RelationField
					Jobs struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Tenants.Accounts.Workspaces.Workflows", "lead_scraper_servicev1.ScrapingWorkflowORM"),
					Jobs: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Tenants.Accounts.Workspaces.Workflows.Jobs", "lead_scraper_servicev1.ScrapingJobORM"),
					},
				},
			},
		},
		ApiKeys: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Tenants.ApiKeys", "lead_scraper_servicev1.TenantAPIKeyORM"),
		},
	}

	_organizationORM.fillFieldMap()

	return _organizationORM
}

type organizationORM struct {
	organizationORMDo

	ALL                     field.Asterisk
	Address                 field.String
	AllowedDomains          field.Field
	AutoBilling             field.Bool
	BillingCurrency         field.String
	BillingEmail            field.String
	BillingPlan             field.String
	ComplianceFrameworks    field.Field
	CreatedAt               field.Time
	CreatedBy               field.String
	DataProcessingAgreement field.Bool
	DataRegion              field.String
	DeletedAt               field.Time
	Description             field.String
	DisplayName             field.String
	Enforce_2Fa             field.Bool
	Id                      field.Uint64
	MaxApiKeys              field.Int32
	MaxTenants              field.Int32
	MaxUsers                field.Int32
	Name                    field.String
	Phone                   field.String
	SsoDomain               field.String
	SsoEnabled              field.Bool
	SsoProvider             field.String
	Status                  field.String
	TaxId                   field.String
	TechnicalEmail          field.String
	TotalStorageLimit       field.Int64
	UpdatedAt               field.Time
	Website                 field.String
	Subscriptions           organizationORMHasOneSubscriptions

	Tenants organizationORMHasManyTenants

	fieldMap map[string]field.Expr
}

func (o organizationORM) Table(newTableName string) *organizationORM {
	o.organizationORMDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o organizationORM) As(alias string) *organizationORM {
	o.organizationORMDo.DO = *(o.organizationORMDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *organizationORM) updateTableName(table string) *organizationORM {
	o.ALL = field.NewAsterisk(table)
	o.Address = field.NewString(table, "address")
	o.AllowedDomains = field.NewField(table, "allowed_domains")
	o.AutoBilling = field.NewBool(table, "auto_billing")
	o.BillingCurrency = field.NewString(table, "billing_currency")
	o.BillingEmail = field.NewString(table, "billing_email")
	o.BillingPlan = field.NewString(table, "billing_plan")
	o.ComplianceFrameworks = field.NewField(table, "compliance_frameworks")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.CreatedBy = field.NewString(table, "created_by")
	o.DataProcessingAgreement = field.NewBool(table, "data_processing_agreement")
	o.DataRegion = field.NewString(table, "data_region")
	o.DeletedAt = field.NewTime(table, "deleted_at")
	o.Description = field.NewString(table, "description")
	o.DisplayName = field.NewString(table, "display_name")
	o.Enforce_2Fa = field.NewBool(table, "enforce_2_fa")
	o.Id = field.NewUint64(table, "id")
	o.MaxApiKeys = field.NewInt32(table, "max_api_keys")
	o.MaxTenants = field.NewInt32(table, "max_tenants")
	o.MaxUsers = field.NewInt32(table, "max_users")
	o.Name = field.NewString(table, "name")
	o.Phone = field.NewString(table, "phone")
	o.SsoDomain = field.NewString(table, "sso_domain")
	o.SsoEnabled = field.NewBool(table, "sso_enabled")
	o.SsoProvider = field.NewString(table, "sso_provider")
	o.Status = field.NewString(table, "status")
	o.TaxId = field.NewString(table, "tax_id")
	o.TechnicalEmail = field.NewString(table, "technical_email")
	o.TotalStorageLimit = field.NewInt64(table, "total_storage_limit")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.Website = field.NewString(table, "website")

	o.fillFieldMap()

	return o
}

func (o *organizationORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *organizationORM) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 32)
	o.fieldMap["address"] = o.Address
	o.fieldMap["allowed_domains"] = o.AllowedDomains
	o.fieldMap["auto_billing"] = o.AutoBilling
	o.fieldMap["billing_currency"] = o.BillingCurrency
	o.fieldMap["billing_email"] = o.BillingEmail
	o.fieldMap["billing_plan"] = o.BillingPlan
	o.fieldMap["compliance_frameworks"] = o.ComplianceFrameworks
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["created_by"] = o.CreatedBy
	o.fieldMap["data_processing_agreement"] = o.DataProcessingAgreement
	o.fieldMap["data_region"] = o.DataRegion
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["description"] = o.Description
	o.fieldMap["display_name"] = o.DisplayName
	o.fieldMap["enforce_2_fa"] = o.Enforce_2Fa
	o.fieldMap["id"] = o.Id
	o.fieldMap["max_api_keys"] = o.MaxApiKeys
	o.fieldMap["max_tenants"] = o.MaxTenants
	o.fieldMap["max_users"] = o.MaxUsers
	o.fieldMap["name"] = o.Name
	o.fieldMap["phone"] = o.Phone
	o.fieldMap["sso_domain"] = o.SsoDomain
	o.fieldMap["sso_enabled"] = o.SsoEnabled
	o.fieldMap["sso_provider"] = o.SsoProvider
	o.fieldMap["status"] = o.Status
	o.fieldMap["tax_id"] = o.TaxId
	o.fieldMap["technical_email"] = o.TechnicalEmail
	o.fieldMap["total_storage_limit"] = o.TotalStorageLimit
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["website"] = o.Website

}

func (o organizationORM) clone(db *gorm.DB) organizationORM {
	o.organizationORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o organizationORM) replaceDB(db *gorm.DB) organizationORM {
	o.organizationORMDo.ReplaceDB(db)
	return o
}

type organizationORMHasOneSubscriptions struct {
	db *gorm.DB

	field.RelationField
}

func (a organizationORMHasOneSubscriptions) Where(conds ...field.Expr) *organizationORMHasOneSubscriptions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a organizationORMHasOneSubscriptions) WithContext(ctx context.Context) *organizationORMHasOneSubscriptions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a organizationORMHasOneSubscriptions) Session(session *gorm.Session) *organizationORMHasOneSubscriptions {
	a.db = a.db.Session(session)
	return &a
}

func (a organizationORMHasOneSubscriptions) Model(m *lead_scraper_servicev1.OrganizationORM) *organizationORMHasOneSubscriptionsTx {
	return &organizationORMHasOneSubscriptionsTx{a.db.Model(m).Association(a.Name())}
}

type organizationORMHasOneSubscriptionsTx struct{ tx *gorm.Association }

func (a organizationORMHasOneSubscriptionsTx) Find() (result *lead_scraper_servicev1.SubscriptionORM, err error) {
	return result, a.tx.Find(&result)
}

func (a organizationORMHasOneSubscriptionsTx) Append(values ...*lead_scraper_servicev1.SubscriptionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a organizationORMHasOneSubscriptionsTx) Replace(values ...*lead_scraper_servicev1.SubscriptionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a organizationORMHasOneSubscriptionsTx) Delete(values ...*lead_scraper_servicev1.SubscriptionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a organizationORMHasOneSubscriptionsTx) Clear() error {
	return a.tx.Clear()
}

func (a organizationORMHasOneSubscriptionsTx) Count() int64 {
	return a.tx.Count()
}

type organizationORMHasManyTenants struct {
	db *gorm.DB

	field.RelationField

	Accounts struct {
		field.RelationField
		Settings struct {
			field.RelationField
		}
		Workspaces struct {
			field.RelationField
			ApiKeys struct {
				field.RelationField
			}
			ScrapingJobs struct {
				field.RelationField
				Leads struct {
					field.RelationField
					RegularHours struct {
						field.RelationField
					}
					Reviews struct {
						field.RelationField
					}
					SpecialHours struct {
						field.RelationField
					}
				}
			}
			Webhooks struct {
				field.RelationField
			}
			Workflows struct {
				field.RelationField
				Jobs struct {
					field.RelationField
				}
			}
		}
	}
	ApiKeys struct {
		field.RelationField
	}
}

func (a organizationORMHasManyTenants) Where(conds ...field.Expr) *organizationORMHasManyTenants {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a organizationORMHasManyTenants) WithContext(ctx context.Context) *organizationORMHasManyTenants {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a organizationORMHasManyTenants) Session(session *gorm.Session) *organizationORMHasManyTenants {
	a.db = a.db.Session(session)
	return &a
}

func (a organizationORMHasManyTenants) Model(m *lead_scraper_servicev1.OrganizationORM) *organizationORMHasManyTenantsTx {
	return &organizationORMHasManyTenantsTx{a.db.Model(m).Association(a.Name())}
}

type organizationORMHasManyTenantsTx struct{ tx *gorm.Association }

func (a organizationORMHasManyTenantsTx) Find() (result []*lead_scraper_servicev1.TenantORM, err error) {
	return result, a.tx.Find(&result)
}

func (a organizationORMHasManyTenantsTx) Append(values ...*lead_scraper_servicev1.TenantORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a organizationORMHasManyTenantsTx) Replace(values ...*lead_scraper_servicev1.TenantORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a organizationORMHasManyTenantsTx) Delete(values ...*lead_scraper_servicev1.TenantORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a organizationORMHasManyTenantsTx) Clear() error {
	return a.tx.Clear()
}

func (a organizationORMHasManyTenantsTx) Count() int64 {
	return a.tx.Count()
}

type organizationORMDo struct{ gen.DO }

type IOrganizationORMDo interface {
	gen.SubQuery
	Debug() IOrganizationORMDo
	WithContext(ctx context.Context) IOrganizationORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrganizationORMDo
	WriteDB() IOrganizationORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrganizationORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrganizationORMDo
	Not(conds ...gen.Condition) IOrganizationORMDo
	Or(conds ...gen.Condition) IOrganizationORMDo
	Select(conds ...field.Expr) IOrganizationORMDo
	Where(conds ...gen.Condition) IOrganizationORMDo
	Order(conds ...field.Expr) IOrganizationORMDo
	Distinct(cols ...field.Expr) IOrganizationORMDo
	Omit(cols ...field.Expr) IOrganizationORMDo
	Join(table schema.Tabler, on ...field.Expr) IOrganizationORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrganizationORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrganizationORMDo
	Group(cols ...field.Expr) IOrganizationORMDo
	Having(conds ...gen.Condition) IOrganizationORMDo
	Limit(limit int) IOrganizationORMDo
	Offset(offset int) IOrganizationORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrganizationORMDo
	Unscoped() IOrganizationORMDo
	Create(values ...*lead_scraper_servicev1.OrganizationORM) error
	CreateInBatches(values []*lead_scraper_servicev1.OrganizationORM, batchSize int) error
	Save(values ...*lead_scraper_servicev1.OrganizationORM) error
	First() (*lead_scraper_servicev1.OrganizationORM, error)
	Take() (*lead_scraper_servicev1.OrganizationORM, error)
	Last() (*lead_scraper_servicev1.OrganizationORM, error)
	Find() ([]*lead_scraper_servicev1.OrganizationORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.OrganizationORM, err error)
	FindInBatches(result *[]*lead_scraper_servicev1.OrganizationORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*lead_scraper_servicev1.OrganizationORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrganizationORMDo
	Assign(attrs ...field.AssignExpr) IOrganizationORMDo
	Joins(fields ...field.RelationField) IOrganizationORMDo
	Preload(fields ...field.RelationField) IOrganizationORMDo
	FirstOrInit() (*lead_scraper_servicev1.OrganizationORM, error)
	FirstOrCreate() (*lead_scraper_servicev1.OrganizationORM, error)
	FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.OrganizationORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrganizationORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result lead_scraper_servicev1.OrganizationORM, err error)
	GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.OrganizationORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.OrganizationORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result lead_scraper_servicev1.OrganizationORM, err error)
	GetByIDs(ids []uint64) (result []lead_scraper_servicev1.OrganizationORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.OrganizationORM, err error)
	GetDeleted() (result []lead_scraper_servicev1.OrganizationORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	DeleteInBatch(ids []uint64, batchSize int) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.OrganizationORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.OrganizationORM, err error)
	FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.OrganizationORM, err error)
	GetDistinct(columnName string) (result []lead_scraper_servicev1.OrganizationORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.OrganizationORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.OrganizationORM, err error)
	ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.OrganizationORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.OrganizationORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (o organizationORMDo) GetRecordByID(id uint64) (result lead_scraper_servicev1.OrganizationORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM organizations ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (o organizationORMDo) GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.OrganizationORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM organizations ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (o organizationORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM organizations ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (o organizationORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.OrganizationORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM organizations ORDER BY " + o.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (o organizationORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM organizations ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (o organizationORMDo) GetByID(id uint64) (result lead_scraper_servicev1.OrganizationORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM organizations ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (o organizationORMDo) GetByIDs(ids []uint64) (result []lead_scraper_servicev1.OrganizationORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM organizations ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (o organizationORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.OrganizationORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM organizations ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + o.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (o organizationORMDo) GetDeleted() (result []lead_scraper_servicev1.OrganizationORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM organizations ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (o organizationORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE organizations SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (o organizationORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE organizations SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
// LIMIT @batchSize
func (o organizationORMDo) DeleteInBatch(ids []uint64, batchSize int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM organizations ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, batchSize)
	generateSQL.WriteString("LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (o organizationORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.OrganizationORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM organizations ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (o organizationORMDo) FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.OrganizationORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM organizations ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (o organizationORMDo) FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.OrganizationORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM organizations ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (o organizationORMDo) GetDistinct(columnName string) (result []lead_scraper_servicev1.OrganizationORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM organizations ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (o organizationORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.OrganizationORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM organizations ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (o organizationORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE organizations SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (o organizationORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM organizations ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (o organizationORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM organizations ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (o organizationORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.OrganizationORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM organizations ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (o organizationORMDo) ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.OrganizationORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM organizations ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM organizations ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (o organizationORMDo) ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.OrganizationORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM organizations ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM organizations ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (o organizationORMDo) Debug() IOrganizationORMDo {
	return o.withDO(o.DO.Debug())
}

func (o organizationORMDo) WithContext(ctx context.Context) IOrganizationORMDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o organizationORMDo) ReadDB() IOrganizationORMDo {
	return o.Clauses(dbresolver.Read)
}

func (o organizationORMDo) WriteDB() IOrganizationORMDo {
	return o.Clauses(dbresolver.Write)
}

func (o organizationORMDo) Session(config *gorm.Session) IOrganizationORMDo {
	return o.withDO(o.DO.Session(config))
}

func (o organizationORMDo) Clauses(conds ...clause.Expression) IOrganizationORMDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o organizationORMDo) Returning(value interface{}, columns ...string) IOrganizationORMDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o organizationORMDo) Not(conds ...gen.Condition) IOrganizationORMDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o organizationORMDo) Or(conds ...gen.Condition) IOrganizationORMDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o organizationORMDo) Select(conds ...field.Expr) IOrganizationORMDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o organizationORMDo) Where(conds ...gen.Condition) IOrganizationORMDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o organizationORMDo) Order(conds ...field.Expr) IOrganizationORMDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o organizationORMDo) Distinct(cols ...field.Expr) IOrganizationORMDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o organizationORMDo) Omit(cols ...field.Expr) IOrganizationORMDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o organizationORMDo) Join(table schema.Tabler, on ...field.Expr) IOrganizationORMDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o organizationORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrganizationORMDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o organizationORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrganizationORMDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o organizationORMDo) Group(cols ...field.Expr) IOrganizationORMDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o organizationORMDo) Having(conds ...gen.Condition) IOrganizationORMDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o organizationORMDo) Limit(limit int) IOrganizationORMDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o organizationORMDo) Offset(offset int) IOrganizationORMDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o organizationORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrganizationORMDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o organizationORMDo) Unscoped() IOrganizationORMDo {
	return o.withDO(o.DO.Unscoped())
}

func (o organizationORMDo) Create(values ...*lead_scraper_servicev1.OrganizationORM) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o organizationORMDo) CreateInBatches(values []*lead_scraper_servicev1.OrganizationORM, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o organizationORMDo) Save(values ...*lead_scraper_servicev1.OrganizationORM) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o organizationORMDo) First() (*lead_scraper_servicev1.OrganizationORM, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.OrganizationORM), nil
	}
}

func (o organizationORMDo) Take() (*lead_scraper_servicev1.OrganizationORM, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.OrganizationORM), nil
	}
}

func (o organizationORMDo) Last() (*lead_scraper_servicev1.OrganizationORM, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.OrganizationORM), nil
	}
}

func (o organizationORMDo) Find() ([]*lead_scraper_servicev1.OrganizationORM, error) {
	result, err := o.DO.Find()
	return result.([]*lead_scraper_servicev1.OrganizationORM), err
}

func (o organizationORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.OrganizationORM, err error) {
	buf := make([]*lead_scraper_servicev1.OrganizationORM, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o organizationORMDo) FindInBatches(result *[]*lead_scraper_servicev1.OrganizationORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o organizationORMDo) Attrs(attrs ...field.AssignExpr) IOrganizationORMDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o organizationORMDo) Assign(attrs ...field.AssignExpr) IOrganizationORMDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o organizationORMDo) Joins(fields ...field.RelationField) IOrganizationORMDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o organizationORMDo) Preload(fields ...field.RelationField) IOrganizationORMDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o organizationORMDo) FirstOrInit() (*lead_scraper_servicev1.OrganizationORM, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.OrganizationORM), nil
	}
}

func (o organizationORMDo) FirstOrCreate() (*lead_scraper_servicev1.OrganizationORM, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.OrganizationORM), nil
	}
}

func (o organizationORMDo) FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.OrganizationORM, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o organizationORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o organizationORMDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o organizationORMDo) Delete(models ...*lead_scraper_servicev1.OrganizationORM) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *organizationORMDo) withDO(do gen.Dao) *organizationORMDo {
	o.DO = *do.(*gen.DO)
	return o
}
