// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	lead_scraper_servicev1 "github.com/Vector/vector-protobuf-definitions/api-definitions/pkg/generated/lead_scraper_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newReviewORM(db *gorm.DB, opts ...gen.DOOption) reviewORM {
	_reviewORM := reviewORM{}

	_reviewORM.reviewORMDo.UseDB(db, opts...)
	_reviewORM.reviewORMDo.UseModel(&lead_scraper_servicev1.ReviewORM{})

	tableName := _reviewORM.reviewORMDo.TableName()
	_reviewORM.ALL = field.NewAsterisk(tableName)
	_reviewORM.Author = field.NewString(tableName, "author")
	_reviewORM.CreatedAt = field.NewTime(tableName, "created_at")
	_reviewORM.DeletedAt = field.NewTime(tableName, "deleted_at")
	_reviewORM.Id = field.NewUint64(tableName, "id")
	_reviewORM.Language = field.NewString(tableName, "language")
	_reviewORM.LeadId = field.NewUint64(tableName, "lead_id")
	_reviewORM.ProfilePhotoUrl = field.NewString(tableName, "profile_photo_url")
	_reviewORM.Rating = field.NewFloat32(tableName, "rating")
	_reviewORM.ReviewCount = field.NewInt32(tableName, "review_count")
	_reviewORM.Text = field.NewString(tableName, "text")
	_reviewORM.Time = field.NewTime(tableName, "time")
	_reviewORM.UpdatedAt = field.NewTime(tableName, "updated_at")

	_reviewORM.fillFieldMap()

	return _reviewORM
}

type reviewORM struct {
	reviewORMDo

	ALL             field.Asterisk
	Author          field.String
	CreatedAt       field.Time
	DeletedAt       field.Time
	Id              field.Uint64
	Language        field.String
	LeadId          field.Uint64
	ProfilePhotoUrl field.String
	Rating          field.Float32
	ReviewCount     field.Int32
	Text            field.String
	Time            field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (r reviewORM) Table(newTableName string) *reviewORM {
	r.reviewORMDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reviewORM) As(alias string) *reviewORM {
	r.reviewORMDo.DO = *(r.reviewORMDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reviewORM) updateTableName(table string) *reviewORM {
	r.ALL = field.NewAsterisk(table)
	r.Author = field.NewString(table, "author")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.DeletedAt = field.NewTime(table, "deleted_at")
	r.Id = field.NewUint64(table, "id")
	r.Language = field.NewString(table, "language")
	r.LeadId = field.NewUint64(table, "lead_id")
	r.ProfilePhotoUrl = field.NewString(table, "profile_photo_url")
	r.Rating = field.NewFloat32(table, "rating")
	r.ReviewCount = field.NewInt32(table, "review_count")
	r.Text = field.NewString(table, "text")
	r.Time = field.NewTime(table, "time")
	r.UpdatedAt = field.NewTime(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *reviewORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reviewORM) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 12)
	r.fieldMap["author"] = r.Author
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["id"] = r.Id
	r.fieldMap["language"] = r.Language
	r.fieldMap["lead_id"] = r.LeadId
	r.fieldMap["profile_photo_url"] = r.ProfilePhotoUrl
	r.fieldMap["rating"] = r.Rating
	r.fieldMap["review_count"] = r.ReviewCount
	r.fieldMap["text"] = r.Text
	r.fieldMap["time"] = r.Time
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r reviewORM) clone(db *gorm.DB) reviewORM {
	r.reviewORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reviewORM) replaceDB(db *gorm.DB) reviewORM {
	r.reviewORMDo.ReplaceDB(db)
	return r
}

type reviewORMDo struct{ gen.DO }

type IReviewORMDo interface {
	gen.SubQuery
	Debug() IReviewORMDo
	WithContext(ctx context.Context) IReviewORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReviewORMDo
	WriteDB() IReviewORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReviewORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReviewORMDo
	Not(conds ...gen.Condition) IReviewORMDo
	Or(conds ...gen.Condition) IReviewORMDo
	Select(conds ...field.Expr) IReviewORMDo
	Where(conds ...gen.Condition) IReviewORMDo
	Order(conds ...field.Expr) IReviewORMDo
	Distinct(cols ...field.Expr) IReviewORMDo
	Omit(cols ...field.Expr) IReviewORMDo
	Join(table schema.Tabler, on ...field.Expr) IReviewORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReviewORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReviewORMDo
	Group(cols ...field.Expr) IReviewORMDo
	Having(conds ...gen.Condition) IReviewORMDo
	Limit(limit int) IReviewORMDo
	Offset(offset int) IReviewORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReviewORMDo
	Unscoped() IReviewORMDo
	Create(values ...*lead_scraper_servicev1.ReviewORM) error
	CreateInBatches(values []*lead_scraper_servicev1.ReviewORM, batchSize int) error
	Save(values ...*lead_scraper_servicev1.ReviewORM) error
	First() (*lead_scraper_servicev1.ReviewORM, error)
	Take() (*lead_scraper_servicev1.ReviewORM, error)
	Last() (*lead_scraper_servicev1.ReviewORM, error)
	Find() ([]*lead_scraper_servicev1.ReviewORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.ReviewORM, err error)
	FindInBatches(result *[]*lead_scraper_servicev1.ReviewORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*lead_scraper_servicev1.ReviewORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReviewORMDo
	Assign(attrs ...field.AssignExpr) IReviewORMDo
	Joins(fields ...field.RelationField) IReviewORMDo
	Preload(fields ...field.RelationField) IReviewORMDo
	FirstOrInit() (*lead_scraper_servicev1.ReviewORM, error)
	FirstOrCreate() (*lead_scraper_servicev1.ReviewORM, error)
	FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.ReviewORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReviewORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result lead_scraper_servicev1.ReviewORM, err error)
	GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.ReviewORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.ReviewORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result lead_scraper_servicev1.ReviewORM, err error)
	GetByIDs(ids []uint64) (result []lead_scraper_servicev1.ReviewORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.ReviewORM, err error)
	GetDeleted() (result []lead_scraper_servicev1.ReviewORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	CreateInBatch(items []lead_scraper_servicev1.ReviewORM, batchSize int) (err error)
	DeleteInBatch(ids []uint64) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.ReviewORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.ReviewORM, err error)
	FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.ReviewORM, err error)
	GetDistinct(columnName string) (result []lead_scraper_servicev1.ReviewORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.ReviewORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.ReviewORM, err error)
	ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.ReviewORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.ReviewORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (r reviewORMDo) GetRecordByID(id uint64) (result lead_scraper_servicev1.ReviewORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM reviews ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (r reviewORMDo) GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.ReviewORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM reviews ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (r reviewORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM reviews ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (r reviewORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.ReviewORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM reviews ORDER BY " + r.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (r reviewORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM reviews ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (r reviewORMDo) GetByID(id uint64) (result lead_scraper_servicev1.ReviewORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM reviews ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (r reviewORMDo) GetByIDs(ids []uint64) (result []lead_scraper_servicev1.ReviewORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM reviews ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (r reviewORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.ReviewORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM reviews ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + r.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (r reviewORMDo) GetDeleted() (result []lead_scraper_servicev1.ReviewORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM reviews ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (r reviewORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE reviews SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (r reviewORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE reviews SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values...)
func (r reviewORMDo) CreateInBatch(items []lead_scraper_servicev1.ReviewORM, batchSize int) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO reviews (columns) VALUES (values...) ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (r reviewORMDo) DeleteInBatch(ids []uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM reviews ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (r reviewORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.ReviewORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM reviews ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (r reviewORMDo) FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.ReviewORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM reviews ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (r reviewORMDo) FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.ReviewORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM reviews ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (r reviewORMDo) GetDistinct(columnName string) (result []lead_scraper_servicev1.ReviewORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM reviews ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (r reviewORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.ReviewORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM reviews ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (r reviewORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE reviews SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (r reviewORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM reviews ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (r reviewORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM reviews ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (r reviewORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.ReviewORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM reviews ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (r reviewORMDo) ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.ReviewORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM reviews ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM reviews ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (r reviewORMDo) ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.ReviewORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM reviews ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM reviews ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (r reviewORMDo) Debug() IReviewORMDo {
	return r.withDO(r.DO.Debug())
}

func (r reviewORMDo) WithContext(ctx context.Context) IReviewORMDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reviewORMDo) ReadDB() IReviewORMDo {
	return r.Clauses(dbresolver.Read)
}

func (r reviewORMDo) WriteDB() IReviewORMDo {
	return r.Clauses(dbresolver.Write)
}

func (r reviewORMDo) Session(config *gorm.Session) IReviewORMDo {
	return r.withDO(r.DO.Session(config))
}

func (r reviewORMDo) Clauses(conds ...clause.Expression) IReviewORMDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reviewORMDo) Returning(value interface{}, columns ...string) IReviewORMDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reviewORMDo) Not(conds ...gen.Condition) IReviewORMDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reviewORMDo) Or(conds ...gen.Condition) IReviewORMDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reviewORMDo) Select(conds ...field.Expr) IReviewORMDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reviewORMDo) Where(conds ...gen.Condition) IReviewORMDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reviewORMDo) Order(conds ...field.Expr) IReviewORMDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reviewORMDo) Distinct(cols ...field.Expr) IReviewORMDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reviewORMDo) Omit(cols ...field.Expr) IReviewORMDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reviewORMDo) Join(table schema.Tabler, on ...field.Expr) IReviewORMDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reviewORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReviewORMDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reviewORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IReviewORMDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reviewORMDo) Group(cols ...field.Expr) IReviewORMDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reviewORMDo) Having(conds ...gen.Condition) IReviewORMDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reviewORMDo) Limit(limit int) IReviewORMDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reviewORMDo) Offset(offset int) IReviewORMDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reviewORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReviewORMDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reviewORMDo) Unscoped() IReviewORMDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reviewORMDo) Create(values ...*lead_scraper_servicev1.ReviewORM) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reviewORMDo) CreateInBatches(values []*lead_scraper_servicev1.ReviewORM, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reviewORMDo) Save(values ...*lead_scraper_servicev1.ReviewORM) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reviewORMDo) First() (*lead_scraper_servicev1.ReviewORM, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.ReviewORM), nil
	}
}

func (r reviewORMDo) Take() (*lead_scraper_servicev1.ReviewORM, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.ReviewORM), nil
	}
}

func (r reviewORMDo) Last() (*lead_scraper_servicev1.ReviewORM, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.ReviewORM), nil
	}
}

func (r reviewORMDo) Find() ([]*lead_scraper_servicev1.ReviewORM, error) {
	result, err := r.DO.Find()
	return result.([]*lead_scraper_servicev1.ReviewORM), err
}

func (r reviewORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.ReviewORM, err error) {
	buf := make([]*lead_scraper_servicev1.ReviewORM, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reviewORMDo) FindInBatches(result *[]*lead_scraper_servicev1.ReviewORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reviewORMDo) Attrs(attrs ...field.AssignExpr) IReviewORMDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reviewORMDo) Assign(attrs ...field.AssignExpr) IReviewORMDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reviewORMDo) Joins(fields ...field.RelationField) IReviewORMDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reviewORMDo) Preload(fields ...field.RelationField) IReviewORMDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reviewORMDo) FirstOrInit() (*lead_scraper_servicev1.ReviewORM, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.ReviewORM), nil
	}
}

func (r reviewORMDo) FirstOrCreate() (*lead_scraper_servicev1.ReviewORM, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.ReviewORM), nil
	}
}

func (r reviewORMDo) FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.ReviewORM, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reviewORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reviewORMDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reviewORMDo) Delete(models ...*lead_scraper_servicev1.ReviewORM) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reviewORMDo) withDO(do gen.Dao) *reviewORMDo {
	r.DO = *do.(*gen.DO)
	return r
}
