// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	lead_scraper_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/lead_scraper_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newTenantORM(db *gorm.DB, opts ...gen.DOOption) tenantORM {
	_tenantORM := tenantORM{}

	_tenantORM.tenantORMDo.UseDB(db, opts...)
	_tenantORM.tenantORMDo.UseModel(&lead_scraper_servicev1.TenantORM{})

	tableName := _tenantORM.tenantORMDo.TableName()
	_tenantORM.ALL = field.NewAsterisk(tableName)
	_tenantORM.AllowedOrigins = field.NewField(tableName, "allowed_origins")
	_tenantORM.ApiBaseUrl = field.NewString(tableName, "api_base_url")
	_tenantORM.AverageResponseTime = field.NewFloat32(tableName, "average_response_time")
	_tenantORM.CreatedAt = field.NewTime(tableName, "created_at")
	_tenantORM.DeletedAt = field.NewTime(tableName, "deleted_at")
	_tenantORM.Description = field.NewString(tableName, "description")
	_tenantORM.DisplayName = field.NewString(tableName, "display_name")
	_tenantORM.EnableCaching = field.NewBool(tableName, "enable_caching")
	_tenantORM.EnableRateLimiting = field.NewBool(tableName, "enable_rate_limiting")
	_tenantORM.EnableRequestLogging = field.NewBool(tableName, "enable_request_logging")
	_tenantORM.Id = field.NewUint64(tableName, "id")
	_tenantORM.MaxConcurrentJobs = field.NewInt32(tableName, "max_concurrent_jobs")
	_tenantORM.MonthlyRequestLimit = field.NewInt64(tableName, "monthly_request_limit")
	_tenantORM.Name = field.NewString(tableName, "name")
	_tenantORM.OrganizationId = field.NewUint64(tableName, "organization_id")
	_tenantORM.Status = field.NewString(tableName, "status")
	_tenantORM.StorageQuota = field.NewInt64(tableName, "storage_quota")
	_tenantORM.TotalRequests = field.NewInt64(tableName, "total_requests")
	_tenantORM.TotalStorageUsed = field.NewInt64(tableName, "total_storage_used")
	_tenantORM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tenantORM.Accounts = tenantORMHasManyAccounts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Accounts", "lead_scraper_servicev1.AccountORM"),
		Settings: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Accounts.Settings", "lead_scraper_servicev1.AccountSettingsORM"),
		},
		Workspaces: struct {
			field.RelationField
			ApiKeys struct {
				field.RelationField
			}
			ScrapingJobs struct {
				field.RelationField
				Leads struct {
					field.RelationField
					RegularHours struct {
						field.RelationField
					}
					Reviews struct {
						field.RelationField
					}
					SpecialHours struct {
						field.RelationField
					}
				}
			}
			Webhooks struct {
				field.RelationField
			}
			Workflows struct {
				field.RelationField
				Jobs struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Accounts.Workspaces", "lead_scraper_servicev1.WorkspaceORM"),
			ApiKeys: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Accounts.Workspaces.ApiKeys", "lead_scraper_servicev1.APIKeyORM"),
			},
			ScrapingJobs: struct {
				field.RelationField
				Leads struct {
					field.RelationField
					RegularHours struct {
						field.RelationField
					}
					Reviews struct {
						field.RelationField
					}
					SpecialHours struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("Accounts.Workspaces.ScrapingJobs", "lead_scraper_servicev1.ScrapingJobORM"),
				Leads: struct {
					field.RelationField
					RegularHours struct {
						field.RelationField
					}
					Reviews struct {
						field.RelationField
					}
					SpecialHours struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Accounts.Workspaces.ScrapingJobs.Leads", "lead_scraper_servicev1.LeadORM"),
					RegularHours: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Accounts.Workspaces.ScrapingJobs.Leads.RegularHours", "lead_scraper_servicev1.BusinessHoursORM"),
					},
					Reviews: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Accounts.Workspaces.ScrapingJobs.Leads.Reviews", "lead_scraper_servicev1.ReviewORM"),
					},
					SpecialHours: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Accounts.Workspaces.ScrapingJobs.Leads.SpecialHours", "lead_scraper_servicev1.BusinessHoursORM"),
					},
				},
			},
			Webhooks: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Accounts.Workspaces.Webhooks", "lead_scraper_servicev1.WebhookConfigORM"),
			},
			Workflows: struct {
				field.RelationField
				Jobs struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Accounts.Workspaces.Workflows", "lead_scraper_servicev1.ScrapingWorkflowORM"),
				Jobs: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Accounts.Workspaces.Workflows.Jobs", "lead_scraper_servicev1.ScrapingJobORM"),
				},
			},
		},
	}

	_tenantORM.ApiKeys = tenantORMHasManyApiKeys{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ApiKeys", "lead_scraper_servicev1.TenantAPIKeyORM"),
	}

	_tenantORM.fillFieldMap()

	return _tenantORM
}

type tenantORM struct {
	tenantORMDo

	ALL                  field.Asterisk
	AllowedOrigins       field.Field
	ApiBaseUrl           field.String
	AverageResponseTime  field.Float32
	CreatedAt            field.Time
	DeletedAt            field.Time
	Description          field.String
	DisplayName          field.String
	EnableCaching        field.Bool
	EnableRateLimiting   field.Bool
	EnableRequestLogging field.Bool
	Id                   field.Uint64
	MaxConcurrentJobs    field.Int32
	MonthlyRequestLimit  field.Int64
	Name                 field.String
	OrganizationId       field.Uint64
	Status               field.String
	StorageQuota         field.Int64
	TotalRequests        field.Int64
	TotalStorageUsed     field.Int64
	UpdatedAt            field.Time
	Accounts             tenantORMHasManyAccounts

	ApiKeys tenantORMHasManyApiKeys

	fieldMap map[string]field.Expr
}

func (t tenantORM) Table(newTableName string) *tenantORM {
	t.tenantORMDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tenantORM) As(alias string) *tenantORM {
	t.tenantORMDo.DO = *(t.tenantORMDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tenantORM) updateTableName(table string) *tenantORM {
	t.ALL = field.NewAsterisk(table)
	t.AllowedOrigins = field.NewField(table, "allowed_origins")
	t.ApiBaseUrl = field.NewString(table, "api_base_url")
	t.AverageResponseTime = field.NewFloat32(table, "average_response_time")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.DeletedAt = field.NewTime(table, "deleted_at")
	t.Description = field.NewString(table, "description")
	t.DisplayName = field.NewString(table, "display_name")
	t.EnableCaching = field.NewBool(table, "enable_caching")
	t.EnableRateLimiting = field.NewBool(table, "enable_rate_limiting")
	t.EnableRequestLogging = field.NewBool(table, "enable_request_logging")
	t.Id = field.NewUint64(table, "id")
	t.MaxConcurrentJobs = field.NewInt32(table, "max_concurrent_jobs")
	t.MonthlyRequestLimit = field.NewInt64(table, "monthly_request_limit")
	t.Name = field.NewString(table, "name")
	t.OrganizationId = field.NewUint64(table, "organization_id")
	t.Status = field.NewString(table, "status")
	t.StorageQuota = field.NewInt64(table, "storage_quota")
	t.TotalRequests = field.NewInt64(table, "total_requests")
	t.TotalStorageUsed = field.NewInt64(table, "total_storage_used")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tenantORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tenantORM) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 22)
	t.fieldMap["allowed_origins"] = t.AllowedOrigins
	t.fieldMap["api_base_url"] = t.ApiBaseUrl
	t.fieldMap["average_response_time"] = t.AverageResponseTime
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["description"] = t.Description
	t.fieldMap["display_name"] = t.DisplayName
	t.fieldMap["enable_caching"] = t.EnableCaching
	t.fieldMap["enable_rate_limiting"] = t.EnableRateLimiting
	t.fieldMap["enable_request_logging"] = t.EnableRequestLogging
	t.fieldMap["id"] = t.Id
	t.fieldMap["max_concurrent_jobs"] = t.MaxConcurrentJobs
	t.fieldMap["monthly_request_limit"] = t.MonthlyRequestLimit
	t.fieldMap["name"] = t.Name
	t.fieldMap["organization_id"] = t.OrganizationId
	t.fieldMap["status"] = t.Status
	t.fieldMap["storage_quota"] = t.StorageQuota
	t.fieldMap["total_requests"] = t.TotalRequests
	t.fieldMap["total_storage_used"] = t.TotalStorageUsed
	t.fieldMap["updated_at"] = t.UpdatedAt

}

func (t tenantORM) clone(db *gorm.DB) tenantORM {
	t.tenantORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tenantORM) replaceDB(db *gorm.DB) tenantORM {
	t.tenantORMDo.ReplaceDB(db)
	return t
}

type tenantORMHasManyAccounts struct {
	db *gorm.DB

	field.RelationField

	Settings struct {
		field.RelationField
	}
	Workspaces struct {
		field.RelationField
		ApiKeys struct {
			field.RelationField
		}
		ScrapingJobs struct {
			field.RelationField
			Leads struct {
				field.RelationField
				RegularHours struct {
					field.RelationField
				}
				Reviews struct {
					field.RelationField
				}
				SpecialHours struct {
					field.RelationField
				}
			}
		}
		Webhooks struct {
			field.RelationField
		}
		Workflows struct {
			field.RelationField
			Jobs struct {
				field.RelationField
			}
		}
	}
}

func (a tenantORMHasManyAccounts) Where(conds ...field.Expr) *tenantORMHasManyAccounts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a tenantORMHasManyAccounts) WithContext(ctx context.Context) *tenantORMHasManyAccounts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a tenantORMHasManyAccounts) Session(session *gorm.Session) *tenantORMHasManyAccounts {
	a.db = a.db.Session(session)
	return &a
}

func (a tenantORMHasManyAccounts) Model(m *lead_scraper_servicev1.TenantORM) *tenantORMHasManyAccountsTx {
	return &tenantORMHasManyAccountsTx{a.db.Model(m).Association(a.Name())}
}

type tenantORMHasManyAccountsTx struct{ tx *gorm.Association }

func (a tenantORMHasManyAccountsTx) Find() (result []*lead_scraper_servicev1.AccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a tenantORMHasManyAccountsTx) Append(values ...*lead_scraper_servicev1.AccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a tenantORMHasManyAccountsTx) Replace(values ...*lead_scraper_servicev1.AccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a tenantORMHasManyAccountsTx) Delete(values ...*lead_scraper_servicev1.AccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a tenantORMHasManyAccountsTx) Clear() error {
	return a.tx.Clear()
}

func (a tenantORMHasManyAccountsTx) Count() int64 {
	return a.tx.Count()
}

type tenantORMHasManyApiKeys struct {
	db *gorm.DB

	field.RelationField
}

func (a tenantORMHasManyApiKeys) Where(conds ...field.Expr) *tenantORMHasManyApiKeys {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a tenantORMHasManyApiKeys) WithContext(ctx context.Context) *tenantORMHasManyApiKeys {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a tenantORMHasManyApiKeys) Session(session *gorm.Session) *tenantORMHasManyApiKeys {
	a.db = a.db.Session(session)
	return &a
}

func (a tenantORMHasManyApiKeys) Model(m *lead_scraper_servicev1.TenantORM) *tenantORMHasManyApiKeysTx {
	return &tenantORMHasManyApiKeysTx{a.db.Model(m).Association(a.Name())}
}

type tenantORMHasManyApiKeysTx struct{ tx *gorm.Association }

func (a tenantORMHasManyApiKeysTx) Find() (result []*lead_scraper_servicev1.TenantAPIKeyORM, err error) {
	return result, a.tx.Find(&result)
}

func (a tenantORMHasManyApiKeysTx) Append(values ...*lead_scraper_servicev1.TenantAPIKeyORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a tenantORMHasManyApiKeysTx) Replace(values ...*lead_scraper_servicev1.TenantAPIKeyORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a tenantORMHasManyApiKeysTx) Delete(values ...*lead_scraper_servicev1.TenantAPIKeyORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a tenantORMHasManyApiKeysTx) Clear() error {
	return a.tx.Clear()
}

func (a tenantORMHasManyApiKeysTx) Count() int64 {
	return a.tx.Count()
}

type tenantORMDo struct{ gen.DO }

type ITenantORMDo interface {
	gen.SubQuery
	Debug() ITenantORMDo
	WithContext(ctx context.Context) ITenantORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITenantORMDo
	WriteDB() ITenantORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITenantORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITenantORMDo
	Not(conds ...gen.Condition) ITenantORMDo
	Or(conds ...gen.Condition) ITenantORMDo
	Select(conds ...field.Expr) ITenantORMDo
	Where(conds ...gen.Condition) ITenantORMDo
	Order(conds ...field.Expr) ITenantORMDo
	Distinct(cols ...field.Expr) ITenantORMDo
	Omit(cols ...field.Expr) ITenantORMDo
	Join(table schema.Tabler, on ...field.Expr) ITenantORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITenantORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITenantORMDo
	Group(cols ...field.Expr) ITenantORMDo
	Having(conds ...gen.Condition) ITenantORMDo
	Limit(limit int) ITenantORMDo
	Offset(offset int) ITenantORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITenantORMDo
	Unscoped() ITenantORMDo
	Create(values ...*lead_scraper_servicev1.TenantORM) error
	CreateInBatches(values []*lead_scraper_servicev1.TenantORM, batchSize int) error
	Save(values ...*lead_scraper_servicev1.TenantORM) error
	First() (*lead_scraper_servicev1.TenantORM, error)
	Take() (*lead_scraper_servicev1.TenantORM, error)
	Last() (*lead_scraper_servicev1.TenantORM, error)
	Find() ([]*lead_scraper_servicev1.TenantORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.TenantORM, err error)
	FindInBatches(result *[]*lead_scraper_servicev1.TenantORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*lead_scraper_servicev1.TenantORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITenantORMDo
	Assign(attrs ...field.AssignExpr) ITenantORMDo
	Joins(fields ...field.RelationField) ITenantORMDo
	Preload(fields ...field.RelationField) ITenantORMDo
	FirstOrInit() (*lead_scraper_servicev1.TenantORM, error)
	FirstOrCreate() (*lead_scraper_servicev1.TenantORM, error)
	FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.TenantORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITenantORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result lead_scraper_servicev1.TenantORM, err error)
	GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.TenantORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.TenantORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result lead_scraper_servicev1.TenantORM, err error)
	GetByIDs(ids []uint64) (result []lead_scraper_servicev1.TenantORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.TenantORM, err error)
	GetDeleted() (result []lead_scraper_servicev1.TenantORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	DeleteInBatch(ids []uint64, batchSize int) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.TenantORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.TenantORM, err error)
	FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.TenantORM, err error)
	GetDistinct(columnName string) (result []lead_scraper_servicev1.TenantORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.TenantORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.TenantORM, err error)
	ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.TenantORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.TenantORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t tenantORMDo) GetRecordByID(id uint64) (result lead_scraper_servicev1.TenantORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tenants ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t tenantORMDo) GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.TenantORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tenants ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t tenantORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM tenants ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (t tenantORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.TenantORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM tenants ORDER BY " + t.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (t tenantORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM tenants ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t tenantORMDo) GetByID(id uint64) (result lead_scraper_servicev1.TenantORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tenants ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t tenantORMDo) GetByIDs(ids []uint64) (result []lead_scraper_servicev1.TenantORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tenants ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (t tenantORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.TenantORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tenants ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + t.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (t tenantORMDo) GetDeleted() (result []lead_scraper_servicev1.TenantORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tenants ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (t tenantORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE tenants SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (t tenantORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE tenants SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
// LIMIT @batchSize
func (t tenantORMDo) DeleteInBatch(ids []uint64, batchSize int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM tenants ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, batchSize)
	generateSQL.WriteString("LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (t tenantORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.TenantORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tenants ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (t tenantORMDo) FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.TenantORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tenants ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (t tenantORMDo) FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.TenantORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tenants ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (t tenantORMDo) GetDistinct(columnName string) (result []lead_scraper_servicev1.TenantORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM tenants ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (t tenantORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.TenantORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tenants ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (t tenantORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE tenants SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (t tenantORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM tenants ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (t tenantORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM tenants ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (t tenantORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.TenantORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tenants ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (t tenantORMDo) ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.TenantORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM tenants ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM tenants ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (t tenantORMDo) ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.TenantORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM tenants ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM tenants ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t tenantORMDo) Debug() ITenantORMDo {
	return t.withDO(t.DO.Debug())
}

func (t tenantORMDo) WithContext(ctx context.Context) ITenantORMDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tenantORMDo) ReadDB() ITenantORMDo {
	return t.Clauses(dbresolver.Read)
}

func (t tenantORMDo) WriteDB() ITenantORMDo {
	return t.Clauses(dbresolver.Write)
}

func (t tenantORMDo) Session(config *gorm.Session) ITenantORMDo {
	return t.withDO(t.DO.Session(config))
}

func (t tenantORMDo) Clauses(conds ...clause.Expression) ITenantORMDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tenantORMDo) Returning(value interface{}, columns ...string) ITenantORMDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tenantORMDo) Not(conds ...gen.Condition) ITenantORMDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tenantORMDo) Or(conds ...gen.Condition) ITenantORMDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tenantORMDo) Select(conds ...field.Expr) ITenantORMDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tenantORMDo) Where(conds ...gen.Condition) ITenantORMDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tenantORMDo) Order(conds ...field.Expr) ITenantORMDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tenantORMDo) Distinct(cols ...field.Expr) ITenantORMDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tenantORMDo) Omit(cols ...field.Expr) ITenantORMDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tenantORMDo) Join(table schema.Tabler, on ...field.Expr) ITenantORMDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tenantORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITenantORMDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tenantORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ITenantORMDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tenantORMDo) Group(cols ...field.Expr) ITenantORMDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tenantORMDo) Having(conds ...gen.Condition) ITenantORMDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tenantORMDo) Limit(limit int) ITenantORMDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tenantORMDo) Offset(offset int) ITenantORMDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tenantORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITenantORMDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tenantORMDo) Unscoped() ITenantORMDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tenantORMDo) Create(values ...*lead_scraper_servicev1.TenantORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tenantORMDo) CreateInBatches(values []*lead_scraper_servicev1.TenantORM, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tenantORMDo) Save(values ...*lead_scraper_servicev1.TenantORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tenantORMDo) First() (*lead_scraper_servicev1.TenantORM, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.TenantORM), nil
	}
}

func (t tenantORMDo) Take() (*lead_scraper_servicev1.TenantORM, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.TenantORM), nil
	}
}

func (t tenantORMDo) Last() (*lead_scraper_servicev1.TenantORM, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.TenantORM), nil
	}
}

func (t tenantORMDo) Find() ([]*lead_scraper_servicev1.TenantORM, error) {
	result, err := t.DO.Find()
	return result.([]*lead_scraper_servicev1.TenantORM), err
}

func (t tenantORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.TenantORM, err error) {
	buf := make([]*lead_scraper_servicev1.TenantORM, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tenantORMDo) FindInBatches(result *[]*lead_scraper_servicev1.TenantORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tenantORMDo) Attrs(attrs ...field.AssignExpr) ITenantORMDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tenantORMDo) Assign(attrs ...field.AssignExpr) ITenantORMDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tenantORMDo) Joins(fields ...field.RelationField) ITenantORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tenantORMDo) Preload(fields ...field.RelationField) ITenantORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tenantORMDo) FirstOrInit() (*lead_scraper_servicev1.TenantORM, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.TenantORM), nil
	}
}

func (t tenantORMDo) FirstOrCreate() (*lead_scraper_servicev1.TenantORM, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.TenantORM), nil
	}
}

func (t tenantORMDo) FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.TenantORM, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tenantORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tenantORMDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tenantORMDo) Delete(models ...*lead_scraper_servicev1.TenantORM) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tenantORMDo) withDO(do gen.Dao) *tenantORMDo {
	t.DO = *do.(*gen.DO)
	return t
}
