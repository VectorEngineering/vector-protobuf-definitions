// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	lead_scraper_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/lead_scraper_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newWebhookConfigORM(db *gorm.DB, opts ...gen.DOOption) webhookConfigORM {
	_webhookConfigORM := webhookConfigORM{}

	_webhookConfigORM.webhookConfigORMDo.UseDB(db, opts...)
	_webhookConfigORM.webhookConfigORMDo.UseModel(&lead_scraper_servicev1.WebhookConfigORM{})

	tableName := _webhookConfigORM.webhookConfigORMDo.TableName()
	_webhookConfigORM.ALL = field.NewAsterisk(tableName)
	_webhookConfigORM.AuthToken = field.NewString(tableName, "auth_token")
	_webhookConfigORM.AuthType = field.NewString(tableName, "auth_type")
	_webhookConfigORM.CreatedAt = field.NewTime(tableName, "created_at")
	_webhookConfigORM.FailedCalls = field.NewInt32(tableName, "failed_calls")
	_webhookConfigORM.Id = field.NewUint64(tableName, "id")
	_webhookConfigORM.IncludeFullResults = field.NewBool(tableName, "include_full_results")
	_webhookConfigORM.LastTriggeredAt = field.NewTime(tableName, "last_triggered_at")
	_webhookConfigORM.MaxRetries = field.NewInt32(tableName, "max_retries")
	_webhookConfigORM.PayloadFormat = field.NewString(tableName, "payload_format")
	_webhookConfigORM.RateLimit = field.NewInt32(tableName, "rate_limit")
	_webhookConfigORM.RateLimitInterval = field.NewInt64(tableName, "rate_limit_interval")
	_webhookConfigORM.RetryInterval = field.NewInt64(tableName, "retry_interval")
	_webhookConfigORM.SigningSecret = field.NewString(tableName, "signing_secret")
	_webhookConfigORM.SuccessfulCalls = field.NewInt32(tableName, "successful_calls")
	_webhookConfigORM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_webhookConfigORM.Url = field.NewString(tableName, "url")
	_webhookConfigORM.VerifySsl = field.NewBool(tableName, "verify_ssl")
	_webhookConfigORM.WebhookName = field.NewString(tableName, "webhook_name")
	_webhookConfigORM.WorkspaceId = field.NewUint64(tableName, "workspace_id")

	_webhookConfigORM.fillFieldMap()

	return _webhookConfigORM
}

type webhookConfigORM struct {
	webhookConfigORMDo

	ALL                field.Asterisk
	AuthToken          field.String
	AuthType           field.String
	CreatedAt          field.Time
	FailedCalls        field.Int32
	Id                 field.Uint64
	IncludeFullResults field.Bool
	LastTriggeredAt    field.Time
	MaxRetries         field.Int32
	PayloadFormat      field.String
	RateLimit          field.Int32
	RateLimitInterval  field.Int64
	RetryInterval      field.Int64
	SigningSecret      field.String
	SuccessfulCalls    field.Int32
	UpdatedAt          field.Time
	Url                field.String
	VerifySsl          field.Bool
	WebhookName        field.String
	WorkspaceId        field.Uint64

	fieldMap map[string]field.Expr
}

func (w webhookConfigORM) Table(newTableName string) *webhookConfigORM {
	w.webhookConfigORMDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webhookConfigORM) As(alias string) *webhookConfigORM {
	w.webhookConfigORMDo.DO = *(w.webhookConfigORMDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webhookConfigORM) updateTableName(table string) *webhookConfigORM {
	w.ALL = field.NewAsterisk(table)
	w.AuthToken = field.NewString(table, "auth_token")
	w.AuthType = field.NewString(table, "auth_type")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.FailedCalls = field.NewInt32(table, "failed_calls")
	w.Id = field.NewUint64(table, "id")
	w.IncludeFullResults = field.NewBool(table, "include_full_results")
	w.LastTriggeredAt = field.NewTime(table, "last_triggered_at")
	w.MaxRetries = field.NewInt32(table, "max_retries")
	w.PayloadFormat = field.NewString(table, "payload_format")
	w.RateLimit = field.NewInt32(table, "rate_limit")
	w.RateLimitInterval = field.NewInt64(table, "rate_limit_interval")
	w.RetryInterval = field.NewInt64(table, "retry_interval")
	w.SigningSecret = field.NewString(table, "signing_secret")
	w.SuccessfulCalls = field.NewInt32(table, "successful_calls")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.Url = field.NewString(table, "url")
	w.VerifySsl = field.NewBool(table, "verify_ssl")
	w.WebhookName = field.NewString(table, "webhook_name")
	w.WorkspaceId = field.NewUint64(table, "workspace_id")

	w.fillFieldMap()

	return w
}

func (w *webhookConfigORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webhookConfigORM) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 19)
	w.fieldMap["auth_token"] = w.AuthToken
	w.fieldMap["auth_type"] = w.AuthType
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["failed_calls"] = w.FailedCalls
	w.fieldMap["id"] = w.Id
	w.fieldMap["include_full_results"] = w.IncludeFullResults
	w.fieldMap["last_triggered_at"] = w.LastTriggeredAt
	w.fieldMap["max_retries"] = w.MaxRetries
	w.fieldMap["payload_format"] = w.PayloadFormat
	w.fieldMap["rate_limit"] = w.RateLimit
	w.fieldMap["rate_limit_interval"] = w.RateLimitInterval
	w.fieldMap["retry_interval"] = w.RetryInterval
	w.fieldMap["signing_secret"] = w.SigningSecret
	w.fieldMap["successful_calls"] = w.SuccessfulCalls
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["url"] = w.Url
	w.fieldMap["verify_ssl"] = w.VerifySsl
	w.fieldMap["webhook_name"] = w.WebhookName
	w.fieldMap["workspace_id"] = w.WorkspaceId
}

func (w webhookConfigORM) clone(db *gorm.DB) webhookConfigORM {
	w.webhookConfigORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webhookConfigORM) replaceDB(db *gorm.DB) webhookConfigORM {
	w.webhookConfigORMDo.ReplaceDB(db)
	return w
}

type webhookConfigORMDo struct{ gen.DO }

type IWebhookConfigORMDo interface {
	gen.SubQuery
	Debug() IWebhookConfigORMDo
	WithContext(ctx context.Context) IWebhookConfigORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebhookConfigORMDo
	WriteDB() IWebhookConfigORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebhookConfigORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebhookConfigORMDo
	Not(conds ...gen.Condition) IWebhookConfigORMDo
	Or(conds ...gen.Condition) IWebhookConfigORMDo
	Select(conds ...field.Expr) IWebhookConfigORMDo
	Where(conds ...gen.Condition) IWebhookConfigORMDo
	Order(conds ...field.Expr) IWebhookConfigORMDo
	Distinct(cols ...field.Expr) IWebhookConfigORMDo
	Omit(cols ...field.Expr) IWebhookConfigORMDo
	Join(table schema.Tabler, on ...field.Expr) IWebhookConfigORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebhookConfigORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebhookConfigORMDo
	Group(cols ...field.Expr) IWebhookConfigORMDo
	Having(conds ...gen.Condition) IWebhookConfigORMDo
	Limit(limit int) IWebhookConfigORMDo
	Offset(offset int) IWebhookConfigORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebhookConfigORMDo
	Unscoped() IWebhookConfigORMDo
	Create(values ...*lead_scraper_servicev1.WebhookConfigORM) error
	CreateInBatches(values []*lead_scraper_servicev1.WebhookConfigORM, batchSize int) error
	Save(values ...*lead_scraper_servicev1.WebhookConfigORM) error
	First() (*lead_scraper_servicev1.WebhookConfigORM, error)
	Take() (*lead_scraper_servicev1.WebhookConfigORM, error)
	Last() (*lead_scraper_servicev1.WebhookConfigORM, error)
	Find() ([]*lead_scraper_servicev1.WebhookConfigORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.WebhookConfigORM, err error)
	FindInBatches(result *[]*lead_scraper_servicev1.WebhookConfigORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*lead_scraper_servicev1.WebhookConfigORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebhookConfigORMDo
	Assign(attrs ...field.AssignExpr) IWebhookConfigORMDo
	Joins(fields ...field.RelationField) IWebhookConfigORMDo
	Preload(fields ...field.RelationField) IWebhookConfigORMDo
	FirstOrInit() (*lead_scraper_servicev1.WebhookConfigORM, error)
	FirstOrCreate() (*lead_scraper_servicev1.WebhookConfigORM, error)
	FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.WebhookConfigORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebhookConfigORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result lead_scraper_servicev1.WebhookConfigORM, err error)
	GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.WebhookConfigORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.WebhookConfigORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result lead_scraper_servicev1.WebhookConfigORM, err error)
	GetByIDs(ids []uint64) (result []lead_scraper_servicev1.WebhookConfigORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.WebhookConfigORM, err error)
	GetDeleted() (result []lead_scraper_servicev1.WebhookConfigORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	DeleteInBatch(ids []uint64, batchSize int) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.WebhookConfigORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.WebhookConfigORM, err error)
	FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.WebhookConfigORM, err error)
	GetDistinct(columnName string) (result []lead_scraper_servicev1.WebhookConfigORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.WebhookConfigORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.WebhookConfigORM, err error)
	ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.WebhookConfigORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.WebhookConfigORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (w webhookConfigORMDo) GetRecordByID(id uint64) (result lead_scraper_servicev1.WebhookConfigORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM webhook_configs ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (w webhookConfigORMDo) GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.WebhookConfigORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM webhook_configs ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (w webhookConfigORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM webhook_configs ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (w webhookConfigORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.WebhookConfigORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM webhook_configs ORDER BY " + w.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (w webhookConfigORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM webhook_configs ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (w webhookConfigORMDo) GetByID(id uint64) (result lead_scraper_servicev1.WebhookConfigORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM webhook_configs ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (w webhookConfigORMDo) GetByIDs(ids []uint64) (result []lead_scraper_servicev1.WebhookConfigORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM webhook_configs ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (w webhookConfigORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.WebhookConfigORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM webhook_configs ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + w.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (w webhookConfigORMDo) GetDeleted() (result []lead_scraper_servicev1.WebhookConfigORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM webhook_configs ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (w webhookConfigORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE webhook_configs SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (w webhookConfigORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE webhook_configs SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
// LIMIT @batchSize
func (w webhookConfigORMDo) DeleteInBatch(ids []uint64, batchSize int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM webhook_configs ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, batchSize)
	generateSQL.WriteString("LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (w webhookConfigORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.WebhookConfigORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM webhook_configs ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (w webhookConfigORMDo) FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.WebhookConfigORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM webhook_configs ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (w webhookConfigORMDo) FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.WebhookConfigORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM webhook_configs ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (w webhookConfigORMDo) GetDistinct(columnName string) (result []lead_scraper_servicev1.WebhookConfigORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM webhook_configs ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (w webhookConfigORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.WebhookConfigORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM webhook_configs ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (w webhookConfigORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE webhook_configs SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (w webhookConfigORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM webhook_configs ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (w webhookConfigORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM webhook_configs ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (w webhookConfigORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.WebhookConfigORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM webhook_configs ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (w webhookConfigORMDo) ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.WebhookConfigORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM webhook_configs ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM webhook_configs ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (w webhookConfigORMDo) ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.WebhookConfigORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM webhook_configs ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM webhook_configs ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (w webhookConfigORMDo) Debug() IWebhookConfigORMDo {
	return w.withDO(w.DO.Debug())
}

func (w webhookConfigORMDo) WithContext(ctx context.Context) IWebhookConfigORMDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webhookConfigORMDo) ReadDB() IWebhookConfigORMDo {
	return w.Clauses(dbresolver.Read)
}

func (w webhookConfigORMDo) WriteDB() IWebhookConfigORMDo {
	return w.Clauses(dbresolver.Write)
}

func (w webhookConfigORMDo) Session(config *gorm.Session) IWebhookConfigORMDo {
	return w.withDO(w.DO.Session(config))
}

func (w webhookConfigORMDo) Clauses(conds ...clause.Expression) IWebhookConfigORMDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webhookConfigORMDo) Returning(value interface{}, columns ...string) IWebhookConfigORMDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webhookConfigORMDo) Not(conds ...gen.Condition) IWebhookConfigORMDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webhookConfigORMDo) Or(conds ...gen.Condition) IWebhookConfigORMDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webhookConfigORMDo) Select(conds ...field.Expr) IWebhookConfigORMDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webhookConfigORMDo) Where(conds ...gen.Condition) IWebhookConfigORMDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webhookConfigORMDo) Order(conds ...field.Expr) IWebhookConfigORMDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webhookConfigORMDo) Distinct(cols ...field.Expr) IWebhookConfigORMDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webhookConfigORMDo) Omit(cols ...field.Expr) IWebhookConfigORMDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webhookConfigORMDo) Join(table schema.Tabler, on ...field.Expr) IWebhookConfigORMDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webhookConfigORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebhookConfigORMDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webhookConfigORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebhookConfigORMDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webhookConfigORMDo) Group(cols ...field.Expr) IWebhookConfigORMDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webhookConfigORMDo) Having(conds ...gen.Condition) IWebhookConfigORMDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webhookConfigORMDo) Limit(limit int) IWebhookConfigORMDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webhookConfigORMDo) Offset(offset int) IWebhookConfigORMDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webhookConfigORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebhookConfigORMDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webhookConfigORMDo) Unscoped() IWebhookConfigORMDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webhookConfigORMDo) Create(values ...*lead_scraper_servicev1.WebhookConfigORM) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webhookConfigORMDo) CreateInBatches(values []*lead_scraper_servicev1.WebhookConfigORM, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webhookConfigORMDo) Save(values ...*lead_scraper_servicev1.WebhookConfigORM) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webhookConfigORMDo) First() (*lead_scraper_servicev1.WebhookConfigORM, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.WebhookConfigORM), nil
	}
}

func (w webhookConfigORMDo) Take() (*lead_scraper_servicev1.WebhookConfigORM, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.WebhookConfigORM), nil
	}
}

func (w webhookConfigORMDo) Last() (*lead_scraper_servicev1.WebhookConfigORM, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.WebhookConfigORM), nil
	}
}

func (w webhookConfigORMDo) Find() ([]*lead_scraper_servicev1.WebhookConfigORM, error) {
	result, err := w.DO.Find()
	return result.([]*lead_scraper_servicev1.WebhookConfigORM), err
}

func (w webhookConfigORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.WebhookConfigORM, err error) {
	buf := make([]*lead_scraper_servicev1.WebhookConfigORM, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webhookConfigORMDo) FindInBatches(result *[]*lead_scraper_servicev1.WebhookConfigORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webhookConfigORMDo) Attrs(attrs ...field.AssignExpr) IWebhookConfigORMDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webhookConfigORMDo) Assign(attrs ...field.AssignExpr) IWebhookConfigORMDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webhookConfigORMDo) Joins(fields ...field.RelationField) IWebhookConfigORMDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webhookConfigORMDo) Preload(fields ...field.RelationField) IWebhookConfigORMDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webhookConfigORMDo) FirstOrInit() (*lead_scraper_servicev1.WebhookConfigORM, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.WebhookConfigORM), nil
	}
}

func (w webhookConfigORMDo) FirstOrCreate() (*lead_scraper_servicev1.WebhookConfigORM, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.WebhookConfigORM), nil
	}
}

func (w webhookConfigORMDo) FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.WebhookConfigORM, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webhookConfigORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webhookConfigORMDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webhookConfigORMDo) Delete(models ...*lead_scraper_servicev1.WebhookConfigORM) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webhookConfigORMDo) withDO(do gen.Dao) *webhookConfigORMDo {
	w.DO = *do.(*gen.DO)
	return w
}
