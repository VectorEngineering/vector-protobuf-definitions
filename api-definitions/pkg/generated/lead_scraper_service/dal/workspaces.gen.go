// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	lead_scraper_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/lead_scraper_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newWorkspaceORM(db *gorm.DB, opts ...gen.DOOption) workspaceORM {
	_workspaceORM := workspaceORM{}

	_workspaceORM.workspaceORMDo.UseDB(db, opts...)
	_workspaceORM.workspaceORMDo.UseModel(&lead_scraper_servicev1.WorkspaceORM{})

	tableName := _workspaceORM.workspaceORMDo.TableName()
	_workspaceORM.ALL = field.NewAsterisk(tableName)
	_workspaceORM.AccountId = field.NewUint64(tableName, "account_id")
	_workspaceORM.ActiveScrapers = field.NewInt32(tableName, "active_scrapers")
	_workspaceORM.CreatedAt = field.NewTime(tableName, "created_at")
	_workspaceORM.DailyJobQuota = field.NewInt32(tableName, "daily_job_quota")
	_workspaceORM.DeletedAt = field.NewTime(tableName, "deleted_at")
	_workspaceORM.Domain = field.NewString(tableName, "domain")
	_workspaceORM.GdprCompliant = field.NewBool(tableName, "gdpr_compliant")
	_workspaceORM.HipaaCompliant = field.NewBool(tableName, "hipaa_compliant")
	_workspaceORM.Id = field.NewUint64(tableName, "id")
	_workspaceORM.Industry = field.NewString(tableName, "industry")
	_workspaceORM.JobsRunThisMonth = field.NewInt32(tableName, "jobs_run_this_month")
	_workspaceORM.LastJobRun = field.NewTime(tableName, "last_job_run")
	_workspaceORM.Name = field.NewString(tableName, "name")
	_workspaceORM.Soc2Compliant = field.NewBool(tableName, "soc2_compliant")
	_workspaceORM.StorageQuota = field.NewInt64(tableName, "storage_quota")
	_workspaceORM.TotalLeadsCollected = field.NewInt32(tableName, "total_leads_collected")
	_workspaceORM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_workspaceORM.UsedStorage = field.NewInt64(tableName, "used_storage")
	_workspaceORM.WorkspaceJobLimit = field.NewInt32(tableName, "workspace_job_limit")
	_workspaceORM.ApiKeys = workspaceORMHasManyApiKeys{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ApiKeys", "lead_scraper_servicev1.APIKeyORM"),
		Account: struct {
			field.RelationField
			Settings struct {
				field.RelationField
			}
			Workspaces struct {
				field.RelationField
				ApiKeys struct {
					field.RelationField
				}
				ScrapingJobs struct {
					field.RelationField
					Leads struct {
						field.RelationField
						Job struct {
							field.RelationField
						}
						Workspace struct {
							field.RelationField
						}
						RegularHours struct {
							field.RelationField
						}
						Reviews struct {
							field.RelationField
						}
						SpecialHours struct {
							field.RelationField
						}
					}
				}
				Webhooks struct {
					field.RelationField
				}
				Workflows struct {
					field.RelationField
					Workspace struct {
						field.RelationField
					}
					Jobs struct {
						field.RelationField
					}
				}
			}
		}{
			RelationField: field.NewRelation("ApiKeys.Account", "lead_scraper_servicev1.AccountORM"),
			Settings: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("ApiKeys.Account.Settings", "lead_scraper_servicev1.AccountSettingsORM"),
			},
			Workspaces: struct {
				field.RelationField
				ApiKeys struct {
					field.RelationField
				}
				ScrapingJobs struct {
					field.RelationField
					Leads struct {
						field.RelationField
						Job struct {
							field.RelationField
						}
						Workspace struct {
							field.RelationField
						}
						RegularHours struct {
							field.RelationField
						}
						Reviews struct {
							field.RelationField
						}
						SpecialHours struct {
							field.RelationField
						}
					}
				}
				Webhooks struct {
					field.RelationField
				}
				Workflows struct {
					field.RelationField
					Workspace struct {
						field.RelationField
					}
					Jobs struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("ApiKeys.Account.Workspaces", "lead_scraper_servicev1.WorkspaceORM"),
				ApiKeys: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("ApiKeys.Account.Workspaces.ApiKeys", "lead_scraper_servicev1.APIKeyORM"),
				},
				ScrapingJobs: struct {
					field.RelationField
					Leads struct {
						field.RelationField
						Job struct {
							field.RelationField
						}
						Workspace struct {
							field.RelationField
						}
						RegularHours struct {
							field.RelationField
						}
						Reviews struct {
							field.RelationField
						}
						SpecialHours struct {
							field.RelationField
						}
					}
				}{
					RelationField: field.NewRelation("ApiKeys.Account.Workspaces.ScrapingJobs", "lead_scraper_servicev1.ScrapingJobORM"),
					Leads: struct {
						field.RelationField
						Job struct {
							field.RelationField
						}
						Workspace struct {
							field.RelationField
						}
						RegularHours struct {
							field.RelationField
						}
						Reviews struct {
							field.RelationField
						}
						SpecialHours struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("ApiKeys.Account.Workspaces.ScrapingJobs.Leads", "lead_scraper_servicev1.LeadORM"),
						Job: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("ApiKeys.Account.Workspaces.ScrapingJobs.Leads.Job", "lead_scraper_servicev1.ScrapingJobORM"),
						},
						Workspace: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("ApiKeys.Account.Workspaces.ScrapingJobs.Leads.Workspace", "lead_scraper_servicev1.WorkspaceORM"),
						},
						RegularHours: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("ApiKeys.Account.Workspaces.ScrapingJobs.Leads.RegularHours", "lead_scraper_servicev1.BusinessHoursORM"),
						},
						Reviews: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("ApiKeys.Account.Workspaces.ScrapingJobs.Leads.Reviews", "lead_scraper_servicev1.ReviewORM"),
						},
						SpecialHours: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("ApiKeys.Account.Workspaces.ScrapingJobs.Leads.SpecialHours", "lead_scraper_servicev1.BusinessHoursORM"),
						},
					},
				},
				Webhooks: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("ApiKeys.Account.Workspaces.Webhooks", "lead_scraper_servicev1.WebhookConfigORM"),
				},
				Workflows: struct {
					field.RelationField
					Workspace struct {
						field.RelationField
					}
					Jobs struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("ApiKeys.Account.Workspaces.Workflows", "lead_scraper_servicev1.ScrapingWorkflowORM"),
					Workspace: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("ApiKeys.Account.Workspaces.Workflows.Workspace", "lead_scraper_servicev1.WorkspaceORM"),
					},
					Jobs: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("ApiKeys.Account.Workspaces.Workflows.Jobs", "lead_scraper_servicev1.ScrapingJobORM"),
					},
				},
			},
		},
		Workspace: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("ApiKeys.Workspace", "lead_scraper_servicev1.WorkspaceORM"),
		},
	}

	_workspaceORM.ScrapingJobs = workspaceORMHasManyScrapingJobs{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ScrapingJobs", "lead_scraper_servicev1.ScrapingJobORM"),
	}

	_workspaceORM.Webhooks = workspaceORMHasManyWebhooks{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Webhooks", "lead_scraper_servicev1.WebhookConfigORM"),
	}

	_workspaceORM.Workflows = workspaceORMHasManyWorkflows{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Workflows", "lead_scraper_servicev1.ScrapingWorkflowORM"),
	}

	_workspaceORM.fillFieldMap()

	return _workspaceORM
}

type workspaceORM struct {
	workspaceORMDo

	ALL                 field.Asterisk
	AccountId           field.Uint64
	ActiveScrapers      field.Int32
	CreatedAt           field.Time
	DailyJobQuota       field.Int32
	DeletedAt           field.Time
	Domain              field.String
	GdprCompliant       field.Bool
	HipaaCompliant      field.Bool
	Id                  field.Uint64
	Industry            field.String
	JobsRunThisMonth    field.Int32
	LastJobRun          field.Time
	Name                field.String
	Soc2Compliant       field.Bool
	StorageQuota        field.Int64
	TotalLeadsCollected field.Int32
	UpdatedAt           field.Time
	UsedStorage         field.Int64
	WorkspaceJobLimit   field.Int32
	ApiKeys             workspaceORMHasManyApiKeys

	ScrapingJobs workspaceORMHasManyScrapingJobs

	Webhooks workspaceORMHasManyWebhooks

	Workflows workspaceORMHasManyWorkflows

	fieldMap map[string]field.Expr
}

func (w workspaceORM) Table(newTableName string) *workspaceORM {
	w.workspaceORMDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w workspaceORM) As(alias string) *workspaceORM {
	w.workspaceORMDo.DO = *(w.workspaceORMDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *workspaceORM) updateTableName(table string) *workspaceORM {
	w.ALL = field.NewAsterisk(table)
	w.AccountId = field.NewUint64(table, "account_id")
	w.ActiveScrapers = field.NewInt32(table, "active_scrapers")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.DailyJobQuota = field.NewInt32(table, "daily_job_quota")
	w.DeletedAt = field.NewTime(table, "deleted_at")
	w.Domain = field.NewString(table, "domain")
	w.GdprCompliant = field.NewBool(table, "gdpr_compliant")
	w.HipaaCompliant = field.NewBool(table, "hipaa_compliant")
	w.Id = field.NewUint64(table, "id")
	w.Industry = field.NewString(table, "industry")
	w.JobsRunThisMonth = field.NewInt32(table, "jobs_run_this_month")
	w.LastJobRun = field.NewTime(table, "last_job_run")
	w.Name = field.NewString(table, "name")
	w.Soc2Compliant = field.NewBool(table, "soc2_compliant")
	w.StorageQuota = field.NewInt64(table, "storage_quota")
	w.TotalLeadsCollected = field.NewInt32(table, "total_leads_collected")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.UsedStorage = field.NewInt64(table, "used_storage")
	w.WorkspaceJobLimit = field.NewInt32(table, "workspace_job_limit")

	w.fillFieldMap()

	return w
}

func (w *workspaceORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *workspaceORM) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 23)
	w.fieldMap["account_id"] = w.AccountId
	w.fieldMap["active_scrapers"] = w.ActiveScrapers
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["daily_job_quota"] = w.DailyJobQuota
	w.fieldMap["deleted_at"] = w.DeletedAt
	w.fieldMap["domain"] = w.Domain
	w.fieldMap["gdpr_compliant"] = w.GdprCompliant
	w.fieldMap["hipaa_compliant"] = w.HipaaCompliant
	w.fieldMap["id"] = w.Id
	w.fieldMap["industry"] = w.Industry
	w.fieldMap["jobs_run_this_month"] = w.JobsRunThisMonth
	w.fieldMap["last_job_run"] = w.LastJobRun
	w.fieldMap["name"] = w.Name
	w.fieldMap["soc2_compliant"] = w.Soc2Compliant
	w.fieldMap["storage_quota"] = w.StorageQuota
	w.fieldMap["total_leads_collected"] = w.TotalLeadsCollected
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["used_storage"] = w.UsedStorage
	w.fieldMap["workspace_job_limit"] = w.WorkspaceJobLimit

}

func (w workspaceORM) clone(db *gorm.DB) workspaceORM {
	w.workspaceORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w workspaceORM) replaceDB(db *gorm.DB) workspaceORM {
	w.workspaceORMDo.ReplaceDB(db)
	return w
}

type workspaceORMHasManyApiKeys struct {
	db *gorm.DB

	field.RelationField

	Account struct {
		field.RelationField
		Settings struct {
			field.RelationField
		}
		Workspaces struct {
			field.RelationField
			ApiKeys struct {
				field.RelationField
			}
			ScrapingJobs struct {
				field.RelationField
				Leads struct {
					field.RelationField
					Job struct {
						field.RelationField
					}
					Workspace struct {
						field.RelationField
					}
					RegularHours struct {
						field.RelationField
					}
					Reviews struct {
						field.RelationField
					}
					SpecialHours struct {
						field.RelationField
					}
				}
			}
			Webhooks struct {
				field.RelationField
			}
			Workflows struct {
				field.RelationField
				Workspace struct {
					field.RelationField
				}
				Jobs struct {
					field.RelationField
				}
			}
		}
	}
	Workspace struct {
		field.RelationField
	}
}

func (a workspaceORMHasManyApiKeys) Where(conds ...field.Expr) *workspaceORMHasManyApiKeys {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workspaceORMHasManyApiKeys) WithContext(ctx context.Context) *workspaceORMHasManyApiKeys {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workspaceORMHasManyApiKeys) Session(session *gorm.Session) *workspaceORMHasManyApiKeys {
	a.db = a.db.Session(session)
	return &a
}

func (a workspaceORMHasManyApiKeys) Model(m *lead_scraper_servicev1.WorkspaceORM) *workspaceORMHasManyApiKeysTx {
	return &workspaceORMHasManyApiKeysTx{a.db.Model(m).Association(a.Name())}
}

type workspaceORMHasManyApiKeysTx struct{ tx *gorm.Association }

func (a workspaceORMHasManyApiKeysTx) Find() (result []*lead_scraper_servicev1.APIKeyORM, err error) {
	return result, a.tx.Find(&result)
}

func (a workspaceORMHasManyApiKeysTx) Append(values ...*lead_scraper_servicev1.APIKeyORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workspaceORMHasManyApiKeysTx) Replace(values ...*lead_scraper_servicev1.APIKeyORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workspaceORMHasManyApiKeysTx) Delete(values ...*lead_scraper_servicev1.APIKeyORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workspaceORMHasManyApiKeysTx) Clear() error {
	return a.tx.Clear()
}

func (a workspaceORMHasManyApiKeysTx) Count() int64 {
	return a.tx.Count()
}

type workspaceORMHasManyScrapingJobs struct {
	db *gorm.DB

	field.RelationField
}

func (a workspaceORMHasManyScrapingJobs) Where(conds ...field.Expr) *workspaceORMHasManyScrapingJobs {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workspaceORMHasManyScrapingJobs) WithContext(ctx context.Context) *workspaceORMHasManyScrapingJobs {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workspaceORMHasManyScrapingJobs) Session(session *gorm.Session) *workspaceORMHasManyScrapingJobs {
	a.db = a.db.Session(session)
	return &a
}

func (a workspaceORMHasManyScrapingJobs) Model(m *lead_scraper_servicev1.WorkspaceORM) *workspaceORMHasManyScrapingJobsTx {
	return &workspaceORMHasManyScrapingJobsTx{a.db.Model(m).Association(a.Name())}
}

type workspaceORMHasManyScrapingJobsTx struct{ tx *gorm.Association }

func (a workspaceORMHasManyScrapingJobsTx) Find() (result []*lead_scraper_servicev1.ScrapingJobORM, err error) {
	return result, a.tx.Find(&result)
}

func (a workspaceORMHasManyScrapingJobsTx) Append(values ...*lead_scraper_servicev1.ScrapingJobORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workspaceORMHasManyScrapingJobsTx) Replace(values ...*lead_scraper_servicev1.ScrapingJobORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workspaceORMHasManyScrapingJobsTx) Delete(values ...*lead_scraper_servicev1.ScrapingJobORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workspaceORMHasManyScrapingJobsTx) Clear() error {
	return a.tx.Clear()
}

func (a workspaceORMHasManyScrapingJobsTx) Count() int64 {
	return a.tx.Count()
}

type workspaceORMHasManyWebhooks struct {
	db *gorm.DB

	field.RelationField
}

func (a workspaceORMHasManyWebhooks) Where(conds ...field.Expr) *workspaceORMHasManyWebhooks {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workspaceORMHasManyWebhooks) WithContext(ctx context.Context) *workspaceORMHasManyWebhooks {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workspaceORMHasManyWebhooks) Session(session *gorm.Session) *workspaceORMHasManyWebhooks {
	a.db = a.db.Session(session)
	return &a
}

func (a workspaceORMHasManyWebhooks) Model(m *lead_scraper_servicev1.WorkspaceORM) *workspaceORMHasManyWebhooksTx {
	return &workspaceORMHasManyWebhooksTx{a.db.Model(m).Association(a.Name())}
}

type workspaceORMHasManyWebhooksTx struct{ tx *gorm.Association }

func (a workspaceORMHasManyWebhooksTx) Find() (result []*lead_scraper_servicev1.WebhookConfigORM, err error) {
	return result, a.tx.Find(&result)
}

func (a workspaceORMHasManyWebhooksTx) Append(values ...*lead_scraper_servicev1.WebhookConfigORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workspaceORMHasManyWebhooksTx) Replace(values ...*lead_scraper_servicev1.WebhookConfigORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workspaceORMHasManyWebhooksTx) Delete(values ...*lead_scraper_servicev1.WebhookConfigORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workspaceORMHasManyWebhooksTx) Clear() error {
	return a.tx.Clear()
}

func (a workspaceORMHasManyWebhooksTx) Count() int64 {
	return a.tx.Count()
}

type workspaceORMHasManyWorkflows struct {
	db *gorm.DB

	field.RelationField
}

func (a workspaceORMHasManyWorkflows) Where(conds ...field.Expr) *workspaceORMHasManyWorkflows {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workspaceORMHasManyWorkflows) WithContext(ctx context.Context) *workspaceORMHasManyWorkflows {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workspaceORMHasManyWorkflows) Session(session *gorm.Session) *workspaceORMHasManyWorkflows {
	a.db = a.db.Session(session)
	return &a
}

func (a workspaceORMHasManyWorkflows) Model(m *lead_scraper_servicev1.WorkspaceORM) *workspaceORMHasManyWorkflowsTx {
	return &workspaceORMHasManyWorkflowsTx{a.db.Model(m).Association(a.Name())}
}

type workspaceORMHasManyWorkflowsTx struct{ tx *gorm.Association }

func (a workspaceORMHasManyWorkflowsTx) Find() (result []*lead_scraper_servicev1.ScrapingWorkflowORM, err error) {
	return result, a.tx.Find(&result)
}

func (a workspaceORMHasManyWorkflowsTx) Append(values ...*lead_scraper_servicev1.ScrapingWorkflowORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workspaceORMHasManyWorkflowsTx) Replace(values ...*lead_scraper_servicev1.ScrapingWorkflowORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workspaceORMHasManyWorkflowsTx) Delete(values ...*lead_scraper_servicev1.ScrapingWorkflowORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workspaceORMHasManyWorkflowsTx) Clear() error {
	return a.tx.Clear()
}

func (a workspaceORMHasManyWorkflowsTx) Count() int64 {
	return a.tx.Count()
}

type workspaceORMDo struct{ gen.DO }

type IWorkspaceORMDo interface {
	gen.SubQuery
	Debug() IWorkspaceORMDo
	WithContext(ctx context.Context) IWorkspaceORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWorkspaceORMDo
	WriteDB() IWorkspaceORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWorkspaceORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWorkspaceORMDo
	Not(conds ...gen.Condition) IWorkspaceORMDo
	Or(conds ...gen.Condition) IWorkspaceORMDo
	Select(conds ...field.Expr) IWorkspaceORMDo
	Where(conds ...gen.Condition) IWorkspaceORMDo
	Order(conds ...field.Expr) IWorkspaceORMDo
	Distinct(cols ...field.Expr) IWorkspaceORMDo
	Omit(cols ...field.Expr) IWorkspaceORMDo
	Join(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo
	Group(cols ...field.Expr) IWorkspaceORMDo
	Having(conds ...gen.Condition) IWorkspaceORMDo
	Limit(limit int) IWorkspaceORMDo
	Offset(offset int) IWorkspaceORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkspaceORMDo
	Unscoped() IWorkspaceORMDo
	Create(values ...*lead_scraper_servicev1.WorkspaceORM) error
	CreateInBatches(values []*lead_scraper_servicev1.WorkspaceORM, batchSize int) error
	Save(values ...*lead_scraper_servicev1.WorkspaceORM) error
	First() (*lead_scraper_servicev1.WorkspaceORM, error)
	Take() (*lead_scraper_servicev1.WorkspaceORM, error)
	Last() (*lead_scraper_servicev1.WorkspaceORM, error)
	Find() ([]*lead_scraper_servicev1.WorkspaceORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.WorkspaceORM, err error)
	FindInBatches(result *[]*lead_scraper_servicev1.WorkspaceORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*lead_scraper_servicev1.WorkspaceORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWorkspaceORMDo
	Assign(attrs ...field.AssignExpr) IWorkspaceORMDo
	Joins(fields ...field.RelationField) IWorkspaceORMDo
	Preload(fields ...field.RelationField) IWorkspaceORMDo
	FirstOrInit() (*lead_scraper_servicev1.WorkspaceORM, error)
	FirstOrCreate() (*lead_scraper_servicev1.WorkspaceORM, error)
	FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.WorkspaceORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWorkspaceORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result lead_scraper_servicev1.WorkspaceORM, err error)
	GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.WorkspaceORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.WorkspaceORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result lead_scraper_servicev1.WorkspaceORM, err error)
	GetByIDs(ids []uint64) (result []lead_scraper_servicev1.WorkspaceORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.WorkspaceORM, err error)
	GetDeleted() (result []lead_scraper_servicev1.WorkspaceORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	CreateInBatch(items []lead_scraper_servicev1.WorkspaceORM, batchSize int) (err error)
	DeleteInBatch(ids []uint64) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.WorkspaceORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.WorkspaceORM, err error)
	FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.WorkspaceORM, err error)
	GetDistinct(columnName string) (result []lead_scraper_servicev1.WorkspaceORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.WorkspaceORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.WorkspaceORM, err error)
	ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.WorkspaceORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.WorkspaceORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) GetRecordByID(id uint64) (result lead_scraper_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (w workspaceORMDo) GetRecordByIDs(ids []uint64) (result []lead_scraper_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (w workspaceORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM workspaces ORDER BY " + w.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (w workspaceORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM workspaces ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) GetByID(id uint64) (result lead_scraper_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (w workspaceORMDo) GetByIDs(ids []uint64) (result []lead_scraper_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (w workspaceORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []lead_scraper_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + w.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (w workspaceORMDo) GetDeleted() (result []lead_scraper_servicev1.WorkspaceORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE workspaces SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE workspaces SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values...)
func (w workspaceORMDo) CreateInBatch(items []lead_scraper_servicev1.WorkspaceORM, batchSize int) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO workspaces (columns) VALUES (values...) ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (w workspaceORMDo) DeleteInBatch(ids []uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (w workspaceORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []lead_scraper_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (w workspaceORMDo) FindBy(columnName string, operator string, value interface{}) (result []lead_scraper_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (w workspaceORMDo) FindByPattern(columnName string, pattern string) (result []lead_scraper_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (w workspaceORMDo) GetDistinct(columnName string) (result []lead_scraper_servicev1.WorkspaceORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM workspaces ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (w workspaceORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []lead_scraper_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE workspaces SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (w workspaceORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (w workspaceORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (w workspaceORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []lead_scraper_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (w workspaceORMDo) ExistsAndGet(column string, value interface{}) (result lead_scraper_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM workspaces ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (w workspaceORMDo) ExistsAndGetActive(column string, value interface{}) (result lead_scraper_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM workspaces ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (w workspaceORMDo) Debug() IWorkspaceORMDo {
	return w.withDO(w.DO.Debug())
}

func (w workspaceORMDo) WithContext(ctx context.Context) IWorkspaceORMDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w workspaceORMDo) ReadDB() IWorkspaceORMDo {
	return w.Clauses(dbresolver.Read)
}

func (w workspaceORMDo) WriteDB() IWorkspaceORMDo {
	return w.Clauses(dbresolver.Write)
}

func (w workspaceORMDo) Session(config *gorm.Session) IWorkspaceORMDo {
	return w.withDO(w.DO.Session(config))
}

func (w workspaceORMDo) Clauses(conds ...clause.Expression) IWorkspaceORMDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w workspaceORMDo) Returning(value interface{}, columns ...string) IWorkspaceORMDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w workspaceORMDo) Not(conds ...gen.Condition) IWorkspaceORMDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w workspaceORMDo) Or(conds ...gen.Condition) IWorkspaceORMDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w workspaceORMDo) Select(conds ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w workspaceORMDo) Where(conds ...gen.Condition) IWorkspaceORMDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w workspaceORMDo) Order(conds ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w workspaceORMDo) Distinct(cols ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w workspaceORMDo) Omit(cols ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w workspaceORMDo) Join(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w workspaceORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w workspaceORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w workspaceORMDo) Group(cols ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w workspaceORMDo) Having(conds ...gen.Condition) IWorkspaceORMDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w workspaceORMDo) Limit(limit int) IWorkspaceORMDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w workspaceORMDo) Offset(offset int) IWorkspaceORMDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w workspaceORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkspaceORMDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w workspaceORMDo) Unscoped() IWorkspaceORMDo {
	return w.withDO(w.DO.Unscoped())
}

func (w workspaceORMDo) Create(values ...*lead_scraper_servicev1.WorkspaceORM) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w workspaceORMDo) CreateInBatches(values []*lead_scraper_servicev1.WorkspaceORM, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w workspaceORMDo) Save(values ...*lead_scraper_servicev1.WorkspaceORM) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w workspaceORMDo) First() (*lead_scraper_servicev1.WorkspaceORM, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.WorkspaceORM), nil
	}
}

func (w workspaceORMDo) Take() (*lead_scraper_servicev1.WorkspaceORM, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.WorkspaceORM), nil
	}
}

func (w workspaceORMDo) Last() (*lead_scraper_servicev1.WorkspaceORM, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.WorkspaceORM), nil
	}
}

func (w workspaceORMDo) Find() ([]*lead_scraper_servicev1.WorkspaceORM, error) {
	result, err := w.DO.Find()
	return result.([]*lead_scraper_servicev1.WorkspaceORM), err
}

func (w workspaceORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*lead_scraper_servicev1.WorkspaceORM, err error) {
	buf := make([]*lead_scraper_servicev1.WorkspaceORM, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w workspaceORMDo) FindInBatches(result *[]*lead_scraper_servicev1.WorkspaceORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w workspaceORMDo) Attrs(attrs ...field.AssignExpr) IWorkspaceORMDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w workspaceORMDo) Assign(attrs ...field.AssignExpr) IWorkspaceORMDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w workspaceORMDo) Joins(fields ...field.RelationField) IWorkspaceORMDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w workspaceORMDo) Preload(fields ...field.RelationField) IWorkspaceORMDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w workspaceORMDo) FirstOrInit() (*lead_scraper_servicev1.WorkspaceORM, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.WorkspaceORM), nil
	}
}

func (w workspaceORMDo) FirstOrCreate() (*lead_scraper_servicev1.WorkspaceORM, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*lead_scraper_servicev1.WorkspaceORM), nil
	}
}

func (w workspaceORMDo) FindByPage(offset int, limit int) (result []*lead_scraper_servicev1.WorkspaceORM, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w workspaceORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w workspaceORMDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w workspaceORMDo) Delete(models ...*lead_scraper_servicev1.WorkspaceORM) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *workspaceORMDo) withDO(do gen.Dao) *workspaceORMDo {
	w.DO = *do.(*gen.DO)
	return w
}
