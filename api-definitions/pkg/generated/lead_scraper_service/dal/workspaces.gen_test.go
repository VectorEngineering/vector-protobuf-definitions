// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"fmt"
	"strconv"
	"testing"
	"time"

	lead_scraper_servicev1 "github.com/Vector/vector-protobuf-definitions/api-definitions/pkg/generated/lead_scraper_service/v1"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm/clause"
)

func init() {
	InitializeDB()
	err := _gen_test_db.AutoMigrate(&lead_scraper_servicev1.WorkspaceORM{})
	if err != nil {
		fmt.Printf("Error: AutoMigrate(&lead_scraper_servicev1.WorkspaceORM{}) fail: %s", err)
	}
}

func Test_workspaceORMQuery(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	workspaceORM = *workspaceORM.As(workspaceORM.TableName())
	_do := workspaceORM.WithContext(context.Background()).Debug()

	primaryKey := field.NewString(workspaceORM.TableName(), clause.PrimaryKey)
	_, err := _do.Unscoped().Where(primaryKey.IsNotNull()).Delete()
	if err != nil {
		t.Error("clean table <workspaces> fail:", err)
		return
	}

	_, ok := workspaceORM.GetFieldByName("")
	if ok {
		t.Error("GetFieldByName(\"\") from workspaceORM success")
	}

	err = _do.Create(&lead_scraper_servicev1.WorkspaceORM{})
	if err != nil {
		t.Error("create item in table <workspaces> fail:", err)
	}

	err = _do.Save(&lead_scraper_servicev1.WorkspaceORM{})
	if err != nil {
		t.Error("create item in table <workspaces> fail:", err)
	}

	err = _do.CreateInBatches([]*lead_scraper_servicev1.WorkspaceORM{{}, {}}, 10)
	if err != nil {
		t.Error("create item in table <workspaces> fail:", err)
	}

	_, err = _do.Select(workspaceORM.ALL).Take()
	if err != nil {
		t.Error("Take() on table <workspaces> fail:", err)
	}

	_, err = _do.First()
	if err != nil {
		t.Error("First() on table <workspaces> fail:", err)
	}

	_, err = _do.Last()
	if err != nil {
		t.Error("First() on table <workspaces> fail:", err)
	}

	_, err = _do.Where(primaryKey.IsNotNull()).FindInBatch(10, func(tx gen.Dao, batch int) error { return nil })
	if err != nil {
		t.Error("FindInBatch() on table <workspaces> fail:", err)
	}

	err = _do.Where(primaryKey.IsNotNull()).FindInBatches(&[]*lead_scraper_servicev1.WorkspaceORM{}, 10, func(tx gen.Dao, batch int) error { return nil })
	if err != nil {
		t.Error("FindInBatches() on table <workspaces> fail:", err)
	}

	_, err = _do.Select(workspaceORM.ALL).Where(primaryKey.IsNotNull()).Order(primaryKey.Desc()).Find()
	if err != nil {
		t.Error("Find() on table <workspaces> fail:", err)
	}

	_, err = _do.Distinct(primaryKey).Take()
	if err != nil {
		t.Error("select Distinct() on table <workspaces> fail:", err)
	}

	_, err = _do.Select(workspaceORM.ALL).Omit(primaryKey).Take()
	if err != nil {
		t.Error("Omit() on table <workspaces> fail:", err)
	}

	_, err = _do.Group(primaryKey).Find()
	if err != nil {
		t.Error("Group() on table <workspaces> fail:", err)
	}

	_, err = _do.Scopes(func(dao gen.Dao) gen.Dao { return dao.Where(primaryKey.IsNotNull()) }).Find()
	if err != nil {
		t.Error("Scopes() on table <workspaces> fail:", err)
	}

	_, _, err = _do.FindByPage(0, 1)
	if err != nil {
		t.Error("FindByPage() on table <workspaces> fail:", err)
	}

	_, err = _do.ScanByPage(&lead_scraper_servicev1.WorkspaceORM{}, 0, 1)
	if err != nil {
		t.Error("ScanByPage() on table <workspaces> fail:", err)
	}

	_, err = _do.Attrs(primaryKey).Assign(primaryKey).FirstOrInit()
	if err != nil {
		t.Error("FirstOrInit() on table <workspaces> fail:", err)
	}

	_, err = _do.Attrs(primaryKey).Assign(primaryKey).FirstOrCreate()
	if err != nil {
		t.Error("FirstOrCreate() on table <workspaces> fail:", err)
	}

	var _a _another
	var _aPK = field.NewString(_a.TableName(), "id")

	err = _do.Join(&_a, primaryKey.EqCol(_aPK)).Scan(map[string]interface{}{})
	if err != nil {
		t.Error("Join() on table <workspaces> fail:", err)
	}

	err = _do.LeftJoin(&_a, primaryKey.EqCol(_aPK)).Scan(map[string]interface{}{})
	if err != nil {
		t.Error("LeftJoin() on table <workspaces> fail:", err)
	}

	_, err = _do.Not().Or().Clauses().Take()
	if err != nil {
		t.Error("Not/Or/Clauses on table <workspaces> fail:", err)
	}
}

var WorkspaceORMGetRecordByIDTestCase = []TestCase{}

func Test_workspaceORM_GetRecordByID(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMGetRecordByIDTestCase {
		t.Run("GetRecordByID_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetRecordByID(tt.Input.Args[0].(uint64))
			assert(t, "GetRecordByID", res1, tt.Expectation.Ret[0])
			assert(t, "GetRecordByID", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMGetRecordByIDsTestCase = []TestCase{}

func Test_workspaceORM_GetRecordByIDs(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMGetRecordByIDsTestCase {
		t.Run("GetRecordByIDs_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetRecordByIDs(tt.Input.Args[0].([]uint64))
			assert(t, "GetRecordByIDs", res1, tt.Expectation.Ret[0])
			assert(t, "GetRecordByIDs", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMDeleteRecordByIDTestCase = []TestCase{}

func Test_workspaceORM_DeleteRecordByID(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMDeleteRecordByIDTestCase {
		t.Run("DeleteRecordByID_"+strconv.Itoa(i), func(t *testing.T) {
			res1 := do.DeleteRecordByID(tt.Input.Args[0].(uint64))
			assert(t, "DeleteRecordByID", res1, tt.Expectation.Ret[0])
		})
	}
}

var WorkspaceORMGetAllRecordsTestCase = []TestCase{}

func Test_workspaceORM_GetAllRecords(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMGetAllRecordsTestCase {
		t.Run("GetAllRecords_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetAllRecords(tt.Input.Args[0].(string), tt.Input.Args[1].(int), tt.Input.Args[2].(int))
			assert(t, "GetAllRecords", res1, tt.Expectation.Ret[0])
			assert(t, "GetAllRecords", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMCountAllTestCase = []TestCase{}

func Test_workspaceORM_CountAll(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMCountAllTestCase {
		t.Run("CountAll_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.CountAll()
			assert(t, "CountAll", res1, tt.Expectation.Ret[0])
			assert(t, "CountAll", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMGetByIDTestCase = []TestCase{}

func Test_workspaceORM_GetByID(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMGetByIDTestCase {
		t.Run("GetByID_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetByID(tt.Input.Args[0].(uint64))
			assert(t, "GetByID", res1, tt.Expectation.Ret[0])
			assert(t, "GetByID", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMGetByIDsTestCase = []TestCase{}

func Test_workspaceORM_GetByIDs(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMGetByIDsTestCase {
		t.Run("GetByIDs_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetByIDs(tt.Input.Args[0].([]uint64))
			assert(t, "GetByIDs", res1, tt.Expectation.Ret[0])
			assert(t, "GetByIDs", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMGetActivePaginatedTestCase = []TestCase{}

func Test_workspaceORM_GetActivePaginated(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMGetActivePaginatedTestCase {
		t.Run("GetActivePaginated_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetActivePaginated(tt.Input.Args[0].(string), tt.Input.Args[1].(int), tt.Input.Args[2].(int))
			assert(t, "GetActivePaginated", res1, tt.Expectation.Ret[0])
			assert(t, "GetActivePaginated", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMGetDeletedTestCase = []TestCase{}

func Test_workspaceORM_GetDeleted(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMGetDeletedTestCase {
		t.Run("GetDeleted_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetDeleted()
			assert(t, "GetDeleted", res1, tt.Expectation.Ret[0])
			assert(t, "GetDeleted", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMSoftDeleteTestCase = []TestCase{}

func Test_workspaceORM_SoftDelete(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMSoftDeleteTestCase {
		t.Run("SoftDelete_"+strconv.Itoa(i), func(t *testing.T) {
			res1 := do.SoftDelete(tt.Input.Args[0].(uint64))
			assert(t, "SoftDelete", res1, tt.Expectation.Ret[0])
		})
	}
}

var WorkspaceORMRestoreTestCase = []TestCase{}

func Test_workspaceORM_Restore(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMRestoreTestCase {
		t.Run("Restore_"+strconv.Itoa(i), func(t *testing.T) {
			res1 := do.Restore(tt.Input.Args[0].(uint64))
			assert(t, "Restore", res1, tt.Expectation.Ret[0])
		})
	}
}

var WorkspaceORMCreateInBatchTestCase = []TestCase{}

func Test_workspaceORM_CreateInBatch(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMCreateInBatchTestCase {
		t.Run("CreateInBatch_"+strconv.Itoa(i), func(t *testing.T) {
			res1 := do.CreateInBatch(tt.Input.Args[0].([]lead_scraper_servicev1.WorkspaceORM), tt.Input.Args[1].(int))
			assert(t, "CreateInBatch", res1, tt.Expectation.Ret[0])
		})
	}
}

var WorkspaceORMDeleteInBatchTestCase = []TestCase{}

func Test_workspaceORM_DeleteInBatch(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMDeleteInBatchTestCase {
		t.Run("DeleteInBatch_"+strconv.Itoa(i), func(t *testing.T) {
			res1 := do.DeleteInBatch(tt.Input.Args[0].([]uint64))
			assert(t, "DeleteInBatch", res1, tt.Expectation.Ret[0])
		})
	}
}

var WorkspaceORMGetByTimeRangeTestCase = []TestCase{}

func Test_workspaceORM_GetByTimeRange(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMGetByTimeRangeTestCase {
		t.Run("GetByTimeRange_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetByTimeRange(tt.Input.Args[0].(time.Time), tt.Input.Args[1].(time.Time))
			assert(t, "GetByTimeRange", res1, tt.Expectation.Ret[0])
			assert(t, "GetByTimeRange", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMFindByTestCase = []TestCase{}

func Test_workspaceORM_FindBy(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMFindByTestCase {
		t.Run("FindBy_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.FindBy(tt.Input.Args[0].(string), tt.Input.Args[1].(string), tt.Input.Args[2].(interface{}))
			assert(t, "FindBy", res1, tt.Expectation.Ret[0])
			assert(t, "FindBy", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMFindByPatternTestCase = []TestCase{}

func Test_workspaceORM_FindByPattern(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMFindByPatternTestCase {
		t.Run("FindByPattern_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.FindByPattern(tt.Input.Args[0].(string), tt.Input.Args[1].(string))
			assert(t, "FindByPattern", res1, tt.Expectation.Ret[0])
			assert(t, "FindByPattern", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMGetDistinctTestCase = []TestCase{}

func Test_workspaceORM_GetDistinct(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMGetDistinctTestCase {
		t.Run("GetDistinct_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetDistinct(tt.Input.Args[0].(string))
			assert(t, "GetDistinct", res1, tt.Expectation.Ret[0])
			assert(t, "GetDistinct", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMFindWithFiltersTestCase = []TestCase{}

func Test_workspaceORM_FindWithFilters(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMFindWithFiltersTestCase {
		t.Run("FindWithFilters_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.FindWithFilters(tt.Input.Args[0].(map[string]interface{}), tt.Input.Args[1].(string), tt.Input.Args[2].(int), tt.Input.Args[3].(int))
			assert(t, "FindWithFilters", res1, tt.Expectation.Ret[0])
			assert(t, "FindWithFilters", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMTouchTestCase = []TestCase{}

func Test_workspaceORM_Touch(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMTouchTestCase {
		t.Run("Touch_"+strconv.Itoa(i), func(t *testing.T) {
			res1 := do.Touch(tt.Input.Args[0].(uint64))
			assert(t, "Touch", res1, tt.Expectation.Ret[0])
		})
	}
}

var WorkspaceORMExistsTestCase = []TestCase{}

func Test_workspaceORM_Exists(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMExistsTestCase {
		t.Run("Exists_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.Exists(tt.Input.Args[0].(string), tt.Input.Args[1].(interface{}))
			assert(t, "Exists", res1, tt.Expectation.Ret[0])
			assert(t, "Exists", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMExistsByIdTestCase = []TestCase{}

func Test_workspaceORM_ExistsById(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMExistsByIdTestCase {
		t.Run("ExistsById_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.ExistsById(tt.Input.Args[0].(uint64))
			assert(t, "ExistsById", res1, tt.Expectation.Ret[0])
			assert(t, "ExistsById", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMFindBySubqueryTestCase = []TestCase{}

func Test_workspaceORM_FindBySubquery(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMFindBySubqueryTestCase {
		t.Run("FindBySubquery_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.FindBySubquery(tt.Input.Args[0].(string), tt.Input.Args[1].(string), tt.Input.Args[2].(string))
			assert(t, "FindBySubquery", res1, tt.Expectation.Ret[0])
			assert(t, "FindBySubquery", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMExistsAndGetTestCase = []TestCase{}

func Test_workspaceORM_ExistsAndGet(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMExistsAndGetTestCase {
		t.Run("ExistsAndGet_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.ExistsAndGet(tt.Input.Args[0].(string), tt.Input.Args[1].(interface{}))
			assert(t, "ExistsAndGet", res1, tt.Expectation.Ret[0])
			assert(t, "ExistsAndGet", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceORMExistsAndGetActiveTestCase = []TestCase{}

func Test_workspaceORM_ExistsAndGetActive(t *testing.T) {
	workspaceORM := newWorkspaceORM(_gen_test_db)
	do := workspaceORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceORMExistsAndGetActiveTestCase {
		t.Run("ExistsAndGetActive_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.ExistsAndGetActive(tt.Input.Args[0].(string), tt.Input.Args[1].(interface{}))
			assert(t, "ExistsAndGetActive", res1, tt.Expectation.Ret[0])
			assert(t, "ExistsAndGetActive", res2, tt.Expectation.Ret[1])
		})
	}
}
