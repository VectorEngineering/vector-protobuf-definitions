// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: lead_scraper_service/v1/account_service.proto

package lead_scraper_servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeadScraperService_UpdateWorkspace_FullMethodName    = "/lead_scraper_service.v1.LeadScraperService/UpdateWorkspace"
	LeadScraperService_DeleteWorkspace_FullMethodName    = "/lead_scraper_service.v1.LeadScraperService/DeleteWorkspace"
	LeadScraperService_CreateTenant_FullMethodName       = "/lead_scraper_service.v1.LeadScraperService/CreateTenant"
	LeadScraperService_GetTenant_FullMethodName          = "/lead_scraper_service.v1.LeadScraperService/GetTenant"
	LeadScraperService_UpdateTenant_FullMethodName       = "/lead_scraper_service.v1.LeadScraperService/UpdateTenant"
	LeadScraperService_DeleteTenant_FullMethodName       = "/lead_scraper_service.v1.LeadScraperService/DeleteTenant"
	LeadScraperService_ListTenants_FullMethodName        = "/lead_scraper_service.v1.LeadScraperService/ListTenants"
	LeadScraperService_CreateOrganization_FullMethodName = "/lead_scraper_service.v1.LeadScraperService/CreateOrganization"
	LeadScraperService_GetOrganization_FullMethodName    = "/lead_scraper_service.v1.LeadScraperService/GetOrganization"
	LeadScraperService_UpdateOrganization_FullMethodName = "/lead_scraper_service.v1.LeadScraperService/UpdateOrganization"
	LeadScraperService_DeleteOrganization_FullMethodName = "/lead_scraper_service.v1.LeadScraperService/DeleteOrganization"
	LeadScraperService_ListOrganizations_FullMethodName  = "/lead_scraper_service.v1.LeadScraperService/ListOrganizations"
	LeadScraperService_CreateTenantAPIKey_FullMethodName = "/lead_scraper_service.v1.LeadScraperService/CreateTenantAPIKey"
	LeadScraperService_GetTenantAPIKey_FullMethodName    = "/lead_scraper_service.v1.LeadScraperService/GetTenantAPIKey"
	LeadScraperService_UpdateTenantAPIKey_FullMethodName = "/lead_scraper_service.v1.LeadScraperService/UpdateTenantAPIKey"
	LeadScraperService_DeleteTenantAPIKey_FullMethodName = "/lead_scraper_service.v1.LeadScraperService/DeleteTenantAPIKey"
	LeadScraperService_ListTenantAPIKeys_FullMethodName  = "/lead_scraper_service.v1.LeadScraperService/ListTenantAPIKeys"
	LeadScraperService_RotateTenantAPIKey_FullMethodName = "/lead_scraper_service.v1.LeadScraperService/RotateTenantAPIKey"
	LeadScraperService_CreateAPIKey_FullMethodName       = "/lead_scraper_service.v1.LeadScraperService/CreateAPIKey"
	LeadScraperService_GetAPIKey_FullMethodName          = "/lead_scraper_service.v1.LeadScraperService/GetAPIKey"
	LeadScraperService_UpdateAPIKey_FullMethodName       = "/lead_scraper_service.v1.LeadScraperService/UpdateAPIKey"
	LeadScraperService_DeleteAPIKey_FullMethodName       = "/lead_scraper_service.v1.LeadScraperService/DeleteAPIKey"
	LeadScraperService_ListAPIKeys_FullMethodName        = "/lead_scraper_service.v1.LeadScraperService/ListAPIKeys"
	LeadScraperService_RotateAPIKey_FullMethodName       = "/lead_scraper_service.v1.LeadScraperService/RotateAPIKey"
	LeadScraperService_ListLeads_FullMethodName          = "/lead_scraper_service.v1.LeadScraperService/ListLeads"
	LeadScraperService_GetLead_FullMethodName            = "/lead_scraper_service.v1.LeadScraperService/GetLead"
	LeadScraperService_CreateWebhook_FullMethodName      = "/lead_scraper_service.v1.LeadScraperService/CreateWebhook"
	LeadScraperService_GetWebhook_FullMethodName         = "/lead_scraper_service.v1.LeadScraperService/GetWebhook"
	LeadScraperService_UpdateWebhook_FullMethodName      = "/lead_scraper_service.v1.LeadScraperService/UpdateWebhook"
	LeadScraperService_DeleteWebhook_FullMethodName      = "/lead_scraper_service.v1.LeadScraperService/DeleteWebhook"
	LeadScraperService_ListWebhooks_FullMethodName       = "/lead_scraper_service.v1.LeadScraperService/ListWebhooks"
)

// LeadScraperServiceClient is the client API for LeadScraperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LeadScraperService provides functionality for managing Google Maps scraping jobs.
// This service allows users to create, monitor, and retrieve results from scraping tasks
// that extract data from Google Maps based on specified search criteria.
//
// Key features:
// - Create and manage scraping jobs
// - Monitor job status and progress
// - Download scraped results
// - Multi-tenant support with organization and user context
//
// Usage example:
// ```go
// client := workspace_service.NewLeadScraperServiceClient(conn)
//
//	resp, err := client.CreateScrapingJob(ctx, &CreateScrapingJobRequest{
//	    Name: "Coffee shops in Athens",
//	    Keywords: []string{"coffee", "caf√©"},
//	    Lang: "el",
//	})
//
// ```
type LeadScraperServiceClient interface {
	// UpdateWorkspace modifies workspace configuration
	//
	// Modifiable settings:
	// - Basic information (name, description)
	// - Access control lists
	// - Resource quotas
	// - Default parameters
	// - Integration configurations
	// - Notification preferences
	//
	// Update process:
	// 1. Validates new configuration
	// 2. Checks resource implications
	// 3. Applies changes atomically
	// 4. Updates dependent systems
	// 5. Logs modifications
	//
	// Safety features:
	// - Configuration validation
	// - Atomic updates
	// - Rollback capability
	// - Audit trail
	UpdateWorkspace(ctx context.Context, in *UpdateWorkspaceRequest, opts ...grpc.CallOption) (*UpdateWorkspaceResponse, error)
	// DeleteWorkspace removes a workspace and associated resources
	//
	// Deletion process:
	// 1. Validation checks
	//   - Resource dependencies
	//   - Active workflows
	//   - User permissions
	//
	// 2. Resource cleanup
	//   - Workflow termination
	//   - Data archival
	//   - Resource deallocation
	//
	// Safety measures:
	// - Soft delete with recovery window
	// - Dependency validation
	// - Resource cleanup confirmation
	// - Audit trail preservation
	//
	// Post-deletion:
	// - Notification to stakeholders
	// - Resource reclamation
	// - Audit log finalization
	DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...grpc.CallOption) (*DeleteWorkspaceResponse, error)
	// CreateTenant establishes a new tenant in the system
	//
	// A tenant represents the top-level organizational unit that can contain
	// multiple organizations. This endpoint sets up the necessary infrastructure
	// for multi-tenant isolation.
	//
	// Features:
	// - Automatic resource provisioning
	// - Custom domain support
	// - Billing configuration
	// - Security policy initialization
	//
	// Required permissions:
	// - create:tenant (system admin only)
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error)
	// GetTenant retrieves detailed tenant information
	//
	// Returns comprehensive information about a tenant including:
	// - Basic metadata
	// - Resource utilization
	// - Organization list
	// - Configuration settings
	// - Billing status
	//
	// Required permissions:
	// - read:tenant
	GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error)
	// UpdateTenant modifies tenant configuration
	//
	// Allows updating various tenant settings including:
	// - Name and description
	// - Domain configuration
	// - Security policies
	// - Resource limits
	// - Billing settings
	//
	// Required permissions:
	// - update:tenant
	UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*UpdateTenantResponse, error)
	// DeleteTenant removes a tenant and all associated resources
	//
	// This is a destructive operation that:
	// - Removes all tenant data
	// - Deletes associated organizations
	// - Cleans up resources
	// - Archives audit logs
	//
	// Required permissions:
	// - delete:tenant (system admin only)
	DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantResponse, error)
	// ListTenants retrieves all tenants in the system
	//
	// Features:
	// - Pagination support
	// - Filtering options
	// - Sorting capabilities
	// - Field selection
	//
	// Required permissions:
	// - list:tenant (system admin only)
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error)
	// CreateOrganization establishes a new organization within a tenant
	//
	// Organizations represent business units within a tenant that can:
	// - Manage their own users
	// - Have separate billing
	// - Maintain isolated resources
	// - Configure custom policies
	//
	// Required permissions:
	// - create:organization
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// GetOrganization retrieves detailed organization information
	//
	// Returns comprehensive information including:
	// - Basic metadata
	// - Member list
	// - Resource usage
	// - Billing status
	// - Policy configuration
	//
	// Required permissions:
	// - read:organization
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	// UpdateOrganization modifies organization configuration
	//
	// Allows updating:
	// - Basic information
	// - Security policies
	// - Resource limits
	// - Member permissions
	// - Integration settings
	//
	// Required permissions:
	// - update:organization
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// DeleteOrganization removes an organization and its resources
	//
	// This operation:
	// - Removes organization data
	// - Deletes member associations
	// - Cleans up resources
	// - Archives audit logs
	//
	// Required permissions:
	// - delete:organization
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	// ListOrganizations retrieves all organizations in a tenant
	//
	// Features:
	// - Pagination support
	// - Filtering by status
	// - Sorting options
	// - Field selection
	//
	// Required permissions:
	// - list:organization
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	// CreateTenantAPIKey generates a new API key for a tenant
	//
	// Features:
	// - Secure key generation
	// - Configurable permissions
	// - Automatic expiration
	// - Usage quotas
	//
	// Required validation:
	// - Valid tenant ID
	// - Authorization check
	// - Rate limit verification
	//
	// Required permissions:
	// - create:tenant_api_key
	CreateTenantAPIKey(ctx context.Context, in *CreateTenantAPIKeyRequest, opts ...grpc.CallOption) (*CreateTenantAPIKeyResponse, error)
	// GetTenantAPIKey retrieves details of a specific API key
	//
	// Returns:
	// - Key metadata
	// - Usage statistics
	// - Permission details
	// - Expiration status
	//
	// Security:
	// - Never returns full key value
	// - Validates tenant context
	//
	// Required permissions:
	// - read:tenant_api_key
	GetTenantAPIKey(ctx context.Context, in *GetTenantAPIKeyRequest, opts ...grpc.CallOption) (*GetTenantAPIKeyResponse, error)
	// UpdateTenantAPIKey modifies an existing API key
	//
	// Modifiable attributes:
	// - Name and description
	// - Permissions
	// - Usage quotas
	// - Expiration time
	//
	// Security:
	// - Validates tenant context
	// - Preserves key value
	//
	// Required permissions:
	// - update:tenant_api_key
	UpdateTenantAPIKey(ctx context.Context, in *UpdateTenantAPIKeyRequest, opts ...grpc.CallOption) (*UpdateTenantAPIKeyResponse, error)
	// DeleteTenantAPIKey revokes and removes an API key
	//
	// Process:
	// 1. Immediate key revocation
	// 2. Usage cleanup
	// 3. Audit log creation
	//
	// Security:
	// - Validates tenant context
	// - Immediate invalidation
	//
	// Required permissions:
	// - delete:tenant_api_key
	DeleteTenantAPIKey(ctx context.Context, in *DeleteTenantAPIKeyRequest, opts ...grpc.CallOption) (*DeleteTenantAPIKeyResponse, error)
	// ListTenantAPIKeys retrieves all API keys for a tenant
	//
	// Features:
	// - Pagination support
	// - Filtering options
	// - Usage statistics
	// - Status filtering
	//
	// Security:
	// - Validates tenant context
	// - Masks key values
	//
	// Required permissions:
	// - list:tenant_api_key
	ListTenantAPIKeys(ctx context.Context, in *ListTenantAPIKeysRequest, opts ...grpc.CallOption) (*ListTenantAPIKeysResponse, error)
	// RotateTenantAPIKey generates a new key while invalidating the old one
	//
	// Process:
	// 1. Generate new key
	// 2. Copy permissions
	// 3. Invalidate old key
	// 4. Return new key
	//
	// Security:
	// - Grace period option
	// - Audit logging
	//
	// Required permissions:
	// - rotate:tenant_api_key
	RotateTenantAPIKey(ctx context.Context, in *RotateTenantAPIKeyRequest, opts ...grpc.CallOption) (*RotateTenantAPIKeyResponse, error)
	// CreateAPIKey generates a new API key
	//
	// Features:
	// - Secure key generation
	// - Configurable permissions and scopes
	// - Automatic expiration
	// - Rate limiting and usage quotas
	//
	// Security:
	// - Validates organization and workspace context
	// - Enforces permission checks
	// - Audit logging
	//
	// Required permissions:
	// - create:api_key
	CreateAPIKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*CreateAPIKeyResponse, error)
	// GetAPIKey retrieves details of a specific API key
	//
	// Returns:
	// - Key metadata
	// - Usage statistics
	// - Permission details
	// - Expiration status
	//
	// Security:
	// - Never returns full key value
	// - Validates access permissions
	//
	// Required permissions:
	// - read:api_key
	GetAPIKey(ctx context.Context, in *GetAPIKeyRequest, opts ...grpc.CallOption) (*GetAPIKeyResponse, error)
	// UpdateAPIKey modifies an existing API key
	//
	// Modifiable attributes:
	// - Name and description
	// - Permissions and scopes
	// - Usage quotas
	// - Rate limits
	// - Expiration time
	// - IP restrictions
	//
	// Security:
	// - Validates modification permissions
	// - Preserves key value
	// - Audit logging
	//
	// Required permissions:
	// - update:api_key
	UpdateAPIKey(ctx context.Context, in *UpdateAPIKeyRequest, opts ...grpc.CallOption) (*UpdateAPIKeyResponse, error)
	// DeleteAPIKey revokes and removes an API key
	//
	// Process:
	// 1. Immediate key revocation
	// 2. Usage cleanup
	// 3. Audit log creation
	// 4. Notification to relevant parties
	//
	// Security:
	// - Validates deletion permissions
	// - Immediate invalidation
	// - Cannot delete last admin key
	//
	// Required permissions:
	// - delete:api_key
	DeleteAPIKey(ctx context.Context, in *DeleteAPIKeyRequest, opts ...grpc.CallOption) (*DeleteAPIKeyResponse, error)
	// ListAPIKeys retrieves all API keys
	//
	// Features:
	// - Pagination support
	// - Filtering by status, type, and usage
	// - Sorting options
	// - Usage statistics
	//
	// Security:
	// - Filters based on permissions
	// - Masks sensitive data
	//
	// Required permissions:
	// - list:api_key
	ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error)
	// RotateAPIKey generates a new key while invalidating the old one
	//
	// Process:
	// 1. Generate new key
	// 2. Copy existing configuration
	// 3. Set up grace period
	// 4. Invalidate old key
	//
	// Security:
	// - Validates rotation permissions
	// - Grace period for transition
	// - Audit logging
	//
	// Required permissions:
	// - rotate:api_key
	RotateAPIKey(ctx context.Context, in *RotateAPIKeyRequest, opts ...grpc.CallOption) (*RotateAPIKeyResponse, error)
	// ListLeads retrieves a paginated list of leads with comprehensive filtering options.
	//
	// Key features:
	// - Pagination support
	// - Rich filtering options
	// - Sorting capabilities
	// - Field selection
	// - Tenant context validation
	//
	// Required permissions:
	// - read:leads
	ListLeads(ctx context.Context, in *ListLeadsRequest, opts ...grpc.CallOption) (*ListLeadsResponse, error)
	// GetLead retrieves detailed information about a specific lead.
	//
	// Key features:
	// - Full lead details
	// - Associated metadata
	// - Audit information
	// - Tenant context validation
	//
	// Required permissions:
	// - read:leads
	GetLead(ctx context.Context, in *GetLeadRequest, opts ...grpc.CallOption) (*GetLeadResponse, error)
	// CreateWebhook creates a new webhook configuration.
	//
	// Key features:
	// - Webhook URL validation
	// - Authentication configuration
	// - Event trigger selection
	// - Retry policy configuration
	// - Payload customization
	//
	// Required permissions:
	// - create:webhook
	CreateWebhook(ctx context.Context, in *CreateWebhookRequest, opts ...grpc.CallOption) (*CreateWebhookResponse, error)
	// GetWebhook retrieves a specific webhook configuration.
	//
	// Key features:
	// - Full webhook details
	// - Authentication settings
	// - Event subscriptions
	// - Performance metrics
	//
	// Required permissions:
	// - read:webhook
	GetWebhook(ctx context.Context, in *GetWebhookRequest, opts ...grpc.CallOption) (*GetWebhookResponse, error)
	// UpdateWebhook modifies an existing webhook configuration.
	//
	// Key features:
	// - URL updates
	// - Authentication changes
	// - Event subscription management
	// - Retry policy adjustments
	//
	// Required permissions:
	// - update:webhook
	UpdateWebhook(ctx context.Context, in *UpdateWebhookRequest, opts ...grpc.CallOption) (*UpdateWebhookResponse, error)
	// DeleteWebhook removes a webhook configuration.
	//
	// Key features:
	// - Graceful shutdown
	// - Event queue cleanup
	// - Audit trail
	//
	// Required permissions:
	// - delete:webhook
	DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*DeleteWebhookResponse, error)
	// ListWebhooks retrieves all webhook configurations.
	//
	// Key features:
	// - Pagination support
	// - Filtering options
	// - Status tracking
	// - Performance metrics
	//
	// Required permissions:
	// - list:webhook
	ListWebhooks(ctx context.Context, in *ListWebhooksRequest, opts ...grpc.CallOption) (*ListWebhooksResponse, error)
}

type leadScraperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeadScraperServiceClient(cc grpc.ClientConnInterface) LeadScraperServiceClient {
	return &leadScraperServiceClient{cc}
}

func (c *leadScraperServiceClient) UpdateWorkspace(ctx context.Context, in *UpdateWorkspaceRequest, opts ...grpc.CallOption) (*UpdateWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkspaceResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_UpdateWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...grpc.CallOption) (*DeleteWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWorkspaceResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_DeleteWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTenantResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_CreateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTenantResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_GetTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*UpdateTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTenantResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_UpdateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTenantResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_DeleteTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTenantsResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_ListTenants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_DeleteOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_ListOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) CreateTenantAPIKey(ctx context.Context, in *CreateTenantAPIKeyRequest, opts ...grpc.CallOption) (*CreateTenantAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTenantAPIKeyResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_CreateTenantAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) GetTenantAPIKey(ctx context.Context, in *GetTenantAPIKeyRequest, opts ...grpc.CallOption) (*GetTenantAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTenantAPIKeyResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_GetTenantAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) UpdateTenantAPIKey(ctx context.Context, in *UpdateTenantAPIKeyRequest, opts ...grpc.CallOption) (*UpdateTenantAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTenantAPIKeyResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_UpdateTenantAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) DeleteTenantAPIKey(ctx context.Context, in *DeleteTenantAPIKeyRequest, opts ...grpc.CallOption) (*DeleteTenantAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTenantAPIKeyResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_DeleteTenantAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) ListTenantAPIKeys(ctx context.Context, in *ListTenantAPIKeysRequest, opts ...grpc.CallOption) (*ListTenantAPIKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTenantAPIKeysResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_ListTenantAPIKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) RotateTenantAPIKey(ctx context.Context, in *RotateTenantAPIKeyRequest, opts ...grpc.CallOption) (*RotateTenantAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotateTenantAPIKeyResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_RotateTenantAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) CreateAPIKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*CreateAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAPIKeyResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_CreateAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) GetAPIKey(ctx context.Context, in *GetAPIKeyRequest, opts ...grpc.CallOption) (*GetAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAPIKeyResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_GetAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) UpdateAPIKey(ctx context.Context, in *UpdateAPIKeyRequest, opts ...grpc.CallOption) (*UpdateAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAPIKeyResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_UpdateAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) DeleteAPIKey(ctx context.Context, in *DeleteAPIKeyRequest, opts ...grpc.CallOption) (*DeleteAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAPIKeyResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_DeleteAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAPIKeysResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_ListAPIKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) RotateAPIKey(ctx context.Context, in *RotateAPIKeyRequest, opts ...grpc.CallOption) (*RotateAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotateAPIKeyResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_RotateAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) ListLeads(ctx context.Context, in *ListLeadsRequest, opts ...grpc.CallOption) (*ListLeadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLeadsResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_ListLeads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) GetLead(ctx context.Context, in *GetLeadRequest, opts ...grpc.CallOption) (*GetLeadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeadResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_GetLead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) CreateWebhook(ctx context.Context, in *CreateWebhookRequest, opts ...grpc.CallOption) (*CreateWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWebhookResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_CreateWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) GetWebhook(ctx context.Context, in *GetWebhookRequest, opts ...grpc.CallOption) (*GetWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWebhookResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_GetWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) UpdateWebhook(ctx context.Context, in *UpdateWebhookRequest, opts ...grpc.CallOption) (*UpdateWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWebhookResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_UpdateWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*DeleteWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWebhookResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_DeleteWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) ListWebhooks(ctx context.Context, in *ListWebhooksRequest, opts ...grpc.CallOption) (*ListWebhooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWebhooksResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_ListWebhooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeadScraperServiceServer is the server API for LeadScraperService service.
// All implementations must embed UnimplementedLeadScraperServiceServer
// for forward compatibility.
//
// LeadScraperService provides functionality for managing Google Maps scraping jobs.
// This service allows users to create, monitor, and retrieve results from scraping tasks
// that extract data from Google Maps based on specified search criteria.
//
// Key features:
// - Create and manage scraping jobs
// - Monitor job status and progress
// - Download scraped results
// - Multi-tenant support with organization and user context
//
// Usage example:
// ```go
// client := workspace_service.NewLeadScraperServiceClient(conn)
//
//	resp, err := client.CreateScrapingJob(ctx, &CreateScrapingJobRequest{
//	    Name: "Coffee shops in Athens",
//	    Keywords: []string{"coffee", "caf√©"},
//	    Lang: "el",
//	})
//
// ```
type LeadScraperServiceServer interface {
	// UpdateWorkspace modifies workspace configuration
	//
	// Modifiable settings:
	// - Basic information (name, description)
	// - Access control lists
	// - Resource quotas
	// - Default parameters
	// - Integration configurations
	// - Notification preferences
	//
	// Update process:
	// 1. Validates new configuration
	// 2. Checks resource implications
	// 3. Applies changes atomically
	// 4. Updates dependent systems
	// 5. Logs modifications
	//
	// Safety features:
	// - Configuration validation
	// - Atomic updates
	// - Rollback capability
	// - Audit trail
	UpdateWorkspace(context.Context, *UpdateWorkspaceRequest) (*UpdateWorkspaceResponse, error)
	// DeleteWorkspace removes a workspace and associated resources
	//
	// Deletion process:
	// 1. Validation checks
	//   - Resource dependencies
	//   - Active workflows
	//   - User permissions
	//
	// 2. Resource cleanup
	//   - Workflow termination
	//   - Data archival
	//   - Resource deallocation
	//
	// Safety measures:
	// - Soft delete with recovery window
	// - Dependency validation
	// - Resource cleanup confirmation
	// - Audit trail preservation
	//
	// Post-deletion:
	// - Notification to stakeholders
	// - Resource reclamation
	// - Audit log finalization
	DeleteWorkspace(context.Context, *DeleteWorkspaceRequest) (*DeleteWorkspaceResponse, error)
	// CreateTenant establishes a new tenant in the system
	//
	// A tenant represents the top-level organizational unit that can contain
	// multiple organizations. This endpoint sets up the necessary infrastructure
	// for multi-tenant isolation.
	//
	// Features:
	// - Automatic resource provisioning
	// - Custom domain support
	// - Billing configuration
	// - Security policy initialization
	//
	// Required permissions:
	// - create:tenant (system admin only)
	CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error)
	// GetTenant retrieves detailed tenant information
	//
	// Returns comprehensive information about a tenant including:
	// - Basic metadata
	// - Resource utilization
	// - Organization list
	// - Configuration settings
	// - Billing status
	//
	// Required permissions:
	// - read:tenant
	GetTenant(context.Context, *GetTenantRequest) (*GetTenantResponse, error)
	// UpdateTenant modifies tenant configuration
	//
	// Allows updating various tenant settings including:
	// - Name and description
	// - Domain configuration
	// - Security policies
	// - Resource limits
	// - Billing settings
	//
	// Required permissions:
	// - update:tenant
	UpdateTenant(context.Context, *UpdateTenantRequest) (*UpdateTenantResponse, error)
	// DeleteTenant removes a tenant and all associated resources
	//
	// This is a destructive operation that:
	// - Removes all tenant data
	// - Deletes associated organizations
	// - Cleans up resources
	// - Archives audit logs
	//
	// Required permissions:
	// - delete:tenant (system admin only)
	DeleteTenant(context.Context, *DeleteTenantRequest) (*DeleteTenantResponse, error)
	// ListTenants retrieves all tenants in the system
	//
	// Features:
	// - Pagination support
	// - Filtering options
	// - Sorting capabilities
	// - Field selection
	//
	// Required permissions:
	// - list:tenant (system admin only)
	ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error)
	// CreateOrganization establishes a new organization within a tenant
	//
	// Organizations represent business units within a tenant that can:
	// - Manage their own users
	// - Have separate billing
	// - Maintain isolated resources
	// - Configure custom policies
	//
	// Required permissions:
	// - create:organization
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// GetOrganization retrieves detailed organization information
	//
	// Returns comprehensive information including:
	// - Basic metadata
	// - Member list
	// - Resource usage
	// - Billing status
	// - Policy configuration
	//
	// Required permissions:
	// - read:organization
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	// UpdateOrganization modifies organization configuration
	//
	// Allows updating:
	// - Basic information
	// - Security policies
	// - Resource limits
	// - Member permissions
	// - Integration settings
	//
	// Required permissions:
	// - update:organization
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// DeleteOrganization removes an organization and its resources
	//
	// This operation:
	// - Removes organization data
	// - Deletes member associations
	// - Cleans up resources
	// - Archives audit logs
	//
	// Required permissions:
	// - delete:organization
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// ListOrganizations retrieves all organizations in a tenant
	//
	// Features:
	// - Pagination support
	// - Filtering by status
	// - Sorting options
	// - Field selection
	//
	// Required permissions:
	// - list:organization
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	// CreateTenantAPIKey generates a new API key for a tenant
	//
	// Features:
	// - Secure key generation
	// - Configurable permissions
	// - Automatic expiration
	// - Usage quotas
	//
	// Required validation:
	// - Valid tenant ID
	// - Authorization check
	// - Rate limit verification
	//
	// Required permissions:
	// - create:tenant_api_key
	CreateTenantAPIKey(context.Context, *CreateTenantAPIKeyRequest) (*CreateTenantAPIKeyResponse, error)
	// GetTenantAPIKey retrieves details of a specific API key
	//
	// Returns:
	// - Key metadata
	// - Usage statistics
	// - Permission details
	// - Expiration status
	//
	// Security:
	// - Never returns full key value
	// - Validates tenant context
	//
	// Required permissions:
	// - read:tenant_api_key
	GetTenantAPIKey(context.Context, *GetTenantAPIKeyRequest) (*GetTenantAPIKeyResponse, error)
	// UpdateTenantAPIKey modifies an existing API key
	//
	// Modifiable attributes:
	// - Name and description
	// - Permissions
	// - Usage quotas
	// - Expiration time
	//
	// Security:
	// - Validates tenant context
	// - Preserves key value
	//
	// Required permissions:
	// - update:tenant_api_key
	UpdateTenantAPIKey(context.Context, *UpdateTenantAPIKeyRequest) (*UpdateTenantAPIKeyResponse, error)
	// DeleteTenantAPIKey revokes and removes an API key
	//
	// Process:
	// 1. Immediate key revocation
	// 2. Usage cleanup
	// 3. Audit log creation
	//
	// Security:
	// - Validates tenant context
	// - Immediate invalidation
	//
	// Required permissions:
	// - delete:tenant_api_key
	DeleteTenantAPIKey(context.Context, *DeleteTenantAPIKeyRequest) (*DeleteTenantAPIKeyResponse, error)
	// ListTenantAPIKeys retrieves all API keys for a tenant
	//
	// Features:
	// - Pagination support
	// - Filtering options
	// - Usage statistics
	// - Status filtering
	//
	// Security:
	// - Validates tenant context
	// - Masks key values
	//
	// Required permissions:
	// - list:tenant_api_key
	ListTenantAPIKeys(context.Context, *ListTenantAPIKeysRequest) (*ListTenantAPIKeysResponse, error)
	// RotateTenantAPIKey generates a new key while invalidating the old one
	//
	// Process:
	// 1. Generate new key
	// 2. Copy permissions
	// 3. Invalidate old key
	// 4. Return new key
	//
	// Security:
	// - Grace period option
	// - Audit logging
	//
	// Required permissions:
	// - rotate:tenant_api_key
	RotateTenantAPIKey(context.Context, *RotateTenantAPIKeyRequest) (*RotateTenantAPIKeyResponse, error)
	// CreateAPIKey generates a new API key
	//
	// Features:
	// - Secure key generation
	// - Configurable permissions and scopes
	// - Automatic expiration
	// - Rate limiting and usage quotas
	//
	// Security:
	// - Validates organization and workspace context
	// - Enforces permission checks
	// - Audit logging
	//
	// Required permissions:
	// - create:api_key
	CreateAPIKey(context.Context, *CreateAPIKeyRequest) (*CreateAPIKeyResponse, error)
	// GetAPIKey retrieves details of a specific API key
	//
	// Returns:
	// - Key metadata
	// - Usage statistics
	// - Permission details
	// - Expiration status
	//
	// Security:
	// - Never returns full key value
	// - Validates access permissions
	//
	// Required permissions:
	// - read:api_key
	GetAPIKey(context.Context, *GetAPIKeyRequest) (*GetAPIKeyResponse, error)
	// UpdateAPIKey modifies an existing API key
	//
	// Modifiable attributes:
	// - Name and description
	// - Permissions and scopes
	// - Usage quotas
	// - Rate limits
	// - Expiration time
	// - IP restrictions
	//
	// Security:
	// - Validates modification permissions
	// - Preserves key value
	// - Audit logging
	//
	// Required permissions:
	// - update:api_key
	UpdateAPIKey(context.Context, *UpdateAPIKeyRequest) (*UpdateAPIKeyResponse, error)
	// DeleteAPIKey revokes and removes an API key
	//
	// Process:
	// 1. Immediate key revocation
	// 2. Usage cleanup
	// 3. Audit log creation
	// 4. Notification to relevant parties
	//
	// Security:
	// - Validates deletion permissions
	// - Immediate invalidation
	// - Cannot delete last admin key
	//
	// Required permissions:
	// - delete:api_key
	DeleteAPIKey(context.Context, *DeleteAPIKeyRequest) (*DeleteAPIKeyResponse, error)
	// ListAPIKeys retrieves all API keys
	//
	// Features:
	// - Pagination support
	// - Filtering by status, type, and usage
	// - Sorting options
	// - Usage statistics
	//
	// Security:
	// - Filters based on permissions
	// - Masks sensitive data
	//
	// Required permissions:
	// - list:api_key
	ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListAPIKeysResponse, error)
	// RotateAPIKey generates a new key while invalidating the old one
	//
	// Process:
	// 1. Generate new key
	// 2. Copy existing configuration
	// 3. Set up grace period
	// 4. Invalidate old key
	//
	// Security:
	// - Validates rotation permissions
	// - Grace period for transition
	// - Audit logging
	//
	// Required permissions:
	// - rotate:api_key
	RotateAPIKey(context.Context, *RotateAPIKeyRequest) (*RotateAPIKeyResponse, error)
	// ListLeads retrieves a paginated list of leads with comprehensive filtering options.
	//
	// Key features:
	// - Pagination support
	// - Rich filtering options
	// - Sorting capabilities
	// - Field selection
	// - Tenant context validation
	//
	// Required permissions:
	// - read:leads
	ListLeads(context.Context, *ListLeadsRequest) (*ListLeadsResponse, error)
	// GetLead retrieves detailed information about a specific lead.
	//
	// Key features:
	// - Full lead details
	// - Associated metadata
	// - Audit information
	// - Tenant context validation
	//
	// Required permissions:
	// - read:leads
	GetLead(context.Context, *GetLeadRequest) (*GetLeadResponse, error)
	// CreateWebhook creates a new webhook configuration.
	//
	// Key features:
	// - Webhook URL validation
	// - Authentication configuration
	// - Event trigger selection
	// - Retry policy configuration
	// - Payload customization
	//
	// Required permissions:
	// - create:webhook
	CreateWebhook(context.Context, *CreateWebhookRequest) (*CreateWebhookResponse, error)
	// GetWebhook retrieves a specific webhook configuration.
	//
	// Key features:
	// - Full webhook details
	// - Authentication settings
	// - Event subscriptions
	// - Performance metrics
	//
	// Required permissions:
	// - read:webhook
	GetWebhook(context.Context, *GetWebhookRequest) (*GetWebhookResponse, error)
	// UpdateWebhook modifies an existing webhook configuration.
	//
	// Key features:
	// - URL updates
	// - Authentication changes
	// - Event subscription management
	// - Retry policy adjustments
	//
	// Required permissions:
	// - update:webhook
	UpdateWebhook(context.Context, *UpdateWebhookRequest) (*UpdateWebhookResponse, error)
	// DeleteWebhook removes a webhook configuration.
	//
	// Key features:
	// - Graceful shutdown
	// - Event queue cleanup
	// - Audit trail
	//
	// Required permissions:
	// - delete:webhook
	DeleteWebhook(context.Context, *DeleteWebhookRequest) (*DeleteWebhookResponse, error)
	// ListWebhooks retrieves all webhook configurations.
	//
	// Key features:
	// - Pagination support
	// - Filtering options
	// - Status tracking
	// - Performance metrics
	//
	// Required permissions:
	// - list:webhook
	ListWebhooks(context.Context, *ListWebhooksRequest) (*ListWebhooksResponse, error)
	mustEmbedUnimplementedLeadScraperServiceServer()
}

// UnimplementedLeadScraperServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeadScraperServiceServer struct{}

func (UnimplementedLeadScraperServiceServer) UpdateWorkspace(context.Context, *UpdateWorkspaceRequest) (*UpdateWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkspace not implemented")
}
func (UnimplementedLeadScraperServiceServer) DeleteWorkspace(context.Context, *DeleteWorkspaceRequest) (*DeleteWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkspace not implemented")
}
func (UnimplementedLeadScraperServiceServer) CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedLeadScraperServiceServer) GetTenant(context.Context, *GetTenantRequest) (*GetTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedLeadScraperServiceServer) UpdateTenant(context.Context, *UpdateTenantRequest) (*UpdateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedLeadScraperServiceServer) DeleteTenant(context.Context, *DeleteTenantRequest) (*DeleteTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedLeadScraperServiceServer) ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedLeadScraperServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedLeadScraperServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedLeadScraperServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedLeadScraperServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedLeadScraperServiceServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedLeadScraperServiceServer) CreateTenantAPIKey(context.Context, *CreateTenantAPIKeyRequest) (*CreateTenantAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenantAPIKey not implemented")
}
func (UnimplementedLeadScraperServiceServer) GetTenantAPIKey(context.Context, *GetTenantAPIKeyRequest) (*GetTenantAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantAPIKey not implemented")
}
func (UnimplementedLeadScraperServiceServer) UpdateTenantAPIKey(context.Context, *UpdateTenantAPIKeyRequest) (*UpdateTenantAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantAPIKey not implemented")
}
func (UnimplementedLeadScraperServiceServer) DeleteTenantAPIKey(context.Context, *DeleteTenantAPIKeyRequest) (*DeleteTenantAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenantAPIKey not implemented")
}
func (UnimplementedLeadScraperServiceServer) ListTenantAPIKeys(context.Context, *ListTenantAPIKeysRequest) (*ListTenantAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenantAPIKeys not implemented")
}
func (UnimplementedLeadScraperServiceServer) RotateTenantAPIKey(context.Context, *RotateTenantAPIKeyRequest) (*RotateTenantAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateTenantAPIKey not implemented")
}
func (UnimplementedLeadScraperServiceServer) CreateAPIKey(context.Context, *CreateAPIKeyRequest) (*CreateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (UnimplementedLeadScraperServiceServer) GetAPIKey(context.Context, *GetAPIKeyRequest) (*GetAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIKey not implemented")
}
func (UnimplementedLeadScraperServiceServer) UpdateAPIKey(context.Context, *UpdateAPIKeyRequest) (*UpdateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIKey not implemented")
}
func (UnimplementedLeadScraperServiceServer) DeleteAPIKey(context.Context, *DeleteAPIKeyRequest) (*DeleteAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKey not implemented")
}
func (UnimplementedLeadScraperServiceServer) ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (UnimplementedLeadScraperServiceServer) RotateAPIKey(context.Context, *RotateAPIKeyRequest) (*RotateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateAPIKey not implemented")
}
func (UnimplementedLeadScraperServiceServer) ListLeads(context.Context, *ListLeadsRequest) (*ListLeadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeads not implemented")
}
func (UnimplementedLeadScraperServiceServer) GetLead(context.Context, *GetLeadRequest) (*GetLeadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLead not implemented")
}
func (UnimplementedLeadScraperServiceServer) CreateWebhook(context.Context, *CreateWebhookRequest) (*CreateWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebhook not implemented")
}
func (UnimplementedLeadScraperServiceServer) GetWebhook(context.Context, *GetWebhookRequest) (*GetWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhook not implemented")
}
func (UnimplementedLeadScraperServiceServer) UpdateWebhook(context.Context, *UpdateWebhookRequest) (*UpdateWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebhook not implemented")
}
func (UnimplementedLeadScraperServiceServer) DeleteWebhook(context.Context, *DeleteWebhookRequest) (*DeleteWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (UnimplementedLeadScraperServiceServer) ListWebhooks(context.Context, *ListWebhooksRequest) (*ListWebhooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhooks not implemented")
}
func (UnimplementedLeadScraperServiceServer) mustEmbedUnimplementedLeadScraperServiceServer() {}
func (UnimplementedLeadScraperServiceServer) testEmbeddedByValue()                            {}

// UnsafeLeadScraperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeadScraperServiceServer will
// result in compilation errors.
type UnsafeLeadScraperServiceServer interface {
	mustEmbedUnimplementedLeadScraperServiceServer()
}

func RegisterLeadScraperServiceServer(s grpc.ServiceRegistrar, srv LeadScraperServiceServer) {
	// If the following call pancis, it indicates UnimplementedLeadScraperServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeadScraperService_ServiceDesc, srv)
}

func _LeadScraperService_UpdateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).UpdateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_UpdateWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).UpdateWorkspace(ctx, req.(*UpdateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_DeleteWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).DeleteWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_DeleteWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).DeleteWorkspace(ctx, req.(*DeleteWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_GetTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).GetTenant(ctx, req.(*GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).UpdateTenant(ctx, req.(*UpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).DeleteTenant(ctx, req.(*DeleteTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_ListTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).ListTenants(ctx, req.(*ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_CreateTenantAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).CreateTenantAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_CreateTenantAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).CreateTenantAPIKey(ctx, req.(*CreateTenantAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_GetTenantAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).GetTenantAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_GetTenantAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).GetTenantAPIKey(ctx, req.(*GetTenantAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_UpdateTenantAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).UpdateTenantAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_UpdateTenantAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).UpdateTenantAPIKey(ctx, req.(*UpdateTenantAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_DeleteTenantAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).DeleteTenantAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_DeleteTenantAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).DeleteTenantAPIKey(ctx, req.(*DeleteTenantAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_ListTenantAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).ListTenantAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_ListTenantAPIKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).ListTenantAPIKeys(ctx, req.(*ListTenantAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_RotateTenantAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateTenantAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).RotateTenantAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_RotateTenantAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).RotateTenantAPIKey(ctx, req.(*RotateTenantAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_CreateAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).CreateAPIKey(ctx, req.(*CreateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_GetAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).GetAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_GetAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).GetAPIKey(ctx, req.(*GetAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_UpdateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).UpdateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_UpdateAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).UpdateAPIKey(ctx, req.(*UpdateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_DeleteAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).DeleteAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_DeleteAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).DeleteAPIKey(ctx, req.(*DeleteAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_ListAPIKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).ListAPIKeys(ctx, req.(*ListAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_RotateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).RotateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_RotateAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).RotateAPIKey(ctx, req.(*RotateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_ListLeads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).ListLeads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_ListLeads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).ListLeads(ctx, req.(*ListLeadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_GetLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).GetLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_GetLead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).GetLead(ctx, req.(*GetLeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_CreateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).CreateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_CreateWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).CreateWebhook(ctx, req.(*CreateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_GetWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).GetWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_GetWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).GetWebhook(ctx, req.(*GetWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_UpdateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).UpdateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_UpdateWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).UpdateWebhook(ctx, req.(*UpdateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_DeleteWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).DeleteWebhook(ctx, req.(*DeleteWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_ListWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebhooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).ListWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_ListWebhooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).ListWebhooks(ctx, req.(*ListWebhooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeadScraperService_ServiceDesc is the grpc.ServiceDesc for LeadScraperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeadScraperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lead_scraper_service.v1.LeadScraperService",
	HandlerType: (*LeadScraperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateWorkspace",
			Handler:    _LeadScraperService_UpdateWorkspace_Handler,
		},
		{
			MethodName: "DeleteWorkspace",
			Handler:    _LeadScraperService_DeleteWorkspace_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _LeadScraperService_CreateTenant_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _LeadScraperService_GetTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _LeadScraperService_UpdateTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _LeadScraperService_DeleteTenant_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _LeadScraperService_ListTenants_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _LeadScraperService_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _LeadScraperService_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _LeadScraperService_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _LeadScraperService_DeleteOrganization_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _LeadScraperService_ListOrganizations_Handler,
		},
		{
			MethodName: "CreateTenantAPIKey",
			Handler:    _LeadScraperService_CreateTenantAPIKey_Handler,
		},
		{
			MethodName: "GetTenantAPIKey",
			Handler:    _LeadScraperService_GetTenantAPIKey_Handler,
		},
		{
			MethodName: "UpdateTenantAPIKey",
			Handler:    _LeadScraperService_UpdateTenantAPIKey_Handler,
		},
		{
			MethodName: "DeleteTenantAPIKey",
			Handler:    _LeadScraperService_DeleteTenantAPIKey_Handler,
		},
		{
			MethodName: "ListTenantAPIKeys",
			Handler:    _LeadScraperService_ListTenantAPIKeys_Handler,
		},
		{
			MethodName: "RotateTenantAPIKey",
			Handler:    _LeadScraperService_RotateTenantAPIKey_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _LeadScraperService_CreateAPIKey_Handler,
		},
		{
			MethodName: "GetAPIKey",
			Handler:    _LeadScraperService_GetAPIKey_Handler,
		},
		{
			MethodName: "UpdateAPIKey",
			Handler:    _LeadScraperService_UpdateAPIKey_Handler,
		},
		{
			MethodName: "DeleteAPIKey",
			Handler:    _LeadScraperService_DeleteAPIKey_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _LeadScraperService_ListAPIKeys_Handler,
		},
		{
			MethodName: "RotateAPIKey",
			Handler:    _LeadScraperService_RotateAPIKey_Handler,
		},
		{
			MethodName: "ListLeads",
			Handler:    _LeadScraperService_ListLeads_Handler,
		},
		{
			MethodName: "GetLead",
			Handler:    _LeadScraperService_GetLead_Handler,
		},
		{
			MethodName: "CreateWebhook",
			Handler:    _LeadScraperService_CreateWebhook_Handler,
		},
		{
			MethodName: "GetWebhook",
			Handler:    _LeadScraperService_GetWebhook_Handler,
		},
		{
			MethodName: "UpdateWebhook",
			Handler:    _LeadScraperService_UpdateWebhook_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _LeadScraperService_DeleteWebhook_Handler,
		},
		{
			MethodName: "ListWebhooks",
			Handler:    _LeadScraperService_ListWebhooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lead_scraper_service/v1/account_service.proto",
}
