// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: lead_scraper_service/v1/account_service.proto

package lead_scraper_servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeadScraperService_CreateScrapingJob_FullMethodName       = "/lead_scraper_service.v1.LeadScraperService/CreateScrapingJob"
	LeadScraperService_ListScrapingJobs_FullMethodName        = "/lead_scraper_service.v1.LeadScraperService/ListScrapingJobs"
	LeadScraperService_GetScrapingJob_FullMethodName          = "/lead_scraper_service.v1.LeadScraperService/GetScrapingJob"
	LeadScraperService_DeleteScrapingJob_FullMethodName       = "/lead_scraper_service.v1.LeadScraperService/DeleteScrapingJob"
	LeadScraperService_DownloadScrapingResults_FullMethodName = "/lead_scraper_service.v1.LeadScraperService/DownloadScrapingResults"
	LeadScraperService_CreateAccount_FullMethodName           = "/lead_scraper_service.v1.LeadScraperService/CreateAccount"
	LeadScraperService_GetAccount_FullMethodName              = "/lead_scraper_service.v1.LeadScraperService/GetAccount"
	LeadScraperService_UpdateAccount_FullMethodName           = "/lead_scraper_service.v1.LeadScraperService/UpdateAccount"
	LeadScraperService_DeleteAccount_FullMethodName           = "/lead_scraper_service.v1.LeadScraperService/DeleteAccount"
	LeadScraperService_CreateWorkspace_FullMethodName         = "/lead_scraper_service.v1.LeadScraperService/CreateWorkspace"
	LeadScraperService_ListWorkspaces_FullMethodName          = "/lead_scraper_service.v1.LeadScraperService/ListWorkspaces"
	LeadScraperService_GetAccountUsage_FullMethodName         = "/lead_scraper_service.v1.LeadScraperService/GetAccountUsage"
	LeadScraperService_UpdateAccountSettings_FullMethodName   = "/lead_scraper_service.v1.LeadScraperService/UpdateAccountSettings"
	LeadScraperService_ListAccounts_FullMethodName            = "/lead_scraper_service.v1.LeadScraperService/ListAccounts"
	LeadScraperService_CreateWorkflow_FullMethodName          = "/lead_scraper_service.v1.LeadScraperService/CreateWorkflow"
	LeadScraperService_GetWorkflow_FullMethodName             = "/lead_scraper_service.v1.LeadScraperService/GetWorkflow"
	LeadScraperService_UpdateWorkflow_FullMethodName          = "/lead_scraper_service.v1.LeadScraperService/UpdateWorkflow"
	LeadScraperService_ListWorkflows_FullMethodName           = "/lead_scraper_service.v1.LeadScraperService/ListWorkflows"
	LeadScraperService_TriggerWorkflow_FullMethodName         = "/lead_scraper_service.v1.LeadScraperService/TriggerWorkflow"
	LeadScraperService_PauseWorkflow_FullMethodName           = "/lead_scraper_service.v1.LeadScraperService/PauseWorkflow"
	LeadScraperService_GetWorkspaceAnalytics_FullMethodName   = "/lead_scraper_service.v1.LeadScraperService/GetWorkspaceAnalytics"
	LeadScraperService_GetWorkspace_FullMethodName            = "/lead_scraper_service.v1.LeadScraperService/GetWorkspace"
	LeadScraperService_UpdateWorkspace_FullMethodName         = "/lead_scraper_service.v1.LeadScraperService/UpdateWorkspace"
	LeadScraperService_DeleteWorkspace_FullMethodName         = "/lead_scraper_service.v1.LeadScraperService/DeleteWorkspace"
	LeadScraperService_CreateTenant_FullMethodName            = "/lead_scraper_service.v1.LeadScraperService/CreateTenant"
	LeadScraperService_GetTenant_FullMethodName               = "/lead_scraper_service.v1.LeadScraperService/GetTenant"
	LeadScraperService_UpdateTenant_FullMethodName            = "/lead_scraper_service.v1.LeadScraperService/UpdateTenant"
	LeadScraperService_DeleteTenant_FullMethodName            = "/lead_scraper_service.v1.LeadScraperService/DeleteTenant"
	LeadScraperService_ListTenants_FullMethodName             = "/lead_scraper_service.v1.LeadScraperService/ListTenants"
	LeadScraperService_CreateOrganization_FullMethodName      = "/lead_scraper_service.v1.LeadScraperService/CreateOrganization"
	LeadScraperService_GetOrganization_FullMethodName         = "/lead_scraper_service.v1.LeadScraperService/GetOrganization"
	LeadScraperService_UpdateOrganization_FullMethodName      = "/lead_scraper_service.v1.LeadScraperService/UpdateOrganization"
	LeadScraperService_DeleteOrganization_FullMethodName      = "/lead_scraper_service.v1.LeadScraperService/DeleteOrganization"
	LeadScraperService_ListOrganizations_FullMethodName       = "/lead_scraper_service.v1.LeadScraperService/ListOrganizations"
)

// LeadScraperServiceClient is the client API for LeadScraperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LeadScraperService provides functionality for managing Google Maps scraping jobs.
// This service allows users to create, monitor, and retrieve results from scraping tasks
// that extract data from Google Maps based on specified search criteria.
//
// Key features:
// - Create and manage scraping jobs
// - Monitor job status and progress
// - Download scraped results
// - Multi-tenant support with organization and user context
//
// Usage example:
// ```go
// client := workspace_service.NewLeadScraperServiceClient(conn)
//
//	resp, err := client.CreateScrapingJob(ctx, &CreateScrapingJobRequest{
//	    Name: "Coffee shops in Athens",
//	    Keywords: []string{"coffee", "caf√©"},
//	    Lang: "el",
//	})
//
// ```
type LeadScraperServiceClient interface {
	// Create a new Google Maps scraping job
	//
	// This endpoint initiates a new scraping task with the specified parameters.
	// The job will be queued and processed asynchronously. The response includes
	// a job ID that can be used to track the job's progress.
	//
	// Common use cases:
	// - Scrape business listings for market research
	// - Collect location data for geographic analysis
	// - Extract contact information for lead generation
	CreateScrapingJob(ctx context.Context, in *CreateScrapingJobRequest, opts ...grpc.CallOption) (*CreateScrapingJobResponse, error)
	// Get all scraping jobs
	//
	// Retrieves a list of all scraping jobs for the authenticated user within their
	// organization context. The results can be filtered by status and other criteria.
	//
	// The response includes basic job information and status. For detailed job data,
	// use GetScrapingJob with a specific job ID.
	ListScrapingJobs(ctx context.Context, in *ListScrapingJobsRequest, opts ...grpc.CallOption) (*ListScrapingJobsResponse, error)
	// Get a specific scraping job
	//
	// Retrieves detailed information about a specific scraping job, including its
	// current status, configuration, and progress metrics.
	//
	// This endpoint is useful for:
	// - Monitoring job progress
	// - Debugging failed jobs
	// - Retrieving job configuration details
	GetScrapingJob(ctx context.Context, in *GetScrapingJobRequest, opts ...grpc.CallOption) (*GetScrapingJobResponse, error)
	// Delete a specific scraping job
	//
	// Permanently removes a scraping job and its associated data. This action cannot
	// be undone. If the job is currently running, it will be stopped.
	//
	// Security note:
	// - Requires authentication
	// - User must have appropriate permissions
	// - Job must belong to user's organization
	DeleteScrapingJob(ctx context.Context, in *DeleteScrapingJobRequest, opts ...grpc.CallOption) (*DeleteScrapingJobResponse, error)
	// Download job results
	//
	// Downloads the results of a completed scraping job in CSV format. The response
	// includes the file content and appropriate headers for browser download.
	//
	// The CSV file includes:
	// - Business names and addresses
	// - Contact information
	// - Rating and review counts
	// - Operating hours
	// - Additional metadata based on job configuration
	DownloadScrapingResults(ctx context.Context, in *DownloadScrapingResultsRequest, opts ...grpc.CallOption) (*DownloadScrapingResultsResponse, error)
	// Create a new account
	//
	// This endpoint creates a new user account in the workspace service.
	// It sets up the necessary infrastructure for the user to start managing
	// scraping jobs and other workspace resources.
	//
	// Required permissions:
	// - create:account
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// Get account details
	//
	// Retrieves detailed information about a specific account, including
	// associated scraping jobs and account settings.
	//
	// Required permissions:
	// - read:account
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// Update account
	//
	// Updates the specified fields of an existing account. Only provided
	// fields will be modified.
	//
	// Required permissions:
	// - update:account
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	// Delete account
	//
	// Permanently deletes an account and all associated resources.
	// This action cannot be undone.
	//
	// Required permissions:
	// - delete:account
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	// CreateWorkspace establishes a new organizational workspace for managing scraping jobs
	//
	// This endpoint creates a dedicated workspace with configurable:
	// - Access controls and permissions
	// - Resource quotas
	// - Team member associations
	// - Job execution environments
	//
	// Required parameters:
	// - account_id: Parent account ID
	// - name: Human-readable workspace name
	// - region: Deployment region for workspace resources
	//
	// Example:
	// ```curl
	// POST /lead-scraper-microservice/api/v1/workspaces
	//
	//	{
	//	  "name": "European Market Research",
	//	  "region": "eu-west-1",
	//	  "default_job_parameters": {
	//	    "lang": "en",
	//	    "country_code": "GR"
	//	  }
	//	}
	//
	// ```
	CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*CreateWorkspaceResponse, error)
	// ListWorkspaces retrieves all workspaces associated with an account
	//
	// Features:
	// - Pagination support via limit/offset parameters
	// - Filtering by creation date, region, and status
	// - Summary statistics for quick overview
	//
	// Response includes:
	// - Basic workspace metadata
	// - Job execution statistics
	// - Resource utilization metrics
	ListWorkspaces(ctx context.Context, in *ListWorkspacesRequest, opts ...grpc.CallOption) (*ListWorkspacesResponse, error)
	// GetAccountUsage provides detailed usage metrics for an account
	//
	// Metrics include:
	// - Active scraping jobs
	// - API call statistics
	// - Storage utilization
	// - Data processing throughput
	// - Historical usage trends
	//
	// Usage scenarios:
	// - Billing and invoicing
	// - Resource planning
	// - Usage quota enforcement
	GetAccountUsage(ctx context.Context, in *GetAccountUsageRequest, opts ...grpc.CallOption) (*GetAccountUsageResponse, error)
	// UpdateAccountSettings modifies configurable account parameters
	//
	// Configurable settings:
	// - Notification preferences
	// - API rate limits
	// - Data retention policies
	// - Security settings (2FA, IP whitelisting)
	// - Default job parameters
	//
	// Example update:
	// ```json
	//
	//	{
	//	  "notification_settings": {
	//	    "job_completion_webhook": "https://example.com/webhooks/jobs"
	//	  },
	//	  "data_retention_days": 30
	//	}
	//
	// ```
	UpdateAccountSettings(ctx context.Context, in *UpdateAccountSettingsRequest, opts ...grpc.CallOption) (*UpdateAccountSettingsResponse, error)
	// ListAccounts retrieves paginated account information
	//
	// Features:
	// - Server-side filtering by organization, status, and region
	// - Sorting by creation date, last active, etc.
	// - Partial response field masking
	//
	// Security:
	// - Requires admin privileges
	// - Results filtered by organization context
	// - Sensitive fields omitted by default
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	// CreateWorkflow establishes a new workflow for a workspace
	//
	// # This endpoint creates a new workflow configuration for a specific workspace
	//
	// Required parameters:
	// - workspace_id: Parent workspace ID
	// - name: Human-readable workflow name
	// - description: Optional workflow description
	// - parameters: Job parameters for the workflow
	//
	// Example:
	// ```json
	CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest, opts ...grpc.CallOption) (*CreateWorkflowResponse, error)
	// GetWorkflow retrieves detailed information about a specific workflow
	//
	// This endpoint provides comprehensive details about a workflow, including:
	// - Workflow configuration
	// - Job execution history
	// - Associated workspaces
	GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*GetWorkflowResponse, error)
	// UpdateWorkflow modifies the configuration of a specific workflow
	//
	// This endpoint allows updating the details of a workflow, including:
	// - Workflow name and description
	// - Job parameters
	//
	// Example update:
	// ```json
	//
	//	{
	//	  "name": "Updated Workflow",
	//	  "description": "Updated description"
	//	}
	//
	// ```
	UpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest, opts ...grpc.CallOption) (*UpdateWorkflowResponse, error)
	// ListWorkflows retrieves all workflows in a workspace
	//
	// Features:
	// - Pagination support with customizable page size
	// - Filtering by status, creation date, and type
	// - Sorting options for various workflow attributes
	//
	// Response includes:
	// - Workflow metadata and configuration
	// - Execution statistics and status
	// - Last run information
	// - Associated resource usage
	//
	// Common use cases:
	// - Monitoring workflow health
	// - Auditing workflow configurations
	// - Resource utilization analysis
	ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error)
	// TriggerWorkflow initiates workflow execution with specified parameters
	//
	// Features:
	// - Immediate or scheduled execution
	// - Custom parameter overrides
	// - Dependency chain validation
	// - Resource availability check
	//
	// Execution process:
	// 1. Validates workflow configuration
	// 2. Checks resource availability
	// 3. Initializes execution environment
	// 4. Starts job processing
	// 5. Monitors progress and updates status
	//
	// Error handling:
	// - Automatic retry for transient failures
	// - Configurable timeout settings
	// - Detailed error reporting
	TriggerWorkflow(ctx context.Context, in *TriggerWorkflowRequest, opts ...grpc.CallOption) (*TriggerWorkflowResponse, error)
	// PauseWorkflow safely suspends workflow execution
	//
	// Behavior:
	// - Gracefully stops job processing
	// - Maintains workflow state
	// - Preserves partial results
	// - Allows resume from last checkpoint
	//
	// Safety measures:
	// - Completes in-progress tasks
	// - Saves checkpoint data
	// - Updates workflow status
	// - Notifies dependent systems
	//
	// Use cases:
	// - System maintenance
	// - Resource reallocation
	// - Error investigation
	// - Configuration updates
	PauseWorkflow(ctx context.Context, in *PauseWorkflowRequest, opts ...grpc.CallOption) (*PauseWorkflowResponse, error)
	// GetWorkspaceAnalytics provides comprehensive workspace metrics
	//
	// Metrics categories:
	// - Resource utilization (CPU, memory, storage)
	// - Job execution statistics
	// - Error rates and types
	// - Performance trends
	// - Cost analysis
	//
	// Time ranges:
	// - Real-time metrics
	// - Historical data (configurable periods)
	// - Trend analysis
	//
	// Aggregation options:
	// - By workflow
	// - By job type
	// - By time period
	// - By resource type
	GetWorkspaceAnalytics(ctx context.Context, in *GetWorkspaceAnalyticsRequest, opts ...grpc.CallOption) (*GetWorkspaceAnalyticsResponse, error)
	// GetWorkspace retrieves detailed workspace information
	//
	// Response includes:
	// - Basic metadata (name, ID, creation date)
	// - Access control configuration
	// - Resource quotas and usage
	// - Workflow inventory
	// - Integration settings
	//
	// Security features:
	// - Role-based access control
	// - Audit log integration
	// - Resource isolation validation
	//
	// Common use cases:
	// - Workspace administration
	// - Configuration management
	// - Compliance auditing
	// - Resource planning
	GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error)
	// UpdateWorkspace modifies workspace configuration
	//
	// Modifiable settings:
	// - Basic information (name, description)
	// - Access control lists
	// - Resource quotas
	// - Default parameters
	// - Integration configurations
	// - Notification preferences
	//
	// Update process:
	// 1. Validates new configuration
	// 2. Checks resource implications
	// 3. Applies changes atomically
	// 4. Updates dependent systems
	// 5. Logs modifications
	//
	// Safety features:
	// - Configuration validation
	// - Atomic updates
	// - Rollback capability
	// - Audit trail
	UpdateWorkspace(ctx context.Context, in *UpdateWorkspaceRequest, opts ...grpc.CallOption) (*UpdateWorkspaceResponse, error)
	// DeleteWorkspace removes a workspace and associated resources
	//
	// Deletion process:
	// 1. Validation checks
	//   - Resource dependencies
	//   - Active workflows
	//   - User permissions
	//
	// 2. Resource cleanup
	//   - Workflow termination
	//   - Data archival
	//   - Resource deallocation
	//
	// Safety measures:
	// - Soft delete with recovery window
	// - Dependency validation
	// - Resource cleanup confirmation
	// - Audit trail preservation
	//
	// Post-deletion:
	// - Notification to stakeholders
	// - Resource reclamation
	// - Audit log finalization
	DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...grpc.CallOption) (*DeleteWorkspaceResponse, error)
	// CreateTenant establishes a new tenant in the system
	//
	// A tenant represents the top-level organizational unit that can contain
	// multiple organizations. This endpoint sets up the necessary infrastructure
	// for multi-tenant isolation.
	//
	// Features:
	// - Automatic resource provisioning
	// - Custom domain support
	// - Billing configuration
	// - Security policy initialization
	//
	// Required permissions:
	// - create:tenant (system admin only)
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error)
	// GetTenant retrieves detailed tenant information
	//
	// Returns comprehensive information about a tenant including:
	// - Basic metadata
	// - Resource utilization
	// - Organization list
	// - Configuration settings
	// - Billing status
	//
	// Required permissions:
	// - read:tenant
	GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error)
	// UpdateTenant modifies tenant configuration
	//
	// Allows updating various tenant settings including:
	// - Name and description
	// - Domain configuration
	// - Security policies
	// - Resource limits
	// - Billing settings
	//
	// Required permissions:
	// - update:tenant
	UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*UpdateTenantResponse, error)
	// DeleteTenant removes a tenant and all associated resources
	//
	// This is a destructive operation that:
	// - Removes all tenant data
	// - Deletes associated organizations
	// - Cleans up resources
	// - Archives audit logs
	//
	// Required permissions:
	// - delete:tenant (system admin only)
	DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantResponse, error)
	// ListTenants retrieves all tenants in the system
	//
	// Features:
	// - Pagination support
	// - Filtering options
	// - Sorting capabilities
	// - Field selection
	//
	// Required permissions:
	// - list:tenant (system admin only)
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error)
	// CreateOrganization establishes a new organization within a tenant
	//
	// Organizations represent business units within a tenant that can:
	// - Manage their own users
	// - Have separate billing
	// - Maintain isolated resources
	// - Configure custom policies
	//
	// Required permissions:
	// - create:organization
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// GetOrganization retrieves detailed organization information
	//
	// Returns comprehensive information including:
	// - Basic metadata
	// - Member list
	// - Resource usage
	// - Billing status
	// - Policy configuration
	//
	// Required permissions:
	// - read:organization
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	// UpdateOrganization modifies organization configuration
	//
	// Allows updating:
	// - Basic information
	// - Security policies
	// - Resource limits
	// - Member permissions
	// - Integration settings
	//
	// Required permissions:
	// - update:organization
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// DeleteOrganization removes an organization and its resources
	//
	// This operation:
	// - Removes organization data
	// - Deletes member associations
	// - Cleans up resources
	// - Archives audit logs
	//
	// Required permissions:
	// - delete:organization
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	// ListOrganizations retrieves all organizations in a tenant
	//
	// Features:
	// - Pagination support
	// - Filtering by status
	// - Sorting options
	// - Field selection
	//
	// Required permissions:
	// - list:organization
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
}

type leadScraperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeadScraperServiceClient(cc grpc.ClientConnInterface) LeadScraperServiceClient {
	return &leadScraperServiceClient{cc}
}

func (c *leadScraperServiceClient) CreateScrapingJob(ctx context.Context, in *CreateScrapingJobRequest, opts ...grpc.CallOption) (*CreateScrapingJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateScrapingJobResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_CreateScrapingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) ListScrapingJobs(ctx context.Context, in *ListScrapingJobsRequest, opts ...grpc.CallOption) (*ListScrapingJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScrapingJobsResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_ListScrapingJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) GetScrapingJob(ctx context.Context, in *GetScrapingJobRequest, opts ...grpc.CallOption) (*GetScrapingJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScrapingJobResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_GetScrapingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) DeleteScrapingJob(ctx context.Context, in *DeleteScrapingJobRequest, opts ...grpc.CallOption) (*DeleteScrapingJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScrapingJobResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_DeleteScrapingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) DownloadScrapingResults(ctx context.Context, in *DownloadScrapingResultsRequest, opts ...grpc.CallOption) (*DownloadScrapingResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadScrapingResultsResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_DownloadScrapingResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*CreateWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWorkspaceResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_CreateWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) ListWorkspaces(ctx context.Context, in *ListWorkspacesRequest, opts ...grpc.CallOption) (*ListWorkspacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkspacesResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_ListWorkspaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) GetAccountUsage(ctx context.Context, in *GetAccountUsageRequest, opts ...grpc.CallOption) (*GetAccountUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountUsageResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_GetAccountUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) UpdateAccountSettings(ctx context.Context, in *UpdateAccountSettingsRequest, opts ...grpc.CallOption) (*UpdateAccountSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccountSettingsResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_UpdateAccountSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_ListAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest, opts ...grpc.CallOption) (*CreateWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWorkflowResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_CreateWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*GetWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkflowResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_GetWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) UpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest, opts ...grpc.CallOption) (*UpdateWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkflowResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_UpdateWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkflowsResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_ListWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) TriggerWorkflow(ctx context.Context, in *TriggerWorkflowRequest, opts ...grpc.CallOption) (*TriggerWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerWorkflowResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_TriggerWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) PauseWorkflow(ctx context.Context, in *PauseWorkflowRequest, opts ...grpc.CallOption) (*PauseWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PauseWorkflowResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_PauseWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) GetWorkspaceAnalytics(ctx context.Context, in *GetWorkspaceAnalyticsRequest, opts ...grpc.CallOption) (*GetWorkspaceAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkspaceAnalyticsResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_GetWorkspaceAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkspaceResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_GetWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) UpdateWorkspace(ctx context.Context, in *UpdateWorkspaceRequest, opts ...grpc.CallOption) (*UpdateWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkspaceResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_UpdateWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...grpc.CallOption) (*DeleteWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWorkspaceResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_DeleteWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTenantResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_CreateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTenantResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_GetTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*UpdateTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTenantResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_UpdateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTenantResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_DeleteTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTenantsResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_ListTenants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_DeleteOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadScraperServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, LeadScraperService_ListOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeadScraperServiceServer is the server API for LeadScraperService service.
// All implementations must embed UnimplementedLeadScraperServiceServer
// for forward compatibility.
//
// LeadScraperService provides functionality for managing Google Maps scraping jobs.
// This service allows users to create, monitor, and retrieve results from scraping tasks
// that extract data from Google Maps based on specified search criteria.
//
// Key features:
// - Create and manage scraping jobs
// - Monitor job status and progress
// - Download scraped results
// - Multi-tenant support with organization and user context
//
// Usage example:
// ```go
// client := workspace_service.NewLeadScraperServiceClient(conn)
//
//	resp, err := client.CreateScrapingJob(ctx, &CreateScrapingJobRequest{
//	    Name: "Coffee shops in Athens",
//	    Keywords: []string{"coffee", "caf√©"},
//	    Lang: "el",
//	})
//
// ```
type LeadScraperServiceServer interface {
	// Create a new Google Maps scraping job
	//
	// This endpoint initiates a new scraping task with the specified parameters.
	// The job will be queued and processed asynchronously. The response includes
	// a job ID that can be used to track the job's progress.
	//
	// Common use cases:
	// - Scrape business listings for market research
	// - Collect location data for geographic analysis
	// - Extract contact information for lead generation
	CreateScrapingJob(context.Context, *CreateScrapingJobRequest) (*CreateScrapingJobResponse, error)
	// Get all scraping jobs
	//
	// Retrieves a list of all scraping jobs for the authenticated user within their
	// organization context. The results can be filtered by status and other criteria.
	//
	// The response includes basic job information and status. For detailed job data,
	// use GetScrapingJob with a specific job ID.
	ListScrapingJobs(context.Context, *ListScrapingJobsRequest) (*ListScrapingJobsResponse, error)
	// Get a specific scraping job
	//
	// Retrieves detailed information about a specific scraping job, including its
	// current status, configuration, and progress metrics.
	//
	// This endpoint is useful for:
	// - Monitoring job progress
	// - Debugging failed jobs
	// - Retrieving job configuration details
	GetScrapingJob(context.Context, *GetScrapingJobRequest) (*GetScrapingJobResponse, error)
	// Delete a specific scraping job
	//
	// Permanently removes a scraping job and its associated data. This action cannot
	// be undone. If the job is currently running, it will be stopped.
	//
	// Security note:
	// - Requires authentication
	// - User must have appropriate permissions
	// - Job must belong to user's organization
	DeleteScrapingJob(context.Context, *DeleteScrapingJobRequest) (*DeleteScrapingJobResponse, error)
	// Download job results
	//
	// Downloads the results of a completed scraping job in CSV format. The response
	// includes the file content and appropriate headers for browser download.
	//
	// The CSV file includes:
	// - Business names and addresses
	// - Contact information
	// - Rating and review counts
	// - Operating hours
	// - Additional metadata based on job configuration
	DownloadScrapingResults(context.Context, *DownloadScrapingResultsRequest) (*DownloadScrapingResultsResponse, error)
	// Create a new account
	//
	// This endpoint creates a new user account in the workspace service.
	// It sets up the necessary infrastructure for the user to start managing
	// scraping jobs and other workspace resources.
	//
	// Required permissions:
	// - create:account
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// Get account details
	//
	// Retrieves detailed information about a specific account, including
	// associated scraping jobs and account settings.
	//
	// Required permissions:
	// - read:account
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	// Update account
	//
	// Updates the specified fields of an existing account. Only provided
	// fields will be modified.
	//
	// Required permissions:
	// - update:account
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	// Delete account
	//
	// Permanently deletes an account and all associated resources.
	// This action cannot be undone.
	//
	// Required permissions:
	// - delete:account
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	// CreateWorkspace establishes a new organizational workspace for managing scraping jobs
	//
	// This endpoint creates a dedicated workspace with configurable:
	// - Access controls and permissions
	// - Resource quotas
	// - Team member associations
	// - Job execution environments
	//
	// Required parameters:
	// - account_id: Parent account ID
	// - name: Human-readable workspace name
	// - region: Deployment region for workspace resources
	//
	// Example:
	// ```curl
	// POST /lead-scraper-microservice/api/v1/workspaces
	//
	//	{
	//	  "name": "European Market Research",
	//	  "region": "eu-west-1",
	//	  "default_job_parameters": {
	//	    "lang": "en",
	//	    "country_code": "GR"
	//	  }
	//	}
	//
	// ```
	CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error)
	// ListWorkspaces retrieves all workspaces associated with an account
	//
	// Features:
	// - Pagination support via limit/offset parameters
	// - Filtering by creation date, region, and status
	// - Summary statistics for quick overview
	//
	// Response includes:
	// - Basic workspace metadata
	// - Job execution statistics
	// - Resource utilization metrics
	ListWorkspaces(context.Context, *ListWorkspacesRequest) (*ListWorkspacesResponse, error)
	// GetAccountUsage provides detailed usage metrics for an account
	//
	// Metrics include:
	// - Active scraping jobs
	// - API call statistics
	// - Storage utilization
	// - Data processing throughput
	// - Historical usage trends
	//
	// Usage scenarios:
	// - Billing and invoicing
	// - Resource planning
	// - Usage quota enforcement
	GetAccountUsage(context.Context, *GetAccountUsageRequest) (*GetAccountUsageResponse, error)
	// UpdateAccountSettings modifies configurable account parameters
	//
	// Configurable settings:
	// - Notification preferences
	// - API rate limits
	// - Data retention policies
	// - Security settings (2FA, IP whitelisting)
	// - Default job parameters
	//
	// Example update:
	// ```json
	//
	//	{
	//	  "notification_settings": {
	//	    "job_completion_webhook": "https://example.com/webhooks/jobs"
	//	  },
	//	  "data_retention_days": 30
	//	}
	//
	// ```
	UpdateAccountSettings(context.Context, *UpdateAccountSettingsRequest) (*UpdateAccountSettingsResponse, error)
	// ListAccounts retrieves paginated account information
	//
	// Features:
	// - Server-side filtering by organization, status, and region
	// - Sorting by creation date, last active, etc.
	// - Partial response field masking
	//
	// Security:
	// - Requires admin privileges
	// - Results filtered by organization context
	// - Sensitive fields omitted by default
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	// CreateWorkflow establishes a new workflow for a workspace
	//
	// # This endpoint creates a new workflow configuration for a specific workspace
	//
	// Required parameters:
	// - workspace_id: Parent workspace ID
	// - name: Human-readable workflow name
	// - description: Optional workflow description
	// - parameters: Job parameters for the workflow
	//
	// Example:
	// ```json
	CreateWorkflow(context.Context, *CreateWorkflowRequest) (*CreateWorkflowResponse, error)
	// GetWorkflow retrieves detailed information about a specific workflow
	//
	// This endpoint provides comprehensive details about a workflow, including:
	// - Workflow configuration
	// - Job execution history
	// - Associated workspaces
	GetWorkflow(context.Context, *GetWorkflowRequest) (*GetWorkflowResponse, error)
	// UpdateWorkflow modifies the configuration of a specific workflow
	//
	// This endpoint allows updating the details of a workflow, including:
	// - Workflow name and description
	// - Job parameters
	//
	// Example update:
	// ```json
	//
	//	{
	//	  "name": "Updated Workflow",
	//	  "description": "Updated description"
	//	}
	//
	// ```
	UpdateWorkflow(context.Context, *UpdateWorkflowRequest) (*UpdateWorkflowResponse, error)
	// ListWorkflows retrieves all workflows in a workspace
	//
	// Features:
	// - Pagination support with customizable page size
	// - Filtering by status, creation date, and type
	// - Sorting options for various workflow attributes
	//
	// Response includes:
	// - Workflow metadata and configuration
	// - Execution statistics and status
	// - Last run information
	// - Associated resource usage
	//
	// Common use cases:
	// - Monitoring workflow health
	// - Auditing workflow configurations
	// - Resource utilization analysis
	ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsResponse, error)
	// TriggerWorkflow initiates workflow execution with specified parameters
	//
	// Features:
	// - Immediate or scheduled execution
	// - Custom parameter overrides
	// - Dependency chain validation
	// - Resource availability check
	//
	// Execution process:
	// 1. Validates workflow configuration
	// 2. Checks resource availability
	// 3. Initializes execution environment
	// 4. Starts job processing
	// 5. Monitors progress and updates status
	//
	// Error handling:
	// - Automatic retry for transient failures
	// - Configurable timeout settings
	// - Detailed error reporting
	TriggerWorkflow(context.Context, *TriggerWorkflowRequest) (*TriggerWorkflowResponse, error)
	// PauseWorkflow safely suspends workflow execution
	//
	// Behavior:
	// - Gracefully stops job processing
	// - Maintains workflow state
	// - Preserves partial results
	// - Allows resume from last checkpoint
	//
	// Safety measures:
	// - Completes in-progress tasks
	// - Saves checkpoint data
	// - Updates workflow status
	// - Notifies dependent systems
	//
	// Use cases:
	// - System maintenance
	// - Resource reallocation
	// - Error investigation
	// - Configuration updates
	PauseWorkflow(context.Context, *PauseWorkflowRequest) (*PauseWorkflowResponse, error)
	// GetWorkspaceAnalytics provides comprehensive workspace metrics
	//
	// Metrics categories:
	// - Resource utilization (CPU, memory, storage)
	// - Job execution statistics
	// - Error rates and types
	// - Performance trends
	// - Cost analysis
	//
	// Time ranges:
	// - Real-time metrics
	// - Historical data (configurable periods)
	// - Trend analysis
	//
	// Aggregation options:
	// - By workflow
	// - By job type
	// - By time period
	// - By resource type
	GetWorkspaceAnalytics(context.Context, *GetWorkspaceAnalyticsRequest) (*GetWorkspaceAnalyticsResponse, error)
	// GetWorkspace retrieves detailed workspace information
	//
	// Response includes:
	// - Basic metadata (name, ID, creation date)
	// - Access control configuration
	// - Resource quotas and usage
	// - Workflow inventory
	// - Integration settings
	//
	// Security features:
	// - Role-based access control
	// - Audit log integration
	// - Resource isolation validation
	//
	// Common use cases:
	// - Workspace administration
	// - Configuration management
	// - Compliance auditing
	// - Resource planning
	GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error)
	// UpdateWorkspace modifies workspace configuration
	//
	// Modifiable settings:
	// - Basic information (name, description)
	// - Access control lists
	// - Resource quotas
	// - Default parameters
	// - Integration configurations
	// - Notification preferences
	//
	// Update process:
	// 1. Validates new configuration
	// 2. Checks resource implications
	// 3. Applies changes atomically
	// 4. Updates dependent systems
	// 5. Logs modifications
	//
	// Safety features:
	// - Configuration validation
	// - Atomic updates
	// - Rollback capability
	// - Audit trail
	UpdateWorkspace(context.Context, *UpdateWorkspaceRequest) (*UpdateWorkspaceResponse, error)
	// DeleteWorkspace removes a workspace and associated resources
	//
	// Deletion process:
	// 1. Validation checks
	//   - Resource dependencies
	//   - Active workflows
	//   - User permissions
	//
	// 2. Resource cleanup
	//   - Workflow termination
	//   - Data archival
	//   - Resource deallocation
	//
	// Safety measures:
	// - Soft delete with recovery window
	// - Dependency validation
	// - Resource cleanup confirmation
	// - Audit trail preservation
	//
	// Post-deletion:
	// - Notification to stakeholders
	// - Resource reclamation
	// - Audit log finalization
	DeleteWorkspace(context.Context, *DeleteWorkspaceRequest) (*DeleteWorkspaceResponse, error)
	// CreateTenant establishes a new tenant in the system
	//
	// A tenant represents the top-level organizational unit that can contain
	// multiple organizations. This endpoint sets up the necessary infrastructure
	// for multi-tenant isolation.
	//
	// Features:
	// - Automatic resource provisioning
	// - Custom domain support
	// - Billing configuration
	// - Security policy initialization
	//
	// Required permissions:
	// - create:tenant (system admin only)
	CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error)
	// GetTenant retrieves detailed tenant information
	//
	// Returns comprehensive information about a tenant including:
	// - Basic metadata
	// - Resource utilization
	// - Organization list
	// - Configuration settings
	// - Billing status
	//
	// Required permissions:
	// - read:tenant
	GetTenant(context.Context, *GetTenantRequest) (*GetTenantResponse, error)
	// UpdateTenant modifies tenant configuration
	//
	// Allows updating various tenant settings including:
	// - Name and description
	// - Domain configuration
	// - Security policies
	// - Resource limits
	// - Billing settings
	//
	// Required permissions:
	// - update:tenant
	UpdateTenant(context.Context, *UpdateTenantRequest) (*UpdateTenantResponse, error)
	// DeleteTenant removes a tenant and all associated resources
	//
	// This is a destructive operation that:
	// - Removes all tenant data
	// - Deletes associated organizations
	// - Cleans up resources
	// - Archives audit logs
	//
	// Required permissions:
	// - delete:tenant (system admin only)
	DeleteTenant(context.Context, *DeleteTenantRequest) (*DeleteTenantResponse, error)
	// ListTenants retrieves all tenants in the system
	//
	// Features:
	// - Pagination support
	// - Filtering options
	// - Sorting capabilities
	// - Field selection
	//
	// Required permissions:
	// - list:tenant (system admin only)
	ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error)
	// CreateOrganization establishes a new organization within a tenant
	//
	// Organizations represent business units within a tenant that can:
	// - Manage their own users
	// - Have separate billing
	// - Maintain isolated resources
	// - Configure custom policies
	//
	// Required permissions:
	// - create:organization
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// GetOrganization retrieves detailed organization information
	//
	// Returns comprehensive information including:
	// - Basic metadata
	// - Member list
	// - Resource usage
	// - Billing status
	// - Policy configuration
	//
	// Required permissions:
	// - read:organization
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	// UpdateOrganization modifies organization configuration
	//
	// Allows updating:
	// - Basic information
	// - Security policies
	// - Resource limits
	// - Member permissions
	// - Integration settings
	//
	// Required permissions:
	// - update:organization
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// DeleteOrganization removes an organization and its resources
	//
	// This operation:
	// - Removes organization data
	// - Deletes member associations
	// - Cleans up resources
	// - Archives audit logs
	//
	// Required permissions:
	// - delete:organization
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// ListOrganizations retrieves all organizations in a tenant
	//
	// Features:
	// - Pagination support
	// - Filtering by status
	// - Sorting options
	// - Field selection
	//
	// Required permissions:
	// - list:organization
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	mustEmbedUnimplementedLeadScraperServiceServer()
}

// UnimplementedLeadScraperServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeadScraperServiceServer struct{}

func (UnimplementedLeadScraperServiceServer) CreateScrapingJob(context.Context, *CreateScrapingJobRequest) (*CreateScrapingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScrapingJob not implemented")
}
func (UnimplementedLeadScraperServiceServer) ListScrapingJobs(context.Context, *ListScrapingJobsRequest) (*ListScrapingJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScrapingJobs not implemented")
}
func (UnimplementedLeadScraperServiceServer) GetScrapingJob(context.Context, *GetScrapingJobRequest) (*GetScrapingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScrapingJob not implemented")
}
func (UnimplementedLeadScraperServiceServer) DeleteScrapingJob(context.Context, *DeleteScrapingJobRequest) (*DeleteScrapingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScrapingJob not implemented")
}
func (UnimplementedLeadScraperServiceServer) DownloadScrapingResults(context.Context, *DownloadScrapingResultsRequest) (*DownloadScrapingResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadScrapingResults not implemented")
}
func (UnimplementedLeadScraperServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedLeadScraperServiceServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedLeadScraperServiceServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedLeadScraperServiceServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedLeadScraperServiceServer) CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkspace not implemented")
}
func (UnimplementedLeadScraperServiceServer) ListWorkspaces(context.Context, *ListWorkspacesRequest) (*ListWorkspacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkspaces not implemented")
}
func (UnimplementedLeadScraperServiceServer) GetAccountUsage(context.Context, *GetAccountUsageRequest) (*GetAccountUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountUsage not implemented")
}
func (UnimplementedLeadScraperServiceServer) UpdateAccountSettings(context.Context, *UpdateAccountSettingsRequest) (*UpdateAccountSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountSettings not implemented")
}
func (UnimplementedLeadScraperServiceServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedLeadScraperServiceServer) CreateWorkflow(context.Context, *CreateWorkflowRequest) (*CreateWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (UnimplementedLeadScraperServiceServer) GetWorkflow(context.Context, *GetWorkflowRequest) (*GetWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedLeadScraperServiceServer) UpdateWorkflow(context.Context, *UpdateWorkflowRequest) (*UpdateWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflow not implemented")
}
func (UnimplementedLeadScraperServiceServer) ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedLeadScraperServiceServer) TriggerWorkflow(context.Context, *TriggerWorkflowRequest) (*TriggerWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerWorkflow not implemented")
}
func (UnimplementedLeadScraperServiceServer) PauseWorkflow(context.Context, *PauseWorkflowRequest) (*PauseWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseWorkflow not implemented")
}
func (UnimplementedLeadScraperServiceServer) GetWorkspaceAnalytics(context.Context, *GetWorkspaceAnalyticsRequest) (*GetWorkspaceAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceAnalytics not implemented")
}
func (UnimplementedLeadScraperServiceServer) GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspace not implemented")
}
func (UnimplementedLeadScraperServiceServer) UpdateWorkspace(context.Context, *UpdateWorkspaceRequest) (*UpdateWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkspace not implemented")
}
func (UnimplementedLeadScraperServiceServer) DeleteWorkspace(context.Context, *DeleteWorkspaceRequest) (*DeleteWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkspace not implemented")
}
func (UnimplementedLeadScraperServiceServer) CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedLeadScraperServiceServer) GetTenant(context.Context, *GetTenantRequest) (*GetTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedLeadScraperServiceServer) UpdateTenant(context.Context, *UpdateTenantRequest) (*UpdateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedLeadScraperServiceServer) DeleteTenant(context.Context, *DeleteTenantRequest) (*DeleteTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedLeadScraperServiceServer) ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedLeadScraperServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedLeadScraperServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedLeadScraperServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedLeadScraperServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedLeadScraperServiceServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedLeadScraperServiceServer) mustEmbedUnimplementedLeadScraperServiceServer() {}
func (UnimplementedLeadScraperServiceServer) testEmbeddedByValue()                            {}

// UnsafeLeadScraperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeadScraperServiceServer will
// result in compilation errors.
type UnsafeLeadScraperServiceServer interface {
	mustEmbedUnimplementedLeadScraperServiceServer()
}

func RegisterLeadScraperServiceServer(s grpc.ServiceRegistrar, srv LeadScraperServiceServer) {
	// If the following call pancis, it indicates UnimplementedLeadScraperServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeadScraperService_ServiceDesc, srv)
}

func _LeadScraperService_CreateScrapingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScrapingJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).CreateScrapingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_CreateScrapingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).CreateScrapingJob(ctx, req.(*CreateScrapingJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_ListScrapingJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScrapingJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).ListScrapingJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_ListScrapingJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).ListScrapingJobs(ctx, req.(*ListScrapingJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_GetScrapingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScrapingJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).GetScrapingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_GetScrapingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).GetScrapingJob(ctx, req.(*GetScrapingJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_DeleteScrapingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScrapingJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).DeleteScrapingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_DeleteScrapingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).DeleteScrapingJob(ctx, req.(*DeleteScrapingJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_DownloadScrapingResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadScrapingResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).DownloadScrapingResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_DownloadScrapingResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).DownloadScrapingResults(ctx, req.(*DownloadScrapingResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_CreateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).CreateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_CreateWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).CreateWorkspace(ctx, req.(*CreateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_ListWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkspacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).ListWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_ListWorkspaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).ListWorkspaces(ctx, req.(*ListWorkspacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_GetAccountUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).GetAccountUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_GetAccountUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).GetAccountUsage(ctx, req.(*GetAccountUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_UpdateAccountSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).UpdateAccountSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_UpdateAccountSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).UpdateAccountSettings(ctx, req.(*UpdateAccountSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_ListAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_CreateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).CreateWorkflow(ctx, req.(*CreateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_GetWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).GetWorkflow(ctx, req.(*GetWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_UpdateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).UpdateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_UpdateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).UpdateWorkflow(ctx, req.(*UpdateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_ListWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).ListWorkflows(ctx, req.(*ListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_TriggerWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).TriggerWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_TriggerWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).TriggerWorkflow(ctx, req.(*TriggerWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_PauseWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).PauseWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_PauseWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).PauseWorkflow(ctx, req.(*PauseWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_GetWorkspaceAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).GetWorkspaceAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_GetWorkspaceAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).GetWorkspaceAnalytics(ctx, req.(*GetWorkspaceAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_GetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).GetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_GetWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).GetWorkspace(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_UpdateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).UpdateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_UpdateWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).UpdateWorkspace(ctx, req.(*UpdateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_DeleteWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).DeleteWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_DeleteWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).DeleteWorkspace(ctx, req.(*DeleteWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_GetTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).GetTenant(ctx, req.(*GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).UpdateTenant(ctx, req.(*UpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).DeleteTenant(ctx, req.(*DeleteTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_ListTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).ListTenants(ctx, req.(*ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadScraperService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadScraperServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadScraperService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadScraperServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeadScraperService_ServiceDesc is the grpc.ServiceDesc for LeadScraperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeadScraperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lead_scraper_service.v1.LeadScraperService",
	HandlerType: (*LeadScraperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScrapingJob",
			Handler:    _LeadScraperService_CreateScrapingJob_Handler,
		},
		{
			MethodName: "ListScrapingJobs",
			Handler:    _LeadScraperService_ListScrapingJobs_Handler,
		},
		{
			MethodName: "GetScrapingJob",
			Handler:    _LeadScraperService_GetScrapingJob_Handler,
		},
		{
			MethodName: "DeleteScrapingJob",
			Handler:    _LeadScraperService_DeleteScrapingJob_Handler,
		},
		{
			MethodName: "DownloadScrapingResults",
			Handler:    _LeadScraperService_DownloadScrapingResults_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _LeadScraperService_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _LeadScraperService_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _LeadScraperService_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _LeadScraperService_DeleteAccount_Handler,
		},
		{
			MethodName: "CreateWorkspace",
			Handler:    _LeadScraperService_CreateWorkspace_Handler,
		},
		{
			MethodName: "ListWorkspaces",
			Handler:    _LeadScraperService_ListWorkspaces_Handler,
		},
		{
			MethodName: "GetAccountUsage",
			Handler:    _LeadScraperService_GetAccountUsage_Handler,
		},
		{
			MethodName: "UpdateAccountSettings",
			Handler:    _LeadScraperService_UpdateAccountSettings_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _LeadScraperService_ListAccounts_Handler,
		},
		{
			MethodName: "CreateWorkflow",
			Handler:    _LeadScraperService_CreateWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _LeadScraperService_GetWorkflow_Handler,
		},
		{
			MethodName: "UpdateWorkflow",
			Handler:    _LeadScraperService_UpdateWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _LeadScraperService_ListWorkflows_Handler,
		},
		{
			MethodName: "TriggerWorkflow",
			Handler:    _LeadScraperService_TriggerWorkflow_Handler,
		},
		{
			MethodName: "PauseWorkflow",
			Handler:    _LeadScraperService_PauseWorkflow_Handler,
		},
		{
			MethodName: "GetWorkspaceAnalytics",
			Handler:    _LeadScraperService_GetWorkspaceAnalytics_Handler,
		},
		{
			MethodName: "GetWorkspace",
			Handler:    _LeadScraperService_GetWorkspace_Handler,
		},
		{
			MethodName: "UpdateWorkspace",
			Handler:    _LeadScraperService_UpdateWorkspace_Handler,
		},
		{
			MethodName: "DeleteWorkspace",
			Handler:    _LeadScraperService_DeleteWorkspace_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _LeadScraperService_CreateTenant_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _LeadScraperService_GetTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _LeadScraperService_UpdateTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _LeadScraperService_DeleteTenant_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _LeadScraperService_ListTenants_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _LeadScraperService_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _LeadScraperService_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _LeadScraperService_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _LeadScraperService_DeleteOrganization_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _LeadScraperService_ListOrganizations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lead_scraper_service/v1/account_service.proto",
}
