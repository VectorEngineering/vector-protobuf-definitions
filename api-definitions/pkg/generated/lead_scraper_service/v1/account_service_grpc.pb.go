// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: lead_scraper_service/v1/account_service.proto

package lead_scraper_servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkspaceService_CreateScrapingJob_FullMethodName       = "/lead_scraper_service.v1.WorkspaceService/CreateScrapingJob"
	WorkspaceService_ListScrapingJobs_FullMethodName        = "/lead_scraper_service.v1.WorkspaceService/ListScrapingJobs"
	WorkspaceService_GetScrapingJob_FullMethodName          = "/lead_scraper_service.v1.WorkspaceService/GetScrapingJob"
	WorkspaceService_DeleteScrapingJob_FullMethodName       = "/lead_scraper_service.v1.WorkspaceService/DeleteScrapingJob"
	WorkspaceService_DownloadScrapingResults_FullMethodName = "/lead_scraper_service.v1.WorkspaceService/DownloadScrapingResults"
	WorkspaceService_CreateAccount_FullMethodName           = "/lead_scraper_service.v1.WorkspaceService/CreateAccount"
	WorkspaceService_GetAccount_FullMethodName              = "/lead_scraper_service.v1.WorkspaceService/GetAccount"
	WorkspaceService_UpdateAccount_FullMethodName           = "/lead_scraper_service.v1.WorkspaceService/UpdateAccount"
	WorkspaceService_DeleteAccount_FullMethodName           = "/lead_scraper_service.v1.WorkspaceService/DeleteAccount"
	WorkspaceService_ListAccounts_FullMethodName            = "/lead_scraper_service.v1.WorkspaceService/ListAccounts"
)

// WorkspaceServiceClient is the client API for WorkspaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WorkspaceService provides functionality for managing Google Maps scraping jobs.
// This service allows users to create, monitor, and retrieve results from scraping tasks
// that extract data from Google Maps based on specified search criteria.
//
// Key features:
// - Create and manage scraping jobs
// - Monitor job status and progress
// - Download scraped results
// - Multi-tenant support with organization and user context
//
// Usage example:
// ```go
// client := workspace_service.NewWorkspaceServiceClient(conn)
//
//	resp, err := client.CreateScrapingJob(ctx, &CreateScrapingJobRequest{
//	    Name: "Coffee shops in Athens",
//	    Keywords: []string{"coffee", "caf√©"},
//	    Lang: "el",
//	})
//
// ```
type WorkspaceServiceClient interface {
	// Create a new Google Maps scraping job
	//
	// This endpoint initiates a new scraping task with the specified parameters.
	// The job will be queued and processed asynchronously. The response includes
	// a job ID that can be used to track the job's progress.
	//
	// Common use cases:
	// - Scrape business listings for market research
	// - Collect location data for geographic analysis
	// - Extract contact information for lead generation
	CreateScrapingJob(ctx context.Context, in *CreateScrapingJobRequest, opts ...grpc.CallOption) (*CreateScrapingJobResponse, error)
	// Get all scraping jobs
	//
	// Retrieves a list of all scraping jobs for the authenticated user within their
	// organization context. The results can be filtered by status and other criteria.
	//
	// The response includes basic job information and status. For detailed job data,
	// use GetScrapingJob with a specific job ID.
	ListScrapingJobs(ctx context.Context, in *ListScrapingJobsRequest, opts ...grpc.CallOption) (*ListScrapingJobsResponse, error)
	// Get a specific scraping job
	//
	// Retrieves detailed information about a specific scraping job, including its
	// current status, configuration, and progress metrics.
	//
	// This endpoint is useful for:
	// - Monitoring job progress
	// - Debugging failed jobs
	// - Retrieving job configuration details
	GetScrapingJob(ctx context.Context, in *GetScrapingJobRequest, opts ...grpc.CallOption) (*GetScrapingJobResponse, error)
	// Delete a specific scraping job
	//
	// Permanently removes a scraping job and its associated data. This action cannot
	// be undone. If the job is currently running, it will be stopped.
	//
	// Security note:
	// - Requires authentication
	// - User must have appropriate permissions
	// - Job must belong to user's organization
	DeleteScrapingJob(ctx context.Context, in *DeleteScrapingJobRequest, opts ...grpc.CallOption) (*DeleteScrapingJobResponse, error)
	// Download job results
	//
	// Downloads the results of a completed scraping job in CSV format. The response
	// includes the file content and appropriate headers for browser download.
	//
	// The CSV file includes:
	// - Business names and addresses
	// - Contact information
	// - Rating and review counts
	// - Operating hours
	// - Additional metadata based on job configuration
	DownloadScrapingResults(ctx context.Context, in *DownloadScrapingResultsRequest, opts ...grpc.CallOption) (*DownloadScrapingResultsResponse, error)
	// Create a new account
	//
	// This endpoint creates a new user account in the workspace service.
	// It sets up the necessary infrastructure for the user to start managing
	// scraping jobs and other workspace resources.
	//
	// Required permissions:
	// - create:account
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// Get account details
	//
	// Retrieves detailed information about a specific account, including
	// associated scraping jobs and account settings.
	//
	// Required permissions:
	// - read:account
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// Update account
	//
	// Updates the specified fields of an existing account. Only provided
	// fields will be modified.
	//
	// Required permissions:
	// - update:account
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	// Delete account
	//
	// Permanently deletes an account and all associated resources.
	// This action cannot be undone.
	//
	// Required permissions:
	// - delete:account
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	// List accounts
	//
	// Retrieves a list of accounts based on the provided filters.
	// Results are paginated and can be filtered by organization and other criteria.
	//
	// Required permissions:
	// - list:accounts
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
}

type workspaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceServiceClient(cc grpc.ClientConnInterface) WorkspaceServiceClient {
	return &workspaceServiceClient{cc}
}

func (c *workspaceServiceClient) CreateScrapingJob(ctx context.Context, in *CreateScrapingJobRequest, opts ...grpc.CallOption) (*CreateScrapingJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateScrapingJobResponse)
	err := c.cc.Invoke(ctx, WorkspaceService_CreateScrapingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) ListScrapingJobs(ctx context.Context, in *ListScrapingJobsRequest, opts ...grpc.CallOption) (*ListScrapingJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScrapingJobsResponse)
	err := c.cc.Invoke(ctx, WorkspaceService_ListScrapingJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) GetScrapingJob(ctx context.Context, in *GetScrapingJobRequest, opts ...grpc.CallOption) (*GetScrapingJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScrapingJobResponse)
	err := c.cc.Invoke(ctx, WorkspaceService_GetScrapingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) DeleteScrapingJob(ctx context.Context, in *DeleteScrapingJobRequest, opts ...grpc.CallOption) (*DeleteScrapingJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScrapingJobResponse)
	err := c.cc.Invoke(ctx, WorkspaceService_DeleteScrapingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) DownloadScrapingResults(ctx context.Context, in *DownloadScrapingResultsRequest, opts ...grpc.CallOption) (*DownloadScrapingResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadScrapingResultsResponse)
	err := c.cc.Invoke(ctx, WorkspaceService_DownloadScrapingResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, WorkspaceService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, WorkspaceService_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, WorkspaceService_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, WorkspaceService_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, WorkspaceService_ListAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceServiceServer is the server API for WorkspaceService service.
// All implementations must embed UnimplementedWorkspaceServiceServer
// for forward compatibility.
//
// WorkspaceService provides functionality for managing Google Maps scraping jobs.
// This service allows users to create, monitor, and retrieve results from scraping tasks
// that extract data from Google Maps based on specified search criteria.
//
// Key features:
// - Create and manage scraping jobs
// - Monitor job status and progress
// - Download scraped results
// - Multi-tenant support with organization and user context
//
// Usage example:
// ```go
// client := workspace_service.NewWorkspaceServiceClient(conn)
//
//	resp, err := client.CreateScrapingJob(ctx, &CreateScrapingJobRequest{
//	    Name: "Coffee shops in Athens",
//	    Keywords: []string{"coffee", "caf√©"},
//	    Lang: "el",
//	})
//
// ```
type WorkspaceServiceServer interface {
	// Create a new Google Maps scraping job
	//
	// This endpoint initiates a new scraping task with the specified parameters.
	// The job will be queued and processed asynchronously. The response includes
	// a job ID that can be used to track the job's progress.
	//
	// Common use cases:
	// - Scrape business listings for market research
	// - Collect location data for geographic analysis
	// - Extract contact information for lead generation
	CreateScrapingJob(context.Context, *CreateScrapingJobRequest) (*CreateScrapingJobResponse, error)
	// Get all scraping jobs
	//
	// Retrieves a list of all scraping jobs for the authenticated user within their
	// organization context. The results can be filtered by status and other criteria.
	//
	// The response includes basic job information and status. For detailed job data,
	// use GetScrapingJob with a specific job ID.
	ListScrapingJobs(context.Context, *ListScrapingJobsRequest) (*ListScrapingJobsResponse, error)
	// Get a specific scraping job
	//
	// Retrieves detailed information about a specific scraping job, including its
	// current status, configuration, and progress metrics.
	//
	// This endpoint is useful for:
	// - Monitoring job progress
	// - Debugging failed jobs
	// - Retrieving job configuration details
	GetScrapingJob(context.Context, *GetScrapingJobRequest) (*GetScrapingJobResponse, error)
	// Delete a specific scraping job
	//
	// Permanently removes a scraping job and its associated data. This action cannot
	// be undone. If the job is currently running, it will be stopped.
	//
	// Security note:
	// - Requires authentication
	// - User must have appropriate permissions
	// - Job must belong to user's organization
	DeleteScrapingJob(context.Context, *DeleteScrapingJobRequest) (*DeleteScrapingJobResponse, error)
	// Download job results
	//
	// Downloads the results of a completed scraping job in CSV format. The response
	// includes the file content and appropriate headers for browser download.
	//
	// The CSV file includes:
	// - Business names and addresses
	// - Contact information
	// - Rating and review counts
	// - Operating hours
	// - Additional metadata based on job configuration
	DownloadScrapingResults(context.Context, *DownloadScrapingResultsRequest) (*DownloadScrapingResultsResponse, error)
	// Create a new account
	//
	// This endpoint creates a new user account in the workspace service.
	// It sets up the necessary infrastructure for the user to start managing
	// scraping jobs and other workspace resources.
	//
	// Required permissions:
	// - create:account
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// Get account details
	//
	// Retrieves detailed information about a specific account, including
	// associated scraping jobs and account settings.
	//
	// Required permissions:
	// - read:account
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	// Update account
	//
	// Updates the specified fields of an existing account. Only provided
	// fields will be modified.
	//
	// Required permissions:
	// - update:account
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	// Delete account
	//
	// Permanently deletes an account and all associated resources.
	// This action cannot be undone.
	//
	// Required permissions:
	// - delete:account
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	// List accounts
	//
	// Retrieves a list of accounts based on the provided filters.
	// Results are paginated and can be filtered by organization and other criteria.
	//
	// Required permissions:
	// - list:accounts
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	mustEmbedUnimplementedWorkspaceServiceServer()
}

// UnimplementedWorkspaceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkspaceServiceServer struct{}

func (UnimplementedWorkspaceServiceServer) CreateScrapingJob(context.Context, *CreateScrapingJobRequest) (*CreateScrapingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScrapingJob not implemented")
}
func (UnimplementedWorkspaceServiceServer) ListScrapingJobs(context.Context, *ListScrapingJobsRequest) (*ListScrapingJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScrapingJobs not implemented")
}
func (UnimplementedWorkspaceServiceServer) GetScrapingJob(context.Context, *GetScrapingJobRequest) (*GetScrapingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScrapingJob not implemented")
}
func (UnimplementedWorkspaceServiceServer) DeleteScrapingJob(context.Context, *DeleteScrapingJobRequest) (*DeleteScrapingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScrapingJob not implemented")
}
func (UnimplementedWorkspaceServiceServer) DownloadScrapingResults(context.Context, *DownloadScrapingResultsRequest) (*DownloadScrapingResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadScrapingResults not implemented")
}
func (UnimplementedWorkspaceServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedWorkspaceServiceServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedWorkspaceServiceServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedWorkspaceServiceServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedWorkspaceServiceServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedWorkspaceServiceServer) mustEmbedUnimplementedWorkspaceServiceServer() {}
func (UnimplementedWorkspaceServiceServer) testEmbeddedByValue()                          {}

// UnsafeWorkspaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceServiceServer will
// result in compilation errors.
type UnsafeWorkspaceServiceServer interface {
	mustEmbedUnimplementedWorkspaceServiceServer()
}

func RegisterWorkspaceServiceServer(s grpc.ServiceRegistrar, srv WorkspaceServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorkspaceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkspaceService_ServiceDesc, srv)
}

func _WorkspaceService_CreateScrapingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScrapingJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).CreateScrapingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_CreateScrapingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).CreateScrapingJob(ctx, req.(*CreateScrapingJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_ListScrapingJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScrapingJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).ListScrapingJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_ListScrapingJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).ListScrapingJobs(ctx, req.(*ListScrapingJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_GetScrapingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScrapingJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).GetScrapingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_GetScrapingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).GetScrapingJob(ctx, req.(*GetScrapingJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_DeleteScrapingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScrapingJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).DeleteScrapingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_DeleteScrapingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).DeleteScrapingJob(ctx, req.(*DeleteScrapingJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_DownloadScrapingResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadScrapingResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).DownloadScrapingResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_DownloadScrapingResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).DownloadScrapingResults(ctx, req.(*DownloadScrapingResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceService_ListAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkspaceService_ServiceDesc is the grpc.ServiceDesc for WorkspaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lead_scraper_service.v1.WorkspaceService",
	HandlerType: (*WorkspaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScrapingJob",
			Handler:    _WorkspaceService_CreateScrapingJob_Handler,
		},
		{
			MethodName: "ListScrapingJobs",
			Handler:    _WorkspaceService_ListScrapingJobs_Handler,
		},
		{
			MethodName: "GetScrapingJob",
			Handler:    _WorkspaceService_GetScrapingJob_Handler,
		},
		{
			MethodName: "DeleteScrapingJob",
			Handler:    _WorkspaceService_DeleteScrapingJob_Handler,
		},
		{
			MethodName: "DownloadScrapingResults",
			Handler:    _WorkspaceService_DownloadScrapingResults_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _WorkspaceService_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _WorkspaceService_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _WorkspaceService_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _WorkspaceService_DeleteAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _WorkspaceService_ListAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lead_scraper_service/v1/account_service.proto",
}
