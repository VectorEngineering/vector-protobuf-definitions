{
  "swagger": "2.0",
  "info": {
    "title": "Lead Scraping Service API",
    "description": "Vector Lead Scraping Service API - Manages Lead Scraping Jobs",
    "version": "1.0",
    "contact": {
      "name": "Vector AI Engineering",
      "url": "https://vector.ai",
      "email": "yoanyomba@vector.ai"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "https://github.com/SolomonAIEngineering/backend-monorepo/blob/main/LICENSE"
    },
    "x-api-version": "v2"
  },
  "tags": [
    {
      "name": "Workspace Management",
      "description": "APIs for managing workspaces, workspace settings, and configurations",
      "externalDocs": {
        "description": "Learn more about workspace management",
        "url": "https://internal-docs.solomon-ai.io/workspace-service/management"
      }
    },
    {
      "name": "Workspace Collaboration",
      "description": "APIs for managing workspace sharing, permissions, and team collaboration"
    },
    {
      "name": "Workspace Analytics",
      "description": "APIs for workspace usage analytics and reporting"
    },
    {
      "name": "WorkspaceService"
    }
  ],
  "host": "lead-scraping-microservice.vector.svc.cluster.local:9896",
  "schemes": [
    "http",
    "https",
    "wss"
  ],
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/lead-scraper-microservice/api/v1/accounts": {
      "get": {
        "summary": "List accounts",
        "description": "Retrieves a list of accounts with optional filtering",
        "operationId": "ListAccounts",
        "responses": {
          "200": {
            "description": "Accounts retrieved successfully",
            "schema": {
              "$ref": "#/definitions/ListAccountsResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "schema": {
              "$ref": "#/definitions/ValidationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":400,\"message\":\"Bad Request\"},\"error_code\":2000,\"message\":\"Invalid input parameters\",\"field_violations\":[{\"field\":\"email\",\"message\":\"Invalid email format\",\"constraint\":\"email\",\"value\":\"invalid-email\"}],\"schema_validation\":{\"schema_version\":\"v1\",\"invalid_patterns\":[\"email_format\"]}}"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/AuthenticationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":401,\"message\":\"Unauthorized\"},\"error_code\":1001,\"message\":\"Authentication failed\",\"token_info\":{\"token_type\":\"Bearer\"},\"auth_context\":{\"required_scopes\":[\"read:user\"]},\"oauth2_info\":{\"authorization_url\":\"https://solomon-ai.io/oauth/authorize\"}}"
            }
          },
          "402": {
            "description": "Payment Required - Payment is necessary to proceed",
            "schema": {
              "$ref": "#/definitions/PaymentRequiredErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":402,\"message\":\"Payment Required\",\"payment_info\":{\"amount_due\":29.99,\"currency\":\"USD\",\"due_date\":\"2024-01-01T00:00:00Z\"}}"
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "schema": {
              "$ref": "#/definitions/ForbiddenErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":403,\"message\":\"Forbidden\",\"reason\":\"Insufficient permissions\",\"required_permissions\":[\"admin\"]}"
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "schema": {
              "$ref": "#/definitions/NotFoundErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":404,\"message\":\"Not Found\"},\"error_code\":5102,\"message\":\"Resource not found\",\"resource_info\":{\"type\":\"user\",\"id\":\"123\",\"path\":\"/user-microservice/api/v2/users/123\"},\"suggestions\":{\"alternative_paths\":[\"/user-microservice/api/v2/users\"]}}"
            }
          },
          "405": {
            "description": "Method Not Allowed - HTTP method not supported",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":405,\"message\":\"Method Not Allowed\",\"allowed_methods\":[\"GET\",\"POST\"]}"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists",
            "schema": {
              "$ref": "#/definitions/ConflictErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":409,\"message\":\"Conflict\"},\"error_code\":2300,\"message\":\"Resource already exists\",\"conflict_info\":{\"resource_type\":\"user\",\"identifier\":\"user@example.com\",\"conflict_reason\":\"Email already registered\"}}"
            }
          },
          "410": {
            "description": "Gone - Resource is no longer available",
            "schema": {
              "$ref": "#/definitions/GoneErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":410,\"message\":\"Gone\",\"resource\":\"/api/v1/users\"}"
            }
          },
          "412": {
            "description": "Precondition Failed - Preconditions in headers did not match",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":412,\"message\":\"Precondition Failed\",\"failed_conditions\":[\"If-Match header does not match\"]}"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Semantic errors in the request",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":422,\"message\":\"Unprocessable Entity\",\"errors\":[{\"field\":\"email\",\"error\":\"Invalid format\"}]}"
            }
          },
          "425": {
            "description": "Too Early - Request is being replayed",
            "schema": {
              "$ref": "#/definitions/TooEarlyErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":425,\"message\":\"Too Early\"}"
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "schema": {
              "$ref": "#/definitions/RateLimitErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":429,\"message\":\"Too Many Requests\"},\"error_code\":4102,\"message\":\"Rate limit exceeded\",\"limit_info\":{\"current\":150,\"limit\":100,\"window_size\":\"1m\"}}"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":500,\"message\":\"Internal Server Error\"},\"error_code\":4000,\"message\":\"An unexpected error occurred\",\"incident_id\":\"inc-123\",\"service_status\":{\"name\":\"user-service\",\"status\":\"degraded\"}}"
            }
          },
          "501": {
            "description": "Not Implemented - Functionality not supported",
            "schema": {
              "$ref": "#/definitions/NotImplementedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":501,\"message\":\"Not Implemented\",\"feature\":\"User Deletion\"}"
            }
          },
          "502": {
            "description": "Bad Gateway - Invalid response from upstream server",
            "schema": {
              "$ref": "#/definitions/BadGatewayErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":502,\"message\":\"Bad Gateway\",\"upstream_service\":\"Auth Service\"}"
            }
          },
          "503": {
            "description": "Service Unavailable - Try again later",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":503,\"message\":\"Service Unavailable\"},\"error_code\":4300,\"message\":\"Service is temporarily unavailable\",\"availability_info\":{\"retry_after\":60,\"affected_services\":[\"user-service\"]}}"
            }
          },
          "504": {
            "description": "Gateway Timeout - Upstream server timed out",
            "schema": {
              "$ref": "#/definitions/GatewayTimeoutErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":504,\"message\":\"Gateway Timeout\",\"upstream_service\":\"Database\"}"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "description": "Organization context",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "description": "Tenant context",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Pagination offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Maximum number of results",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "lead-scraper-service"
        ]
      },
      "post": {
        "summary": "Create a new account",
        "description": "Creates a new user account in the workspace service",
        "operationId": "CreateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateAccountResponse"
            }
          },
          "201": {
            "description": "Account created successfully",
            "schema": {
              "$ref": "#/definitions/CreateAccountResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "schema": {
              "$ref": "#/definitions/ValidationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":400,\"message\":\"Bad Request\"},\"error_code\":2000,\"message\":\"Invalid input parameters\",\"field_violations\":[{\"field\":\"email\",\"message\":\"Invalid email format\",\"constraint\":\"email\",\"value\":\"invalid-email\"}],\"schema_validation\":{\"schema_version\":\"v1\",\"invalid_patterns\":[\"email_format\"]}}"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/AuthenticationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":401,\"message\":\"Unauthorized\"},\"error_code\":1001,\"message\":\"Authentication failed\",\"token_info\":{\"token_type\":\"Bearer\"},\"auth_context\":{\"required_scopes\":[\"read:user\"]},\"oauth2_info\":{\"authorization_url\":\"https://solomon-ai.io/oauth/authorize\"}}"
            }
          },
          "402": {
            "description": "Payment Required - Payment is necessary to proceed",
            "schema": {
              "$ref": "#/definitions/PaymentRequiredErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":402,\"message\":\"Payment Required\",\"payment_info\":{\"amount_due\":29.99,\"currency\":\"USD\",\"due_date\":\"2024-01-01T00:00:00Z\"}}"
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "schema": {
              "$ref": "#/definitions/ForbiddenErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":403,\"message\":\"Forbidden\",\"reason\":\"Insufficient permissions\",\"required_permissions\":[\"admin\"]}"
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "schema": {
              "$ref": "#/definitions/NotFoundErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":404,\"message\":\"Not Found\"},\"error_code\":5102,\"message\":\"Resource not found\",\"resource_info\":{\"type\":\"user\",\"id\":\"123\",\"path\":\"/user-microservice/api/v2/users/123\"},\"suggestions\":{\"alternative_paths\":[\"/user-microservice/api/v2/users\"]}}"
            }
          },
          "405": {
            "description": "Method Not Allowed - HTTP method not supported",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":405,\"message\":\"Method Not Allowed\",\"allowed_methods\":[\"GET\",\"POST\"]}"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists",
            "schema": {
              "$ref": "#/definitions/ConflictErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":409,\"message\":\"Conflict\"},\"error_code\":2300,\"message\":\"Resource already exists\",\"conflict_info\":{\"resource_type\":\"user\",\"identifier\":\"user@example.com\",\"conflict_reason\":\"Email already registered\"}}"
            }
          },
          "410": {
            "description": "Gone - Resource is no longer available",
            "schema": {
              "$ref": "#/definitions/GoneErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":410,\"message\":\"Gone\",\"resource\":\"/api/v1/users\"}"
            }
          },
          "412": {
            "description": "Precondition Failed - Preconditions in headers did not match",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":412,\"message\":\"Precondition Failed\",\"failed_conditions\":[\"If-Match header does not match\"]}"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Semantic errors in the request",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":422,\"message\":\"Unprocessable Entity\",\"errors\":[{\"field\":\"email\",\"error\":\"Invalid format\"}]}"
            }
          },
          "425": {
            "description": "Too Early - Request is being replayed",
            "schema": {
              "$ref": "#/definitions/TooEarlyErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":425,\"message\":\"Too Early\"}"
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "schema": {
              "$ref": "#/definitions/RateLimitErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":429,\"message\":\"Too Many Requests\"},\"error_code\":4102,\"message\":\"Rate limit exceeded\",\"limit_info\":{\"current\":150,\"limit\":100,\"window_size\":\"1m\"}}"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":500,\"message\":\"Internal Server Error\"},\"error_code\":4000,\"message\":\"An unexpected error occurred\",\"incident_id\":\"inc-123\",\"service_status\":{\"name\":\"user-service\",\"status\":\"degraded\"}}"
            }
          },
          "501": {
            "description": "Not Implemented - Functionality not supported",
            "schema": {
              "$ref": "#/definitions/NotImplementedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":501,\"message\":\"Not Implemented\",\"feature\":\"User Deletion\"}"
            }
          },
          "502": {
            "description": "Bad Gateway - Invalid response from upstream server",
            "schema": {
              "$ref": "#/definitions/BadGatewayErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":502,\"message\":\"Bad Gateway\",\"upstream_service\":\"Auth Service\"}"
            }
          },
          "503": {
            "description": "Service Unavailable - Try again later",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":503,\"message\":\"Service Unavailable\"},\"error_code\":4300,\"message\":\"Service is temporarily unavailable\",\"availability_info\":{\"retry_after\":60,\"affected_services\":[\"user-service\"]}}"
            }
          },
          "504": {
            "description": "Gateway Timeout - Upstream server timed out",
            "schema": {
              "$ref": "#/definitions/GatewayTimeoutErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":504,\"message\":\"Gateway Timeout\",\"upstream_service\":\"Database\"}"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAccountRequest"
            }
          }
        ],
        "tags": [
          "lead-scraper-service"
        ]
      },
      "patch": {
        "summary": "Update account details",
        "description": "Updates specified fields of an existing account",
        "operationId": "UpdateAccount",
        "responses": {
          "200": {
            "description": "Account updated successfully",
            "schema": {
              "$ref": "#/definitions/UpdateAccountResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "schema": {
              "$ref": "#/definitions/ValidationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":400,\"message\":\"Bad Request\"},\"error_code\":2000,\"message\":\"Invalid input parameters\",\"field_violations\":[{\"field\":\"email\",\"message\":\"Invalid email format\",\"constraint\":\"email\",\"value\":\"invalid-email\"}],\"schema_validation\":{\"schema_version\":\"v1\",\"invalid_patterns\":[\"email_format\"]}}"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/AuthenticationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":401,\"message\":\"Unauthorized\"},\"error_code\":1001,\"message\":\"Authentication failed\",\"token_info\":{\"token_type\":\"Bearer\"},\"auth_context\":{\"required_scopes\":[\"read:user\"]},\"oauth2_info\":{\"authorization_url\":\"https://solomon-ai.io/oauth/authorize\"}}"
            }
          },
          "402": {
            "description": "Payment Required - Payment is necessary to proceed",
            "schema": {
              "$ref": "#/definitions/PaymentRequiredErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":402,\"message\":\"Payment Required\",\"payment_info\":{\"amount_due\":29.99,\"currency\":\"USD\",\"due_date\":\"2024-01-01T00:00:00Z\"}}"
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "schema": {
              "$ref": "#/definitions/ForbiddenErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":403,\"message\":\"Forbidden\",\"reason\":\"Insufficient permissions\",\"required_permissions\":[\"admin\"]}"
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "schema": {
              "$ref": "#/definitions/NotFoundErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":404,\"message\":\"Not Found\"},\"error_code\":5102,\"message\":\"Resource not found\",\"resource_info\":{\"type\":\"user\",\"id\":\"123\",\"path\":\"/user-microservice/api/v2/users/123\"},\"suggestions\":{\"alternative_paths\":[\"/user-microservice/api/v2/users\"]}}"
            }
          },
          "405": {
            "description": "Method Not Allowed - HTTP method not supported",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":405,\"message\":\"Method Not Allowed\",\"allowed_methods\":[\"GET\",\"POST\"]}"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists",
            "schema": {
              "$ref": "#/definitions/ConflictErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":409,\"message\":\"Conflict\"},\"error_code\":2300,\"message\":\"Resource already exists\",\"conflict_info\":{\"resource_type\":\"user\",\"identifier\":\"user@example.com\",\"conflict_reason\":\"Email already registered\"}}"
            }
          },
          "410": {
            "description": "Gone - Resource is no longer available",
            "schema": {
              "$ref": "#/definitions/GoneErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":410,\"message\":\"Gone\",\"resource\":\"/api/v1/users\"}"
            }
          },
          "412": {
            "description": "Precondition Failed - Preconditions in headers did not match",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":412,\"message\":\"Precondition Failed\",\"failed_conditions\":[\"If-Match header does not match\"]}"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Semantic errors in the request",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":422,\"message\":\"Unprocessable Entity\",\"errors\":[{\"field\":\"email\",\"error\":\"Invalid format\"}]}"
            }
          },
          "425": {
            "description": "Too Early - Request is being replayed",
            "schema": {
              "$ref": "#/definitions/TooEarlyErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":425,\"message\":\"Too Early\"}"
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "schema": {
              "$ref": "#/definitions/RateLimitErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":429,\"message\":\"Too Many Requests\"},\"error_code\":4102,\"message\":\"Rate limit exceeded\",\"limit_info\":{\"current\":150,\"limit\":100,\"window_size\":\"1m\"}}"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":500,\"message\":\"Internal Server Error\"},\"error_code\":4000,\"message\":\"An unexpected error occurred\",\"incident_id\":\"inc-123\",\"service_status\":{\"name\":\"user-service\",\"status\":\"degraded\"}}"
            }
          },
          "501": {
            "description": "Not Implemented - Functionality not supported",
            "schema": {
              "$ref": "#/definitions/NotImplementedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":501,\"message\":\"Not Implemented\",\"feature\":\"User Deletion\"}"
            }
          },
          "502": {
            "description": "Bad Gateway - Invalid response from upstream server",
            "schema": {
              "$ref": "#/definitions/BadGatewayErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":502,\"message\":\"Bad Gateway\",\"upstream_service\":\"Auth Service\"}"
            }
          },
          "503": {
            "description": "Service Unavailable - Try again later",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":503,\"message\":\"Service Unavailable\"},\"error_code\":4300,\"message\":\"Service is temporarily unavailable\",\"availability_info\":{\"retry_after\":60,\"affected_services\":[\"user-service\"]}}"
            }
          },
          "504": {
            "description": "Gateway Timeout - Upstream server timed out",
            "schema": {
              "$ref": "#/definitions/GatewayTimeoutErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":504,\"message\":\"Gateway Timeout\",\"upstream_service\":\"Database\"}"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAccountRequest"
            }
          }
        ],
        "tags": [
          "lead-scraper-service"
        ]
      }
    },
    "/lead-scraper-microservice/api/v1/accounts/{accountId}": {
      "get": {
        "summary": "Get account details",
        "description": "Retrieves details of a specific account",
        "operationId": "GetAccount",
        "responses": {
          "200": {
            "description": "Account details retrieved successfully",
            "schema": {
              "$ref": "#/definitions/GetAccountResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "schema": {
              "$ref": "#/definitions/ValidationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":400,\"message\":\"Bad Request\"},\"error_code\":2000,\"message\":\"Invalid input parameters\",\"field_violations\":[{\"field\":\"email\",\"message\":\"Invalid email format\",\"constraint\":\"email\",\"value\":\"invalid-email\"}],\"schema_validation\":{\"schema_version\":\"v1\",\"invalid_patterns\":[\"email_format\"]}}"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/AuthenticationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":401,\"message\":\"Unauthorized\"},\"error_code\":1001,\"message\":\"Authentication failed\",\"token_info\":{\"token_type\":\"Bearer\"},\"auth_context\":{\"required_scopes\":[\"read:user\"]},\"oauth2_info\":{\"authorization_url\":\"https://solomon-ai.io/oauth/authorize\"}}"
            }
          },
          "402": {
            "description": "Payment Required - Payment is necessary to proceed",
            "schema": {
              "$ref": "#/definitions/PaymentRequiredErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":402,\"message\":\"Payment Required\",\"payment_info\":{\"amount_due\":29.99,\"currency\":\"USD\",\"due_date\":\"2024-01-01T00:00:00Z\"}}"
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "schema": {
              "$ref": "#/definitions/ForbiddenErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":403,\"message\":\"Forbidden\",\"reason\":\"Insufficient permissions\",\"required_permissions\":[\"admin\"]}"
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "schema": {
              "$ref": "#/definitions/NotFoundErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":404,\"message\":\"Not Found\"},\"error_code\":5102,\"message\":\"Resource not found\",\"resource_info\":{\"type\":\"user\",\"id\":\"123\",\"path\":\"/user-microservice/api/v2/users/123\"},\"suggestions\":{\"alternative_paths\":[\"/user-microservice/api/v2/users\"]}}"
            }
          },
          "405": {
            "description": "Method Not Allowed - HTTP method not supported",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":405,\"message\":\"Method Not Allowed\",\"allowed_methods\":[\"GET\",\"POST\"]}"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists",
            "schema": {
              "$ref": "#/definitions/ConflictErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":409,\"message\":\"Conflict\"},\"error_code\":2300,\"message\":\"Resource already exists\",\"conflict_info\":{\"resource_type\":\"user\",\"identifier\":\"user@example.com\",\"conflict_reason\":\"Email already registered\"}}"
            }
          },
          "410": {
            "description": "Gone - Resource is no longer available",
            "schema": {
              "$ref": "#/definitions/GoneErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":410,\"message\":\"Gone\",\"resource\":\"/api/v1/users\"}"
            }
          },
          "412": {
            "description": "Precondition Failed - Preconditions in headers did not match",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":412,\"message\":\"Precondition Failed\",\"failed_conditions\":[\"If-Match header does not match\"]}"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Semantic errors in the request",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":422,\"message\":\"Unprocessable Entity\",\"errors\":[{\"field\":\"email\",\"error\":\"Invalid format\"}]}"
            }
          },
          "425": {
            "description": "Too Early - Request is being replayed",
            "schema": {
              "$ref": "#/definitions/TooEarlyErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":425,\"message\":\"Too Early\"}"
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "schema": {
              "$ref": "#/definitions/RateLimitErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":429,\"message\":\"Too Many Requests\"},\"error_code\":4102,\"message\":\"Rate limit exceeded\",\"limit_info\":{\"current\":150,\"limit\":100,\"window_size\":\"1m\"}}"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":500,\"message\":\"Internal Server Error\"},\"error_code\":4000,\"message\":\"An unexpected error occurred\",\"incident_id\":\"inc-123\",\"service_status\":{\"name\":\"user-service\",\"status\":\"degraded\"}}"
            }
          },
          "501": {
            "description": "Not Implemented - Functionality not supported",
            "schema": {
              "$ref": "#/definitions/NotImplementedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":501,\"message\":\"Not Implemented\",\"feature\":\"User Deletion\"}"
            }
          },
          "502": {
            "description": "Bad Gateway - Invalid response from upstream server",
            "schema": {
              "$ref": "#/definitions/BadGatewayErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":502,\"message\":\"Bad Gateway\",\"upstream_service\":\"Auth Service\"}"
            }
          },
          "503": {
            "description": "Service Unavailable - Try again later",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":503,\"message\":\"Service Unavailable\"},\"error_code\":4300,\"message\":\"Service is temporarily unavailable\",\"availability_info\":{\"retry_after\":60,\"affected_services\":[\"user-service\"]}}"
            }
          },
          "504": {
            "description": "Gateway Timeout - Upstream server timed out",
            "schema": {
              "$ref": "#/definitions/GatewayTimeoutErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":504,\"message\":\"Gateway Timeout\",\"upstream_service\":\"Database\"}"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "description": "Account identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "orgId",
            "description": "Organization context",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "description": "Tenant context",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "lead-scraper-service"
        ]
      },
      "delete": {
        "summary": "Delete account",
        "description": "Permanently deletes an account and associated resources",
        "operationId": "DeleteAccount",
        "responses": {
          "200": {
            "description": "Account deleted successfully",
            "schema": {
              "$ref": "#/definitions/DeleteAccountResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "schema": {
              "$ref": "#/definitions/ValidationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":400,\"message\":\"Bad Request\"},\"error_code\":2000,\"message\":\"Invalid input parameters\",\"field_violations\":[{\"field\":\"email\",\"message\":\"Invalid email format\",\"constraint\":\"email\",\"value\":\"invalid-email\"}],\"schema_validation\":{\"schema_version\":\"v1\",\"invalid_patterns\":[\"email_format\"]}}"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/AuthenticationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":401,\"message\":\"Unauthorized\"},\"error_code\":1001,\"message\":\"Authentication failed\",\"token_info\":{\"token_type\":\"Bearer\"},\"auth_context\":{\"required_scopes\":[\"read:user\"]},\"oauth2_info\":{\"authorization_url\":\"https://solomon-ai.io/oauth/authorize\"}}"
            }
          },
          "402": {
            "description": "Payment Required - Payment is necessary to proceed",
            "schema": {
              "$ref": "#/definitions/PaymentRequiredErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":402,\"message\":\"Payment Required\",\"payment_info\":{\"amount_due\":29.99,\"currency\":\"USD\",\"due_date\":\"2024-01-01T00:00:00Z\"}}"
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "schema": {
              "$ref": "#/definitions/ForbiddenErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":403,\"message\":\"Forbidden\",\"reason\":\"Insufficient permissions\",\"required_permissions\":[\"admin\"]}"
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "schema": {
              "$ref": "#/definitions/NotFoundErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":404,\"message\":\"Not Found\"},\"error_code\":5102,\"message\":\"Resource not found\",\"resource_info\":{\"type\":\"user\",\"id\":\"123\",\"path\":\"/user-microservice/api/v2/users/123\"},\"suggestions\":{\"alternative_paths\":[\"/user-microservice/api/v2/users\"]}}"
            }
          },
          "405": {
            "description": "Method Not Allowed - HTTP method not supported",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":405,\"message\":\"Method Not Allowed\",\"allowed_methods\":[\"GET\",\"POST\"]}"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists",
            "schema": {
              "$ref": "#/definitions/ConflictErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":409,\"message\":\"Conflict\"},\"error_code\":2300,\"message\":\"Resource already exists\",\"conflict_info\":{\"resource_type\":\"user\",\"identifier\":\"user@example.com\",\"conflict_reason\":\"Email already registered\"}}"
            }
          },
          "410": {
            "description": "Gone - Resource is no longer available",
            "schema": {
              "$ref": "#/definitions/GoneErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":410,\"message\":\"Gone\",\"resource\":\"/api/v1/users\"}"
            }
          },
          "412": {
            "description": "Precondition Failed - Preconditions in headers did not match",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":412,\"message\":\"Precondition Failed\",\"failed_conditions\":[\"If-Match header does not match\"]}"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Semantic errors in the request",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":422,\"message\":\"Unprocessable Entity\",\"errors\":[{\"field\":\"email\",\"error\":\"Invalid format\"}]}"
            }
          },
          "425": {
            "description": "Too Early - Request is being replayed",
            "schema": {
              "$ref": "#/definitions/TooEarlyErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":425,\"message\":\"Too Early\"}"
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "schema": {
              "$ref": "#/definitions/RateLimitErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":429,\"message\":\"Too Many Requests\"},\"error_code\":4102,\"message\":\"Rate limit exceeded\",\"limit_info\":{\"current\":150,\"limit\":100,\"window_size\":\"1m\"}}"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":500,\"message\":\"Internal Server Error\"},\"error_code\":4000,\"message\":\"An unexpected error occurred\",\"incident_id\":\"inc-123\",\"service_status\":{\"name\":\"user-service\",\"status\":\"degraded\"}}"
            }
          },
          "501": {
            "description": "Not Implemented - Functionality not supported",
            "schema": {
              "$ref": "#/definitions/NotImplementedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":501,\"message\":\"Not Implemented\",\"feature\":\"User Deletion\"}"
            }
          },
          "502": {
            "description": "Bad Gateway - Invalid response from upstream server",
            "schema": {
              "$ref": "#/definitions/BadGatewayErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":502,\"message\":\"Bad Gateway\",\"upstream_service\":\"Auth Service\"}"
            }
          },
          "503": {
            "description": "Service Unavailable - Try again later",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":503,\"message\":\"Service Unavailable\"},\"error_code\":4300,\"message\":\"Service is temporarily unavailable\",\"availability_info\":{\"retry_after\":60,\"affected_services\":[\"user-service\"]}}"
            }
          },
          "504": {
            "description": "Gateway Timeout - Upstream server timed out",
            "schema": {
              "$ref": "#/definitions/GatewayTimeoutErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":504,\"message\":\"Gateway Timeout\",\"upstream_service\":\"Database\"}"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "description": "Account identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "orgId",
            "description": "Organization context",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "description": "Tenant context",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "lead-scraper-service"
        ]
      }
    },
    "/lead-scraper-microservice/api/v1/jobs": {
      "get": {
        "summary": "Get all jobs",
        "description": "This endpoint retrieves all Google Maps scraping jobs",
        "operationId": "ListScrapingJobs",
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/ListScrapingJobsResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "schema": {
              "$ref": "#/definitions/ValidationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":400,\"message\":\"Bad Request\"},\"error_code\":2000,\"message\":\"Invalid input parameters\",\"field_violations\":[{\"field\":\"email\",\"message\":\"Invalid email format\",\"constraint\":\"email\",\"value\":\"invalid-email\"}],\"schema_validation\":{\"schema_version\":\"v1\",\"invalid_patterns\":[\"email_format\"]}}"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/AuthenticationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":401,\"message\":\"Unauthorized\"},\"error_code\":1001,\"message\":\"Authentication failed\",\"token_info\":{\"token_type\":\"Bearer\"},\"auth_context\":{\"required_scopes\":[\"read:user\"]},\"oauth2_info\":{\"authorization_url\":\"https://solomon-ai.io/oauth/authorize\"}}"
            }
          },
          "402": {
            "description": "Payment Required - Payment is necessary to proceed",
            "schema": {
              "$ref": "#/definitions/PaymentRequiredErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":402,\"message\":\"Payment Required\",\"payment_info\":{\"amount_due\":29.99,\"currency\":\"USD\",\"due_date\":\"2024-01-01T00:00:00Z\"}}"
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "schema": {
              "$ref": "#/definitions/ForbiddenErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":403,\"message\":\"Forbidden\",\"reason\":\"Insufficient permissions\",\"required_permissions\":[\"admin\"]}"
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "schema": {
              "$ref": "#/definitions/NotFoundErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":404,\"message\":\"Not Found\"},\"error_code\":5102,\"message\":\"Resource not found\",\"resource_info\":{\"type\":\"user\",\"id\":\"123\",\"path\":\"/user-microservice/api/v2/users/123\"},\"suggestions\":{\"alternative_paths\":[\"/user-microservice/api/v2/users\"]}}"
            }
          },
          "405": {
            "description": "Method Not Allowed - HTTP method not supported",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":405,\"message\":\"Method Not Allowed\",\"allowed_methods\":[\"GET\",\"POST\"]}"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists",
            "schema": {
              "$ref": "#/definitions/ConflictErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":409,\"message\":\"Conflict\"},\"error_code\":2300,\"message\":\"Resource already exists\",\"conflict_info\":{\"resource_type\":\"user\",\"identifier\":\"user@example.com\",\"conflict_reason\":\"Email already registered\"}}"
            }
          },
          "410": {
            "description": "Gone - Resource is no longer available",
            "schema": {
              "$ref": "#/definitions/GoneErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":410,\"message\":\"Gone\",\"resource\":\"/api/v1/users\"}"
            }
          },
          "412": {
            "description": "Precondition Failed - Preconditions in headers did not match",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":412,\"message\":\"Precondition Failed\",\"failed_conditions\":[\"If-Match header does not match\"]}"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Semantic errors in the request",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":422,\"message\":\"Unprocessable Entity\",\"errors\":[{\"field\":\"email\",\"error\":\"Invalid format\"}]}"
            }
          },
          "425": {
            "description": "Too Early - Request is being replayed",
            "schema": {
              "$ref": "#/definitions/TooEarlyErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":425,\"message\":\"Too Early\"}"
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "schema": {
              "$ref": "#/definitions/RateLimitErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":429,\"message\":\"Too Many Requests\"},\"error_code\":4102,\"message\":\"Rate limit exceeded\",\"limit_info\":{\"current\":150,\"limit\":100,\"window_size\":\"1m\"}}"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":500,\"message\":\"Internal Server Error\"},\"error_code\":4000,\"message\":\"An unexpected error occurred\",\"incident_id\":\"inc-123\",\"service_status\":{\"name\":\"user-service\",\"status\":\"degraded\"}}"
            }
          },
          "501": {
            "description": "Not Implemented - Functionality not supported",
            "schema": {
              "$ref": "#/definitions/NotImplementedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":501,\"message\":\"Not Implemented\",\"feature\":\"User Deletion\"}"
            }
          },
          "502": {
            "description": "Bad Gateway - Invalid response from upstream server",
            "schema": {
              "$ref": "#/definitions/BadGatewayErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":502,\"message\":\"Bad Gateway\",\"upstream_service\":\"Auth Service\"}"
            }
          },
          "503": {
            "description": "Service Unavailable - Try again later",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":503,\"message\":\"Service Unavailable\"},\"error_code\":4300,\"message\":\"Service is temporarily unavailable\",\"availability_info\":{\"retry_after\":60,\"affected_services\":[\"user-service\"]}}"
            }
          },
          "504": {
            "description": "Gateway Timeout - Upstream server timed out",
            "schema": {
              "$ref": "#/definitions/GatewayTimeoutErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":504,\"message\":\"Gateway Timeout\",\"upstream_service\":\"Database\"}"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "lead-scraper-service"
        ]
      },
      "post": {
        "summary": "Create a new job scraping task",
        "description": "This endpoint creates a new Google Maps scraping job",
        "operationId": "CreateScrapingJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateScrapingJobResponse"
            }
          },
          "201": {
            "description": "Job created successfully",
            "schema": {
              "$ref": "#/definitions/CreateScrapingJobResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "schema": {
              "$ref": "#/definitions/ValidationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":400,\"message\":\"Bad Request\"},\"error_code\":2000,\"message\":\"Invalid input parameters\",\"field_violations\":[{\"field\":\"email\",\"message\":\"Invalid email format\",\"constraint\":\"email\",\"value\":\"invalid-email\"}],\"schema_validation\":{\"schema_version\":\"v1\",\"invalid_patterns\":[\"email_format\"]}}"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/AuthenticationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":401,\"message\":\"Unauthorized\"},\"error_code\":1001,\"message\":\"Authentication failed\",\"token_info\":{\"token_type\":\"Bearer\"},\"auth_context\":{\"required_scopes\":[\"read:user\"]},\"oauth2_info\":{\"authorization_url\":\"https://solomon-ai.io/oauth/authorize\"}}"
            }
          },
          "402": {
            "description": "Payment Required - Payment is necessary to proceed",
            "schema": {
              "$ref": "#/definitions/PaymentRequiredErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":402,\"message\":\"Payment Required\",\"payment_info\":{\"amount_due\":29.99,\"currency\":\"USD\",\"due_date\":\"2024-01-01T00:00:00Z\"}}"
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "schema": {
              "$ref": "#/definitions/ForbiddenErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":403,\"message\":\"Forbidden\",\"reason\":\"Insufficient permissions\",\"required_permissions\":[\"admin\"]}"
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "schema": {
              "$ref": "#/definitions/NotFoundErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":404,\"message\":\"Not Found\"},\"error_code\":5102,\"message\":\"Resource not found\",\"resource_info\":{\"type\":\"user\",\"id\":\"123\",\"path\":\"/user-microservice/api/v2/users/123\"},\"suggestions\":{\"alternative_paths\":[\"/user-microservice/api/v2/users\"]}}"
            }
          },
          "405": {
            "description": "Method Not Allowed - HTTP method not supported",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":405,\"message\":\"Method Not Allowed\",\"allowed_methods\":[\"GET\",\"POST\"]}"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists",
            "schema": {
              "$ref": "#/definitions/ConflictErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":409,\"message\":\"Conflict\"},\"error_code\":2300,\"message\":\"Resource already exists\",\"conflict_info\":{\"resource_type\":\"user\",\"identifier\":\"user@example.com\",\"conflict_reason\":\"Email already registered\"}}"
            }
          },
          "410": {
            "description": "Gone - Resource is no longer available",
            "schema": {
              "$ref": "#/definitions/GoneErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":410,\"message\":\"Gone\",\"resource\":\"/api/v1/users\"}"
            }
          },
          "412": {
            "description": "Precondition Failed - Preconditions in headers did not match",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":412,\"message\":\"Precondition Failed\",\"failed_conditions\":[\"If-Match header does not match\"]}"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Semantic errors in the request",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":422,\"message\":\"Unprocessable Entity\",\"errors\":[{\"field\":\"email\",\"error\":\"Invalid format\"}]}"
            }
          },
          "425": {
            "description": "Too Early - Request is being replayed",
            "schema": {
              "$ref": "#/definitions/TooEarlyErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":425,\"message\":\"Too Early\"}"
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "schema": {
              "$ref": "#/definitions/RateLimitErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":429,\"message\":\"Too Many Requests\"},\"error_code\":4102,\"message\":\"Rate limit exceeded\",\"limit_info\":{\"current\":150,\"limit\":100,\"window_size\":\"1m\"}}"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":500,\"message\":\"Internal Server Error\"},\"error_code\":4000,\"message\":\"An unexpected error occurred\",\"incident_id\":\"inc-123\",\"service_status\":{\"name\":\"user-service\",\"status\":\"degraded\"}}"
            }
          },
          "501": {
            "description": "Not Implemented - Functionality not supported",
            "schema": {
              "$ref": "#/definitions/NotImplementedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":501,\"message\":\"Not Implemented\",\"feature\":\"User Deletion\"}"
            }
          },
          "502": {
            "description": "Bad Gateway - Invalid response from upstream server",
            "schema": {
              "$ref": "#/definitions/BadGatewayErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":502,\"message\":\"Bad Gateway\",\"upstream_service\":\"Auth Service\"}"
            }
          },
          "503": {
            "description": "Service Unavailable - Try again later",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":503,\"message\":\"Service Unavailable\"},\"error_code\":4300,\"message\":\"Service is temporarily unavailable\",\"availability_info\":{\"retry_after\":60,\"affected_services\":[\"user-service\"]}}"
            }
          },
          "504": {
            "description": "Gateway Timeout - Upstream server timed out",
            "schema": {
              "$ref": "#/definitions/GatewayTimeoutErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":504,\"message\":\"Gateway Timeout\",\"upstream_service\":\"Database\"}"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateScrapingJobRequest"
            }
          }
        ],
        "tags": [
          "lead-scraper-service"
        ]
      }
    },
    "/lead-scraper-microservice/api/v1/jobs/{jobId}": {
      "get": {
        "summary": "Get a specific job",
        "description": "This endpoint retrieves a specific Google Maps scraping job",
        "operationId": "GetScrapingJob",
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/GetScrapingJobResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "schema": {
              "$ref": "#/definitions/ValidationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":400,\"message\":\"Bad Request\"},\"error_code\":2000,\"message\":\"Invalid input parameters\",\"field_violations\":[{\"field\":\"email\",\"message\":\"Invalid email format\",\"constraint\":\"email\",\"value\":\"invalid-email\"}],\"schema_validation\":{\"schema_version\":\"v1\",\"invalid_patterns\":[\"email_format\"]}}"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/AuthenticationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":401,\"message\":\"Unauthorized\"},\"error_code\":1001,\"message\":\"Authentication failed\",\"token_info\":{\"token_type\":\"Bearer\"},\"auth_context\":{\"required_scopes\":[\"read:user\"]},\"oauth2_info\":{\"authorization_url\":\"https://solomon-ai.io/oauth/authorize\"}}"
            }
          },
          "402": {
            "description": "Payment Required - Payment is necessary to proceed",
            "schema": {
              "$ref": "#/definitions/PaymentRequiredErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":402,\"message\":\"Payment Required\",\"payment_info\":{\"amount_due\":29.99,\"currency\":\"USD\",\"due_date\":\"2024-01-01T00:00:00Z\"}}"
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "schema": {
              "$ref": "#/definitions/ForbiddenErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":403,\"message\":\"Forbidden\",\"reason\":\"Insufficient permissions\",\"required_permissions\":[\"admin\"]}"
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "schema": {
              "$ref": "#/definitions/NotFoundErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":404,\"message\":\"Not Found\"},\"error_code\":5102,\"message\":\"Resource not found\",\"resource_info\":{\"type\":\"user\",\"id\":\"123\",\"path\":\"/user-microservice/api/v2/users/123\"},\"suggestions\":{\"alternative_paths\":[\"/user-microservice/api/v2/users\"]}}"
            }
          },
          "405": {
            "description": "Method Not Allowed - HTTP method not supported",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":405,\"message\":\"Method Not Allowed\",\"allowed_methods\":[\"GET\",\"POST\"]}"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists",
            "schema": {
              "$ref": "#/definitions/ConflictErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":409,\"message\":\"Conflict\"},\"error_code\":2300,\"message\":\"Resource already exists\",\"conflict_info\":{\"resource_type\":\"user\",\"identifier\":\"user@example.com\",\"conflict_reason\":\"Email already registered\"}}"
            }
          },
          "410": {
            "description": "Gone - Resource is no longer available",
            "schema": {
              "$ref": "#/definitions/GoneErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":410,\"message\":\"Gone\",\"resource\":\"/api/v1/users\"}"
            }
          },
          "412": {
            "description": "Precondition Failed - Preconditions in headers did not match",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":412,\"message\":\"Precondition Failed\",\"failed_conditions\":[\"If-Match header does not match\"]}"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Semantic errors in the request",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":422,\"message\":\"Unprocessable Entity\",\"errors\":[{\"field\":\"email\",\"error\":\"Invalid format\"}]}"
            }
          },
          "425": {
            "description": "Too Early - Request is being replayed",
            "schema": {
              "$ref": "#/definitions/TooEarlyErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":425,\"message\":\"Too Early\"}"
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "schema": {
              "$ref": "#/definitions/RateLimitErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":429,\"message\":\"Too Many Requests\"},\"error_code\":4102,\"message\":\"Rate limit exceeded\",\"limit_info\":{\"current\":150,\"limit\":100,\"window_size\":\"1m\"}}"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":500,\"message\":\"Internal Server Error\"},\"error_code\":4000,\"message\":\"An unexpected error occurred\",\"incident_id\":\"inc-123\",\"service_status\":{\"name\":\"user-service\",\"status\":\"degraded\"}}"
            }
          },
          "501": {
            "description": "Not Implemented - Functionality not supported",
            "schema": {
              "$ref": "#/definitions/NotImplementedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":501,\"message\":\"Not Implemented\",\"feature\":\"User Deletion\"}"
            }
          },
          "502": {
            "description": "Bad Gateway - Invalid response from upstream server",
            "schema": {
              "$ref": "#/definitions/BadGatewayErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":502,\"message\":\"Bad Gateway\",\"upstream_service\":\"Auth Service\"}"
            }
          },
          "503": {
            "description": "Service Unavailable - Try again later",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":503,\"message\":\"Service Unavailable\"},\"error_code\":4300,\"message\":\"Service is temporarily unavailable\",\"availability_info\":{\"retry_after\":60,\"affected_services\":[\"user-service\"]}}"
            }
          },
          "504": {
            "description": "Gateway Timeout - Upstream server timed out",
            "schema": {
              "$ref": "#/definitions/GatewayTimeoutErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":504,\"message\":\"Gateway Timeout\",\"upstream_service\":\"Database\"}"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "lead-scraper-service"
        ]
      },
      "delete": {
        "summary": "Delete a specific job",
        "description": "This endpoint deletes a specific Google Maps scraping job",
        "operationId": "DeleteScrapingJob",
        "responses": {
          "200": {
            "description": "Job deleted successfully",
            "schema": {
              "$ref": "#/definitions/DeleteScrapingJobResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "schema": {
              "$ref": "#/definitions/ValidationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":400,\"message\":\"Bad Request\"},\"error_code\":2000,\"message\":\"Invalid input parameters\",\"field_violations\":[{\"field\":\"email\",\"message\":\"Invalid email format\",\"constraint\":\"email\",\"value\":\"invalid-email\"}],\"schema_validation\":{\"schema_version\":\"v1\",\"invalid_patterns\":[\"email_format\"]}}"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/AuthenticationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":401,\"message\":\"Unauthorized\"},\"error_code\":1001,\"message\":\"Authentication failed\",\"token_info\":{\"token_type\":\"Bearer\"},\"auth_context\":{\"required_scopes\":[\"read:user\"]},\"oauth2_info\":{\"authorization_url\":\"https://solomon-ai.io/oauth/authorize\"}}"
            }
          },
          "402": {
            "description": "Payment Required - Payment is necessary to proceed",
            "schema": {
              "$ref": "#/definitions/PaymentRequiredErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":402,\"message\":\"Payment Required\",\"payment_info\":{\"amount_due\":29.99,\"currency\":\"USD\",\"due_date\":\"2024-01-01T00:00:00Z\"}}"
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "schema": {
              "$ref": "#/definitions/ForbiddenErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":403,\"message\":\"Forbidden\",\"reason\":\"Insufficient permissions\",\"required_permissions\":[\"admin\"]}"
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "schema": {
              "$ref": "#/definitions/NotFoundErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":404,\"message\":\"Not Found\"},\"error_code\":5102,\"message\":\"Resource not found\",\"resource_info\":{\"type\":\"user\",\"id\":\"123\",\"path\":\"/user-microservice/api/v2/users/123\"},\"suggestions\":{\"alternative_paths\":[\"/user-microservice/api/v2/users\"]}}"
            }
          },
          "405": {
            "description": "Method Not Allowed - HTTP method not supported",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":405,\"message\":\"Method Not Allowed\",\"allowed_methods\":[\"GET\",\"POST\"]}"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists",
            "schema": {
              "$ref": "#/definitions/ConflictErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":409,\"message\":\"Conflict\"},\"error_code\":2300,\"message\":\"Resource already exists\",\"conflict_info\":{\"resource_type\":\"user\",\"identifier\":\"user@example.com\",\"conflict_reason\":\"Email already registered\"}}"
            }
          },
          "410": {
            "description": "Gone - Resource is no longer available",
            "schema": {
              "$ref": "#/definitions/GoneErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":410,\"message\":\"Gone\",\"resource\":\"/api/v1/users\"}"
            }
          },
          "412": {
            "description": "Precondition Failed - Preconditions in headers did not match",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":412,\"message\":\"Precondition Failed\",\"failed_conditions\":[\"If-Match header does not match\"]}"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Semantic errors in the request",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":422,\"message\":\"Unprocessable Entity\",\"errors\":[{\"field\":\"email\",\"error\":\"Invalid format\"}]}"
            }
          },
          "425": {
            "description": "Too Early - Request is being replayed",
            "schema": {
              "$ref": "#/definitions/TooEarlyErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":425,\"message\":\"Too Early\"}"
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "schema": {
              "$ref": "#/definitions/RateLimitErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":429,\"message\":\"Too Many Requests\"},\"error_code\":4102,\"message\":\"Rate limit exceeded\",\"limit_info\":{\"current\":150,\"limit\":100,\"window_size\":\"1m\"}}"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":500,\"message\":\"Internal Server Error\"},\"error_code\":4000,\"message\":\"An unexpected error occurred\",\"incident_id\":\"inc-123\",\"service_status\":{\"name\":\"user-service\",\"status\":\"degraded\"}}"
            }
          },
          "501": {
            "description": "Not Implemented - Functionality not supported",
            "schema": {
              "$ref": "#/definitions/NotImplementedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":501,\"message\":\"Not Implemented\",\"feature\":\"User Deletion\"}"
            }
          },
          "502": {
            "description": "Bad Gateway - Invalid response from upstream server",
            "schema": {
              "$ref": "#/definitions/BadGatewayErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":502,\"message\":\"Bad Gateway\",\"upstream_service\":\"Auth Service\"}"
            }
          },
          "503": {
            "description": "Service Unavailable - Try again later",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":503,\"message\":\"Service Unavailable\"},\"error_code\":4300,\"message\":\"Service is temporarily unavailable\",\"availability_info\":{\"retry_after\":60,\"affected_services\":[\"user-service\"]}}"
            }
          },
          "504": {
            "description": "Gateway Timeout - Upstream server timed out",
            "schema": {
              "$ref": "#/definitions/GatewayTimeoutErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":504,\"message\":\"Gateway Timeout\",\"upstream_service\":\"Database\"}"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "lead-scraper-service"
        ]
      }
    },
    "/lead-scraper-microservice/api/v1/jobs/{jobId}/download": {
      "get": {
        "summary": "Download job results as CSV",
        "description": "This endpoint downloads the results of a Google Maps scraping job as CSV",
        "operationId": "DownloadScrapingResults",
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/DownloadScrapingResultsResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "schema": {
              "$ref": "#/definitions/ValidationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":400,\"message\":\"Bad Request\"},\"error_code\":2000,\"message\":\"Invalid input parameters\",\"field_violations\":[{\"field\":\"email\",\"message\":\"Invalid email format\",\"constraint\":\"email\",\"value\":\"invalid-email\"}],\"schema_validation\":{\"schema_version\":\"v1\",\"invalid_patterns\":[\"email_format\"]}}"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/AuthenticationErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":401,\"message\":\"Unauthorized\"},\"error_code\":1001,\"message\":\"Authentication failed\",\"token_info\":{\"token_type\":\"Bearer\"},\"auth_context\":{\"required_scopes\":[\"read:user\"]},\"oauth2_info\":{\"authorization_url\":\"https://solomon-ai.io/oauth/authorize\"}}"
            }
          },
          "402": {
            "description": "Payment Required - Payment is necessary to proceed",
            "schema": {
              "$ref": "#/definitions/PaymentRequiredErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":402,\"message\":\"Payment Required\",\"payment_info\":{\"amount_due\":29.99,\"currency\":\"USD\",\"due_date\":\"2024-01-01T00:00:00Z\"}}"
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "schema": {
              "$ref": "#/definitions/ForbiddenErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":403,\"message\":\"Forbidden\",\"reason\":\"Insufficient permissions\",\"required_permissions\":[\"admin\"]}"
            }
          },
          "404": {
            "description": "Not Found - Resource not found",
            "schema": {
              "$ref": "#/definitions/NotFoundErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":404,\"message\":\"Not Found\"},\"error_code\":5102,\"message\":\"Resource not found\",\"resource_info\":{\"type\":\"user\",\"id\":\"123\",\"path\":\"/user-microservice/api/v2/users/123\"},\"suggestions\":{\"alternative_paths\":[\"/user-microservice/api/v2/users\"]}}"
            }
          },
          "405": {
            "description": "Method Not Allowed - HTTP method not supported",
            "schema": {
              "$ref": "#/definitions/MethodNotAllowedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":405,\"message\":\"Method Not Allowed\",\"allowed_methods\":[\"GET\",\"POST\"]}"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists",
            "schema": {
              "$ref": "#/definitions/ConflictErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":409,\"message\":\"Conflict\"},\"error_code\":2300,\"message\":\"Resource already exists\",\"conflict_info\":{\"resource_type\":\"user\",\"identifier\":\"user@example.com\",\"conflict_reason\":\"Email already registered\"}}"
            }
          },
          "410": {
            "description": "Gone - Resource is no longer available",
            "schema": {
              "$ref": "#/definitions/GoneErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":410,\"message\":\"Gone\",\"resource\":\"/api/v1/users\"}"
            }
          },
          "412": {
            "description": "Precondition Failed - Preconditions in headers did not match",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":412,\"message\":\"Precondition Failed\",\"failed_conditions\":[\"If-Match header does not match\"]}"
            }
          },
          "422": {
            "description": "Unprocessable Entity - Semantic errors in the request",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":422,\"message\":\"Unprocessable Entity\",\"errors\":[{\"field\":\"email\",\"error\":\"Invalid format\"}]}"
            }
          },
          "425": {
            "description": "Too Early - Request is being replayed",
            "schema": {
              "$ref": "#/definitions/TooEarlyErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":425,\"message\":\"Too Early\"}"
            }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded",
            "schema": {
              "$ref": "#/definitions/RateLimitErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":429,\"message\":\"Too Many Requests\"},\"error_code\":4102,\"message\":\"Rate limit exceeded\",\"limit_info\":{\"current\":150,\"limit\":100,\"window_size\":\"1m\"}}"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":500,\"message\":\"Internal Server Error\"},\"error_code\":4000,\"message\":\"An unexpected error occurred\",\"incident_id\":\"inc-123\",\"service_status\":{\"name\":\"user-service\",\"status\":\"degraded\"}}"
            }
          },
          "501": {
            "description": "Not Implemented - Functionality not supported",
            "schema": {
              "$ref": "#/definitions/NotImplementedErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":501,\"message\":\"Not Implemented\",\"feature\":\"User Deletion\"}"
            }
          },
          "502": {
            "description": "Bad Gateway - Invalid response from upstream server",
            "schema": {
              "$ref": "#/definitions/BadGatewayErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":502,\"message\":\"Bad Gateway\",\"upstream_service\":\"Auth Service\"}"
            }
          },
          "503": {
            "description": "Service Unavailable - Try again later",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableErrorMessageResponse"
            },
            "examples": {
              "": "{\"status\":{\"code\":503,\"message\":\"Service Unavailable\"},\"error_code\":4300,\"message\":\"Service is temporarily unavailable\",\"availability_info\":{\"retry_after\":60,\"affected_services\":[\"user-service\"]}}"
            }
          },
          "504": {
            "description": "Gateway Timeout - Upstream server timed out",
            "schema": {
              "$ref": "#/definitions/GatewayTimeoutErrorMessageResponse"
            },
            "examples": {
              "": "{\"code\":504,\"message\":\"Gateway Timeout\",\"upstream_service\":\"Database\"}"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "lead-scraper-service"
        ]
      }
    }
  },
  "definitions": {
    "APIInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "title": "API version used"
        },
        "supportedVersions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Supported API versions"
        },
        "isDeprecated": {
          "type": "boolean",
          "title": "Whether endpoint is deprecated"
        },
        "sunsetDate": {
          "type": "string",
          "format": "date-time",
          "title": "When endpoint will be removed"
        }
      }
    },
    "Account": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "Unique identifier for the account"
        },
        "authPlatformUserId": {
          "type": "string",
          "title": "Auth0 user identifier for authentication"
        },
        "orgId": {
          "type": "string",
          "title": "Organization identifier for multi-org support"
        },
        "tenantId": {
          "type": "string",
          "title": "Tenant identifier for multi-tenant support"
        },
        "email": {
          "type": "string",
          "title": "User's email address"
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Timestamp of last modification"
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Soft delete timestamp"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Account creation timestamp"
        },
        "scrapingJobs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ScrapingJob"
          },
          "title": "Associated scraping jobs for this account"
        }
      },
      "description": "Account represents a user account within the workspace service.\nIt serves as the top-level container for all user-specific workspaces and settings.\n\nKey features:\n- Unique identification via Auth0\n- Organization and tenant context\n- Audit timestamps\n- Associated scraping jobs\n\nDatabase considerations:\n- Uses GORM for ORM mapping\n- Includes indexes for efficient querying\n- Supports soft deletes via deleted_at\n\nUsage example:\n```go\naccount := \u0026Account{\n    AuthPlatformUserId: \"auth0|123\",\n    OrgId: \"org_123\",\n    TenantId: \"tenant_456\",\n}\n```"
    },
    "Any": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "AuthContext": {
      "type": "object",
      "properties": {
        "requiredScopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Scopes required for the operation"
        },
        "providedScopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Scopes present in the token"
        },
        "missingPermissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Permissions that were missing"
        },
        "tenantId": {
          "type": "string",
          "title": "Tenant context if applicable"
        }
      }
    },
    "AuthErrorCode": {
      "type": "string",
      "enum": [
        "NO_AUTH_ERROR",
        "AUTH_FAILED_INVALID_BEARER_TOKEN",
        "AUTH_FAILED_INVALID_SUBJECT",
        "AUTH_FAILED_INVALID_AUDIENCE",
        "AUTH_FAILED_INVALID_ISSUER",
        "BEARER_TOKEN_MISSING",
        "TOKEN_EXPIRED",
        "TOKEN_NOT_ACTIVE",
        "TOKEN_REVOKED",
        "INVALID_CLAIMS",
        "MISSING_REQUIRED_CLAIMS",
        "INVALID_SCOPE",
        "INVALID_PERMISSIONS",
        "SESSION_EXPIRED",
        "SESSION_INVALID",
        "SESSION_REVOKED",
        "UNAUTHENTICATED",
        "MULTI_FACTOR_REQUIRED",
        "MULTI_FACTOR_FAILED",
        "ACCOUNT_LOCKED",
        "ACCOUNT_DISABLED",
        "PASSWORD_EXPIRED",
        "PASSWORD_RESET_REQUIRED",
        "UNRECOGNIZED_DEVICE"
      ],
      "default": "NO_AUTH_ERROR",
      "description": "- AUTH_FAILED_INVALID_BEARER_TOKEN: Authentication errors\n - SESSION_EXPIRED: Session errors\n - UNAUTHENTICATED: Other authentication errors\n - ACCOUNT_LOCKED: New authentication error codes\n\nAccount is locked due to too many failed login attempts\n - ACCOUNT_DISABLED: Account has been disabled by admin\n - PASSWORD_EXPIRED: Password has expired and must be changed\n - PASSWORD_RESET_REQUIRED: Password reset is required\n - UNRECOGNIZED_DEVICE: Login attempt from an unrecognized device",
      "title": "Enhanced AuthErrorCode represents authentication-related error codes"
    },
    "AuthenticationErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 1001,
        "message": "Authentication failed",
        "token_info": {
          "token_id": "t-123",
          "expiry": "2024-01-01T00:00:00Z"
        },
        "auth_context": {
          "required_scopes": [
            "read",
            "write"
          ],
          "provided_scopes": [
            "read"
          ]
        },
        "session_info": {
          "session_id": "s-456",
          "last_active": "2024-01-01T00:00:00Z"
        }
      },
      "properties": {
        "code": {
          "$ref": "#/definitions/AuthErrorCode",
          "title": "Error code indicating type of auth error"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "tokenInfo": {
          "$ref": "#/definitions/TokenInfo"
        },
        "authContext": {
          "$ref": "#/definitions/AuthContext"
        },
        "sessionInfo": {
          "$ref": "#/definitions/SessionInfo"
        },
        "mfaInfo": {
          "$ref": "#/definitions/MFAInfo"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Represents authentication and authorization failures",
      "title": "Authentication Error Response"
    },
    "AvailabilityInfo": {
      "type": "object",
      "properties": {
        "retryAfter": {
          "type": "integer",
          "format": "int32",
          "title": "Seconds to wait before retrying"
        },
        "maintenanceWindow": {
          "type": "string",
          "title": "Scheduled maintenance information"
        },
        "affectedServices": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of affected services"
        },
        "statusPageUrl": {
          "type": "string",
          "title": "URL to service status page"
        }
      }
    },
    "BackgroundJobStatus": {
      "type": "string",
      "enum": [
        "BACKGROUND_JOB_STATUS_UNSPECIFIED",
        "BACKGROUND_JOB_STATUS_QUEUED",
        "BACKGROUND_JOB_STATUS_IN_PROGRESS",
        "BACKGROUND_JOB_STATUS_COMPLETED",
        "BACKGROUND_JOB_STATUS_FAILED",
        "BACKGROUND_JOB_STATUS_CANCELLED",
        "BACKGROUND_JOB_STATUS_TIMED_OUT"
      ],
      "default": "BACKGROUND_JOB_STATUS_UNSPECIFIED",
      "description": "BackgroundJobStatus represents the possible states of a background job.\nThis enum is used to track the lifecycle of asynchronous tasks like scraping jobs.\n\nState transitions:\n1. QUEUED -\u003e IN_PROGRESS\n2. IN_PROGRESS -\u003e COMPLETED/FAILED/CANCELLED/TIMED_OUT\n\nUsage example:\n```go\njob := \u0026ScrapingJob{\n    Status: BackgroundJobStatus_BACKGROUND_JOB_STATUS_IN_PROGRESS,\n}\n```\n\n - BACKGROUND_JOB_STATUS_UNSPECIFIED: Default state, should not be used explicitly\n - BACKGROUND_JOB_STATUS_QUEUED: Job is queued and waiting to be processed\n - BACKGROUND_JOB_STATUS_IN_PROGRESS: Job is currently being processed\n - BACKGROUND_JOB_STATUS_COMPLETED: Job has completed successfully\n - BACKGROUND_JOB_STATUS_FAILED: Job encountered an error and failed\n - BACKGROUND_JOB_STATUS_CANCELLED: Job was manually cancelled by user\n - BACKGROUND_JOB_STATUS_TIMED_OUT: Job exceeded its maximum execution time"
    },
    "BadGatewayErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 502,
        "message": "Bad Gateway",
        "upstream_service": "Auth Service"
      },
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "HTTP status code (502)"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "upstreamService": {
          "type": "string",
          "title": "Name of the upstream service"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Represents errors when the server received an invalid response from an upstream server",
      "title": "Bad Gateway Error Response"
    },
    "ConflictErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 2300,
        "message": "Resource already exists",
        "conflict_info": {
          "resource_type": "user",
          "identifier": "email@example.com"
        }
      },
      "properties": {
        "code": {
          "$ref": "#/definitions/ValidationErrorCode",
          "title": "Error code indicating conflict error"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "conflictInfo": {
          "$ref": "#/definitions/ConflictInfo"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Represents resource conflict errors",
      "title": "Conflict Error Response"
    },
    "ConflictInfo": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "conflictReason": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        }
      }
    },
    "CreateAccountRequest": {
      "type": "object",
      "properties": {
        "authPlatformUserId": {
          "type": "string",
          "title": "Auth0 user identifier"
        },
        "orgId": {
          "type": "string",
          "title": "Organization identifier"
        },
        "tenantId": {
          "type": "string",
          "title": "Tenant identifier"
        },
        "email": {
          "type": "string",
          "title": "User's email address"
        }
      },
      "title": "CreateAccountRequest represents a request to create a new account",
      "required": [
        "authPlatformUserId",
        "orgId",
        "tenantId",
        "email"
      ]
    },
    "CreateAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/Account",
          "title": "The created account"
        }
      },
      "title": "CreateAccountResponse represents the response after creating an account"
    },
    "CreateScrapingJobRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "User and context identification"
        },
        "orgId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "Job configuration"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lang": {
          "type": "string",
          "title": "ISO 639-1 language code"
        },
        "zoom": {
          "type": "integer",
          "format": "int32"
        },
        "lat": {
          "type": "string"
        },
        "lon": {
          "type": "string"
        },
        "fastMode": {
          "type": "boolean"
        },
        "radius": {
          "type": "integer",
          "format": "int32"
        },
        "depth": {
          "type": "integer",
          "format": "int32"
        },
        "email": {
          "type": "boolean"
        },
        "maxTime": {
          "type": "integer",
          "format": "int32"
        },
        "proxies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "CreateScrapingJobRequest represents a request to create a new Google Maps scraping job",
      "required": [
        "userId",
        "orgId",
        "tenantId"
      ]
    },
    "CreateScrapingJobResponse": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/BackgroundJobStatus"
        }
      },
      "title": "CreateScrapingJobResponse represents the response after creating a scraping job"
    },
    "DeleteAccountResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "title": "DeleteAccountResponse represents the response after deleting an account"
    },
    "DeleteScrapingJobResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "title": "DeleteScrapingJobResponse represents the response after deleting a scraping job"
    },
    "Dependency": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Dependency name"
        },
        "status": {
          "type": "string",
          "title": "Dependency status"
        },
        "error": {
          "type": "string",
          "title": "Error if any"
        },
        "latency": {
          "type": "integer",
          "format": "int32",
          "title": "Current latency in ms"
        }
      }
    },
    "DownloadScrapingResultsResponse": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "format": "byte"
        },
        "filename": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        }
      },
      "title": "DownloadScrapingResultsResponse represents the response containing job results"
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/Status"
        }
      },
      "title": "Base error message response, extending google.rpc.Status"
    },
    "FieldError": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "title": "Field with error"
        },
        "error": {
          "type": "string",
          "title": "Error description"
        }
      }
    },
    "FieldViolation": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "title": "Field that failed validation"
        },
        "validation": {
          "type": "string",
          "title": "Type of validation that failed"
        },
        "message": {
          "type": "string",
          "title": "Specific error message"
        },
        "expected": {
          "type": "string",
          "title": "Expected value or format"
        },
        "actual": {
          "type": "string",
          "title": "Actual value provided"
        }
      }
    },
    "ForbiddenErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 403,
        "message": "Forbidden",
        "reason": "Insufficient permissions",
        "required_permissions": [
          "admin"
        ]
      },
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "HTTP status code (403)"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "reason": {
          "type": "string",
          "title": "Reason for the forbidden access"
        },
        "requiredPermissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Permissions required to access the resource"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Indicates that the server understood the request but refuses to authorize it",
      "title": "Forbidden Error Response"
    },
    "GatewayTimeoutErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 504,
        "message": "Gateway Timeout",
        "upstream_service": "Database"
      },
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "HTTP status code (504)"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "upstreamService": {
          "type": "string",
          "title": "Name of the upstream service"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Represents errors when the server did not receive a timely response from an upstream server",
      "title": "Gateway Timeout Error Response"
    },
    "GetAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/Account",
          "title": "The requested account"
        }
      },
      "title": "GetAccountResponse represents the response containing account details"
    },
    "GetScrapingJobResponse": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/ScrapingJob"
        }
      },
      "title": "GetScrapingJobResponse represents the response containing scraping job details"
    },
    "GoneErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 410,
        "message": "Gone",
        "resource": "/api/v1/users"
      },
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "HTTP status code (410)"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "resource": {
          "type": "string",
          "title": "Resource that is gone"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Indicates that the resource requested is no longer available and will not be available again",
      "title": "Gone Error Response"
    },
    "InternalErrorCode": {
      "type": "string",
      "enum": [
        "NO_INTERNAL_ERROR",
        "INTERNAL_ERROR",
        "DATA_CORRUPTION",
        "DATABASE_ERROR",
        "CACHE_ERROR",
        "RESOURCE_EXHAUSTED",
        "QUOTA_EXCEEDED",
        "RATE_LIMIT_EXCEEDED",
        "CANCELLED",
        "DEADLINE_EXCEEDED",
        "ALREADY_EXISTS",
        "FAILED_PRECONDITION",
        "ABORTED",
        "OUT_OF_RANGE",
        "UNAVAILABLE",
        "DATA_LOSS",
        "SERVICE_DEGRADED",
        "DEPENDENCY_FAILURE",
        "CONFIGURATION_ERROR",
        "SECURITY_BREACH_DETECTED"
      ],
      "default": "NO_INTERNAL_ERROR",
      "description": "- INTERNAL_ERROR: General internal errors\n - RESOURCE_EXHAUSTED: Resource exhaustion errors\n - CANCELLED: Operation errors\n - UNAVAILABLE: Availability errors\n - DEPENDENCY_FAILURE: New internal error codes\n\nFailure in external dependency\n - CONFIGURATION_ERROR: Service configuration error\n - SECURITY_BREACH_DETECTED: Potential security breach detected",
      "title": "Enhanced InternalErrorCode represents server-side error codes"
    },
    "InternalErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 4000,
        "message": "Internal server error",
        "incident_id": "inc-789",
        "service_status": {
          "name": "user-service",
          "status": "degraded",
          "dependencies": [
            {
              "name": "db",
              "status": "down"
            }
          ]
        }
      },
      "properties": {
        "code": {
          "$ref": "#/definitions/InternalErrorCode",
          "title": "Error code indicating internal error type"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "incidentId": {
          "type": "string",
          "title": "Unique error tracking ID"
        },
        "serviceStatus": {
          "$ref": "#/definitions/ServiceStatus"
        },
        "resourceUtilization": {
          "$ref": "#/definitions/ResourceUtilization"
        },
        "operationDetails": {
          "$ref": "#/definitions/OperationDetails"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Represents internal server and system-level errors",
      "title": "Internal Error Response"
    },
    "LimitInfo": {
      "type": "object",
      "properties": {
        "current": {
          "type": "integer",
          "format": "int32",
          "title": "Current request count"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "title": "Rate limit threshold"
        },
        "resetTime": {
          "type": "string",
          "format": "date-time",
          "title": "When the limit resets"
        },
        "windowSize": {
          "type": "string",
          "title": "Time window for the limit"
        }
      }
    },
    "ListAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Account"
          },
          "title": "List of accounts"
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of accounts matching the request"
        }
      },
      "title": "ListAccountsResponse represents the response containing a list of accounts"
    },
    "ListScrapingJobsResponse": {
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ScrapingJob"
          }
        }
      },
      "title": "ListScrapingJobsResponse represents the response containing a list of scraping jobs"
    },
    "MFAInfo": {
      "type": "object",
      "properties": {
        "mfaRequired": {
          "type": "boolean",
          "title": "Whether MFA was required"
        },
        "allowedMethods": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Allowed MFA methods"
        },
        "failedReason": {
          "type": "string",
          "title": "Why MFA failed if applicable"
        }
      }
    },
    "MethodNotAllowedErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 405,
        "message": "Method Not Allowed",
        "allowed_methods": [
          "GET",
          "POST"
        ]
      },
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "HTTP status code (405)"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "allowedMethods": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of allowed HTTP methods"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Represents errors when HTTP method is not allowed on the endpoint",
      "title": "Method Not Allowed Error Response"
    },
    "NotFoundErrorCode": {
      "type": "string",
      "enum": [
        "NO_NOT_FOUND_ERROR",
        "UNDEFINED_ENDPOINT",
        "UNIMPLEMENTED",
        "STORE_ID_NOT_FOUND",
        "USER_NOT_FOUND",
        "RESOURCE_NOT_FOUND",
        "TENANT_NOT_FOUND"
      ],
      "default": "NO_NOT_FOUND_ERROR",
      "description": "- NO_NOT_FOUND_ERROR: Default value as per proto3 convention\n - UNDEFINED_ENDPOINT: Endpoint errors\n\nRequested endpoint doesn't exist\n - UNIMPLEMENTED: Endpoint not implemented\n - STORE_ID_NOT_FOUND: Resource errors\n\nRequested store ID doesn't exist\n - USER_NOT_FOUND: Requested user doesn't exist\n - RESOURCE_NOT_FOUND: Generic resource not found\n - TENANT_NOT_FOUND: Requested tenant doesn't exist",
      "title": "Enhanced NotFoundErrorCode represents resource not found error codes"
    },
    "NotFoundErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 5000,
        "message": "Resource not found",
        "resource_info": {
          "type": "user",
          "id": "123",
          "path": "/api/users/123"
        },
        "suggestions": {
          "similar_resources": [
            "124",
            "125"
          ],
          "alternative_paths": [
            "/api/v2/users/123"
          ]
        }
      },
      "properties": {
        "code": {
          "$ref": "#/definitions/NotFoundErrorCode",
          "title": "Error code indicating not found error type"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "resourceInfo": {
          "$ref": "#/definitions/ResourceInfo"
        },
        "suggestions": {
          "$ref": "#/definitions/Suggestions"
        },
        "apiInfo": {
          "$ref": "#/definitions/APIInfo"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Represents resource not found errors",
      "title": "Not Found Error Response"
    },
    "NotImplementedErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 501,
        "message": "Not Implemented",
        "feature": "User Deletion"
      },
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "HTTP status code (501)"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "feature": {
          "type": "string",
          "title": "Feature or functionality not implemented"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Represents errors when the requested functionality is not implemented",
      "title": "Not Implemented Error Response"
    },
    "OperationDetails": {
      "type": "object",
      "properties": {
        "operationId": {
          "type": "string",
          "title": "ID of failed operation"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "When operation started"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "title": "When operation failed"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Stack trace if available"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Operation parameters"
        }
      }
    },
    "PaymentInfo": {
      "type": "object",
      "properties": {
        "amountDue": {
          "type": "number",
          "format": "double",
          "title": "Amount that needs to be paid"
        },
        "currency": {
          "type": "string",
          "title": "Currency code"
        },
        "dueDate": {
          "type": "string",
          "format": "date-time",
          "title": "Payment due date"
        },
        "paymentUrl": {
          "type": "string",
          "title": "URL to make the payment"
        }
      }
    },
    "PaymentRequiredErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 402,
        "message": "Payment Required",
        "payment_info": {
          "amount_due": 29.99,
          "currency": "USD",
          "due_date": "2024-01-01T00:00:00Z"
        }
      },
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "HTTP status code (402)"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "paymentInfo": {
          "$ref": "#/definitions/PaymentInfo"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Indicates that payment is required to proceed",
      "title": "Payment Required Error Response"
    },
    "PreconditionFailedErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 412,
        "message": "Precondition Failed",
        "failed_conditions": [
          "If-Match header does not match"
        ]
      },
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "HTTP status code (412)"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "failedConditions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of failed preconditions"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Represents errors when a precondition provided in the request fails",
      "title": "Precondition Failed Error Response"
    },
    "QuotaInfo": {
      "type": "object",
      "properties": {
        "resource": {
          "type": "string",
          "title": "Resource being limited"
        },
        "used": {
          "type": "string",
          "format": "int64",
          "title": "Amount used"
        },
        "limit": {
          "type": "string",
          "format": "int64",
          "title": "Quota limit"
        },
        "resetTime": {
          "type": "string",
          "format": "date-time",
          "title": "When quota resets"
        },
        "resourceUsage": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "title": "Usage by resource type"
        }
      }
    },
    "RateLimitContext": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "Affected user"
        },
        "ipAddress": {
          "type": "string",
          "title": "IP address"
        },
        "affectedEndpoints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Endpoints being rate limited"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Relevant headers"
        }
      }
    },
    "RateLimitErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 4102,
        "message": "Rate limit exceeded",
        "limit_info": {
          "current": 150,
          "limit": 100,
          "reset_time": "2024-01-01T00:00:00Z"
        },
        "quota_info": {
          "resource": "api_calls",
          "used": 1500,
          "limit": 1000
        }
      },
      "properties": {
        "code": {
          "$ref": "#/definitions/InternalErrorCode",
          "title": "Error code (typically RATE_LIMIT_EXCEEDED)"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "limitInfo": {
          "$ref": "#/definitions/LimitInfo"
        },
        "quotaInfo": {
          "$ref": "#/definitions/QuotaInfo"
        },
        "context": {
          "$ref": "#/definitions/RateLimitContext"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Represents rate limiting and quota exceeded errors",
      "title": "Rate Limit Error Response"
    },
    "ResourceInfo": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "title": "Type of resource not found"
        },
        "id": {
          "type": "string",
          "title": "ID of resource not found"
        },
        "path": {
          "type": "string",
          "title": "Path that was accessed"
        },
        "tenantId": {
          "type": "string",
          "title": "Tenant context if applicable"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Required scopes for access"
        }
      }
    },
    "ResourceUtilization": {
      "type": "object",
      "properties": {
        "cpuUsage": {
          "type": "number",
          "format": "double",
          "title": "CPU usage percentage"
        },
        "memoryUsage": {
          "type": "number",
          "format": "double",
          "title": "Memory usage percentage"
        },
        "activeConnections": {
          "type": "integer",
          "format": "int32",
          "title": "Number of active connections"
        },
        "quotas": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "title": "Current quota utilization"
        }
      }
    },
    "ResourceValidation": {
      "type": "object",
      "properties": {
        "missingResources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Resources that weren't found"
        },
        "invalidReferences": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Invalid resource references"
        },
        "idViolations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "ID format violations"
        }
      }
    },
    "SchemaValidation": {
      "type": "object",
      "properties": {
        "schemaVersion": {
          "type": "string",
          "title": "Version of schema used"
        },
        "invalidPatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Patterns that were invalid"
        },
        "typeMismatches": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Type mismatches found"
        }
      }
    },
    "ScrapingJob": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier for the job"
        },
        "name": {
          "type": "string",
          "title": "Human-readable name for the job"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Job creation timestamp"
        },
        "status": {
          "$ref": "#/definitions/BackgroundJobStatus",
          "title": "Current status of the job"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Search terms for Google Maps"
        },
        "lang": {
          "type": "string",
          "title": "ISO 639-1 language code (e.g., \"en\", \"el\")"
        },
        "zoom": {
          "type": "integer",
          "format": "int32",
          "title": "Map zoom level (1-20)"
        },
        "lat": {
          "type": "string",
          "title": "Latitude coordinate"
        },
        "lon": {
          "type": "string",
          "title": "Longitude coordinate"
        },
        "fastMode": {
          "type": "boolean",
          "title": "Enable faster but potentially less thorough scraping"
        },
        "radius": {
          "type": "integer",
          "format": "int32",
          "title": "Search radius in meters"
        },
        "depth": {
          "type": "integer",
          "format": "int32",
          "title": "Depth of recursive search (1-10)"
        },
        "email": {
          "type": "boolean",
          "title": "Whether to extract email addresses"
        },
        "maxTime": {
          "type": "integer",
          "format": "int32",
          "title": "Maximum execution time in seconds"
        },
        "proxies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of proxy servers to use"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Last update timestamp"
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Soft delete timestamp"
        },
        "payloadType": {
          "type": "string",
          "title": "Account that created the jobs"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "Priority level of the job"
        },
        "payload": {
          "type": "string",
          "format": "byte",
          "title": "Payload data"
        }
      },
      "description": "ScrapingJob represents a Google Maps scraping task.\nThis message defines both the configuration and current state of a scraping operation.\n\nKey components:\n- Basic metadata (id, name, timestamps)\n- Job status tracking\n- Search configuration parameters\n- Geographic settings\n- Performance options\n- Multi-tenant context\n\nDatabase considerations:\n- Stored in \"scraping_jobs\" table\n- Uses GORM for ORM mapping\n- Includes foreign key to Account\n- Supports soft deletes\n\nUsage example:\n```go\njob := \u0026ScrapingJob{\n    Name: \"Athens Cafes\",\n    Status: BackgroundJobStatus_BACKGROUND_JOB_STATUS_QUEUED,\n    Keywords: []string{\"cafe\", \"coffee\"},\n    Lang: \"el\",\n    Zoom: 15,\n    FastMode: true,\n    MaxTime: 3600,\n}\n```"
    },
    "ServiceStatus": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the service"
        },
        "status": {
          "type": "string",
          "title": "Current service status"
        },
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Service metrics"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Dependency"
          },
          "title": "Status of dependencies"
        }
      }
    },
    "ServiceUnavailableErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 4300,
        "message": "Service is temporarily unavailable",
        "availability_info": {
          "retry_after": 60,
          "affected_services": [
            "user-service"
          ]
        }
      },
      "properties": {
        "code": {
          "$ref": "#/definitions/InternalErrorCode",
          "title": "Error code indicating service unavailability"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "availabilityInfo": {
          "$ref": "#/definitions/AvailabilityInfo"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Represents service availability errors",
      "title": "Service Unavailable Error Response"
    },
    "SessionInfo": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string",
          "title": "ID of the invalid session"
        },
        "lastActive": {
          "type": "string",
          "format": "date-time",
          "title": "Last activity timestamp"
        },
        "deviceId": {
          "type": "string",
          "title": "Device associated with session"
        },
        "ipAddress": {
          "type": "string",
          "title": "IP address of the request"
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of\n[google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized\nby the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Any"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "Suggestions": {
      "type": "object",
      "properties": {
        "similarResources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Similar resource IDs"
        },
        "alternativePaths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Alternative API paths"
        },
        "documentationUrl": {
          "type": "string",
          "title": "Relevant documentation"
        },
        "hints": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional hints"
        }
      }
    },
    "TokenInfo": {
      "type": "object",
      "properties": {
        "tokenId": {
          "type": "string",
          "title": "Identifier of the invalid token"
        },
        "tokenType": {
          "type": "string",
          "title": "Type of token (Bearer, JWT, etc)"
        },
        "expiry": {
          "type": "string",
          "format": "date-time",
          "title": "Token expiration time"
        },
        "issuer": {
          "type": "string",
          "title": "Token issuer"
        },
        "audiences": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Token audiences"
        }
      }
    },
    "TooEarlyErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 425,
        "message": "Too Early"
      },
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "HTTP status code (425)"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Indicates that the server is unwilling to risk processing a request that might be replayed",
      "title": "Too Early Error Response"
    },
    "UnprocessableEntityErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 422,
        "message": "Unprocessable Entity",
        "errors": [
          {
            "field": "email",
            "error": "Invalid format"
          }
        ]
      },
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "HTTP status code (422)"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/FieldError"
          },
          "title": "List of field-specific errors"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Represents errors when the server understands the content type but cannot process the instructions",
      "title": "Unprocessable Entity Error Response"
    },
    "UpdateAccountRequest": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        }
      },
      "title": "UpdateAccountRequest represents a request to update account details"
    },
    "UpdateAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/Account",
          "title": "The updated account"
        }
      },
      "title": "UpdateAccountResponse represents the response after updating an account"
    },
    "ValidationErrorCode": {
      "type": "string",
      "enum": [
        "NO_ERROR",
        "VALIDATION_ERROR",
        "INVALID_WRITE_INPUT",
        "INVALID_CHECK_INPUT",
        "INVALID_EXPAND_INPUT",
        "INVALID_OBJECT_FORMAT",
        "INVALID_USER",
        "INVALID_TUPLE",
        "AUTHORIZATION_MODEL_NOT_FOUND",
        "TYPE_NOT_FOUND",
        "RELATION_NOT_FOUND",
        "STORE_ID_INVALID_LENGTH",
        "ID_TOO_LONG",
        "INVALID_CONTINUATION_TOKEN",
        "PAGE_SIZE_INVALID",
        "PARAM_MISSING_VALUE",
        "EXCEEDED_ENTITY_LIMIT",
        "DUPLICATE_ENTRY",
        "CANNOT_ALLOW_DUPLICATE_TUPLES",
        "CANNOT_ALLOW_DUPLICATE_TYPES",
        "INVALID_SCHEMA_VERSION",
        "INVALID_TYPE_PATTERN",
        "INVALID_RELATION_PATTERN",
        "INVALID_OBJECT_PATTERN",
        "INVALID_FORMAT",
        "INVALID_EMAIL_FORMAT",
        "INVALID_PASSWORD_STRENGTH",
        "FIELD_TOO_SHORT",
        "FIELD_TOO_LONG",
        "UNSUPPORTED_MEDIA_TYPE"
      ],
      "default": "NO_ERROR",
      "description": "- VALIDATION_ERROR: General validation errors\n - AUTHORIZATION_MODEL_NOT_FOUND: Resource not found errors\n - INVALID_CONTINUATION_TOKEN: Input errors\n - DUPLICATE_ENTRY: Conflict errors\n - INVALID_SCHEMA_VERSION: Schema errors\n - INVALID_FORMAT: New validation error codes\n\nGeneral invalid format\n - INVALID_EMAIL_FORMAT: Email format is invalid\n - INVALID_PASSWORD_STRENGTH: Password does not meet strength requirements\n - FIELD_TOO_SHORT: Field value is too short\n - FIELD_TOO_LONG: Field value is too long\n - UNSUPPORTED_MEDIA_TYPE: Media type is not supported",
      "title": "Enhanced ValidationErrorCode represents validation and business logic error codes"
    },
    "ValidationErrorMessageResponse": {
      "type": "object",
      "example": {
        "code": 2000,
        "message": "Validation failed",
        "field_violations": [
          {
            "field": "email",
            "validation": "format",
            "message": "Invalid email format"
          }
        ],
        "entity_violations": {
          "user": [
            "duplicate_email",
            "invalid_age"
          ]
        }
      },
      "properties": {
        "code": {
          "$ref": "#/definitions/ValidationErrorCode",
          "title": "Error code indicating validation error type"
        },
        "message": {
          "type": "string",
          "title": "Human-readable error message"
        },
        "fieldViolations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/FieldViolation"
          }
        },
        "schemaValidation": {
          "$ref": "#/definitions/SchemaValidation"
        },
        "resourceValidation": {
          "$ref": "#/definitions/ResourceValidation"
        },
        "errorResponse": {
          "$ref": "#/definitions/ErrorResponse",
          "title": "Standard error response"
        }
      },
      "description": "Represents data validation and business logic errors",
      "title": "Validation Error Response"
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "X-API-Key",
      "in": "header",
      "x-amazon-apigateway-authorizer": {
        "authorizerResultTtlInSeconds": 60,
        "type": "token"
      },
      "x-amazon-apigateway-authtype": "oauth2"
    }
  },
  "externalDocs": {
    "description": "Vector User Service Documentation",
    "url": "https://internal-docs.solomon-ai.io/user-service"
  }
}
