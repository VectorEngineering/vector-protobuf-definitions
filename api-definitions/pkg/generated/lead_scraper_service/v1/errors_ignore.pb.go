// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: lead_scraper_service/v1/errors_ignore.proto

package lead_scraper_servicev1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enhanced AuthErrorCode represents authentication-related error codes
type AuthErrorCode int32

const (
	AuthErrorCode_NO_AUTH_ERROR AuthErrorCode = 0
	// Authentication errors
	AuthErrorCode_AUTH_FAILED_INVALID_BEARER_TOKEN AuthErrorCode = 1001
	AuthErrorCode_AUTH_FAILED_INVALID_SUBJECT      AuthErrorCode = 1002
	AuthErrorCode_AUTH_FAILED_INVALID_AUDIENCE     AuthErrorCode = 1003
	AuthErrorCode_AUTH_FAILED_INVALID_ISSUER       AuthErrorCode = 1004
	AuthErrorCode_BEARER_TOKEN_MISSING             AuthErrorCode = 1005
	AuthErrorCode_TOKEN_EXPIRED                    AuthErrorCode = 1006
	AuthErrorCode_TOKEN_NOT_ACTIVE                 AuthErrorCode = 1007
	AuthErrorCode_TOKEN_REVOKED                    AuthErrorCode = 1008
	AuthErrorCode_INVALID_CLAIMS                   AuthErrorCode = 1100
	AuthErrorCode_MISSING_REQUIRED_CLAIMS          AuthErrorCode = 1101
	AuthErrorCode_INVALID_SCOPE                    AuthErrorCode = 1102
	AuthErrorCode_INVALID_PERMISSIONS              AuthErrorCode = 1103
	// Session errors
	AuthErrorCode_SESSION_EXPIRED AuthErrorCode = 1200
	AuthErrorCode_SESSION_INVALID AuthErrorCode = 1201
	AuthErrorCode_SESSION_REVOKED AuthErrorCode = 1202
	// Other authentication errors
	AuthErrorCode_UNAUTHENTICATED       AuthErrorCode = 1500
	AuthErrorCode_MULTI_FACTOR_REQUIRED AuthErrorCode = 1501
	AuthErrorCode_MULTI_FACTOR_FAILED   AuthErrorCode = 1502
	// New authentication error codes
	AuthErrorCode_ACCOUNT_LOCKED          AuthErrorCode = 1600 // Account is locked due to too many failed login attempts
	AuthErrorCode_ACCOUNT_DISABLED        AuthErrorCode = 1601 // Account has been disabled by admin
	AuthErrorCode_PASSWORD_EXPIRED        AuthErrorCode = 1602 // Password has expired and must be changed
	AuthErrorCode_PASSWORD_RESET_REQUIRED AuthErrorCode = 1603 // Password reset is required
	AuthErrorCode_UNRECOGNIZED_DEVICE     AuthErrorCode = 1604 // Login attempt from an unrecognized device
)

// Enum value maps for AuthErrorCode.
var (
	AuthErrorCode_name = map[int32]string{
		0:    "NO_AUTH_ERROR",
		1001: "AUTH_FAILED_INVALID_BEARER_TOKEN",
		1002: "AUTH_FAILED_INVALID_SUBJECT",
		1003: "AUTH_FAILED_INVALID_AUDIENCE",
		1004: "AUTH_FAILED_INVALID_ISSUER",
		1005: "BEARER_TOKEN_MISSING",
		1006: "TOKEN_EXPIRED",
		1007: "TOKEN_NOT_ACTIVE",
		1008: "TOKEN_REVOKED",
		1100: "INVALID_CLAIMS",
		1101: "MISSING_REQUIRED_CLAIMS",
		1102: "INVALID_SCOPE",
		1103: "INVALID_PERMISSIONS",
		1200: "SESSION_EXPIRED",
		1201: "SESSION_INVALID",
		1202: "SESSION_REVOKED",
		1500: "UNAUTHENTICATED",
		1501: "MULTI_FACTOR_REQUIRED",
		1502: "MULTI_FACTOR_FAILED",
		1600: "ACCOUNT_LOCKED",
		1601: "ACCOUNT_DISABLED",
		1602: "PASSWORD_EXPIRED",
		1603: "PASSWORD_RESET_REQUIRED",
		1604: "UNRECOGNIZED_DEVICE",
	}
	AuthErrorCode_value = map[string]int32{
		"NO_AUTH_ERROR":                    0,
		"AUTH_FAILED_INVALID_BEARER_TOKEN": 1001,
		"AUTH_FAILED_INVALID_SUBJECT":      1002,
		"AUTH_FAILED_INVALID_AUDIENCE":     1003,
		"AUTH_FAILED_INVALID_ISSUER":       1004,
		"BEARER_TOKEN_MISSING":             1005,
		"TOKEN_EXPIRED":                    1006,
		"TOKEN_NOT_ACTIVE":                 1007,
		"TOKEN_REVOKED":                    1008,
		"INVALID_CLAIMS":                   1100,
		"MISSING_REQUIRED_CLAIMS":          1101,
		"INVALID_SCOPE":                    1102,
		"INVALID_PERMISSIONS":              1103,
		"SESSION_EXPIRED":                  1200,
		"SESSION_INVALID":                  1201,
		"SESSION_REVOKED":                  1202,
		"UNAUTHENTICATED":                  1500,
		"MULTI_FACTOR_REQUIRED":            1501,
		"MULTI_FACTOR_FAILED":              1502,
		"ACCOUNT_LOCKED":                   1600,
		"ACCOUNT_DISABLED":                 1601,
		"PASSWORD_EXPIRED":                 1602,
		"PASSWORD_RESET_REQUIRED":          1603,
		"UNRECOGNIZED_DEVICE":              1604,
	}
)

func (x AuthErrorCode) Enum() *AuthErrorCode {
	p := new(AuthErrorCode)
	*p = x
	return p
}

func (x AuthErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_errors_ignore_proto_enumTypes[0].Descriptor()
}

func (AuthErrorCode) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_errors_ignore_proto_enumTypes[0]
}

func (x AuthErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthErrorCode.Descriptor instead.
func (AuthErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{0}
}

// Enhanced ValidationErrorCode represents validation and business logic error codes
type ValidationErrorCode int32

const (
	ValidationErrorCode_NO_ERROR ValidationErrorCode = 0
	// General validation errors
	ValidationErrorCode_VALIDATION_ERROR      ValidationErrorCode = 2000
	ValidationErrorCode_INVALID_WRITE_INPUT   ValidationErrorCode = 2001
	ValidationErrorCode_INVALID_CHECK_INPUT   ValidationErrorCode = 2002
	ValidationErrorCode_INVALID_EXPAND_INPUT  ValidationErrorCode = 2003
	ValidationErrorCode_INVALID_OBJECT_FORMAT ValidationErrorCode = 2004
	ValidationErrorCode_INVALID_USER          ValidationErrorCode = 2005
	ValidationErrorCode_INVALID_TUPLE         ValidationErrorCode = 2006
	// Resource not found errors
	ValidationErrorCode_AUTHORIZATION_MODEL_NOT_FOUND ValidationErrorCode = 2100
	ValidationErrorCode_TYPE_NOT_FOUND                ValidationErrorCode = 2101
	ValidationErrorCode_RELATION_NOT_FOUND            ValidationErrorCode = 2102
	ValidationErrorCode_STORE_ID_INVALID_LENGTH       ValidationErrorCode = 2103
	ValidationErrorCode_ID_TOO_LONG                   ValidationErrorCode = 2104
	// Input errors
	ValidationErrorCode_INVALID_CONTINUATION_TOKEN ValidationErrorCode = 2200
	ValidationErrorCode_PAGE_SIZE_INVALID          ValidationErrorCode = 2201
	ValidationErrorCode_PARAM_MISSING_VALUE        ValidationErrorCode = 2202
	ValidationErrorCode_EXCEEDED_ENTITY_LIMIT      ValidationErrorCode = 2203
	// Conflict errors
	ValidationErrorCode_DUPLICATE_ENTRY               ValidationErrorCode = 2300
	ValidationErrorCode_CANNOT_ALLOW_DUPLICATE_TUPLES ValidationErrorCode = 2301
	ValidationErrorCode_CANNOT_ALLOW_DUPLICATE_TYPES  ValidationErrorCode = 2302
	// Schema errors
	ValidationErrorCode_INVALID_SCHEMA_VERSION   ValidationErrorCode = 2400
	ValidationErrorCode_INVALID_TYPE_PATTERN     ValidationErrorCode = 2401
	ValidationErrorCode_INVALID_RELATION_PATTERN ValidationErrorCode = 2402
	ValidationErrorCode_INVALID_OBJECT_PATTERN   ValidationErrorCode = 2403
	// New validation error codes
	ValidationErrorCode_INVALID_FORMAT            ValidationErrorCode = 2500 // General invalid format
	ValidationErrorCode_INVALID_EMAIL_FORMAT      ValidationErrorCode = 2501 // Email format is invalid
	ValidationErrorCode_INVALID_PASSWORD_STRENGTH ValidationErrorCode = 2502 // Password does not meet strength requirements
	ValidationErrorCode_FIELD_TOO_SHORT           ValidationErrorCode = 2503 // Field value is too short
	ValidationErrorCode_FIELD_TOO_LONG            ValidationErrorCode = 2504 // Field value is too long
	ValidationErrorCode_UNSUPPORTED_MEDIA_TYPE    ValidationErrorCode = 2505 // Media type is not supported
)

// Enum value maps for ValidationErrorCode.
var (
	ValidationErrorCode_name = map[int32]string{
		0:    "NO_ERROR",
		2000: "VALIDATION_ERROR",
		2001: "INVALID_WRITE_INPUT",
		2002: "INVALID_CHECK_INPUT",
		2003: "INVALID_EXPAND_INPUT",
		2004: "INVALID_OBJECT_FORMAT",
		2005: "INVALID_USER",
		2006: "INVALID_TUPLE",
		2100: "AUTHORIZATION_MODEL_NOT_FOUND",
		2101: "TYPE_NOT_FOUND",
		2102: "RELATION_NOT_FOUND",
		2103: "STORE_ID_INVALID_LENGTH",
		2104: "ID_TOO_LONG",
		2200: "INVALID_CONTINUATION_TOKEN",
		2201: "PAGE_SIZE_INVALID",
		2202: "PARAM_MISSING_VALUE",
		2203: "EXCEEDED_ENTITY_LIMIT",
		2300: "DUPLICATE_ENTRY",
		2301: "CANNOT_ALLOW_DUPLICATE_TUPLES",
		2302: "CANNOT_ALLOW_DUPLICATE_TYPES",
		2400: "INVALID_SCHEMA_VERSION",
		2401: "INVALID_TYPE_PATTERN",
		2402: "INVALID_RELATION_PATTERN",
		2403: "INVALID_OBJECT_PATTERN",
		2500: "INVALID_FORMAT",
		2501: "INVALID_EMAIL_FORMAT",
		2502: "INVALID_PASSWORD_STRENGTH",
		2503: "FIELD_TOO_SHORT",
		2504: "FIELD_TOO_LONG",
		2505: "UNSUPPORTED_MEDIA_TYPE",
	}
	ValidationErrorCode_value = map[string]int32{
		"NO_ERROR":                      0,
		"VALIDATION_ERROR":              2000,
		"INVALID_WRITE_INPUT":           2001,
		"INVALID_CHECK_INPUT":           2002,
		"INVALID_EXPAND_INPUT":          2003,
		"INVALID_OBJECT_FORMAT":         2004,
		"INVALID_USER":                  2005,
		"INVALID_TUPLE":                 2006,
		"AUTHORIZATION_MODEL_NOT_FOUND": 2100,
		"TYPE_NOT_FOUND":                2101,
		"RELATION_NOT_FOUND":            2102,
		"STORE_ID_INVALID_LENGTH":       2103,
		"ID_TOO_LONG":                   2104,
		"INVALID_CONTINUATION_TOKEN":    2200,
		"PAGE_SIZE_INVALID":             2201,
		"PARAM_MISSING_VALUE":           2202,
		"EXCEEDED_ENTITY_LIMIT":         2203,
		"DUPLICATE_ENTRY":               2300,
		"CANNOT_ALLOW_DUPLICATE_TUPLES": 2301,
		"CANNOT_ALLOW_DUPLICATE_TYPES":  2302,
		"INVALID_SCHEMA_VERSION":        2400,
		"INVALID_TYPE_PATTERN":          2401,
		"INVALID_RELATION_PATTERN":      2402,
		"INVALID_OBJECT_PATTERN":        2403,
		"INVALID_FORMAT":                2500,
		"INVALID_EMAIL_FORMAT":          2501,
		"INVALID_PASSWORD_STRENGTH":     2502,
		"FIELD_TOO_SHORT":               2503,
		"FIELD_TOO_LONG":                2504,
		"UNSUPPORTED_MEDIA_TYPE":        2505,
	}
)

func (x ValidationErrorCode) Enum() *ValidationErrorCode {
	p := new(ValidationErrorCode)
	*p = x
	return p
}

func (x ValidationErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidationErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_errors_ignore_proto_enumTypes[1].Descriptor()
}

func (ValidationErrorCode) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_errors_ignore_proto_enumTypes[1]
}

func (x ValidationErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidationErrorCode.Descriptor instead.
func (ValidationErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{1}
}

// Enhanced InternalErrorCode represents server-side error codes
type InternalErrorCode int32

const (
	InternalErrorCode_NO_INTERNAL_ERROR InternalErrorCode = 0
	// General internal errors
	InternalErrorCode_INTERNAL_ERROR  InternalErrorCode = 4000
	InternalErrorCode_DATA_CORRUPTION InternalErrorCode = 4001
	InternalErrorCode_DATABASE_ERROR  InternalErrorCode = 4002
	InternalErrorCode_CACHE_ERROR     InternalErrorCode = 4003
	// Resource exhaustion errors
	InternalErrorCode_RESOURCE_EXHAUSTED  InternalErrorCode = 4100
	InternalErrorCode_QUOTA_EXCEEDED      InternalErrorCode = 4101
	InternalErrorCode_RATE_LIMIT_EXCEEDED InternalErrorCode = 4102
	// Operation errors
	InternalErrorCode_CANCELLED           InternalErrorCode = 4200
	InternalErrorCode_DEADLINE_EXCEEDED   InternalErrorCode = 4201
	InternalErrorCode_ALREADY_EXISTS      InternalErrorCode = 4202
	InternalErrorCode_FAILED_PRECONDITION InternalErrorCode = 4203
	InternalErrorCode_ABORTED             InternalErrorCode = 4204
	InternalErrorCode_OUT_OF_RANGE        InternalErrorCode = 4205
	// Availability errors
	InternalErrorCode_UNAVAILABLE      InternalErrorCode = 4300
	InternalErrorCode_DATA_LOSS        InternalErrorCode = 4301
	InternalErrorCode_SERVICE_DEGRADED InternalErrorCode = 4302
	// New internal error codes
	InternalErrorCode_DEPENDENCY_FAILURE       InternalErrorCode = 4400 // Failure in external dependency
	InternalErrorCode_CONFIGURATION_ERROR      InternalErrorCode = 4401 // Service configuration error
	InternalErrorCode_SECURITY_BREACH_DETECTED InternalErrorCode = 4402 // Potential security breach detected
)

// Enum value maps for InternalErrorCode.
var (
	InternalErrorCode_name = map[int32]string{
		0:    "NO_INTERNAL_ERROR",
		4000: "INTERNAL_ERROR",
		4001: "DATA_CORRUPTION",
		4002: "DATABASE_ERROR",
		4003: "CACHE_ERROR",
		4100: "RESOURCE_EXHAUSTED",
		4101: "QUOTA_EXCEEDED",
		4102: "RATE_LIMIT_EXCEEDED",
		4200: "CANCELLED",
		4201: "DEADLINE_EXCEEDED",
		4202: "ALREADY_EXISTS",
		4203: "FAILED_PRECONDITION",
		4204: "ABORTED",
		4205: "OUT_OF_RANGE",
		4300: "UNAVAILABLE",
		4301: "DATA_LOSS",
		4302: "SERVICE_DEGRADED",
		4400: "DEPENDENCY_FAILURE",
		4401: "CONFIGURATION_ERROR",
		4402: "SECURITY_BREACH_DETECTED",
	}
	InternalErrorCode_value = map[string]int32{
		"NO_INTERNAL_ERROR":        0,
		"INTERNAL_ERROR":           4000,
		"DATA_CORRUPTION":          4001,
		"DATABASE_ERROR":           4002,
		"CACHE_ERROR":              4003,
		"RESOURCE_EXHAUSTED":       4100,
		"QUOTA_EXCEEDED":           4101,
		"RATE_LIMIT_EXCEEDED":      4102,
		"CANCELLED":                4200,
		"DEADLINE_EXCEEDED":        4201,
		"ALREADY_EXISTS":           4202,
		"FAILED_PRECONDITION":      4203,
		"ABORTED":                  4204,
		"OUT_OF_RANGE":             4205,
		"UNAVAILABLE":              4300,
		"DATA_LOSS":                4301,
		"SERVICE_DEGRADED":         4302,
		"DEPENDENCY_FAILURE":       4400,
		"CONFIGURATION_ERROR":      4401,
		"SECURITY_BREACH_DETECTED": 4402,
	}
)

func (x InternalErrorCode) Enum() *InternalErrorCode {
	p := new(InternalErrorCode)
	*p = x
	return p
}

func (x InternalErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InternalErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_errors_ignore_proto_enumTypes[2].Descriptor()
}

func (InternalErrorCode) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_errors_ignore_proto_enumTypes[2]
}

func (x InternalErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InternalErrorCode.Descriptor instead.
func (InternalErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{2}
}

// Enhanced NotFoundErrorCode represents resource not found error codes
type NotFoundErrorCode int32

const (
	NotFoundErrorCode_NO_NOT_FOUND_ERROR NotFoundErrorCode = 0 // Default value as per proto3 convention
	// Endpoint errors
	NotFoundErrorCode_UNDEFINED_ENDPOINT NotFoundErrorCode = 5000 // Requested endpoint doesn't exist
	NotFoundErrorCode_UNIMPLEMENTED      NotFoundErrorCode = 5001 // Endpoint not implemented
	// Resource errors
	NotFoundErrorCode_STORE_ID_NOT_FOUND NotFoundErrorCode = 5100 // Requested store ID doesn't exist
	NotFoundErrorCode_USER_NOT_FOUND     NotFoundErrorCode = 5101 // Requested user doesn't exist
	NotFoundErrorCode_RESOURCE_NOT_FOUND NotFoundErrorCode = 5102 // Generic resource not found
	NotFoundErrorCode_TENANT_NOT_FOUND   NotFoundErrorCode = 5103 // Requested tenant doesn't exist
)

// Enum value maps for NotFoundErrorCode.
var (
	NotFoundErrorCode_name = map[int32]string{
		0:    "NO_NOT_FOUND_ERROR",
		5000: "UNDEFINED_ENDPOINT",
		5001: "UNIMPLEMENTED",
		5100: "STORE_ID_NOT_FOUND",
		5101: "USER_NOT_FOUND",
		5102: "RESOURCE_NOT_FOUND",
		5103: "TENANT_NOT_FOUND",
	}
	NotFoundErrorCode_value = map[string]int32{
		"NO_NOT_FOUND_ERROR": 0,
		"UNDEFINED_ENDPOINT": 5000,
		"UNIMPLEMENTED":      5001,
		"STORE_ID_NOT_FOUND": 5100,
		"USER_NOT_FOUND":     5101,
		"RESOURCE_NOT_FOUND": 5102,
		"TENANT_NOT_FOUND":   5103,
	}
)

func (x NotFoundErrorCode) Enum() *NotFoundErrorCode {
	p := new(NotFoundErrorCode)
	*p = x
	return p
}

func (x NotFoundErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotFoundErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_errors_ignore_proto_enumTypes[3].Descriptor()
}

func (NotFoundErrorCode) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_errors_ignore_proto_enumTypes[3]
}

func (x NotFoundErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotFoundErrorCode.Descriptor instead.
func (NotFoundErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{3}
}

// Base error message response, extending google.rpc.Status
type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// AuthenticationErrorMessageResponse
type AuthenticationErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          AuthErrorCode                                   `protobuf:"varint,1,opt,name=code,proto3,enum=lead_scraper_service.v1.AuthErrorCode" json:"code,omitempty"` // Error code indicating type of auth error
	Message       string                                          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                       // Human-readable error message
	TokenInfo     *AuthenticationErrorMessageResponse_TokenInfo   `protobuf:"bytes,3,opt,name=token_info,json=tokenInfo,proto3" json:"token_info,omitempty"`
	AuthContext   *AuthenticationErrorMessageResponse_AuthContext `protobuf:"bytes,4,opt,name=auth_context,json=authContext,proto3" json:"auth_context,omitempty"`
	SessionInfo   *AuthenticationErrorMessageResponse_SessionInfo `protobuf:"bytes,5,opt,name=session_info,json=sessionInfo,proto3" json:"session_info,omitempty"`
	MfaInfo       *AuthenticationErrorMessageResponse_MFAInfo     `protobuf:"bytes,6,opt,name=mfa_info,json=mfaInfo,proto3" json:"mfa_info,omitempty"`
	ErrorResponse *ErrorResponse                                  `protobuf:"bytes,7,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"` // Standard error response
}

func (x *AuthenticationErrorMessageResponse) Reset() {
	*x = AuthenticationErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationErrorMessageResponse) ProtoMessage() {}

func (x *AuthenticationErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*AuthenticationErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{1}
}

func (x *AuthenticationErrorMessageResponse) GetCode() AuthErrorCode {
	if x != nil {
		return x.Code
	}
	return AuthErrorCode_NO_AUTH_ERROR
}

func (x *AuthenticationErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AuthenticationErrorMessageResponse) GetTokenInfo() *AuthenticationErrorMessageResponse_TokenInfo {
	if x != nil {
		return x.TokenInfo
	}
	return nil
}

func (x *AuthenticationErrorMessageResponse) GetAuthContext() *AuthenticationErrorMessageResponse_AuthContext {
	if x != nil {
		return x.AuthContext
	}
	return nil
}

func (x *AuthenticationErrorMessageResponse) GetSessionInfo() *AuthenticationErrorMessageResponse_SessionInfo {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

func (x *AuthenticationErrorMessageResponse) GetMfaInfo() *AuthenticationErrorMessageResponse_MFAInfo {
	if x != nil {
		return x.MfaInfo
	}
	return nil
}

func (x *AuthenticationErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// ValidationErrorMessageResponse
type ValidationErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code               ValidationErrorCode                                `protobuf:"varint,1,opt,name=code,proto3,enum=lead_scraper_service.v1.ValidationErrorCode" json:"code,omitempty"` // Error code indicating validation error type
	Message            string                                             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                             // Human-readable error message
	FieldViolations    []*ValidationErrorMessageResponse_FieldViolation   `protobuf:"bytes,3,rep,name=field_violations,json=fieldViolations,proto3" json:"field_violations,omitempty"`
	SchemaValidation   *ValidationErrorMessageResponse_SchemaValidation   `protobuf:"bytes,5,opt,name=schema_validation,json=schemaValidation,proto3" json:"schema_validation,omitempty"`
	ResourceValidation *ValidationErrorMessageResponse_ResourceValidation `protobuf:"bytes,6,opt,name=resource_validation,json=resourceValidation,proto3" json:"resource_validation,omitempty"`
	ErrorResponse      *ErrorResponse                                     `protobuf:"bytes,7,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"` // Standard error response
}

func (x *ValidationErrorMessageResponse) Reset() {
	*x = ValidationErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationErrorMessageResponse) ProtoMessage() {}

func (x *ValidationErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*ValidationErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{2}
}

func (x *ValidationErrorMessageResponse) GetCode() ValidationErrorCode {
	if x != nil {
		return x.Code
	}
	return ValidationErrorCode_NO_ERROR
}

func (x *ValidationErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ValidationErrorMessageResponse) GetFieldViolations() []*ValidationErrorMessageResponse_FieldViolation {
	if x != nil {
		return x.FieldViolations
	}
	return nil
}

func (x *ValidationErrorMessageResponse) GetSchemaValidation() *ValidationErrorMessageResponse_SchemaValidation {
	if x != nil {
		return x.SchemaValidation
	}
	return nil
}

func (x *ValidationErrorMessageResponse) GetResourceValidation() *ValidationErrorMessageResponse_ResourceValidation {
	if x != nil {
		return x.ResourceValidation
	}
	return nil
}

func (x *ValidationErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// InternalErrorMessageResponse
type InternalErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                InternalErrorCode                                 `protobuf:"varint,1,opt,name=code,proto3,enum=lead_scraper_service.v1.InternalErrorCode" json:"code,omitempty"` // Error code indicating internal error type
	Message             string                                            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                           // Human-readable error message
	IncidentId          string                                            `protobuf:"bytes,3,opt,name=incident_id,json=incidentId,proto3" json:"incident_id,omitempty"`                   // Unique error tracking ID
	ServiceStatus       *InternalErrorMessageResponse_ServiceStatus       `protobuf:"bytes,4,opt,name=service_status,json=serviceStatus,proto3" json:"service_status,omitempty"`
	ResourceUtilization *InternalErrorMessageResponse_ResourceUtilization `protobuf:"bytes,5,opt,name=resource_utilization,json=resourceUtilization,proto3" json:"resource_utilization,omitempty"`
	OperationDetails    *InternalErrorMessageResponse_OperationDetails    `protobuf:"bytes,6,opt,name=operation_details,json=operationDetails,proto3" json:"operation_details,omitempty"`
	ErrorResponse       *ErrorResponse                                    `protobuf:"bytes,7,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"` // Standard error response
}

func (x *InternalErrorMessageResponse) Reset() {
	*x = InternalErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalErrorMessageResponse) ProtoMessage() {}

func (x *InternalErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*InternalErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{3}
}

func (x *InternalErrorMessageResponse) GetCode() InternalErrorCode {
	if x != nil {
		return x.Code
	}
	return InternalErrorCode_NO_INTERNAL_ERROR
}

func (x *InternalErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InternalErrorMessageResponse) GetIncidentId() string {
	if x != nil {
		return x.IncidentId
	}
	return ""
}

func (x *InternalErrorMessageResponse) GetServiceStatus() *InternalErrorMessageResponse_ServiceStatus {
	if x != nil {
		return x.ServiceStatus
	}
	return nil
}

func (x *InternalErrorMessageResponse) GetResourceUtilization() *InternalErrorMessageResponse_ResourceUtilization {
	if x != nil {
		return x.ResourceUtilization
	}
	return nil
}

func (x *InternalErrorMessageResponse) GetOperationDetails() *InternalErrorMessageResponse_OperationDetails {
	if x != nil {
		return x.OperationDetails
	}
	return nil
}

func (x *InternalErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// NotFoundErrorMessageResponse
type NotFoundErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          NotFoundErrorCode                          `protobuf:"varint,1,opt,name=code,proto3,enum=lead_scraper_service.v1.NotFoundErrorCode" json:"code,omitempty"` // Error code indicating not found error type
	Message       string                                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                           // Human-readable error message
	ResourceInfo  *NotFoundErrorMessageResponse_ResourceInfo `protobuf:"bytes,3,opt,name=resource_info,json=resourceInfo,proto3" json:"resource_info,omitempty"`
	Suggestions   *NotFoundErrorMessageResponse_Suggestions  `protobuf:"bytes,4,opt,name=suggestions,proto3" json:"suggestions,omitempty"`
	ApiInfo       *NotFoundErrorMessageResponse_APIInfo      `protobuf:"bytes,5,opt,name=api_info,json=apiInfo,proto3" json:"api_info,omitempty"`
	ErrorResponse *ErrorResponse                             `protobuf:"bytes,6,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"` // Standard error response
}

func (x *NotFoundErrorMessageResponse) Reset() {
	*x = NotFoundErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotFoundErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotFoundErrorMessageResponse) ProtoMessage() {}

func (x *NotFoundErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotFoundErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*NotFoundErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{4}
}

func (x *NotFoundErrorMessageResponse) GetCode() NotFoundErrorCode {
	if x != nil {
		return x.Code
	}
	return NotFoundErrorCode_NO_NOT_FOUND_ERROR
}

func (x *NotFoundErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NotFoundErrorMessageResponse) GetResourceInfo() *NotFoundErrorMessageResponse_ResourceInfo {
	if x != nil {
		return x.ResourceInfo
	}
	return nil
}

func (x *NotFoundErrorMessageResponse) GetSuggestions() *NotFoundErrorMessageResponse_Suggestions {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

func (x *NotFoundErrorMessageResponse) GetApiInfo() *NotFoundErrorMessageResponse_APIInfo {
	if x != nil {
		return x.ApiInfo
	}
	return nil
}

func (x *NotFoundErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// RateLimitErrorMessageResponse
type RateLimitErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          InternalErrorCode                               `protobuf:"varint,1,opt,name=code,proto3,enum=lead_scraper_service.v1.InternalErrorCode" json:"code,omitempty"` // Error code (typically RATE_LIMIT_EXCEEDED)
	Message       string                                          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                           // Human-readable error message
	LimitInfo     *RateLimitErrorMessageResponse_LimitInfo        `protobuf:"bytes,3,opt,name=limit_info,json=limitInfo,proto3" json:"limit_info,omitempty"`
	QuotaInfo     *RateLimitErrorMessageResponse_QuotaInfo        `protobuf:"bytes,4,opt,name=quota_info,json=quotaInfo,proto3" json:"quota_info,omitempty"`
	Context       *RateLimitErrorMessageResponse_RateLimitContext `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	ErrorResponse *ErrorResponse                                  `protobuf:"bytes,6,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"` // Standard error response
}

func (x *RateLimitErrorMessageResponse) Reset() {
	*x = RateLimitErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitErrorMessageResponse) ProtoMessage() {}

func (x *RateLimitErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*RateLimitErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{5}
}

func (x *RateLimitErrorMessageResponse) GetCode() InternalErrorCode {
	if x != nil {
		return x.Code
	}
	return InternalErrorCode_NO_INTERNAL_ERROR
}

func (x *RateLimitErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RateLimitErrorMessageResponse) GetLimitInfo() *RateLimitErrorMessageResponse_LimitInfo {
	if x != nil {
		return x.LimitInfo
	}
	return nil
}

func (x *RateLimitErrorMessageResponse) GetQuotaInfo() *RateLimitErrorMessageResponse_QuotaInfo {
	if x != nil {
		return x.QuotaInfo
	}
	return nil
}

func (x *RateLimitErrorMessageResponse) GetContext() *RateLimitErrorMessageResponse_RateLimitContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RateLimitErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// ConflictErrorMessageResponse
type ConflictErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          ValidationErrorCode                        `protobuf:"varint,1,opt,name=code,proto3,enum=lead_scraper_service.v1.ValidationErrorCode" json:"code,omitempty"` // Error code indicating conflict error
	Message       string                                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                             // Human-readable error message
	ConflictInfo  *ConflictErrorMessageResponse_ConflictInfo `protobuf:"bytes,3,opt,name=conflict_info,json=conflictInfo,proto3" json:"conflict_info,omitempty"`
	ErrorResponse *ErrorResponse                             `protobuf:"bytes,4,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"` // Standard error response
}

func (x *ConflictErrorMessageResponse) Reset() {
	*x = ConflictErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConflictErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConflictErrorMessageResponse) ProtoMessage() {}

func (x *ConflictErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConflictErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*ConflictErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{6}
}

func (x *ConflictErrorMessageResponse) GetCode() ValidationErrorCode {
	if x != nil {
		return x.Code
	}
	return ValidationErrorCode_NO_ERROR
}

func (x *ConflictErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConflictErrorMessageResponse) GetConflictInfo() *ConflictErrorMessageResponse_ConflictInfo {
	if x != nil {
		return x.ConflictInfo
	}
	return nil
}

func (x *ConflictErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// ServiceUnavailableErrorMessageResponse
type ServiceUnavailableErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code             InternalErrorCode                                        `protobuf:"varint,1,opt,name=code,proto3,enum=lead_scraper_service.v1.InternalErrorCode" json:"code,omitempty"` // Error code indicating service unavailability
	Message          string                                                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                           // Human-readable error message
	AvailabilityInfo *ServiceUnavailableErrorMessageResponse_AvailabilityInfo `protobuf:"bytes,3,opt,name=availability_info,json=availabilityInfo,proto3" json:"availability_info,omitempty"`
	ErrorResponse    *ErrorResponse                                           `protobuf:"bytes,4,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"` // Standard error response
}

func (x *ServiceUnavailableErrorMessageResponse) Reset() {
	*x = ServiceUnavailableErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceUnavailableErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceUnavailableErrorMessageResponse) ProtoMessage() {}

func (x *ServiceUnavailableErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceUnavailableErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*ServiceUnavailableErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceUnavailableErrorMessageResponse) GetCode() InternalErrorCode {
	if x != nil {
		return x.Code
	}
	return InternalErrorCode_NO_INTERNAL_ERROR
}

func (x *ServiceUnavailableErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ServiceUnavailableErrorMessageResponse) GetAvailabilityInfo() *ServiceUnavailableErrorMessageResponse_AvailabilityInfo {
	if x != nil {
		return x.AvailabilityInfo
	}
	return nil
}

func (x *ServiceUnavailableErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// Empty request message for error endpoints
type ErrorMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ErrorMessageRequest) Reset() {
	*x = ErrorMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessageRequest) ProtoMessage() {}

func (x *ErrorMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessageRequest.ProtoReflect.Descriptor instead.
func (*ErrorMessageRequest) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{8}
}

// MethodNotAllowedErrorMessageResponse for 405 Method Not Allowed
type MethodNotAllowedErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                          // HTTP status code (405)
	Message        string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                     // Human-readable error message
	AllowedMethods []string       `protobuf:"bytes,3,rep,name=allowed_methods,json=allowedMethods,proto3" json:"allowed_methods,omitempty"` // List of allowed HTTP methods
	ErrorResponse  *ErrorResponse `protobuf:"bytes,4,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"`    // Standard error response
}

func (x *MethodNotAllowedErrorMessageResponse) Reset() {
	*x = MethodNotAllowedErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodNotAllowedErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodNotAllowedErrorMessageResponse) ProtoMessage() {}

func (x *MethodNotAllowedErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodNotAllowedErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*MethodNotAllowedErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{9}
}

func (x *MethodNotAllowedErrorMessageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MethodNotAllowedErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MethodNotAllowedErrorMessageResponse) GetAllowedMethods() []string {
	if x != nil {
		return x.AllowedMethods
	}
	return nil
}

func (x *MethodNotAllowedErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// UnprocessableEntityErrorMessageResponse for 422 Unprocessable Entity
type UnprocessableEntityErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int32                                                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                       // HTTP status code (422)
	Message       string                                                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                  // Human-readable error message
	Errors        []*UnprocessableEntityErrorMessageResponse_FieldError `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`                                    // List of field-specific errors
	ErrorResponse *ErrorResponse                                        `protobuf:"bytes,4,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"` // Standard error response
}

func (x *UnprocessableEntityErrorMessageResponse) Reset() {
	*x = UnprocessableEntityErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnprocessableEntityErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnprocessableEntityErrorMessageResponse) ProtoMessage() {}

func (x *UnprocessableEntityErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnprocessableEntityErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*UnprocessableEntityErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{10}
}

func (x *UnprocessableEntityErrorMessageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UnprocessableEntityErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UnprocessableEntityErrorMessageResponse) GetErrors() []*UnprocessableEntityErrorMessageResponse_FieldError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *UnprocessableEntityErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// NotImplementedErrorMessageResponse for 501 Not Implemented
type NotImplementedErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                       // HTTP status code (501)
	Message       string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                  // Human-readable error message
	Feature       string         `protobuf:"bytes,3,opt,name=feature,proto3" json:"feature,omitempty"`                                  // Feature or functionality not implemented
	ErrorResponse *ErrorResponse `protobuf:"bytes,4,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"` // Standard error response
}

func (x *NotImplementedErrorMessageResponse) Reset() {
	*x = NotImplementedErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotImplementedErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotImplementedErrorMessageResponse) ProtoMessage() {}

func (x *NotImplementedErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotImplementedErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*NotImplementedErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{11}
}

func (x *NotImplementedErrorMessageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NotImplementedErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NotImplementedErrorMessageResponse) GetFeature() string {
	if x != nil {
		return x.Feature
	}
	return ""
}

func (x *NotImplementedErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// BadGatewayErrorMessageResponse for 502 Bad Gateway
type BadGatewayErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                             // HTTP status code (502)
	Message         string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                        // Human-readable error message
	UpstreamService string         `protobuf:"bytes,3,opt,name=upstream_service,json=upstreamService,proto3" json:"upstream_service,omitempty"` // Name of the upstream service
	ErrorResponse   *ErrorResponse `protobuf:"bytes,4,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"`       // Standard error response
}

func (x *BadGatewayErrorMessageResponse) Reset() {
	*x = BadGatewayErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadGatewayErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadGatewayErrorMessageResponse) ProtoMessage() {}

func (x *BadGatewayErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadGatewayErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*BadGatewayErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{12}
}

func (x *BadGatewayErrorMessageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BadGatewayErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BadGatewayErrorMessageResponse) GetUpstreamService() string {
	if x != nil {
		return x.UpstreamService
	}
	return ""
}

func (x *BadGatewayErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// GatewayTimeoutErrorMessageResponse for 504 Gateway Timeout
type GatewayTimeoutErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                             // HTTP status code (504)
	Message         string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                        // Human-readable error message
	UpstreamService string         `protobuf:"bytes,3,opt,name=upstream_service,json=upstreamService,proto3" json:"upstream_service,omitempty"` // Name of the upstream service
	ErrorResponse   *ErrorResponse `protobuf:"bytes,4,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"`       // Standard error response
}

func (x *GatewayTimeoutErrorMessageResponse) Reset() {
	*x = GatewayTimeoutErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayTimeoutErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayTimeoutErrorMessageResponse) ProtoMessage() {}

func (x *GatewayTimeoutErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayTimeoutErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*GatewayTimeoutErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{13}
}

func (x *GatewayTimeoutErrorMessageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GatewayTimeoutErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GatewayTimeoutErrorMessageResponse) GetUpstreamService() string {
	if x != nil {
		return x.UpstreamService
	}
	return ""
}

func (x *GatewayTimeoutErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// PreconditionFailedErrorMessageResponse for 412 Precondition Failed
type PreconditionFailedErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code             int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                                // HTTP status code (412)
	Message          string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                           // Human-readable error message
	FailedConditions []string       `protobuf:"bytes,3,rep,name=failed_conditions,json=failedConditions,proto3" json:"failed_conditions,omitempty"` // List of failed preconditions
	ErrorResponse    *ErrorResponse `protobuf:"bytes,4,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"`          // Standard error response
}

func (x *PreconditionFailedErrorMessageResponse) Reset() {
	*x = PreconditionFailedErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreconditionFailedErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreconditionFailedErrorMessageResponse) ProtoMessage() {}

func (x *PreconditionFailedErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreconditionFailedErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*PreconditionFailedErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{14}
}

func (x *PreconditionFailedErrorMessageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PreconditionFailedErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PreconditionFailedErrorMessageResponse) GetFailedConditions() []string {
	if x != nil {
		return x.FailedConditions
	}
	return nil
}

func (x *PreconditionFailedErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// TooEarlyErrorMessageResponse for 425 Too Early
type TooEarlyErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                       // HTTP status code (425)
	Message       string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                  // Human-readable error message
	ErrorResponse *ErrorResponse `protobuf:"bytes,3,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"` // Standard error response
}

func (x *TooEarlyErrorMessageResponse) Reset() {
	*x = TooEarlyErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TooEarlyErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TooEarlyErrorMessageResponse) ProtoMessage() {}

func (x *TooEarlyErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TooEarlyErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*TooEarlyErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{15}
}

func (x *TooEarlyErrorMessageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TooEarlyErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TooEarlyErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// PaymentRequiredErrorMessageResponse for 402 Payment Required
type PaymentRequiredErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int32                                            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // HTTP status code (402)
	Message       string                                           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // Human-readable error message
	PaymentInfo   *PaymentRequiredErrorMessageResponse_PaymentInfo `protobuf:"bytes,3,opt,name=payment_info,json=paymentInfo,proto3" json:"payment_info,omitempty"`
	ErrorResponse *ErrorResponse                                   `protobuf:"bytes,4,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"` // Standard error response
}

func (x *PaymentRequiredErrorMessageResponse) Reset() {
	*x = PaymentRequiredErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentRequiredErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentRequiredErrorMessageResponse) ProtoMessage() {}

func (x *PaymentRequiredErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentRequiredErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*PaymentRequiredErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{16}
}

func (x *PaymentRequiredErrorMessageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PaymentRequiredErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PaymentRequiredErrorMessageResponse) GetPaymentInfo() *PaymentRequiredErrorMessageResponse_PaymentInfo {
	if x != nil {
		return x.PaymentInfo
	}
	return nil
}

func (x *PaymentRequiredErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// ForbiddenErrorMessageResponse for 403 Forbidden
type ForbiddenErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                                         // HTTP status code (403)
	Message             string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                    // Human-readable error message
	Reason              string         `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`                                                      // Reason for the forbidden access
	RequiredPermissions []string       `protobuf:"bytes,4,rep,name=required_permissions,json=requiredPermissions,proto3" json:"required_permissions,omitempty"` // Permissions required to access the resource
	ErrorResponse       *ErrorResponse `protobuf:"bytes,5,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"`                   // Standard error response
}

func (x *ForbiddenErrorMessageResponse) Reset() {
	*x = ForbiddenErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbiddenErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbiddenErrorMessageResponse) ProtoMessage() {}

func (x *ForbiddenErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbiddenErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*ForbiddenErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{17}
}

func (x *ForbiddenErrorMessageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ForbiddenErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ForbiddenErrorMessageResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ForbiddenErrorMessageResponse) GetRequiredPermissions() []string {
	if x != nil {
		return x.RequiredPermissions
	}
	return nil
}

func (x *ForbiddenErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

// GoneErrorMessageResponse for 410 Gone
type GoneErrorMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                       // HTTP status code (410)
	Message       string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                  // Human-readable error message
	Resource      string         `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`                                // Resource that is gone
	ErrorResponse *ErrorResponse `protobuf:"bytes,4,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"` // Standard error response
}

func (x *GoneErrorMessageResponse) Reset() {
	*x = GoneErrorMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoneErrorMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoneErrorMessageResponse) ProtoMessage() {}

func (x *GoneErrorMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoneErrorMessageResponse.ProtoReflect.Descriptor instead.
func (*GoneErrorMessageResponse) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{18}
}

func (x *GoneErrorMessageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GoneErrorMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GoneErrorMessageResponse) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *GoneErrorMessageResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

type AuthenticationErrorMessageResponse_TokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   string                 `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`       // Identifier of the invalid token
	TokenType string                 `protobuf:"bytes,2,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"` // Type of token (Bearer, JWT, etc)
	Expiry    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiry,proto3" json:"expiry,omitempty"`                        // Token expiration time
	Issuer    string                 `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`                        // Token issuer
	Audiences []string               `protobuf:"bytes,5,rep,name=audiences,proto3" json:"audiences,omitempty"`                  // Token audiences
}

func (x *AuthenticationErrorMessageResponse_TokenInfo) Reset() {
	*x = AuthenticationErrorMessageResponse_TokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationErrorMessageResponse_TokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationErrorMessageResponse_TokenInfo) ProtoMessage() {}

func (x *AuthenticationErrorMessageResponse_TokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationErrorMessageResponse_TokenInfo.ProtoReflect.Descriptor instead.
func (*AuthenticationErrorMessageResponse_TokenInfo) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AuthenticationErrorMessageResponse_TokenInfo) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *AuthenticationErrorMessageResponse_TokenInfo) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

func (x *AuthenticationErrorMessageResponse_TokenInfo) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *AuthenticationErrorMessageResponse_TokenInfo) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *AuthenticationErrorMessageResponse_TokenInfo) GetAudiences() []string {
	if x != nil {
		return x.Audiences
	}
	return nil
}

type AuthenticationErrorMessageResponse_AuthContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredScopes     []string `protobuf:"bytes,1,rep,name=required_scopes,json=requiredScopes,proto3" json:"required_scopes,omitempty"`             // Scopes required for the operation
	ProvidedScopes     []string `protobuf:"bytes,2,rep,name=provided_scopes,json=providedScopes,proto3" json:"provided_scopes,omitempty"`             // Scopes present in the token
	MissingPermissions []string `protobuf:"bytes,3,rep,name=missing_permissions,json=missingPermissions,proto3" json:"missing_permissions,omitempty"` // Permissions that were missing
	TenantId           string   `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                               // Tenant context if applicable
}

func (x *AuthenticationErrorMessageResponse_AuthContext) Reset() {
	*x = AuthenticationErrorMessageResponse_AuthContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationErrorMessageResponse_AuthContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationErrorMessageResponse_AuthContext) ProtoMessage() {}

func (x *AuthenticationErrorMessageResponse_AuthContext) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationErrorMessageResponse_AuthContext.ProtoReflect.Descriptor instead.
func (*AuthenticationErrorMessageResponse_AuthContext) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{1, 1}
}

func (x *AuthenticationErrorMessageResponse_AuthContext) GetRequiredScopes() []string {
	if x != nil {
		return x.RequiredScopes
	}
	return nil
}

func (x *AuthenticationErrorMessageResponse_AuthContext) GetProvidedScopes() []string {
	if x != nil {
		return x.ProvidedScopes
	}
	return nil
}

func (x *AuthenticationErrorMessageResponse_AuthContext) GetMissingPermissions() []string {
	if x != nil {
		return x.MissingPermissions
	}
	return nil
}

func (x *AuthenticationErrorMessageResponse_AuthContext) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type AuthenticationErrorMessageResponse_SessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`    // ID of the invalid session
	LastActive *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_active,json=lastActive,proto3" json:"last_active,omitempty"` // Last activity timestamp
	DeviceId   string                 `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`       // Device associated with session
	IpAddress  string                 `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`    // IP address of the request
}

func (x *AuthenticationErrorMessageResponse_SessionInfo) Reset() {
	*x = AuthenticationErrorMessageResponse_SessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationErrorMessageResponse_SessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationErrorMessageResponse_SessionInfo) ProtoMessage() {}

func (x *AuthenticationErrorMessageResponse_SessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationErrorMessageResponse_SessionInfo.ProtoReflect.Descriptor instead.
func (*AuthenticationErrorMessageResponse_SessionInfo) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{1, 2}
}

func (x *AuthenticationErrorMessageResponse_SessionInfo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AuthenticationErrorMessageResponse_SessionInfo) GetLastActive() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActive
	}
	return nil
}

func (x *AuthenticationErrorMessageResponse_SessionInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *AuthenticationErrorMessageResponse_SessionInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type AuthenticationErrorMessageResponse_MFAInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MfaRequired    bool     `protobuf:"varint,1,opt,name=mfa_required,json=mfaRequired,proto3" json:"mfa_required,omitempty"`         // Whether MFA was required
	AllowedMethods []string `protobuf:"bytes,2,rep,name=allowed_methods,json=allowedMethods,proto3" json:"allowed_methods,omitempty"` // Allowed MFA methods
	FailedReason   string   `protobuf:"bytes,3,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`       // Why MFA failed if applicable
}

func (x *AuthenticationErrorMessageResponse_MFAInfo) Reset() {
	*x = AuthenticationErrorMessageResponse_MFAInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationErrorMessageResponse_MFAInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationErrorMessageResponse_MFAInfo) ProtoMessage() {}

func (x *AuthenticationErrorMessageResponse_MFAInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationErrorMessageResponse_MFAInfo.ProtoReflect.Descriptor instead.
func (*AuthenticationErrorMessageResponse_MFAInfo) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{1, 3}
}

func (x *AuthenticationErrorMessageResponse_MFAInfo) GetMfaRequired() bool {
	if x != nil {
		return x.MfaRequired
	}
	return false
}

func (x *AuthenticationErrorMessageResponse_MFAInfo) GetAllowedMethods() []string {
	if x != nil {
		return x.AllowedMethods
	}
	return nil
}

func (x *AuthenticationErrorMessageResponse_MFAInfo) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

type ValidationErrorMessageResponse_FieldViolation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field      string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`           // Field that failed validation
	Validation string `protobuf:"bytes,2,opt,name=validation,proto3" json:"validation,omitempty"` // Type of validation that failed
	Message    string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`       // Specific error message
	Expected   string `protobuf:"bytes,4,opt,name=expected,proto3" json:"expected,omitempty"`     // Expected value or format
	Actual     string `protobuf:"bytes,5,opt,name=actual,proto3" json:"actual,omitempty"`         // Actual value provided
}

func (x *ValidationErrorMessageResponse_FieldViolation) Reset() {
	*x = ValidationErrorMessageResponse_FieldViolation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationErrorMessageResponse_FieldViolation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationErrorMessageResponse_FieldViolation) ProtoMessage() {}

func (x *ValidationErrorMessageResponse_FieldViolation) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationErrorMessageResponse_FieldViolation.ProtoReflect.Descriptor instead.
func (*ValidationErrorMessageResponse_FieldViolation) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ValidationErrorMessageResponse_FieldViolation) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *ValidationErrorMessageResponse_FieldViolation) GetValidation() string {
	if x != nil {
		return x.Validation
	}
	return ""
}

func (x *ValidationErrorMessageResponse_FieldViolation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ValidationErrorMessageResponse_FieldViolation) GetExpected() string {
	if x != nil {
		return x.Expected
	}
	return ""
}

func (x *ValidationErrorMessageResponse_FieldViolation) GetActual() string {
	if x != nil {
		return x.Actual
	}
	return ""
}

type ValidationErrorMessageResponse_SchemaValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaVersion   string   `protobuf:"bytes,1,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`       // Version of schema used
	InvalidPatterns []string `protobuf:"bytes,2,rep,name=invalid_patterns,json=invalidPatterns,proto3" json:"invalid_patterns,omitempty"` // Patterns that were invalid
	TypeMismatches  []string `protobuf:"bytes,3,rep,name=type_mismatches,json=typeMismatches,proto3" json:"type_mismatches,omitempty"`    // Type mismatches found
}

func (x *ValidationErrorMessageResponse_SchemaValidation) Reset() {
	*x = ValidationErrorMessageResponse_SchemaValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationErrorMessageResponse_SchemaValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationErrorMessageResponse_SchemaValidation) ProtoMessage() {}

func (x *ValidationErrorMessageResponse_SchemaValidation) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationErrorMessageResponse_SchemaValidation.ProtoReflect.Descriptor instead.
func (*ValidationErrorMessageResponse_SchemaValidation) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ValidationErrorMessageResponse_SchemaValidation) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *ValidationErrorMessageResponse_SchemaValidation) GetInvalidPatterns() []string {
	if x != nil {
		return x.InvalidPatterns
	}
	return nil
}

func (x *ValidationErrorMessageResponse_SchemaValidation) GetTypeMismatches() []string {
	if x != nil {
		return x.TypeMismatches
	}
	return nil
}

type ValidationErrorMessageResponse_ResourceValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissingResources  []string          `protobuf:"bytes,1,rep,name=missing_resources,json=missingResources,proto3" json:"missing_resources,omitempty"`                                                                             // Resources that weren't found
	InvalidReferences []string          `protobuf:"bytes,2,rep,name=invalid_references,json=invalidReferences,proto3" json:"invalid_references,omitempty"`                                                                          // Invalid resource references
	IdViolations      map[string]string `protobuf:"bytes,3,rep,name=id_violations,json=idViolations,proto3" json:"id_violations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // ID format violations
}

func (x *ValidationErrorMessageResponse_ResourceValidation) Reset() {
	*x = ValidationErrorMessageResponse_ResourceValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationErrorMessageResponse_ResourceValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationErrorMessageResponse_ResourceValidation) ProtoMessage() {}

func (x *ValidationErrorMessageResponse_ResourceValidation) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationErrorMessageResponse_ResourceValidation.ProtoReflect.Descriptor instead.
func (*ValidationErrorMessageResponse_ResourceValidation) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{2, 2}
}

func (x *ValidationErrorMessageResponse_ResourceValidation) GetMissingResources() []string {
	if x != nil {
		return x.MissingResources
	}
	return nil
}

func (x *ValidationErrorMessageResponse_ResourceValidation) GetInvalidReferences() []string {
	if x != nil {
		return x.InvalidReferences
	}
	return nil
}

func (x *ValidationErrorMessageResponse_ResourceValidation) GetIdViolations() map[string]string {
	if x != nil {
		return x.IdViolations
	}
	return nil
}

type InternalErrorMessageResponse_ServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                               // Name of the service
	Status       string                                                   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                                                                                           // Current service status
	Metrics      map[string]string                                        `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Service metrics
	Dependencies []*InternalErrorMessageResponse_ServiceStatus_Dependency `protobuf:"bytes,4,rep,name=dependencies,proto3" json:"dependencies,omitempty"`                                                                               // Status of dependencies
}

func (x *InternalErrorMessageResponse_ServiceStatus) Reset() {
	*x = InternalErrorMessageResponse_ServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalErrorMessageResponse_ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalErrorMessageResponse_ServiceStatus) ProtoMessage() {}

func (x *InternalErrorMessageResponse_ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalErrorMessageResponse_ServiceStatus.ProtoReflect.Descriptor instead.
func (*InternalErrorMessageResponse_ServiceStatus) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{3, 0}
}

func (x *InternalErrorMessageResponse_ServiceStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InternalErrorMessageResponse_ServiceStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *InternalErrorMessageResponse_ServiceStatus) GetMetrics() map[string]string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *InternalErrorMessageResponse_ServiceStatus) GetDependencies() []*InternalErrorMessageResponse_ServiceStatus_Dependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type InternalErrorMessageResponse_ResourceUtilization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuUsage          float64            `protobuf:"fixed64,1,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`                                                                     // CPU usage percentage
	MemoryUsage       float64            `protobuf:"fixed64,2,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`                                                            // Memory usage percentage
	ActiveConnections int32              `protobuf:"varint,3,opt,name=active_connections,json=activeConnections,proto3" json:"active_connections,omitempty"`                                           // Number of active connections
	Quotas            map[string]float64 `protobuf:"bytes,4,rep,name=quotas,proto3" json:"quotas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"` // Current quota utilization
}

func (x *InternalErrorMessageResponse_ResourceUtilization) Reset() {
	*x = InternalErrorMessageResponse_ResourceUtilization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalErrorMessageResponse_ResourceUtilization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalErrorMessageResponse_ResourceUtilization) ProtoMessage() {}

func (x *InternalErrorMessageResponse_ResourceUtilization) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalErrorMessageResponse_ResourceUtilization.ProtoReflect.Descriptor instead.
func (*InternalErrorMessageResponse_ResourceUtilization) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{3, 1}
}

func (x *InternalErrorMessageResponse_ResourceUtilization) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *InternalErrorMessageResponse_ResourceUtilization) GetMemoryUsage() float64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *InternalErrorMessageResponse_ResourceUtilization) GetActiveConnections() int32 {
	if x != nil {
		return x.ActiveConnections
	}
	return 0
}

func (x *InternalErrorMessageResponse_ResourceUtilization) GetQuotas() map[string]float64 {
	if x != nil {
		return x.Quotas
	}
	return nil
}

type InternalErrorMessageResponse_OperationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationId string                 `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`                                                                    // ID of failed operation
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                          // When operation started
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                // When operation failed
	StackTrace  []string               `protobuf:"bytes,4,rep,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`                                                                       // Stack trace if available
	Parameters  map[string]string      `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Operation parameters
}

func (x *InternalErrorMessageResponse_OperationDetails) Reset() {
	*x = InternalErrorMessageResponse_OperationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalErrorMessageResponse_OperationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalErrorMessageResponse_OperationDetails) ProtoMessage() {}

func (x *InternalErrorMessageResponse_OperationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalErrorMessageResponse_OperationDetails.ProtoReflect.Descriptor instead.
func (*InternalErrorMessageResponse_OperationDetails) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{3, 2}
}

func (x *InternalErrorMessageResponse_OperationDetails) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *InternalErrorMessageResponse_OperationDetails) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *InternalErrorMessageResponse_OperationDetails) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *InternalErrorMessageResponse_OperationDetails) GetStackTrace() []string {
	if x != nil {
		return x.StackTrace
	}
	return nil
}

func (x *InternalErrorMessageResponse_OperationDetails) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type InternalErrorMessageResponse_ServiceStatus_Dependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`        // Dependency name
	Status  string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`    // Dependency status
	Error   string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`      // Error if any
	Latency int32  `protobuf:"varint,4,opt,name=latency,proto3" json:"latency,omitempty"` // Current latency in ms
}

func (x *InternalErrorMessageResponse_ServiceStatus_Dependency) Reset() {
	*x = InternalErrorMessageResponse_ServiceStatus_Dependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalErrorMessageResponse_ServiceStatus_Dependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalErrorMessageResponse_ServiceStatus_Dependency) ProtoMessage() {}

func (x *InternalErrorMessageResponse_ServiceStatus_Dependency) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalErrorMessageResponse_ServiceStatus_Dependency.ProtoReflect.Descriptor instead.
func (*InternalErrorMessageResponse_ServiceStatus_Dependency) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{3, 0, 1}
}

func (x *InternalErrorMessageResponse_ServiceStatus_Dependency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InternalErrorMessageResponse_ServiceStatus_Dependency) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *InternalErrorMessageResponse_ServiceStatus_Dependency) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *InternalErrorMessageResponse_ServiceStatus_Dependency) GetLatency() int32 {
	if x != nil {
		return x.Latency
	}
	return 0
}

type NotFoundErrorMessageResponse_ResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                         // Type of resource not found
	Id       string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                             // ID of resource not found
	Path     string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`                         // Path that was accessed
	TenantId string   `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"` // Tenant context if applicable
	Scopes   []string `protobuf:"bytes,5,rep,name=scopes,proto3" json:"scopes,omitempty"`                     // Required scopes for access
}

func (x *NotFoundErrorMessageResponse_ResourceInfo) Reset() {
	*x = NotFoundErrorMessageResponse_ResourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotFoundErrorMessageResponse_ResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotFoundErrorMessageResponse_ResourceInfo) ProtoMessage() {}

func (x *NotFoundErrorMessageResponse_ResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotFoundErrorMessageResponse_ResourceInfo.ProtoReflect.Descriptor instead.
func (*NotFoundErrorMessageResponse_ResourceInfo) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{4, 0}
}

func (x *NotFoundErrorMessageResponse_ResourceInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NotFoundErrorMessageResponse_ResourceInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NotFoundErrorMessageResponse_ResourceInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *NotFoundErrorMessageResponse_ResourceInfo) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *NotFoundErrorMessageResponse_ResourceInfo) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type NotFoundErrorMessageResponse_Suggestions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimilarResources []string          `protobuf:"bytes,1,rep,name=similar_resources,json=similarResources,proto3" json:"similar_resources,omitempty"`                                           // Similar resource IDs
	AlternativePaths []string          `protobuf:"bytes,2,rep,name=alternative_paths,json=alternativePaths,proto3" json:"alternative_paths,omitempty"`                                           // Alternative API paths
	DocumentationUrl string            `protobuf:"bytes,3,opt,name=documentation_url,json=documentationUrl,proto3" json:"documentation_url,omitempty"`                                           // Relevant documentation
	Hints            map[string]string `protobuf:"bytes,4,rep,name=hints,proto3" json:"hints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Additional hints
}

func (x *NotFoundErrorMessageResponse_Suggestions) Reset() {
	*x = NotFoundErrorMessageResponse_Suggestions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotFoundErrorMessageResponse_Suggestions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotFoundErrorMessageResponse_Suggestions) ProtoMessage() {}

func (x *NotFoundErrorMessageResponse_Suggestions) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotFoundErrorMessageResponse_Suggestions.ProtoReflect.Descriptor instead.
func (*NotFoundErrorMessageResponse_Suggestions) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{4, 1}
}

func (x *NotFoundErrorMessageResponse_Suggestions) GetSimilarResources() []string {
	if x != nil {
		return x.SimilarResources
	}
	return nil
}

func (x *NotFoundErrorMessageResponse_Suggestions) GetAlternativePaths() []string {
	if x != nil {
		return x.AlternativePaths
	}
	return nil
}

func (x *NotFoundErrorMessageResponse_Suggestions) GetDocumentationUrl() string {
	if x != nil {
		return x.DocumentationUrl
	}
	return ""
}

func (x *NotFoundErrorMessageResponse_Suggestions) GetHints() map[string]string {
	if x != nil {
		return x.Hints
	}
	return nil
}

type NotFoundErrorMessageResponse_APIInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version           string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`                                              // API version used
	SupportedVersions []string               `protobuf:"bytes,2,rep,name=supported_versions,json=supportedVersions,proto3" json:"supported_versions,omitempty"` // Supported API versions
	IsDeprecated      bool                   `protobuf:"varint,3,opt,name=is_deprecated,json=isDeprecated,proto3" json:"is_deprecated,omitempty"`               // Whether endpoint is deprecated
	SunsetDate        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=sunset_date,json=sunsetDate,proto3" json:"sunset_date,omitempty"`                      // When endpoint will be removed
}

func (x *NotFoundErrorMessageResponse_APIInfo) Reset() {
	*x = NotFoundErrorMessageResponse_APIInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotFoundErrorMessageResponse_APIInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotFoundErrorMessageResponse_APIInfo) ProtoMessage() {}

func (x *NotFoundErrorMessageResponse_APIInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotFoundErrorMessageResponse_APIInfo.ProtoReflect.Descriptor instead.
func (*NotFoundErrorMessageResponse_APIInfo) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{4, 2}
}

func (x *NotFoundErrorMessageResponse_APIInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NotFoundErrorMessageResponse_APIInfo) GetSupportedVersions() []string {
	if x != nil {
		return x.SupportedVersions
	}
	return nil
}

func (x *NotFoundErrorMessageResponse_APIInfo) GetIsDeprecated() bool {
	if x != nil {
		return x.IsDeprecated
	}
	return false
}

func (x *NotFoundErrorMessageResponse_APIInfo) GetSunsetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SunsetDate
	}
	return nil
}

type RateLimitErrorMessageResponse_LimitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current    int32                  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`                        // Current request count
	Limit      int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                            // Rate limit threshold
	ResetTime  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=reset_time,json=resetTime,proto3" json:"reset_time,omitempty"`    // When the limit resets
	WindowSize string                 `protobuf:"bytes,4,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"` // Time window for the limit
}

func (x *RateLimitErrorMessageResponse_LimitInfo) Reset() {
	*x = RateLimitErrorMessageResponse_LimitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitErrorMessageResponse_LimitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitErrorMessageResponse_LimitInfo) ProtoMessage() {}

func (x *RateLimitErrorMessageResponse_LimitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitErrorMessageResponse_LimitInfo.ProtoReflect.Descriptor instead.
func (*RateLimitErrorMessageResponse_LimitInfo) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{5, 0}
}

func (x *RateLimitErrorMessageResponse_LimitInfo) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *RateLimitErrorMessageResponse_LimitInfo) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RateLimitErrorMessageResponse_LimitInfo) GetResetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ResetTime
	}
	return nil
}

func (x *RateLimitErrorMessageResponse_LimitInfo) GetWindowSize() string {
	if x != nil {
		return x.WindowSize
	}
	return ""
}

type RateLimitErrorMessageResponse_QuotaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource      string                 `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`                                                                                                                         // Resource being limited
	Used          int64                  `protobuf:"varint,2,opt,name=used,proto3" json:"used,omitempty"`                                                                                                                                // Amount used
	Limit         int64                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                                                                                                                              // Quota limit
	ResetTime     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=reset_time,json=resetTime,proto3" json:"reset_time,omitempty"`                                                                                                      // When quota resets
	ResourceUsage map[string]int64       `protobuf:"bytes,5,rep,name=resource_usage,json=resourceUsage,proto3" json:"resource_usage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // Usage by resource type
}

func (x *RateLimitErrorMessageResponse_QuotaInfo) Reset() {
	*x = RateLimitErrorMessageResponse_QuotaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitErrorMessageResponse_QuotaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitErrorMessageResponse_QuotaInfo) ProtoMessage() {}

func (x *RateLimitErrorMessageResponse_QuotaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitErrorMessageResponse_QuotaInfo.ProtoReflect.Descriptor instead.
func (*RateLimitErrorMessageResponse_QuotaInfo) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{5, 1}
}

func (x *RateLimitErrorMessageResponse_QuotaInfo) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *RateLimitErrorMessageResponse_QuotaInfo) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *RateLimitErrorMessageResponse_QuotaInfo) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RateLimitErrorMessageResponse_QuotaInfo) GetResetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ResetTime
	}
	return nil
}

func (x *RateLimitErrorMessageResponse_QuotaInfo) GetResourceUsage() map[string]int64 {
	if x != nil {
		return x.ResourceUsage
	}
	return nil
}

type RateLimitErrorMessageResponse_RateLimitContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string            `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                             // Affected user
	IpAddress         string            `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`                                                                    // IP address
	AffectedEndpoints []string          `protobuf:"bytes,3,rep,name=affected_endpoints,json=affectedEndpoints,proto3" json:"affected_endpoints,omitempty"`                                            // Endpoints being rate limited
	Headers           map[string]string `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Relevant headers
}

func (x *RateLimitErrorMessageResponse_RateLimitContext) Reset() {
	*x = RateLimitErrorMessageResponse_RateLimitContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitErrorMessageResponse_RateLimitContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitErrorMessageResponse_RateLimitContext) ProtoMessage() {}

func (x *RateLimitErrorMessageResponse_RateLimitContext) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitErrorMessageResponse_RateLimitContext.ProtoReflect.Descriptor instead.
func (*RateLimitErrorMessageResponse_RateLimitContext) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{5, 2}
}

func (x *RateLimitErrorMessageResponse_RateLimitContext) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RateLimitErrorMessageResponse_RateLimitContext) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *RateLimitErrorMessageResponse_RateLimitContext) GetAffectedEndpoints() []string {
	if x != nil {
		return x.AffectedEndpoints
	}
	return nil
}

func (x *RateLimitErrorMessageResponse_RateLimitContext) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type ConflictErrorMessageResponse_ConflictInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType   string                 `protobuf:"bytes,1,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	Identifier     string                 `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	ConflictReason string                 `protobuf:"bytes,3,opt,name=conflict_reason,json=conflictReason,proto3" json:"conflict_reason,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy      string                 `protobuf:"bytes,5,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *ConflictErrorMessageResponse_ConflictInfo) Reset() {
	*x = ConflictErrorMessageResponse_ConflictInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConflictErrorMessageResponse_ConflictInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConflictErrorMessageResponse_ConflictInfo) ProtoMessage() {}

func (x *ConflictErrorMessageResponse_ConflictInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConflictErrorMessageResponse_ConflictInfo.ProtoReflect.Descriptor instead.
func (*ConflictErrorMessageResponse_ConflictInfo) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ConflictErrorMessageResponse_ConflictInfo) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ConflictErrorMessageResponse_ConflictInfo) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ConflictErrorMessageResponse_ConflictInfo) GetConflictReason() string {
	if x != nil {
		return x.ConflictReason
	}
	return ""
}

func (x *ConflictErrorMessageResponse_ConflictInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ConflictErrorMessageResponse_ConflictInfo) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type ServiceUnavailableErrorMessageResponse_AvailabilityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetryAfter        int32    `protobuf:"varint,1,opt,name=retry_after,json=retryAfter,proto3" json:"retry_after,omitempty"`                     // Seconds to wait before retrying
	MaintenanceWindow string   `protobuf:"bytes,2,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"` // Scheduled maintenance information
	AffectedServices  []string `protobuf:"bytes,3,rep,name=affected_services,json=affectedServices,proto3" json:"affected_services,omitempty"`    // List of affected services
	StatusPageUrl     string   `protobuf:"bytes,4,opt,name=status_page_url,json=statusPageUrl,proto3" json:"status_page_url,omitempty"`           // URL to service status page
}

func (x *ServiceUnavailableErrorMessageResponse_AvailabilityInfo) Reset() {
	*x = ServiceUnavailableErrorMessageResponse_AvailabilityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceUnavailableErrorMessageResponse_AvailabilityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceUnavailableErrorMessageResponse_AvailabilityInfo) ProtoMessage() {}

func (x *ServiceUnavailableErrorMessageResponse_AvailabilityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceUnavailableErrorMessageResponse_AvailabilityInfo.ProtoReflect.Descriptor instead.
func (*ServiceUnavailableErrorMessageResponse_AvailabilityInfo) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ServiceUnavailableErrorMessageResponse_AvailabilityInfo) GetRetryAfter() int32 {
	if x != nil {
		return x.RetryAfter
	}
	return 0
}

func (x *ServiceUnavailableErrorMessageResponse_AvailabilityInfo) GetMaintenanceWindow() string {
	if x != nil {
		return x.MaintenanceWindow
	}
	return ""
}

func (x *ServiceUnavailableErrorMessageResponse_AvailabilityInfo) GetAffectedServices() []string {
	if x != nil {
		return x.AffectedServices
	}
	return nil
}

func (x *ServiceUnavailableErrorMessageResponse_AvailabilityInfo) GetStatusPageUrl() string {
	if x != nil {
		return x.StatusPageUrl
	}
	return ""
}

type UnprocessableEntityErrorMessageResponse_FieldError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"` // Field with error
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"` // Error description
}

func (x *UnprocessableEntityErrorMessageResponse_FieldError) Reset() {
	*x = UnprocessableEntityErrorMessageResponse_FieldError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnprocessableEntityErrorMessageResponse_FieldError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnprocessableEntityErrorMessageResponse_FieldError) ProtoMessage() {}

func (x *UnprocessableEntityErrorMessageResponse_FieldError) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnprocessableEntityErrorMessageResponse_FieldError.ProtoReflect.Descriptor instead.
func (*UnprocessableEntityErrorMessageResponse_FieldError) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{10, 0}
}

func (x *UnprocessableEntityErrorMessageResponse_FieldError) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *UnprocessableEntityErrorMessageResponse_FieldError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type PaymentRequiredErrorMessageResponse_PaymentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountDue  float64                `protobuf:"fixed64,1,opt,name=amount_due,json=amountDue,proto3" json:"amount_due,omitempty"`  // Amount that needs to be paid
	Currency   string                 `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`                       // Currency code
	DueDate    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`          // Payment due date
	PaymentUrl string                 `protobuf:"bytes,4,opt,name=payment_url,json=paymentUrl,proto3" json:"payment_url,omitempty"` // URL to make the payment
}

func (x *PaymentRequiredErrorMessageResponse_PaymentInfo) Reset() {
	*x = PaymentRequiredErrorMessageResponse_PaymentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentRequiredErrorMessageResponse_PaymentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentRequiredErrorMessageResponse_PaymentInfo) ProtoMessage() {}

func (x *PaymentRequiredErrorMessageResponse_PaymentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentRequiredErrorMessageResponse_PaymentInfo.ProtoReflect.Descriptor instead.
func (*PaymentRequiredErrorMessageResponse_PaymentInfo) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP(), []int{16, 0}
}

func (x *PaymentRequiredErrorMessageResponse_PaymentInfo) GetAmountDue() float64 {
	if x != nil {
		return x.AmountDue
	}
	return 0
}

func (x *PaymentRequiredErrorMessageResponse_PaymentInfo) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PaymentRequiredErrorMessageResponse_PaymentInfo) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *PaymentRequiredErrorMessageResponse_PaymentInfo) GetPaymentUrl() string {
	if x != nil {
		return x.PaymentUrl
	}
	return ""
}

var File_lead_scraper_service_v1_errors_ignore_proto protoreflect.FileDescriptor

var file_lead_scraper_service_v1_errors_ignore_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6c,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3b, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd9, 0x0c,
	0x0a, 0x22, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x6a, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x6a, 0x0a, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x08, 0x6d, 0x66, 0x61, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6c, 0x65, 0x61,
	0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x46, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x6d, 0x66, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xaf, 0x01, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0xad, 0x01, 0x0a, 0x0b, 0x41, 0x75,
	0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0xa5, 0x01, 0x0a, 0x0b, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0x7a, 0x0a, 0x07, 0x4d, 0x46, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x66, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x6d, 0x66, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0xe9, 0x02,
	0x92, 0x41, 0xe5, 0x02, 0x0a, 0x55, 0x2a, 0x1d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x34, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x32, 0x8b, 0x02, 0x7b, 0x22,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x31, 0x30, 0x30, 0x31, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0x2c, 0x22, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x7b, 0x22, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x74, 0x2d, 0x31, 0x32, 0x33, 0x22, 0x2c, 0x22, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x3a, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x30, 0x31, 0x2d,
	0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x7d, 0x2c, 0x22,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3a, 0x7b, 0x22,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22,
	0x3a, 0x5b, 0x22, 0x72, 0x65, 0x61, 0x64, 0x22, 0x2c, 0x22, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22,
	0x5d, 0x2c, 0x22, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x22, 0x3a, 0x5b, 0x22, 0x72, 0x65, 0x61, 0x64, 0x22, 0x5d, 0x7d, 0x2c, 0x22, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x7b, 0x22, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x73, 0x2d, 0x34, 0x35,
	0x36, 0x22, 0x2c, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22,
	0x3a, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a,
	0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x7d, 0x7d, 0x22, 0xb6, 0x0b, 0x0a, 0x1e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x61,
	0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x71, 0x0a, 0x10, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x11, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x94,
	0x01, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x1a, 0x8d, 0x01, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x69, 0x73, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x1a, 0xb5, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x69, 0x64, 0x5f,
	0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5c, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x56,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x69, 0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3f, 0x0a, 0x11,
	0x49, 0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0xa2, 0x02,
	0x92, 0x41, 0x9e, 0x02, 0x0a, 0x51, 0x2a, 0x19, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x34, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x32, 0xc8, 0x01, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x3a, 0x32, 0x30, 0x30, 0x30, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3a, 0x22, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x22, 0x2c, 0x22, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x22, 0x3a, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x2c, 0x22, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x2c,
	0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22,
	0x7d, 0x5d, 0x2c, 0x22, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x7b, 0x22, 0x75, 0x73, 0x65, 0x72, 0x22, 0x3a, 0x5b,
	0x22, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0x2c, 0x22, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x22, 0x5d,
	0x7d, 0x7d, 0x22, 0xca, 0x0f, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x6a,
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7c, 0x0a, 0x14, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x10, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4d, 0x0a,
	0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xc1, 0x03, 0x0a,
	0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6a, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6c, 0x65,
	0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x72, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6c,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x1a, 0xae, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6d, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xff, 0x02, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x56, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x89, 0x02, 0x92, 0x41, 0x85, 0x02, 0x0a, 0x4d, 0x2a, 0x17, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x32, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x73, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x32, 0xb3, 0x01, 0x7b, 0x22, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x3a, 0x34, 0x30, 0x30, 0x30, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x3a, 0x22, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2c, 0x22, 0x69, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x69, 0x6e, 0x63, 0x2d, 0x37, 0x38,
	0x39, 0x22, 0x2c, 0x22, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x3a, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x75, 0x73, 0x65,
	0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x2c, 0x22, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x3a, 0x22, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x22, 0x2c, 0x22,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x7b,
	0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x64, 0x62, 0x22, 0x2c, 0x22, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x3a, 0x22, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x7d, 0x5d, 0x7d, 0x7d, 0x22,
	0xef, 0x0a, 0x0a, 0x1c, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x63, 0x0a, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6c, 0x65, 0x61,
	0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x41, 0x50, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x70, 0x69, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61,
	0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x1a, 0x7b, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x1a, 0xb2,
	0x02, 0x0a, 0x0b, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x62, 0x0a, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x48, 0x69, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xb4, 0x01, 0x0a, 0x07, 0x41, 0x50, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x73, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x73, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x94, 0x02, 0x92, 0x41, 0x90,
	0x02, 0x0a, 0x40, 0x2a, 0x18, 0x4e, 0x6f, 0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x24, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x32, 0xcb, 0x01, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x35, 0x30,
	0x30, 0x30, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x22, 0x2c, 0x22, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x3a, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x75, 0x73, 0x65, 0x72, 0x22,
	0x2c, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x31, 0x32, 0x33, 0x22, 0x2c, 0x22, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x3a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x31,
	0x32, 0x33, 0x22, 0x7d, 0x2c, 0x22, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x3a, 0x7b, 0x22, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x22, 0x31, 0x32, 0x34, 0x22, 0x2c, 0x22,
	0x31, 0x32, 0x35, 0x22, 0x5d, 0x2c, 0x22, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x3a, 0x5b, 0x22, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x31, 0x32, 0x33, 0x22, 0x5d, 0x7d,
	0x7d, 0x22, 0x90, 0x0c, 0x0a, 0x1d, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5f, 0x0a,
	0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5f,
	0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x61, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61,
	0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x1a, 0x97, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0xca, 0x02, 0x0a, 0x09,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x40, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa5, 0x02, 0x0a, 0x10, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x6e, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x91, 0x02, 0x92, 0x41, 0x8d, 0x02, 0x0a, 0x4f, 0x2a, 0x19, 0x52, 0x61, 0x74, 0x65, 0x20,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x32, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x20, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x32, 0xb9, 0x01, 0x7b, 0x22, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x34, 0x31, 0x30, 0x32, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3a, 0x22, 0x52, 0x61, 0x74, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x65, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0x2c, 0x22, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x7b, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x3a,
	0x31, 0x35, 0x30, 0x2c, 0x22, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3a, 0x31, 0x30, 0x30, 0x2c,
	0x22, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x32, 0x30,
	0x32, 0x34, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30,
	0x30, 0x5a, 0x22, 0x7d, 0x2c, 0x22, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x3a, 0x7b, 0x22, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x3a, 0x22, 0x61,
	0x70, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0x2c, 0x22, 0x75, 0x73, 0x65, 0x64, 0x22,
	0x3a, 0x31, 0x35, 0x30, 0x30, 0x2c, 0x22, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3a, 0x31, 0x30,
	0x30, 0x30, 0x7d, 0x7d, 0x22, 0xcf, 0x05, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x67, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xd6, 0x01, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x3a, 0xc1, 0x01, 0x92, 0x41, 0xbd, 0x01, 0x0a, 0x3e, 0x2a, 0x17, 0x43, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x23, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x32, 0x7b, 0x7b, 0x22, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x32, 0x33, 0x30, 0x30, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3a, 0x22, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x2c, 0x22, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x7b, 0x22, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x2c, 0x22, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0x3a, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x40, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x22, 0x7d, 0x7d, 0x22, 0xea, 0x05, 0x0a, 0x26, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7d, 0x0a, 0x11, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xb7, 0x01, 0x0a, 0x10, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x3a, 0xdd, 0x01, 0x92, 0x41, 0xd9, 0x01, 0x0a, 0x4c, 0x2a, 0x22, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x26, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x32, 0x88, 0x01, 0x7b, 0x22, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x34, 0x33, 0x30, 0x30, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3a, 0x22, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x2c, 0x22, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x7b, 0x22, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0x3a, 0x36, 0x30, 0x2c, 0x22, 0x61, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22,
	0x3a, 0x5b, 0x22, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x5d, 0x7d, 0x7d, 0x22, 0x15, 0x0a, 0x13, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x89, 0x03, 0x0a, 0x24, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0xba, 0x01, 0x92, 0x41, 0xb6, 0x01,
	0x0a, 0x66, 0x2a, 0x21, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x4e, 0x6f, 0x74, 0x20, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x41, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x48, 0x54,
	0x54, 0x50, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x4c, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x3a, 0x34, 0x30, 0x35, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a,
	0x22, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x4e, 0x6f, 0x74, 0x20, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x22, 0x2c, 0x22, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0x3a, 0x5b, 0x22, 0x47, 0x45, 0x54, 0x22, 0x2c, 0x22, 0x50,
	0x4f, 0x53, 0x54, 0x22, 0x5d, 0x7d, 0x22, 0xbd, 0x04, 0x0a, 0x27, 0x55, 0x6e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x63, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4b, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0xf5,
	0x01, 0x92, 0x41, 0xf1, 0x01, 0x0a, 0x89, 0x01, 0x2a, 0x23, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x62, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x62, 0x75,
	0x74, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x32, 0x63, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x34, 0x32, 0x32, 0x2c, 0x22,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x2c,
	0x22, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x22, 0x3a, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x2c, 0x22, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x3a, 0x22, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x22, 0x7d, 0x5d, 0x7d, 0x22, 0xef, 0x02, 0x0a, 0x22, 0x4e, 0x6f, 0x74, 0x49, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x3a, 0xb1, 0x01, 0x92, 0x41, 0xad, 0x01, 0x0a, 0x67, 0x2a, 0x1e, 0x4e,
	0x6f, 0x74, 0x20, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x45, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x32, 0x42, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x35, 0x30,
	0x31, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x4e, 0x6f, 0x74,
	0x20, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x22, 0x2c, 0x22, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x3a, 0x22, 0x55, 0x73, 0x65, 0x72, 0x20, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x22, 0x8d, 0x03, 0x0a, 0x1e, 0x42, 0x61, 0x64,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0xc2, 0x01, 0x92, 0x41, 0xbe, 0x01, 0x0a, 0x74, 0x2a, 0x1a, 0x42, 0x61,
	0x64, 0x20, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x56, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x6e,
	0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x32, 0x46, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x35, 0x30, 0x32, 0x2c, 0x22, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x42, 0x61, 0x64, 0x20, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x22, 0x2c, 0x22, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x3a, 0x22, 0x41, 0x75, 0x74, 0x68, 0x20, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x7d, 0x22, 0x9a, 0x03, 0x0a, 0x22, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0xcb, 0x01, 0x92, 0x41, 0xc7, 0x01, 0x0a, 0x7d,
	0x2a, 0x1e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x5b, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x20, 0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x32, 0x46, 0x7b,
	0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x35, 0x30, 0x34, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x20, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x2c, 0x22, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x3a, 0x22, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x22, 0x7d, 0x22, 0xa9, 0x03, 0x0a, 0x26, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0xd4, 0x01, 0x92, 0x41, 0xd0,
	0x01, 0x0a, 0x69, 0x2a, 0x22, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x43, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x61, 0x20, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x32, 0x63, 0x7b, 0x22,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x34, 0x31, 0x32, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3a, 0x22, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0x2c, 0x22, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x5b, 0x22,
	0x49, 0x66, 0x2d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20,
	0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x5d,
	0x7d, 0x22, 0xbe, 0x02, 0x0a, 0x1c, 0x54, 0x6f, 0x6f, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x4d, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a,
	0xa0, 0x01, 0x92, 0x41, 0x9c, 0x01, 0x0a, 0x76, 0x2a, 0x18, 0x54, 0x6f, 0x6f, 0x20, 0x45, 0x61,
	0x72, 0x6c, 0x79, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x5a, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x73,
	0x20, 0x75, 0x6e, 0x77, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x69,
	0x73, 0x6b, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x69, 0x67,
	0x68, 0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x32, 0x22,
	0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x34, 0x32, 0x35, 0x2c, 0x22, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x54, 0x6f, 0x6f, 0x20, 0x45, 0x61, 0x72, 0x6c, 0x79,
	0x22, 0x7d, 0x22, 0x8e, 0x05, 0x0a, 0x23, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6b, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xa0, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x3a, 0xd9, 0x01, 0x92, 0x41, 0xd5, 0x01, 0x0a, 0x50,
	0x2a, 0x1f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x2d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64,
	0x32, 0x80, 0x01, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x34, 0x30, 0x32, 0x2c, 0x22,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x20, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x2c, 0x22, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x7b, 0x22, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x22, 0x3a, 0x32, 0x39, 0x2e, 0x39, 0x39, 0x2c, 0x22,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x3a, 0x22, 0x55, 0x53, 0x44, 0x22, 0x2c,
	0x22, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x22, 0x32, 0x30, 0x32, 0x34,
	0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a,
	0x22, 0x7d, 0x7d, 0x22, 0xc1, 0x03, 0x0a, 0x1d, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d,
	0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0xd7, 0x01,
	0x92, 0x41, 0xd3, 0x01, 0x0a, 0x68, 0x2a, 0x18, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x4c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x73, 0x74, 0x6f, 0x6f, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x62, 0x75, 0x74, 0x20, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x20, 0x69, 0x74, 0x32, 0x67,
	0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x34, 0x30, 0x33, 0x2c, 0x22, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x22, 0x2c, 0x22, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x3a, 0x22, 0x49, 0x6e, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2c, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x5b, 0x22, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x22, 0x5d, 0x7d, 0x22, 0xe9, 0x02, 0x0a, 0x18, 0x47, 0x6f, 0x6e, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4d,
	0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0xb3, 0x01,
	0x92, 0x41, 0xaf, 0x01, 0x0a, 0x73, 0x2a, 0x13, 0x47, 0x6f, 0x6e, 0x65, 0x20, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x5c, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x20,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x77, 0x69,
	0x6c, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x32, 0x38, 0x7b, 0x22, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x34, 0x31, 0x30, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3a, 0x22, 0x47, 0x6f, 0x6e, 0x65, 0x22, 0x2c, 0x22, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x3a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x22, 0x7d, 0x2a, 0xf3, 0x04, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0xe9, 0x07, 0x12,
	0x20, 0x0a, 0x1b, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0xea,
	0x07, 0x12, 0x21, 0x0a, 0x1c, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x45, 0x4e, 0x43,
	0x45, 0x10, 0xeb, 0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55,
	0x45, 0x52, 0x10, 0xec, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xed, 0x07,
	0x12, 0x12, 0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0xee, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0xef, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0xf0, 0x07, 0x12,
	0x13, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d,
	0x53, 0x10, 0xcc, 0x08, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x53, 0x10,
	0xcd, 0x08, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x10, 0xce, 0x08, 0x12, 0x18, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xcf, 0x08,
	0x12, 0x14, 0x0a, 0x0f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x44, 0x10, 0xb0, 0x09, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xb1, 0x09, 0x12, 0x14, 0x0a, 0x0f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10,
	0xb2, 0x09, 0x12, 0x14, 0x0a, 0x0f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xdc, 0x0b, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0xdd, 0x0b, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x46, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xde, 0x0b, 0x12, 0x13,
	0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0xc0, 0x0c, 0x12, 0x15, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0xc1, 0x0c, 0x12, 0x15, 0x0a, 0x10, 0x50, 0x41,
	0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xc2,
	0x0c, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xc3, 0x0c, 0x12,
	0x18, 0x0a, 0x13, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0xc4, 0x0c, 0x2a, 0xa6, 0x06, 0x0a, 0x13, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x10, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0xd0, 0x0f, 0x12, 0x18, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0xd1, 0x0f,
	0x12, 0x18, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0xd2, 0x0f, 0x12, 0x19, 0x0a, 0x14, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x50,
	0x55, 0x54, 0x10, 0xd3, 0x0f, 0x12, 0x1a, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0xd4,
	0x0f, 0x12, 0x11, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0xd5, 0x0f, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x54, 0x55, 0x50, 0x4c, 0x45, 0x10, 0xd6, 0x0f, 0x12, 0x22, 0x0a, 0x1d, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xb4, 0x10, 0x12, 0x13, 0x0a, 0x0e,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xb5,
	0x10, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xb6, 0x10, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c,
	0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0xb7, 0x10, 0x12, 0x10, 0x0a, 0x0b, 0x49, 0x44, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0xb8, 0x10, 0x12, 0x1f, 0x0a, 0x1a, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x98, 0x11, 0x12, 0x16, 0x0a, 0x11, 0x50,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x99, 0x11, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x9a, 0x11, 0x12, 0x1a, 0x0a,
	0x15, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x9b, 0x11, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x55, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0xfc, 0x11, 0x12,
	0x22, 0x0a, 0x1d, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x55, 0x50, 0x4c, 0x45, 0x53,
	0x10, 0xfd, 0x11, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x10, 0xfe, 0x11, 0x12, 0x1b, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0xe0, 0x12, 0x12, 0x19, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x10, 0xe1, 0x12, 0x12, 0x1d,
	0x0a, 0x18, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x10, 0xe2, 0x12, 0x12, 0x1b, 0x0a,
	0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x10, 0xe3, 0x12, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0xc4, 0x13, 0x12,
	0x19, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0xc5, 0x13, 0x12, 0x1e, 0x0a, 0x19, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0xc6, 0x13, 0x12, 0x14, 0x0a, 0x0f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0xc7, 0x13,
	0x12, 0x13, 0x0a, 0x0e, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f,
	0x4e, 0x47, 0x10, 0xc8, 0x13, 0x12, 0x1b, 0x0a, 0x16, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0xc9, 0x13, 0x2a, 0xc7, 0x03, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0xa0, 0x1f, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4f, 0x52,
	0x52, 0x55, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa1, 0x1f, 0x12, 0x13, 0x0a, 0x0e, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa2, 0x1f, 0x12,
	0x10, 0x0a, 0x0b, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa3,
	0x1f, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58,
	0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x84, 0x20, 0x12, 0x13, 0x0a, 0x0e, 0x51, 0x55,
	0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x85, 0x20, 0x12,
	0x18, 0x0a, 0x13, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x86, 0x20, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0xe8, 0x20, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x45, 0x41,
	0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xe9,
	0x20, 0x12, 0x13, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x10, 0xea, 0x20, 0x12, 0x18, 0x0a, 0x13, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xeb, 0x20,
	0x12, 0x0c, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0xec, 0x20, 0x12, 0x11,
	0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xed,
	0x20, 0x12, 0x10, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0xcc, 0x21, 0x12, 0x0e, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x53, 0x53,
	0x10, 0xcd, 0x21, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44,
	0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0xce, 0x21, 0x12, 0x17, 0x0a, 0x12, 0x44, 0x45,
	0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0xb0, 0x22, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xb1, 0x22, 0x12, 0x1d, 0x0a,
	0x18, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0xb2, 0x22, 0x2a, 0xb6, 0x01, 0x0a,
	0x11, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x12, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x10, 0x88, 0x27, 0x12, 0x12, 0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x45, 0x44, 0x10, 0x89, 0x27, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xec, 0x27,
	0x12, 0x13, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0xed, 0x27, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xee, 0x27, 0x12, 0x15,
	0x0a, 0x10, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0xef, 0x27, 0x42, 0xbe, 0x02, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x65,
	0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x49, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x96, 0x01, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x6c, 0x65, 0x61, 0x64, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x70, 0x69, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x6c, 0x65, 0x61,
	0x64, 0x2d, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x65, 0x61,
	0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4c, 0x58, 0x58, 0xaa, 0x02, 0x15, 0x4c, 0x65, 0x61, 0x64,
	0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x15, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x21, 0x4c, 0x65, 0x61, 0x64,
	0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16,
	0x4c, 0x65, 0x61, 0x64, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lead_scraper_service_v1_errors_ignore_proto_rawDescOnce sync.Once
	file_lead_scraper_service_v1_errors_ignore_proto_rawDescData = file_lead_scraper_service_v1_errors_ignore_proto_rawDesc
)

func file_lead_scraper_service_v1_errors_ignore_proto_rawDescGZIP() []byte {
	file_lead_scraper_service_v1_errors_ignore_proto_rawDescOnce.Do(func() {
		file_lead_scraper_service_v1_errors_ignore_proto_rawDescData = protoimpl.X.CompressGZIP(file_lead_scraper_service_v1_errors_ignore_proto_rawDescData)
	})
	return file_lead_scraper_service_v1_errors_ignore_proto_rawDescData
}

var file_lead_scraper_service_v1_errors_ignore_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_lead_scraper_service_v1_errors_ignore_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_lead_scraper_service_v1_errors_ignore_proto_goTypes = []interface{}{
	(AuthErrorCode)(0),                                        // 0: lead_scraper_service.v1.AuthErrorCode
	(ValidationErrorCode)(0),                                  // 1: lead_scraper_service.v1.ValidationErrorCode
	(InternalErrorCode)(0),                                    // 2: lead_scraper_service.v1.InternalErrorCode
	(NotFoundErrorCode)(0),                                    // 3: lead_scraper_service.v1.NotFoundErrorCode
	(*ErrorResponse)(nil),                                     // 4: lead_scraper_service.v1.ErrorResponse
	(*AuthenticationErrorMessageResponse)(nil),                // 5: lead_scraper_service.v1.AuthenticationErrorMessageResponse
	(*ValidationErrorMessageResponse)(nil),                    // 6: lead_scraper_service.v1.ValidationErrorMessageResponse
	(*InternalErrorMessageResponse)(nil),                      // 7: lead_scraper_service.v1.InternalErrorMessageResponse
	(*NotFoundErrorMessageResponse)(nil),                      // 8: lead_scraper_service.v1.NotFoundErrorMessageResponse
	(*RateLimitErrorMessageResponse)(nil),                     // 9: lead_scraper_service.v1.RateLimitErrorMessageResponse
	(*ConflictErrorMessageResponse)(nil),                      // 10: lead_scraper_service.v1.ConflictErrorMessageResponse
	(*ServiceUnavailableErrorMessageResponse)(nil),            // 11: lead_scraper_service.v1.ServiceUnavailableErrorMessageResponse
	(*ErrorMessageRequest)(nil),                               // 12: lead_scraper_service.v1.ErrorMessageRequest
	(*MethodNotAllowedErrorMessageResponse)(nil),              // 13: lead_scraper_service.v1.MethodNotAllowedErrorMessageResponse
	(*UnprocessableEntityErrorMessageResponse)(nil),           // 14: lead_scraper_service.v1.UnprocessableEntityErrorMessageResponse
	(*NotImplementedErrorMessageResponse)(nil),                // 15: lead_scraper_service.v1.NotImplementedErrorMessageResponse
	(*BadGatewayErrorMessageResponse)(nil),                    // 16: lead_scraper_service.v1.BadGatewayErrorMessageResponse
	(*GatewayTimeoutErrorMessageResponse)(nil),                // 17: lead_scraper_service.v1.GatewayTimeoutErrorMessageResponse
	(*PreconditionFailedErrorMessageResponse)(nil),            // 18: lead_scraper_service.v1.PreconditionFailedErrorMessageResponse
	(*TooEarlyErrorMessageResponse)(nil),                      // 19: lead_scraper_service.v1.TooEarlyErrorMessageResponse
	(*PaymentRequiredErrorMessageResponse)(nil),               // 20: lead_scraper_service.v1.PaymentRequiredErrorMessageResponse
	(*ForbiddenErrorMessageResponse)(nil),                     // 21: lead_scraper_service.v1.ForbiddenErrorMessageResponse
	(*GoneErrorMessageResponse)(nil),                          // 22: lead_scraper_service.v1.GoneErrorMessageResponse
	(*AuthenticationErrorMessageResponse_TokenInfo)(nil),      // 23: lead_scraper_service.v1.AuthenticationErrorMessageResponse.TokenInfo
	(*AuthenticationErrorMessageResponse_AuthContext)(nil),    // 24: lead_scraper_service.v1.AuthenticationErrorMessageResponse.AuthContext
	(*AuthenticationErrorMessageResponse_SessionInfo)(nil),    // 25: lead_scraper_service.v1.AuthenticationErrorMessageResponse.SessionInfo
	(*AuthenticationErrorMessageResponse_MFAInfo)(nil),        // 26: lead_scraper_service.v1.AuthenticationErrorMessageResponse.MFAInfo
	(*ValidationErrorMessageResponse_FieldViolation)(nil),     // 27: lead_scraper_service.v1.ValidationErrorMessageResponse.FieldViolation
	(*ValidationErrorMessageResponse_SchemaValidation)(nil),   // 28: lead_scraper_service.v1.ValidationErrorMessageResponse.SchemaValidation
	(*ValidationErrorMessageResponse_ResourceValidation)(nil), // 29: lead_scraper_service.v1.ValidationErrorMessageResponse.ResourceValidation
	nil, // 30: lead_scraper_service.v1.ValidationErrorMessageResponse.ResourceValidation.IdViolationsEntry
	(*InternalErrorMessageResponse_ServiceStatus)(nil),       // 31: lead_scraper_service.v1.InternalErrorMessageResponse.ServiceStatus
	(*InternalErrorMessageResponse_ResourceUtilization)(nil), // 32: lead_scraper_service.v1.InternalErrorMessageResponse.ResourceUtilization
	(*InternalErrorMessageResponse_OperationDetails)(nil),    // 33: lead_scraper_service.v1.InternalErrorMessageResponse.OperationDetails
	nil, // 34: lead_scraper_service.v1.InternalErrorMessageResponse.ServiceStatus.MetricsEntry
	(*InternalErrorMessageResponse_ServiceStatus_Dependency)(nil), // 35: lead_scraper_service.v1.InternalErrorMessageResponse.ServiceStatus.Dependency
	nil, // 36: lead_scraper_service.v1.InternalErrorMessageResponse.ResourceUtilization.QuotasEntry
	nil, // 37: lead_scraper_service.v1.InternalErrorMessageResponse.OperationDetails.ParametersEntry
	(*NotFoundErrorMessageResponse_ResourceInfo)(nil), // 38: lead_scraper_service.v1.NotFoundErrorMessageResponse.ResourceInfo
	(*NotFoundErrorMessageResponse_Suggestions)(nil),  // 39: lead_scraper_service.v1.NotFoundErrorMessageResponse.Suggestions
	(*NotFoundErrorMessageResponse_APIInfo)(nil),      // 40: lead_scraper_service.v1.NotFoundErrorMessageResponse.APIInfo
	nil, // 41: lead_scraper_service.v1.NotFoundErrorMessageResponse.Suggestions.HintsEntry
	(*RateLimitErrorMessageResponse_LimitInfo)(nil),        // 42: lead_scraper_service.v1.RateLimitErrorMessageResponse.LimitInfo
	(*RateLimitErrorMessageResponse_QuotaInfo)(nil),        // 43: lead_scraper_service.v1.RateLimitErrorMessageResponse.QuotaInfo
	(*RateLimitErrorMessageResponse_RateLimitContext)(nil), // 44: lead_scraper_service.v1.RateLimitErrorMessageResponse.RateLimitContext
	nil, // 45: lead_scraper_service.v1.RateLimitErrorMessageResponse.QuotaInfo.ResourceUsageEntry
	nil, // 46: lead_scraper_service.v1.RateLimitErrorMessageResponse.RateLimitContext.HeadersEntry
	(*ConflictErrorMessageResponse_ConflictInfo)(nil),               // 47: lead_scraper_service.v1.ConflictErrorMessageResponse.ConflictInfo
	(*ServiceUnavailableErrorMessageResponse_AvailabilityInfo)(nil), // 48: lead_scraper_service.v1.ServiceUnavailableErrorMessageResponse.AvailabilityInfo
	(*UnprocessableEntityErrorMessageResponse_FieldError)(nil),      // 49: lead_scraper_service.v1.UnprocessableEntityErrorMessageResponse.FieldError
	(*PaymentRequiredErrorMessageResponse_PaymentInfo)(nil),         // 50: lead_scraper_service.v1.PaymentRequiredErrorMessageResponse.PaymentInfo
	(*status.Status)(nil),         // 51: google.rpc.Status
	(*timestamppb.Timestamp)(nil), // 52: google.protobuf.Timestamp
}
var file_lead_scraper_service_v1_errors_ignore_proto_depIdxs = []int32{
	51, // 0: lead_scraper_service.v1.ErrorResponse.status:type_name -> google.rpc.Status
	0,  // 1: lead_scraper_service.v1.AuthenticationErrorMessageResponse.code:type_name -> lead_scraper_service.v1.AuthErrorCode
	23, // 2: lead_scraper_service.v1.AuthenticationErrorMessageResponse.token_info:type_name -> lead_scraper_service.v1.AuthenticationErrorMessageResponse.TokenInfo
	24, // 3: lead_scraper_service.v1.AuthenticationErrorMessageResponse.auth_context:type_name -> lead_scraper_service.v1.AuthenticationErrorMessageResponse.AuthContext
	25, // 4: lead_scraper_service.v1.AuthenticationErrorMessageResponse.session_info:type_name -> lead_scraper_service.v1.AuthenticationErrorMessageResponse.SessionInfo
	26, // 5: lead_scraper_service.v1.AuthenticationErrorMessageResponse.mfa_info:type_name -> lead_scraper_service.v1.AuthenticationErrorMessageResponse.MFAInfo
	4,  // 6: lead_scraper_service.v1.AuthenticationErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	1,  // 7: lead_scraper_service.v1.ValidationErrorMessageResponse.code:type_name -> lead_scraper_service.v1.ValidationErrorCode
	27, // 8: lead_scraper_service.v1.ValidationErrorMessageResponse.field_violations:type_name -> lead_scraper_service.v1.ValidationErrorMessageResponse.FieldViolation
	28, // 9: lead_scraper_service.v1.ValidationErrorMessageResponse.schema_validation:type_name -> lead_scraper_service.v1.ValidationErrorMessageResponse.SchemaValidation
	29, // 10: lead_scraper_service.v1.ValidationErrorMessageResponse.resource_validation:type_name -> lead_scraper_service.v1.ValidationErrorMessageResponse.ResourceValidation
	4,  // 11: lead_scraper_service.v1.ValidationErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	2,  // 12: lead_scraper_service.v1.InternalErrorMessageResponse.code:type_name -> lead_scraper_service.v1.InternalErrorCode
	31, // 13: lead_scraper_service.v1.InternalErrorMessageResponse.service_status:type_name -> lead_scraper_service.v1.InternalErrorMessageResponse.ServiceStatus
	32, // 14: lead_scraper_service.v1.InternalErrorMessageResponse.resource_utilization:type_name -> lead_scraper_service.v1.InternalErrorMessageResponse.ResourceUtilization
	33, // 15: lead_scraper_service.v1.InternalErrorMessageResponse.operation_details:type_name -> lead_scraper_service.v1.InternalErrorMessageResponse.OperationDetails
	4,  // 16: lead_scraper_service.v1.InternalErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	3,  // 17: lead_scraper_service.v1.NotFoundErrorMessageResponse.code:type_name -> lead_scraper_service.v1.NotFoundErrorCode
	38, // 18: lead_scraper_service.v1.NotFoundErrorMessageResponse.resource_info:type_name -> lead_scraper_service.v1.NotFoundErrorMessageResponse.ResourceInfo
	39, // 19: lead_scraper_service.v1.NotFoundErrorMessageResponse.suggestions:type_name -> lead_scraper_service.v1.NotFoundErrorMessageResponse.Suggestions
	40, // 20: lead_scraper_service.v1.NotFoundErrorMessageResponse.api_info:type_name -> lead_scraper_service.v1.NotFoundErrorMessageResponse.APIInfo
	4,  // 21: lead_scraper_service.v1.NotFoundErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	2,  // 22: lead_scraper_service.v1.RateLimitErrorMessageResponse.code:type_name -> lead_scraper_service.v1.InternalErrorCode
	42, // 23: lead_scraper_service.v1.RateLimitErrorMessageResponse.limit_info:type_name -> lead_scraper_service.v1.RateLimitErrorMessageResponse.LimitInfo
	43, // 24: lead_scraper_service.v1.RateLimitErrorMessageResponse.quota_info:type_name -> lead_scraper_service.v1.RateLimitErrorMessageResponse.QuotaInfo
	44, // 25: lead_scraper_service.v1.RateLimitErrorMessageResponse.context:type_name -> lead_scraper_service.v1.RateLimitErrorMessageResponse.RateLimitContext
	4,  // 26: lead_scraper_service.v1.RateLimitErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	1,  // 27: lead_scraper_service.v1.ConflictErrorMessageResponse.code:type_name -> lead_scraper_service.v1.ValidationErrorCode
	47, // 28: lead_scraper_service.v1.ConflictErrorMessageResponse.conflict_info:type_name -> lead_scraper_service.v1.ConflictErrorMessageResponse.ConflictInfo
	4,  // 29: lead_scraper_service.v1.ConflictErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	2,  // 30: lead_scraper_service.v1.ServiceUnavailableErrorMessageResponse.code:type_name -> lead_scraper_service.v1.InternalErrorCode
	48, // 31: lead_scraper_service.v1.ServiceUnavailableErrorMessageResponse.availability_info:type_name -> lead_scraper_service.v1.ServiceUnavailableErrorMessageResponse.AvailabilityInfo
	4,  // 32: lead_scraper_service.v1.ServiceUnavailableErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	4,  // 33: lead_scraper_service.v1.MethodNotAllowedErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	49, // 34: lead_scraper_service.v1.UnprocessableEntityErrorMessageResponse.errors:type_name -> lead_scraper_service.v1.UnprocessableEntityErrorMessageResponse.FieldError
	4,  // 35: lead_scraper_service.v1.UnprocessableEntityErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	4,  // 36: lead_scraper_service.v1.NotImplementedErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	4,  // 37: lead_scraper_service.v1.BadGatewayErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	4,  // 38: lead_scraper_service.v1.GatewayTimeoutErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	4,  // 39: lead_scraper_service.v1.PreconditionFailedErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	4,  // 40: lead_scraper_service.v1.TooEarlyErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	50, // 41: lead_scraper_service.v1.PaymentRequiredErrorMessageResponse.payment_info:type_name -> lead_scraper_service.v1.PaymentRequiredErrorMessageResponse.PaymentInfo
	4,  // 42: lead_scraper_service.v1.PaymentRequiredErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	4,  // 43: lead_scraper_service.v1.ForbiddenErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	4,  // 44: lead_scraper_service.v1.GoneErrorMessageResponse.error_response:type_name -> lead_scraper_service.v1.ErrorResponse
	52, // 45: lead_scraper_service.v1.AuthenticationErrorMessageResponse.TokenInfo.expiry:type_name -> google.protobuf.Timestamp
	52, // 46: lead_scraper_service.v1.AuthenticationErrorMessageResponse.SessionInfo.last_active:type_name -> google.protobuf.Timestamp
	30, // 47: lead_scraper_service.v1.ValidationErrorMessageResponse.ResourceValidation.id_violations:type_name -> lead_scraper_service.v1.ValidationErrorMessageResponse.ResourceValidation.IdViolationsEntry
	34, // 48: lead_scraper_service.v1.InternalErrorMessageResponse.ServiceStatus.metrics:type_name -> lead_scraper_service.v1.InternalErrorMessageResponse.ServiceStatus.MetricsEntry
	35, // 49: lead_scraper_service.v1.InternalErrorMessageResponse.ServiceStatus.dependencies:type_name -> lead_scraper_service.v1.InternalErrorMessageResponse.ServiceStatus.Dependency
	36, // 50: lead_scraper_service.v1.InternalErrorMessageResponse.ResourceUtilization.quotas:type_name -> lead_scraper_service.v1.InternalErrorMessageResponse.ResourceUtilization.QuotasEntry
	52, // 51: lead_scraper_service.v1.InternalErrorMessageResponse.OperationDetails.start_time:type_name -> google.protobuf.Timestamp
	52, // 52: lead_scraper_service.v1.InternalErrorMessageResponse.OperationDetails.end_time:type_name -> google.protobuf.Timestamp
	37, // 53: lead_scraper_service.v1.InternalErrorMessageResponse.OperationDetails.parameters:type_name -> lead_scraper_service.v1.InternalErrorMessageResponse.OperationDetails.ParametersEntry
	41, // 54: lead_scraper_service.v1.NotFoundErrorMessageResponse.Suggestions.hints:type_name -> lead_scraper_service.v1.NotFoundErrorMessageResponse.Suggestions.HintsEntry
	52, // 55: lead_scraper_service.v1.NotFoundErrorMessageResponse.APIInfo.sunset_date:type_name -> google.protobuf.Timestamp
	52, // 56: lead_scraper_service.v1.RateLimitErrorMessageResponse.LimitInfo.reset_time:type_name -> google.protobuf.Timestamp
	52, // 57: lead_scraper_service.v1.RateLimitErrorMessageResponse.QuotaInfo.reset_time:type_name -> google.protobuf.Timestamp
	45, // 58: lead_scraper_service.v1.RateLimitErrorMessageResponse.QuotaInfo.resource_usage:type_name -> lead_scraper_service.v1.RateLimitErrorMessageResponse.QuotaInfo.ResourceUsageEntry
	46, // 59: lead_scraper_service.v1.RateLimitErrorMessageResponse.RateLimitContext.headers:type_name -> lead_scraper_service.v1.RateLimitErrorMessageResponse.RateLimitContext.HeadersEntry
	52, // 60: lead_scraper_service.v1.ConflictErrorMessageResponse.ConflictInfo.created_at:type_name -> google.protobuf.Timestamp
	52, // 61: lead_scraper_service.v1.PaymentRequiredErrorMessageResponse.PaymentInfo.due_date:type_name -> google.protobuf.Timestamp
	62, // [62:62] is the sub-list for method output_type
	62, // [62:62] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_lead_scraper_service_v1_errors_ignore_proto_init() }
func file_lead_scraper_service_v1_errors_ignore_proto_init() {
	if File_lead_scraper_service_v1_errors_ignore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotFoundErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConflictErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceUnavailableErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodNotAllowedErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnprocessableEntityErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotImplementedErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadGatewayErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayTimeoutErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreconditionFailedErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TooEarlyErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentRequiredErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForbiddenErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoneErrorMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationErrorMessageResponse_TokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationErrorMessageResponse_AuthContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationErrorMessageResponse_SessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationErrorMessageResponse_MFAInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationErrorMessageResponse_FieldViolation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationErrorMessageResponse_SchemaValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationErrorMessageResponse_ResourceValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalErrorMessageResponse_ServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalErrorMessageResponse_ResourceUtilization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalErrorMessageResponse_OperationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalErrorMessageResponse_ServiceStatus_Dependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotFoundErrorMessageResponse_ResourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotFoundErrorMessageResponse_Suggestions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotFoundErrorMessageResponse_APIInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitErrorMessageResponse_LimitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitErrorMessageResponse_QuotaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitErrorMessageResponse_RateLimitContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConflictErrorMessageResponse_ConflictInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceUnavailableErrorMessageResponse_AvailabilityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnprocessableEntityErrorMessageResponse_FieldError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_errors_ignore_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentRequiredErrorMessageResponse_PaymentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lead_scraper_service_v1_errors_ignore_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lead_scraper_service_v1_errors_ignore_proto_goTypes,
		DependencyIndexes: file_lead_scraper_service_v1_errors_ignore_proto_depIdxs,
		EnumInfos:         file_lead_scraper_service_v1_errors_ignore_proto_enumTypes,
		MessageInfos:      file_lead_scraper_service_v1_errors_ignore_proto_msgTypes,
	}.Build()
	File_lead_scraper_service_v1_errors_ignore_proto = out.File
	file_lead_scraper_service_v1_errors_ignore_proto_rawDesc = nil
	file_lead_scraper_service_v1_errors_ignore_proto_goTypes = nil
	file_lead_scraper_service_v1_errors_ignore_proto_depIdxs = nil
}
