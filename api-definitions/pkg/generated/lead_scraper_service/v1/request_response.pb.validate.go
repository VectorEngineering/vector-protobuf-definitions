// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lead_scraper_service/v1/request_response.proto

package lead_scraper_servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateScrapingJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateScrapingJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateScrapingJobRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateScrapingJobRequestMultiError, or nil if none found.
func (m *CreateScrapingJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateScrapingJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := CreateScrapingJobRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 1 {
		err := CreateScrapingJobRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTenantId()) < 1 {
		err := CreateScrapingJobRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateScrapingJobRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetKeywords()); l < 1 || l > 20 {
		err := CreateScrapingJobRequestValidationError{
			field:  "Keywords",
			reason: "value must contain between 1 and 20 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetKeywords() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) > 50 {
			err := CreateScrapingJobRequestValidationError{
				field:  fmt.Sprintf("Keywords[%v]", idx),
				reason: "value length must be at most 50 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if utf8.RuneCountInString(m.GetLang()) != 2 {
		err := CreateScrapingJobRequestValidationError{
			field:  "Lang",
			reason: "value length must be 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if val := m.GetZoom(); val < 1 || val > 20 {
		err := CreateScrapingJobRequestValidationError{
			field:  "Zoom",
			reason: "value must be inside range [1, 20]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Lat

	// no validation rules for Lon

	// no validation rules for FastMode

	// no validation rules for Radius

	if val := m.GetDepth(); val < 1 || val > 10 {
		err := CreateScrapingJobRequestValidationError{
			field:  "Depth",
			reason: "value must be inside range [1, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Email

	if m.GetMaxTime() <= 0 {
		err := CreateScrapingJobRequestValidationError{
			field:  "MaxTime",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateScrapingJobRequestMultiError(errors)
	}

	return nil
}

// CreateScrapingJobRequestMultiError is an error wrapping multiple validation
// errors returned by CreateScrapingJobRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateScrapingJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateScrapingJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateScrapingJobRequestMultiError) AllErrors() []error { return m }

// CreateScrapingJobRequestValidationError is the validation error returned by
// CreateScrapingJobRequest.Validate if the designated constraints aren't met.
type CreateScrapingJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScrapingJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScrapingJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScrapingJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScrapingJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScrapingJobRequestValidationError) ErrorName() string {
	return "CreateScrapingJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScrapingJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScrapingJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScrapingJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScrapingJobRequestValidationError{}

// Validate checks the field values on CreateScrapingJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateScrapingJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateScrapingJobResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateScrapingJobResponseMultiError, or nil if none found.
func (m *CreateScrapingJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateScrapingJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if _, ok := BackgroundJobStatus_name[int32(m.GetStatus())]; !ok {
		err := CreateScrapingJobResponseValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateScrapingJobResponseMultiError(errors)
	}

	return nil
}

// CreateScrapingJobResponseMultiError is an error wrapping multiple validation
// errors returned by CreateScrapingJobResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateScrapingJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateScrapingJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateScrapingJobResponseMultiError) AllErrors() []error { return m }

// CreateScrapingJobResponseValidationError is the validation error returned by
// CreateScrapingJobResponse.Validate if the designated constraints aren't met.
type CreateScrapingJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScrapingJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScrapingJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScrapingJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScrapingJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScrapingJobResponseValidationError) ErrorName() string {
	return "CreateScrapingJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScrapingJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScrapingJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScrapingJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScrapingJobResponseValidationError{}

// Validate checks the field values on GetScrapingJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetScrapingJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScrapingJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetScrapingJobRequestMultiError, or nil if none found.
func (m *GetScrapingJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScrapingJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetScrapingJobRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetJobId()) < 1 {
		err := GetScrapingJobRequestValidationError{
			field:  "JobId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 1 {
		err := GetScrapingJobRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTenantId()) < 1 {
		err := GetScrapingJobRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetScrapingJobRequestMultiError(errors)
	}

	return nil
}

// GetScrapingJobRequestMultiError is an error wrapping multiple validation
// errors returned by GetScrapingJobRequest.ValidateAll() if the designated
// constraints aren't met.
type GetScrapingJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScrapingJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScrapingJobRequestMultiError) AllErrors() []error { return m }

// GetScrapingJobRequestValidationError is the validation error returned by
// GetScrapingJobRequest.Validate if the designated constraints aren't met.
type GetScrapingJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScrapingJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScrapingJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScrapingJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScrapingJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScrapingJobRequestValidationError) ErrorName() string {
	return "GetScrapingJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetScrapingJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScrapingJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScrapingJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScrapingJobRequestValidationError{}

// Validate checks the field values on GetScrapingJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetScrapingJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScrapingJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetScrapingJobResponseMultiError, or nil if none found.
func (m *GetScrapingJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScrapingJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetScrapingJobResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetScrapingJobResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetScrapingJobResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetScrapingJobResponseMultiError(errors)
	}

	return nil
}

// GetScrapingJobResponseMultiError is an error wrapping multiple validation
// errors returned by GetScrapingJobResponse.ValidateAll() if the designated
// constraints aren't met.
type GetScrapingJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScrapingJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScrapingJobResponseMultiError) AllErrors() []error { return m }

// GetScrapingJobResponseValidationError is the validation error returned by
// GetScrapingJobResponse.Validate if the designated constraints aren't met.
type GetScrapingJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScrapingJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScrapingJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScrapingJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScrapingJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScrapingJobResponseValidationError) ErrorName() string {
	return "GetScrapingJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetScrapingJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScrapingJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScrapingJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScrapingJobResponseValidationError{}

// Validate checks the field values on ListScrapingJobsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListScrapingJobsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListScrapingJobsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListScrapingJobsRequestMultiError, or nil if none found.
func (m *ListScrapingJobsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListScrapingJobsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ListScrapingJobsRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 1 {
		err := ListScrapingJobsRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTenantId()) < 1 {
		err := ListScrapingJobsRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListScrapingJobsRequestMultiError(errors)
	}

	return nil
}

// ListScrapingJobsRequestMultiError is an error wrapping multiple validation
// errors returned by ListScrapingJobsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListScrapingJobsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListScrapingJobsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListScrapingJobsRequestMultiError) AllErrors() []error { return m }

// ListScrapingJobsRequestValidationError is the validation error returned by
// ListScrapingJobsRequest.Validate if the designated constraints aren't met.
type ListScrapingJobsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScrapingJobsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScrapingJobsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScrapingJobsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScrapingJobsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScrapingJobsRequestValidationError) ErrorName() string {
	return "ListScrapingJobsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListScrapingJobsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScrapingJobsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScrapingJobsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScrapingJobsRequestValidationError{}

// Validate checks the field values on ListScrapingJobsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListScrapingJobsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListScrapingJobsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListScrapingJobsResponseMultiError, or nil if none found.
func (m *ListScrapingJobsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListScrapingJobsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetJobs()) > 100 {
		err := ListScrapingJobsResponseValidationError{
			field:  "Jobs",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetJobs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListScrapingJobsResponseValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListScrapingJobsResponseValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListScrapingJobsResponseValidationError{
					field:  fmt.Sprintf("Jobs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListScrapingJobsResponseMultiError(errors)
	}

	return nil
}

// ListScrapingJobsResponseMultiError is an error wrapping multiple validation
// errors returned by ListScrapingJobsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListScrapingJobsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListScrapingJobsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListScrapingJobsResponseMultiError) AllErrors() []error { return m }

// ListScrapingJobsResponseValidationError is the validation error returned by
// ListScrapingJobsResponse.Validate if the designated constraints aren't met.
type ListScrapingJobsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScrapingJobsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScrapingJobsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScrapingJobsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScrapingJobsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScrapingJobsResponseValidationError) ErrorName() string {
	return "ListScrapingJobsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListScrapingJobsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScrapingJobsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScrapingJobsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScrapingJobsResponseValidationError{}

// Validate checks the field values on DeleteScrapingJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteScrapingJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteScrapingJobRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteScrapingJobRequestMultiError, or nil if none found.
func (m *DeleteScrapingJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteScrapingJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := DeleteScrapingJobRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetJobId()) < 1 {
		err := DeleteScrapingJobRequestValidationError{
			field:  "JobId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 1 {
		err := DeleteScrapingJobRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTenantId()) < 1 {
		err := DeleteScrapingJobRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteScrapingJobRequestMultiError(errors)
	}

	return nil
}

// DeleteScrapingJobRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteScrapingJobRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteScrapingJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteScrapingJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteScrapingJobRequestMultiError) AllErrors() []error { return m }

// DeleteScrapingJobRequestValidationError is the validation error returned by
// DeleteScrapingJobRequest.Validate if the designated constraints aren't met.
type DeleteScrapingJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteScrapingJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteScrapingJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteScrapingJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteScrapingJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteScrapingJobRequestValidationError) ErrorName() string {
	return "DeleteScrapingJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteScrapingJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteScrapingJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteScrapingJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteScrapingJobRequestValidationError{}

// Validate checks the field values on DeleteScrapingJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteScrapingJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteScrapingJobResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteScrapingJobResponseMultiError, or nil if none found.
func (m *DeleteScrapingJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteScrapingJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteScrapingJobResponseMultiError(errors)
	}

	return nil
}

// DeleteScrapingJobResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteScrapingJobResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteScrapingJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteScrapingJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteScrapingJobResponseMultiError) AllErrors() []error { return m }

// DeleteScrapingJobResponseValidationError is the validation error returned by
// DeleteScrapingJobResponse.Validate if the designated constraints aren't met.
type DeleteScrapingJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteScrapingJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteScrapingJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteScrapingJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteScrapingJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteScrapingJobResponseValidationError) ErrorName() string {
	return "DeleteScrapingJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteScrapingJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteScrapingJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteScrapingJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteScrapingJobResponseValidationError{}

// Validate checks the field values on DownloadScrapingResultsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadScrapingResultsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadScrapingResultsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DownloadScrapingResultsRequestMultiError, or nil if none found.
func (m *DownloadScrapingResultsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadScrapingResultsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := DownloadScrapingResultsRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetJobId()) < 1 {
		err := DownloadScrapingResultsRequestValidationError{
			field:  "JobId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 1 {
		err := DownloadScrapingResultsRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTenantId()) < 1 {
		err := DownloadScrapingResultsRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DownloadScrapingResultsRequestMultiError(errors)
	}

	return nil
}

// DownloadScrapingResultsRequestMultiError is an error wrapping multiple
// validation errors returned by DownloadScrapingResultsRequest.ValidateAll()
// if the designated constraints aren't met.
type DownloadScrapingResultsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadScrapingResultsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadScrapingResultsRequestMultiError) AllErrors() []error { return m }

// DownloadScrapingResultsRequestValidationError is the validation error
// returned by DownloadScrapingResultsRequest.Validate if the designated
// constraints aren't met.
type DownloadScrapingResultsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadScrapingResultsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadScrapingResultsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadScrapingResultsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadScrapingResultsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadScrapingResultsRequestValidationError) ErrorName() string {
	return "DownloadScrapingResultsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadScrapingResultsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadScrapingResultsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadScrapingResultsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadScrapingResultsRequestValidationError{}

// Validate checks the field values on DownloadScrapingResultsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadScrapingResultsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadScrapingResultsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DownloadScrapingResultsResponseMultiError, or nil if none found.
func (m *DownloadScrapingResultsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadScrapingResultsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	// no validation rules for Filename

	// no validation rules for ContentType

	if len(errors) > 0 {
		return DownloadScrapingResultsResponseMultiError(errors)
	}

	return nil
}

// DownloadScrapingResultsResponseMultiError is an error wrapping multiple
// validation errors returned by DownloadScrapingResultsResponse.ValidateAll()
// if the designated constraints aren't met.
type DownloadScrapingResultsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadScrapingResultsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadScrapingResultsResponseMultiError) AllErrors() []error { return m }

// DownloadScrapingResultsResponseValidationError is the validation error
// returned by DownloadScrapingResultsResponse.Validate if the designated
// constraints aren't met.
type DownloadScrapingResultsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadScrapingResultsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadScrapingResultsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadScrapingResultsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadScrapingResultsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadScrapingResultsResponseValidationError) ErrorName() string {
	return "DownloadScrapingResultsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadScrapingResultsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadScrapingResultsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadScrapingResultsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadScrapingResultsResponseValidationError{}

// Validate checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountRequestMultiError, or nil if none found.
func (m *CreateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccount() == nil {
		err := CreateAccountRequestValidationError{
			field:  "Account",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccountRequestValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccountRequestValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccountRequestValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetInitialWorkspaceName()) < 1 {
		err := CreateAccountRequestValidationError{
			field:  "InitialWorkspaceName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateAccountRequestMultiError(errors)
	}

	return nil
}

// CreateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountRequestMultiError) AllErrors() []error { return m }

// CreateAccountRequestValidationError is the validation error returned by
// CreateAccountRequest.Validate if the designated constraints aren't met.
type CreateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountRequestValidationError) ErrorName() string {
	return "CreateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountRequestValidationError{}

// Validate checks the field values on GetAccountRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountRequestMultiError, or nil if none found.
func (m *GetAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetAccountRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountRequestMultiError(errors)
	}

	return nil
}

// GetAccountRequestMultiError is an error wrapping multiple validation errors
// returned by GetAccountRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountRequestMultiError) AllErrors() []error { return m }

// GetAccountRequestValidationError is the validation error returned by
// GetAccountRequest.Validate if the designated constraints aren't met.
type GetAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountRequestValidationError) ErrorName() string {
	return "GetAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountRequestValidationError{}

// Validate checks the field values on UpdateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountRequestMultiError, or nil if none found.
func (m *UpdateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccount() == nil {
		err := UpdateAccountRequestValidationError{
			field:  "Account",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountRequestValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountRequestValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountRequestValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAccountRequestMultiError(errors)
	}

	return nil
}

// UpdateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountRequestMultiError) AllErrors() []error { return m }

// UpdateAccountRequestValidationError is the validation error returned by
// UpdateAccountRequest.Validate if the designated constraints aren't met.
type UpdateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountRequestValidationError) ErrorName() string {
	return "UpdateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountRequestValidationError{}

// Validate checks the field values on DeleteAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccountRequestMultiError, or nil if none found.
func (m *DeleteAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteAccountRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAccountRequestMultiError(errors)
	}

	return nil
}

// DeleteAccountRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountRequestMultiError) AllErrors() []error { return m }

// DeleteAccountRequestValidationError is the validation error returned by
// DeleteAccountRequest.Validate if the designated constraints aren't met.
type DeleteAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountRequestValidationError) ErrorName() string {
	return "DeleteAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountRequestValidationError{}

// Validate checks the field values on ListAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccountsRequestMultiError, or nil if none found.
func (m *ListAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListAccountsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNumber

	// no validation rules for Filter

	if len(errors) > 0 {
		return ListAccountsRequestMultiError(errors)
	}

	return nil
}

// ListAccountsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAccountsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountsRequestMultiError) AllErrors() []error { return m }

// ListAccountsRequestValidationError is the validation error returned by
// ListAccountsRequest.Validate if the designated constraints aren't met.
type ListAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountsRequestValidationError) ErrorName() string {
	return "ListAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountsRequestValidationError{}

// Validate checks the field values on ListAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccountsResponseMultiError, or nil if none found.
func (m *ListAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccountsResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return ListAccountsResponseMultiError(errors)
	}

	return nil
}

// ListAccountsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAccountsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountsResponseMultiError) AllErrors() []error { return m }

// ListAccountsResponseValidationError is the validation error returned by
// ListAccountsResponse.Validate if the designated constraints aren't met.
type ListAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountsResponseValidationError) ErrorName() string {
	return "ListAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountsResponseValidationError{}

// Validate checks the field values on CreateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkspaceRequestMultiError, or nil if none found.
func (m *CreateWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWorkspace() == nil {
		err := CreateWorkspaceRequestValidationError{
			field:  "Workspace",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkspaceRequestValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkspaceRequestValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkspaceRequestValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetAccountId()) < 1 {
		err := CreateWorkspaceRequestValidationError{
			field:  "AccountId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateWorkspaceRequestMultiError(errors)
	}

	return nil
}

// CreateWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkspaceRequestMultiError) AllErrors() []error { return m }

// CreateWorkspaceRequestValidationError is the validation error returned by
// CreateWorkspaceRequest.Validate if the designated constraints aren't met.
type CreateWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkspaceRequestValidationError) ErrorName() string {
	return "CreateWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkspaceRequestValidationError{}

// Validate checks the field values on CreateWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkspaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkspaceResponseMultiError, or nil if none found.
func (m *CreateWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkspaceResponseValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWorkspaceResponseMultiError(errors)
	}

	return nil
}

// CreateWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkspaceResponseMultiError) AllErrors() []error { return m }

// CreateWorkspaceResponseValidationError is the validation error returned by
// CreateWorkspaceResponse.Validate if the designated constraints aren't met.
type CreateWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkspaceResponseValidationError) ErrorName() string {
	return "CreateWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkspaceResponseValidationError{}

// Validate checks the field values on GetWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkspaceRequestMultiError, or nil if none found.
func (m *GetWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetWorkspaceRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWorkspaceRequestMultiError(errors)
	}

	return nil
}

// GetWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by GetWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceRequestMultiError) AllErrors() []error { return m }

// GetWorkspaceRequestValidationError is the validation error returned by
// GetWorkspaceRequest.Validate if the designated constraints aren't met.
type GetWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceRequestValidationError) ErrorName() string {
	return "GetWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceRequestValidationError{}

// Validate checks the field values on UpdateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkspaceRequestMultiError, or nil if none found.
func (m *UpdateWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWorkspace() == nil {
		err := UpdateWorkspaceRequestValidationError{
			field:  "Workspace",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkspaceRequestValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkspaceRequestValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkspaceRequestValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkspaceRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkspaceRequestMultiError) AllErrors() []error { return m }

// UpdateWorkspaceRequestValidationError is the validation error returned by
// UpdateWorkspaceRequest.Validate if the designated constraints aren't met.
type UpdateWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkspaceRequestValidationError) ErrorName() string {
	return "UpdateWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkspaceRequestValidationError{}

// Validate checks the field values on DeleteWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkspaceRequestMultiError, or nil if none found.
func (m *DeleteWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteWorkspaceRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteWorkspaceRequestMultiError(errors)
	}

	return nil
}

// DeleteWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkspaceRequestMultiError) AllErrors() []error { return m }

// DeleteWorkspaceRequestValidationError is the validation error returned by
// DeleteWorkspaceRequest.Validate if the designated constraints aren't met.
type DeleteWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkspaceRequestValidationError) ErrorName() string {
	return "DeleteWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkspaceRequestValidationError{}

// Validate checks the field values on ListWorkspacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkspacesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkspacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkspacesRequestMultiError, or nil if none found.
func (m *ListWorkspacesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkspacesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccountId()) < 1 {
		err := ListWorkspacesRequestValidationError{
			field:  "AccountId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListWorkspacesRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNumber

	if len(errors) > 0 {
		return ListWorkspacesRequestMultiError(errors)
	}

	return nil
}

// ListWorkspacesRequestMultiError is an error wrapping multiple validation
// errors returned by ListWorkspacesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWorkspacesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkspacesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkspacesRequestMultiError) AllErrors() []error { return m }

// ListWorkspacesRequestValidationError is the validation error returned by
// ListWorkspacesRequest.Validate if the designated constraints aren't met.
type ListWorkspacesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkspacesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkspacesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkspacesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkspacesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkspacesRequestValidationError) ErrorName() string {
	return "ListWorkspacesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkspacesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkspacesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkspacesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkspacesRequestValidationError{}

// Validate checks the field values on ListWorkspacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkspacesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkspacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkspacesResponseMultiError, or nil if none found.
func (m *ListWorkspacesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkspacesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWorkspaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkspacesResponseValidationError{
						field:  fmt.Sprintf("Workspaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkspacesResponseValidationError{
						field:  fmt.Sprintf("Workspaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkspacesResponseValidationError{
					field:  fmt.Sprintf("Workspaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return ListWorkspacesResponseMultiError(errors)
	}

	return nil
}

// ListWorkspacesResponseMultiError is an error wrapping multiple validation
// errors returned by ListWorkspacesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWorkspacesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkspacesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkspacesResponseMultiError) AllErrors() []error { return m }

// ListWorkspacesResponseValidationError is the validation error returned by
// ListWorkspacesResponse.Validate if the designated constraints aren't met.
type ListWorkspacesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkspacesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkspacesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkspacesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkspacesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkspacesResponseValidationError) ErrorName() string {
	return "ListWorkspacesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkspacesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkspacesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkspacesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkspacesResponseValidationError{}

// Validate checks the field values on GetAccountUsageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountUsageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountUsageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountUsageRequestMultiError, or nil if none found.
func (m *GetAccountUsageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountUsageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetAccountUsageRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountUsageRequestMultiError(errors)
	}

	return nil
}

// GetAccountUsageRequestMultiError is an error wrapping multiple validation
// errors returned by GetAccountUsageRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccountUsageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountUsageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountUsageRequestMultiError) AllErrors() []error { return m }

// GetAccountUsageRequestValidationError is the validation error returned by
// GetAccountUsageRequest.Validate if the designated constraints aren't met.
type GetAccountUsageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountUsageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountUsageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountUsageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountUsageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountUsageRequestValidationError) ErrorName() string {
	return "GetAccountUsageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountUsageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountUsageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountUsageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountUsageRequestValidationError{}

// Validate checks the field values on GetAccountUsageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountUsageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountUsageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountUsageResponseMultiError, or nil if none found.
func (m *GetAccountUsageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountUsageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalJobsRun

	// no validation rules for MonthlyJobLimit

	// no validation rules for RemainingJobs

	if all {
		switch v := interface{}(m.GetResetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountUsageResponseValidationError{
					field:  "ResetTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountUsageResponseValidationError{
					field:  "ResetTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountUsageResponseValidationError{
				field:  "ResetTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountUsageResponseMultiError(errors)
	}

	return nil
}

// GetAccountUsageResponseMultiError is an error wrapping multiple validation
// errors returned by GetAccountUsageResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccountUsageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountUsageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountUsageResponseMultiError) AllErrors() []error { return m }

// GetAccountUsageResponseValidationError is the validation error returned by
// GetAccountUsageResponse.Validate if the designated constraints aren't met.
type GetAccountUsageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountUsageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountUsageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountUsageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountUsageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountUsageResponseValidationError) ErrorName() string {
	return "GetAccountUsageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountUsageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountUsageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountUsageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountUsageResponseValidationError{}

// Validate checks the field values on UpdateAccountSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountSettingsRequestMultiError, or nil if none found.
func (m *UpdateAccountSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSettings() == nil {
		err := UpdateAccountSettingsRequestValidationError{
			field:  "Settings",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountSettingsRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountSettingsRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountSettingsRequestValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAccountSettingsRequestMultiError(errors)
	}

	return nil
}

// UpdateAccountSettingsRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAccountSettingsRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateAccountSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountSettingsRequestMultiError) AllErrors() []error { return m }

// UpdateAccountSettingsRequestValidationError is the validation error returned
// by UpdateAccountSettingsRequest.Validate if the designated constraints
// aren't met.
type UpdateAccountSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountSettingsRequestValidationError) ErrorName() string {
	return "UpdateAccountSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountSettingsRequestValidationError{}

// Validate checks the field values on UpdateAccountSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountSettingsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAccountSettingsResponseMultiError, or nil if none found.
func (m *UpdateAccountSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountSettingsResponseValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAccountSettingsResponseMultiError(errors)
	}

	return nil
}

// UpdateAccountSettingsResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAccountSettingsResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateAccountSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountSettingsResponseMultiError) AllErrors() []error { return m }

// UpdateAccountSettingsResponseValidationError is the validation error
// returned by UpdateAccountSettingsResponse.Validate if the designated
// constraints aren't met.
type UpdateAccountSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountSettingsResponseValidationError) ErrorName() string {
	return "UpdateAccountSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountSettingsResponseValidationError{}

// Validate checks the field values on CreateWorkflowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkflowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkflowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkflowRequestMultiError, or nil if none found.
func (m *CreateWorkflowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkflowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetWorkspaceId()) < 1 {
		err := CreateWorkflowRequestValidationError{
			field:  "WorkspaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWorkflow() == nil {
		err := CreateWorkflowRequestValidationError{
			field:  "Workflow",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkflowRequestValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkflowRequestValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkflowRequestValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWorkflowRequestMultiError(errors)
	}

	return nil
}

// CreateWorkflowRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWorkflowRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkflowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkflowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkflowRequestMultiError) AllErrors() []error { return m }

// CreateWorkflowRequestValidationError is the validation error returned by
// CreateWorkflowRequest.Validate if the designated constraints aren't met.
type CreateWorkflowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkflowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkflowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkflowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkflowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkflowRequestValidationError) ErrorName() string {
	return "CreateWorkflowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkflowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkflowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkflowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkflowRequestValidationError{}

// Validate checks the field values on GetWorkflowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkflowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkflowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkflowRequestMultiError, or nil if none found.
func (m *GetWorkflowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkflowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetWorkspaceId()) < 1 {
		err := GetWorkflowRequestValidationError{
			field:  "WorkspaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetWorkflowRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWorkflowRequestMultiError(errors)
	}

	return nil
}

// GetWorkflowRequestMultiError is an error wrapping multiple validation errors
// returned by GetWorkflowRequest.ValidateAll() if the designated constraints
// aren't met.
type GetWorkflowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkflowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkflowRequestMultiError) AllErrors() []error { return m }

// GetWorkflowRequestValidationError is the validation error returned by
// GetWorkflowRequest.Validate if the designated constraints aren't met.
type GetWorkflowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkflowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkflowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkflowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkflowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkflowRequestValidationError) ErrorName() string {
	return "GetWorkflowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkflowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkflowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkflowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkflowRequestValidationError{}

// Validate checks the field values on UpdateWorkflowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkflowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkflowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkflowRequestMultiError, or nil if none found.
func (m *UpdateWorkflowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkflowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWorkflow() == nil {
		err := UpdateWorkflowRequestValidationError{
			field:  "Workflow",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkflowRequestValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkflowRequestValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkflowRequestValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkflowRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkflowRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkflowRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkflowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkflowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkflowRequestMultiError) AllErrors() []error { return m }

// UpdateWorkflowRequestValidationError is the validation error returned by
// UpdateWorkflowRequest.Validate if the designated constraints aren't met.
type UpdateWorkflowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkflowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkflowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkflowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkflowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkflowRequestValidationError) ErrorName() string {
	return "UpdateWorkflowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkflowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkflowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkflowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkflowRequestValidationError{}

// Validate checks the field values on ListWorkflowsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkflowsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkflowsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkflowsRequestMultiError, or nil if none found.
func (m *ListWorkflowsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkflowsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetWorkspaceId()) < 1 {
		err := ListWorkflowsRequestValidationError{
			field:  "WorkspaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListWorkflowsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNumber

	// no validation rules for Filter

	if len(errors) > 0 {
		return ListWorkflowsRequestMultiError(errors)
	}

	return nil
}

// ListWorkflowsRequestMultiError is an error wrapping multiple validation
// errors returned by ListWorkflowsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWorkflowsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkflowsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkflowsRequestMultiError) AllErrors() []error { return m }

// ListWorkflowsRequestValidationError is the validation error returned by
// ListWorkflowsRequest.Validate if the designated constraints aren't met.
type ListWorkflowsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkflowsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkflowsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkflowsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkflowsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkflowsRequestValidationError) ErrorName() string {
	return "ListWorkflowsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkflowsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkflowsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkflowsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkflowsRequestValidationError{}

// Validate checks the field values on ListWorkflowsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkflowsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkflowsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkflowsResponseMultiError, or nil if none found.
func (m *ListWorkflowsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkflowsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWorkflows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkflowsResponseValidationError{
						field:  fmt.Sprintf("Workflows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkflowsResponseValidationError{
						field:  fmt.Sprintf("Workflows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkflowsResponseValidationError{
					field:  fmt.Sprintf("Workflows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return ListWorkflowsResponseMultiError(errors)
	}

	return nil
}

// ListWorkflowsResponseMultiError is an error wrapping multiple validation
// errors returned by ListWorkflowsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWorkflowsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkflowsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkflowsResponseMultiError) AllErrors() []error { return m }

// ListWorkflowsResponseValidationError is the validation error returned by
// ListWorkflowsResponse.Validate if the designated constraints aren't met.
type ListWorkflowsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkflowsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkflowsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkflowsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkflowsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkflowsResponseValidationError) ErrorName() string {
	return "ListWorkflowsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkflowsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkflowsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkflowsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkflowsResponseValidationError{}

// Validate checks the field values on TriggerWorkflowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerWorkflowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerWorkflowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerWorkflowRequestMultiError, or nil if none found.
func (m *TriggerWorkflowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerWorkflowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetWorkspaceId()) < 1 {
		err := TriggerWorkflowRequestValidationError{
			field:  "WorkspaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := TriggerWorkflowRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetParameters()) > 20 {
		err := TriggerWorkflowRequestValidationError{
			field:  "Parameters",
			reason: "value must contain no more than 20 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetParameters()))
		i := 0
		for key := range m.GetParameters() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetParameters()[key]
			_ = val

			if utf8.RuneCountInString(key) > 50 {
				err := TriggerWorkflowRequestValidationError{
					field:  fmt.Sprintf("Parameters[%v]", key),
					reason: "value length must be at most 50 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if utf8.RuneCountInString(val) > 200 {
				err := TriggerWorkflowRequestValidationError{
					field:  fmt.Sprintf("Parameters[%v]", key),
					reason: "value length must be at most 200 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return TriggerWorkflowRequestMultiError(errors)
	}

	return nil
}

// TriggerWorkflowRequestMultiError is an error wrapping multiple validation
// errors returned by TriggerWorkflowRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerWorkflowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerWorkflowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerWorkflowRequestMultiError) AllErrors() []error { return m }

// TriggerWorkflowRequestValidationError is the validation error returned by
// TriggerWorkflowRequest.Validate if the designated constraints aren't met.
type TriggerWorkflowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerWorkflowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerWorkflowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerWorkflowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerWorkflowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerWorkflowRequestValidationError) ErrorName() string {
	return "TriggerWorkflowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerWorkflowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerWorkflowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerWorkflowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerWorkflowRequestValidationError{}

// Validate checks the field values on TriggerWorkflowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerWorkflowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerWorkflowResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerWorkflowResponseMultiError, or nil if none found.
func (m *TriggerWorkflowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerWorkflowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for Status

	if len(errors) > 0 {
		return TriggerWorkflowResponseMultiError(errors)
	}

	return nil
}

// TriggerWorkflowResponseMultiError is an error wrapping multiple validation
// errors returned by TriggerWorkflowResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerWorkflowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerWorkflowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerWorkflowResponseMultiError) AllErrors() []error { return m }

// TriggerWorkflowResponseValidationError is the validation error returned by
// TriggerWorkflowResponse.Validate if the designated constraints aren't met.
type TriggerWorkflowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerWorkflowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerWorkflowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerWorkflowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerWorkflowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerWorkflowResponseValidationError) ErrorName() string {
	return "TriggerWorkflowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerWorkflowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerWorkflowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerWorkflowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerWorkflowResponseValidationError{}

// Validate checks the field values on PauseWorkflowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PauseWorkflowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PauseWorkflowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PauseWorkflowRequestMultiError, or nil if none found.
func (m *PauseWorkflowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PauseWorkflowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetWorkspaceId()) < 1 {
		err := PauseWorkflowRequestValidationError{
			field:  "WorkspaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := PauseWorkflowRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Pause

	if len(errors) > 0 {
		return PauseWorkflowRequestMultiError(errors)
	}

	return nil
}

// PauseWorkflowRequestMultiError is an error wrapping multiple validation
// errors returned by PauseWorkflowRequest.ValidateAll() if the designated
// constraints aren't met.
type PauseWorkflowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PauseWorkflowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PauseWorkflowRequestMultiError) AllErrors() []error { return m }

// PauseWorkflowRequestValidationError is the validation error returned by
// PauseWorkflowRequest.Validate if the designated constraints aren't met.
type PauseWorkflowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PauseWorkflowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PauseWorkflowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PauseWorkflowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PauseWorkflowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PauseWorkflowRequestValidationError) ErrorName() string {
	return "PauseWorkflowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PauseWorkflowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPauseWorkflowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PauseWorkflowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PauseWorkflowRequestValidationError{}

// Validate checks the field values on PauseWorkflowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PauseWorkflowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PauseWorkflowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PauseWorkflowResponseMultiError, or nil if none found.
func (m *PauseWorkflowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PauseWorkflowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PauseWorkflowResponseValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PauseWorkflowResponseValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PauseWorkflowResponseValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PauseWorkflowResponseMultiError(errors)
	}

	return nil
}

// PauseWorkflowResponseMultiError is an error wrapping multiple validation
// errors returned by PauseWorkflowResponse.ValidateAll() if the designated
// constraints aren't met.
type PauseWorkflowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PauseWorkflowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PauseWorkflowResponseMultiError) AllErrors() []error { return m }

// PauseWorkflowResponseValidationError is the validation error returned by
// PauseWorkflowResponse.Validate if the designated constraints aren't met.
type PauseWorkflowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PauseWorkflowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PauseWorkflowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PauseWorkflowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PauseWorkflowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PauseWorkflowResponseValidationError) ErrorName() string {
	return "PauseWorkflowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PauseWorkflowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPauseWorkflowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PauseWorkflowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PauseWorkflowResponseValidationError{}

// Validate checks the field values on GetWorkspaceAnalyticsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceAnalyticsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspaceAnalyticsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkspaceAnalyticsRequestMultiError, or nil if none found.
func (m *GetWorkspaceAnalyticsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceAnalyticsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetWorkspaceId()) < 1 {
		err := GetWorkspaceAnalyticsRequestValidationError{
			field:  "WorkspaceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkspaceAnalyticsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkspaceAnalyticsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkspaceAnalyticsRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkspaceAnalyticsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkspaceAnalyticsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkspaceAnalyticsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWorkspaceAnalyticsRequestMultiError(errors)
	}

	return nil
}

// GetWorkspaceAnalyticsRequestMultiError is an error wrapping multiple
// validation errors returned by GetWorkspaceAnalyticsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetWorkspaceAnalyticsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceAnalyticsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceAnalyticsRequestMultiError) AllErrors() []error { return m }

// GetWorkspaceAnalyticsRequestValidationError is the validation error returned
// by GetWorkspaceAnalyticsRequest.Validate if the designated constraints
// aren't met.
type GetWorkspaceAnalyticsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceAnalyticsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceAnalyticsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceAnalyticsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceAnalyticsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceAnalyticsRequestValidationError) ErrorName() string {
	return "GetWorkspaceAnalyticsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceAnalyticsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceAnalyticsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceAnalyticsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceAnalyticsRequestValidationError{}

// Validate checks the field values on GetWorkspaceAnalyticsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceAnalyticsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspaceAnalyticsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetWorkspaceAnalyticsResponseMultiError, or nil if none found.
func (m *GetWorkspaceAnalyticsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceAnalyticsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalLeads

	// no validation rules for ActiveWorkflows

	// no validation rules for JobsLast_30Days

	for idx, item := range m.GetSuccessRates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWorkspaceAnalyticsResponseValidationError{
						field:  fmt.Sprintf("SuccessRates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWorkspaceAnalyticsResponseValidationError{
						field:  fmt.Sprintf("SuccessRates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWorkspaceAnalyticsResponseValidationError{
					field:  fmt.Sprintf("SuccessRates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWorkspaceAnalyticsResponseMultiError(errors)
	}

	return nil
}

// GetWorkspaceAnalyticsResponseMultiError is an error wrapping multiple
// validation errors returned by GetWorkspaceAnalyticsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetWorkspaceAnalyticsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceAnalyticsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceAnalyticsResponseMultiError) AllErrors() []error { return m }

// GetWorkspaceAnalyticsResponseValidationError is the validation error
// returned by GetWorkspaceAnalyticsResponse.Validate if the designated
// constraints aren't met.
type GetWorkspaceAnalyticsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceAnalyticsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceAnalyticsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceAnalyticsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceAnalyticsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceAnalyticsResponseValidationError) ErrorName() string {
	return "GetWorkspaceAnalyticsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceAnalyticsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceAnalyticsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceAnalyticsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceAnalyticsResponseValidationError{}

// Validate checks the field values on GetWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkspaceResponseMultiError, or nil if none found.
func (m *GetWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkspaceResponseValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWorkspaceResponseMultiError(errors)
	}

	return nil
}

// GetWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by GetWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceResponseMultiError) AllErrors() []error { return m }

// GetWorkspaceResponseValidationError is the validation error returned by
// GetWorkspaceResponse.Validate if the designated constraints aren't met.
type GetWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceResponseValidationError) ErrorName() string {
	return "GetWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceResponseValidationError{}

// Validate checks the field values on UpdateWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkspaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkspaceResponseMultiError, or nil if none found.
func (m *UpdateWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkspaceResponseValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkspaceResponseMultiError(errors)
	}

	return nil
}

// UpdateWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkspaceResponseMultiError) AllErrors() []error { return m }

// UpdateWorkspaceResponseValidationError is the validation error returned by
// UpdateWorkspaceResponse.Validate if the designated constraints aren't met.
type UpdateWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkspaceResponseValidationError) ErrorName() string {
	return "UpdateWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkspaceResponseValidationError{}

// Validate checks the field values on DeleteWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkspaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkspaceResponseMultiError, or nil if none found.
func (m *DeleteWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteWorkspaceResponseMultiError(errors)
	}

	return nil
}

// DeleteWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkspaceResponseMultiError) AllErrors() []error { return m }

// DeleteWorkspaceResponseValidationError is the validation error returned by
// DeleteWorkspaceResponse.Validate if the designated constraints aren't met.
type DeleteWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkspaceResponseValidationError) ErrorName() string {
	return "DeleteWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkspaceResponseValidationError{}

// Validate checks the field values on GetAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountResponseMultiError, or nil if none found.
func (m *GetAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountResponseMultiError(errors)
	}

	return nil
}

// GetAccountResponseMultiError is an error wrapping multiple validation errors
// returned by GetAccountResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountResponseMultiError) AllErrors() []error { return m }

// GetAccountResponseValidationError is the validation error returned by
// GetAccountResponse.Validate if the designated constraints aren't met.
type GetAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountResponseValidationError) ErrorName() string {
	return "GetAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountResponseValidationError{}

// Validate checks the field values on UpdateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountResponseMultiError, or nil if none found.
func (m *UpdateAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAccountResponseMultiError(errors)
	}

	return nil
}

// UpdateAccountResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountResponseMultiError) AllErrors() []error { return m }

// UpdateAccountResponseValidationError is the validation error returned by
// UpdateAccountResponse.Validate if the designated constraints aren't met.
type UpdateAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountResponseValidationError) ErrorName() string {
	return "UpdateAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountResponseValidationError{}

// Validate checks the field values on DeleteAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccountResponseMultiError, or nil if none found.
func (m *DeleteAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteAccountResponseMultiError(errors)
	}

	return nil
}

// DeleteAccountResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountResponseMultiError) AllErrors() []error { return m }

// DeleteAccountResponseValidationError is the validation error returned by
// DeleteAccountResponse.Validate if the designated constraints aren't met.
type DeleteAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountResponseValidationError) ErrorName() string {
	return "DeleteAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountResponseValidationError{}

// Validate checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountResponseMultiError, or nil if none found.
func (m *CreateAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccountResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitialWorkspaceId

	if len(errors) > 0 {
		return CreateAccountResponseMultiError(errors)
	}

	return nil
}

// CreateAccountResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountResponseMultiError) AllErrors() []error { return m }

// CreateAccountResponseValidationError is the validation error returned by
// CreateAccountResponse.Validate if the designated constraints aren't met.
type CreateAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountResponseValidationError) ErrorName() string {
	return "CreateAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountResponseValidationError{}

// Validate checks the field values on GetWorkflowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkflowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkflowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkflowResponseMultiError, or nil if none found.
func (m *GetWorkflowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkflowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkflowResponseValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkflowResponseValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkflowResponseValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWorkflowResponseMultiError(errors)
	}

	return nil
}

// GetWorkflowResponseMultiError is an error wrapping multiple validation
// errors returned by GetWorkflowResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWorkflowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkflowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkflowResponseMultiError) AllErrors() []error { return m }

// GetWorkflowResponseValidationError is the validation error returned by
// GetWorkflowResponse.Validate if the designated constraints aren't met.
type GetWorkflowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkflowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkflowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkflowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkflowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkflowResponseValidationError) ErrorName() string {
	return "GetWorkflowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkflowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkflowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkflowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkflowResponseValidationError{}

// Validate checks the field values on UpdateWorkflowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkflowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkflowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkflowResponseMultiError, or nil if none found.
func (m *UpdateWorkflowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkflowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkflowResponseValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkflowResponseValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkflowResponseValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkflowResponseMultiError(errors)
	}

	return nil
}

// UpdateWorkflowResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkflowResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkflowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkflowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkflowResponseMultiError) AllErrors() []error { return m }

// UpdateWorkflowResponseValidationError is the validation error returned by
// UpdateWorkflowResponse.Validate if the designated constraints aren't met.
type UpdateWorkflowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkflowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkflowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkflowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkflowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkflowResponseValidationError) ErrorName() string {
	return "UpdateWorkflowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkflowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkflowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkflowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkflowResponseValidationError{}

// Validate checks the field values on CreateWorkflowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkflowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkflowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkflowResponseMultiError, or nil if none found.
func (m *CreateWorkflowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkflowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkflowResponseValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkflowResponseValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkflowResponseValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWorkflowResponseMultiError(errors)
	}

	return nil
}

// CreateWorkflowResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWorkflowResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkflowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkflowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkflowResponseMultiError) AllErrors() []error { return m }

// CreateWorkflowResponseValidationError is the validation error returned by
// CreateWorkflowResponse.Validate if the designated constraints aren't met.
type CreateWorkflowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkflowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkflowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkflowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkflowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkflowResponseValidationError) ErrorName() string {
	return "CreateWorkflowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkflowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkflowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkflowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkflowResponseValidationError{}

// Validate checks the field values on CreateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTenantRequestMultiError, or nil if none found.
func (m *CreateTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTenant() == nil {
		err := CreateTenantRequestValidationError{
			field:  "Tenant",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTenantRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTenantRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTenantRequestValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOrganizationId() <= 0 {
		err := CreateTenantRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateTenantRequestMultiError(errors)
	}

	return nil
}

// CreateTenantRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantRequestMultiError) AllErrors() []error { return m }

// CreateTenantRequestValidationError is the validation error returned by
// CreateTenantRequest.Validate if the designated constraints aren't met.
type CreateTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantRequestValidationError) ErrorName() string {
	return "CreateTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantRequestValidationError{}

// Validate checks the field values on CreateTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTenantResponseMultiError, or nil if none found.
func (m *CreateTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	if len(errors) > 0 {
		return CreateTenantResponseMultiError(errors)
	}

	return nil
}

// CreateTenantResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantResponseMultiError) AllErrors() []error { return m }

// CreateTenantResponseValidationError is the validation error returned by
// CreateTenantResponse.Validate if the designated constraints aren't met.
type CreateTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantResponseValidationError) ErrorName() string {
	return "CreateTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantResponseValidationError{}

// Validate checks the field values on GetTenantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantRequestMultiError, or nil if none found.
func (m *GetTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTenantId() <= 0 {
		err := GetTenantRequestValidationError{
			field:  "TenantId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrganizationId() <= 0 {
		err := GetTenantRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTenantRequestMultiError(errors)
	}

	return nil
}

// GetTenantRequestMultiError is an error wrapping multiple validation errors
// returned by GetTenantRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantRequestMultiError) AllErrors() []error { return m }

// GetTenantRequestValidationError is the validation error returned by
// GetTenantRequest.Validate if the designated constraints aren't met.
type GetTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantRequestValidationError) ErrorName() string { return "GetTenantRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantRequestValidationError{}

// Validate checks the field values on GetTenantResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantResponseMultiError, or nil if none found.
func (m *GetTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTenantResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTenantResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTenantResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTenantResponseMultiError(errors)
	}

	return nil
}

// GetTenantResponseMultiError is an error wrapping multiple validation errors
// returned by GetTenantResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantResponseMultiError) AllErrors() []error { return m }

// GetTenantResponseValidationError is the validation error returned by
// GetTenantResponse.Validate if the designated constraints aren't met.
type GetTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantResponseValidationError) ErrorName() string {
	return "GetTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantResponseValidationError{}

// Validate checks the field values on UpdateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTenantRequestMultiError, or nil if none found.
func (m *UpdateTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTenant() == nil {
		err := UpdateTenantRequestValidationError{
			field:  "Tenant",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTenantRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTenantRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTenantRequestValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTenantRequestMultiError(errors)
	}

	return nil
}

// UpdateTenantRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTenantRequestMultiError) AllErrors() []error { return m }

// UpdateTenantRequestValidationError is the validation error returned by
// UpdateTenantRequest.Validate if the designated constraints aren't met.
type UpdateTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTenantRequestValidationError) ErrorName() string {
	return "UpdateTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTenantRequestValidationError{}

// Validate checks the field values on UpdateTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTenantResponseMultiError, or nil if none found.
func (m *UpdateTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTenantResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTenantResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTenantResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTenantResponseMultiError(errors)
	}

	return nil
}

// UpdateTenantResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTenantResponseMultiError) AllErrors() []error { return m }

// UpdateTenantResponseValidationError is the validation error returned by
// UpdateTenantResponse.Validate if the designated constraints aren't met.
type UpdateTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTenantResponseValidationError) ErrorName() string {
	return "UpdateTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTenantResponseValidationError{}

// Validate checks the field values on DeleteTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTenantRequestMultiError, or nil if none found.
func (m *DeleteTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTenantId() <= 0 {
		err := DeleteTenantRequestValidationError{
			field:  "TenantId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrganizationId() <= 0 {
		err := DeleteTenantRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTenantRequestMultiError(errors)
	}

	return nil
}

// DeleteTenantRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTenantRequestMultiError) AllErrors() []error { return m }

// DeleteTenantRequestValidationError is the validation error returned by
// DeleteTenantRequest.Validate if the designated constraints aren't met.
type DeleteTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTenantRequestValidationError) ErrorName() string {
	return "DeleteTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTenantRequestValidationError{}

// Validate checks the field values on DeleteTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTenantResponseMultiError, or nil if none found.
func (m *DeleteTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteTenantResponseMultiError(errors)
	}

	return nil
}

// DeleteTenantResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTenantResponseMultiError) AllErrors() []error { return m }

// DeleteTenantResponseValidationError is the validation error returned by
// DeleteTenantResponse.Validate if the designated constraints aren't met.
type DeleteTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTenantResponseValidationError) ErrorName() string {
	return "DeleteTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTenantResponseValidationError{}

// Validate checks the field values on ListTenantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTenantsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantsRequestMultiError, or nil if none found.
func (m *ListTenantsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListTenantsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNumber

	if m.GetOrganizationId() <= 0 {
		err := ListTenantsRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTenantsRequestMultiError(errors)
	}

	return nil
}

// ListTenantsRequestMultiError is an error wrapping multiple validation errors
// returned by ListTenantsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTenantsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantsRequestMultiError) AllErrors() []error { return m }

// ListTenantsRequestValidationError is the validation error returned by
// ListTenantsRequest.Validate if the designated constraints aren't met.
type ListTenantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantsRequestValidationError) ErrorName() string {
	return "ListTenantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantsRequestValidationError{}

// Validate checks the field values on ListTenantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTenantsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantsResponseMultiError, or nil if none found.
func (m *ListTenantsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTenants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTenantsResponseValidationError{
						field:  fmt.Sprintf("Tenants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTenantsResponseValidationError{
						field:  fmt.Sprintf("Tenants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTenantsResponseValidationError{
					field:  fmt.Sprintf("Tenants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return ListTenantsResponseMultiError(errors)
	}

	return nil
}

// ListTenantsResponseMultiError is an error wrapping multiple validation
// errors returned by ListTenantsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTenantsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantsResponseMultiError) AllErrors() []error { return m }

// ListTenantsResponseValidationError is the validation error returned by
// ListTenantsResponse.Validate if the designated constraints aren't met.
type ListTenantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantsResponseValidationError) ErrorName() string {
	return "ListTenantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantsResponseValidationError{}

// Validate checks the field values on CreateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationRequestMultiError, or nil if none found.
func (m *CreateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganization() == nil {
		err := CreateOrganizationRequestValidationError{
			field:  "Organization",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationRequestValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationRequestValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationRequestValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationRequestValidationError is the validation error returned by
// CreateOrganizationRequest.Validate if the designated constraints aren't met.
type CreateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationRequestValidationError) ErrorName() string {
	return "CreateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationRequestValidationError{}

// Validate checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationResponseMultiError, or nil if none found.
func (m *CreateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationResponseValidationError is the validation error returned
// by CreateOrganizationResponse.Validate if the designated constraints aren't met.
type CreateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationResponseValidationError) ErrorName() string {
	return "CreateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationResponseValidationError{}

// Validate checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRequestMultiError, or nil if none found.
func (m *GetOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetOrganizationRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRequestMultiError) AllErrors() []error { return m }

// GetOrganizationRequestValidationError is the validation error returned by
// GetOrganizationRequest.Validate if the designated constraints aren't met.
type GetOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRequestValidationError) ErrorName() string {
	return "GetOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRequestValidationError{}

// Validate checks the field values on GetOrganizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationResponseMultiError, or nil if none found.
func (m *GetOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationResponseMultiError) AllErrors() []error { return m }

// GetOrganizationResponseValidationError is the validation error returned by
// GetOrganizationResponse.Validate if the designated constraints aren't met.
type GetOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationResponseValidationError) ErrorName() string {
	return "GetOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationResponseValidationError{}

// Validate checks the field values on UpdateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationRequestMultiError, or nil if none found.
func (m *UpdateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganization() == nil {
		err := UpdateOrganizationRequestValidationError{
			field:  "Organization",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationRequestValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationRequestValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationRequestValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationRequestValidationError is the validation error returned by
// UpdateOrganizationRequest.Validate if the designated constraints aren't met.
type UpdateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationRequestValidationError) ErrorName() string {
	return "UpdateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationRequestValidationError{}

// Validate checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationResponseMultiError, or nil if none found.
func (m *UpdateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationResponseValidationError is the validation error returned
// by UpdateOrganizationResponse.Validate if the designated constraints aren't met.
type UpdateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationResponseValidationError) ErrorName() string {
	return "UpdateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationResponseValidationError{}

// Validate checks the field values on DeleteOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationRequestMultiError, or nil if none found.
func (m *DeleteOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteOrganizationRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOrganizationRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationRequestValidationError is the validation error returned by
// DeleteOrganizationRequest.Validate if the designated constraints aren't met.
type DeleteOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationRequestValidationError) ErrorName() string {
	return "DeleteOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationRequestValidationError{}

// Validate checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationResponseMultiError, or nil if none found.
func (m *DeleteOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteOrganizationResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationResponseValidationError is the validation error returned
// by DeleteOrganizationResponse.Validate if the designated constraints aren't met.
type DeleteOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationResponseValidationError) ErrorName() string {
	return "DeleteOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationResponseValidationError{}

// Validate checks the field values on ListOrganizationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsRequestMultiError, or nil if none found.
func (m *ListOrganizationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListOrganizationsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNumber

	if len(errors) > 0 {
		return ListOrganizationsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationsRequestValidationError is the validation error returned by
// ListOrganizationsRequest.Validate if the designated constraints aren't met.
type ListOrganizationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsRequestValidationError) ErrorName() string {
	return "ListOrganizationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsRequestValidationError{}

// Validate checks the field values on ListOrganizationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsResponseMultiError, or nil if none found.
func (m *ListOrganizationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return ListOrganizationsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListOrganizationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationsResponseValidationError is the validation error returned by
// ListOrganizationsResponse.Validate if the designated constraints aren't met.
type ListOrganizationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsResponseValidationError) ErrorName() string {
	return "ListOrganizationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsResponseValidationError{}

// Validate checks the field values on
// GetWorkspaceAnalyticsResponse_JobSuccessRate with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceAnalyticsResponse_JobSuccessRate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetWorkspaceAnalyticsResponse_JobSuccessRate with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetWorkspaceAnalyticsResponse_JobSuccessRateMultiError, or nil if none found.
func (m *GetWorkspaceAnalyticsResponse_JobSuccessRate) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceAnalyticsResponse_JobSuccessRate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowId

	// no validation rules for SuccessRate

	// no validation rules for TotalRuns

	if len(errors) > 0 {
		return GetWorkspaceAnalyticsResponse_JobSuccessRateMultiError(errors)
	}

	return nil
}

// GetWorkspaceAnalyticsResponse_JobSuccessRateMultiError is an error wrapping
// multiple validation errors returned by
// GetWorkspaceAnalyticsResponse_JobSuccessRate.ValidateAll() if the
// designated constraints aren't met.
type GetWorkspaceAnalyticsResponse_JobSuccessRateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceAnalyticsResponse_JobSuccessRateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceAnalyticsResponse_JobSuccessRateMultiError) AllErrors() []error { return m }

// GetWorkspaceAnalyticsResponse_JobSuccessRateValidationError is the
// validation error returned by
// GetWorkspaceAnalyticsResponse_JobSuccessRate.Validate if the designated
// constraints aren't met.
type GetWorkspaceAnalyticsResponse_JobSuccessRateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceAnalyticsResponse_JobSuccessRateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceAnalyticsResponse_JobSuccessRateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceAnalyticsResponse_JobSuccessRateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceAnalyticsResponse_JobSuccessRateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceAnalyticsResponse_JobSuccessRateValidationError) ErrorName() string {
	return "GetWorkspaceAnalyticsResponse_JobSuccessRateValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceAnalyticsResponse_JobSuccessRateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceAnalyticsResponse_JobSuccessRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceAnalyticsResponse_JobSuccessRateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceAnalyticsResponse_JobSuccessRateValidationError{}
