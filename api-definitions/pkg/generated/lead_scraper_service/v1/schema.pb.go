// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: lead_scraper_service/v1/schema.proto

package lead_scraper_servicev1

import (
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BackgroundJobStatus represents the possible states of a background job.
// This enum is used to track the lifecycle of asynchronous tasks like scraping jobs.
//
// State transitions:
// 1. QUEUED -> IN_PROGRESS
// 2. IN_PROGRESS -> COMPLETED/FAILED/CANCELLED/TIMED_OUT
//
// Usage example:
// ```go
//
//	job := &ScrapingJob{
//	    Status: BackgroundJobStatus_BACKGROUND_JOB_STATUS_IN_PROGRESS,
//	}
//
// ```
type BackgroundJobStatus int32

const (
	// Default state, should not be used explicitly
	BackgroundJobStatus_BACKGROUND_JOB_STATUS_UNSPECIFIED BackgroundJobStatus = 0
	// Job is queued and waiting to be processed
	BackgroundJobStatus_BACKGROUND_JOB_STATUS_QUEUED BackgroundJobStatus = 1
	// Job is currently being processed
	BackgroundJobStatus_BACKGROUND_JOB_STATUS_IN_PROGRESS BackgroundJobStatus = 2
	// Job has completed successfully
	BackgroundJobStatus_BACKGROUND_JOB_STATUS_COMPLETED BackgroundJobStatus = 3
	// Job encountered an error and failed
	BackgroundJobStatus_BACKGROUND_JOB_STATUS_FAILED BackgroundJobStatus = 4
	// Job was manually cancelled by user
	BackgroundJobStatus_BACKGROUND_JOB_STATUS_CANCELLED BackgroundJobStatus = 5
	// Job exceeded its maximum execution time
	BackgroundJobStatus_BACKGROUND_JOB_STATUS_TIMED_OUT BackgroundJobStatus = 6
)

// Enum value maps for BackgroundJobStatus.
var (
	BackgroundJobStatus_name = map[int32]string{
		0: "BACKGROUND_JOB_STATUS_UNSPECIFIED",
		1: "BACKGROUND_JOB_STATUS_QUEUED",
		2: "BACKGROUND_JOB_STATUS_IN_PROGRESS",
		3: "BACKGROUND_JOB_STATUS_COMPLETED",
		4: "BACKGROUND_JOB_STATUS_FAILED",
		5: "BACKGROUND_JOB_STATUS_CANCELLED",
		6: "BACKGROUND_JOB_STATUS_TIMED_OUT",
	}
	BackgroundJobStatus_value = map[string]int32{
		"BACKGROUND_JOB_STATUS_UNSPECIFIED": 0,
		"BACKGROUND_JOB_STATUS_QUEUED":      1,
		"BACKGROUND_JOB_STATUS_IN_PROGRESS": 2,
		"BACKGROUND_JOB_STATUS_COMPLETED":   3,
		"BACKGROUND_JOB_STATUS_FAILED":      4,
		"BACKGROUND_JOB_STATUS_CANCELLED":   5,
		"BACKGROUND_JOB_STATUS_TIMED_OUT":   6,
	}
)

func (x BackgroundJobStatus) Enum() *BackgroundJobStatus {
	p := new(BackgroundJobStatus)
	*p = x
	return p
}

func (x BackgroundJobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackgroundJobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[0].Descriptor()
}

func (BackgroundJobStatus) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[0]
}

func (x BackgroundJobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackgroundJobStatus.Descriptor instead.
func (BackgroundJobStatus) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{0}
}

// Account represents a user account within the workspace service.
// It serves as the top-level container for all user-specific workspaces and settings.
//
// Key features:
// - Unique identification via Auth0
// - Organization and tenant context
// - Audit timestamps
// - Associated scraping jobs
//
// Database considerations:
// - Uses GORM for ORM mapping
// - Includes indexes for efficient querying
// - Supports soft deletes via deleted_at
//
// Usage example:
// ```go
//
//	account := &Account{
//	    AuthPlatformUserId: "auth0|123",
//	    OrgId: "org_123",
//	    TenantId: "tenant_456",
//	}
//
// ```
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the account
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Auth0 user identifier for authentication
	AuthPlatformUserId string `protobuf:"bytes,2,opt,name=auth_platform_user_id,json=authPlatformUserId,proto3" json:"auth_platform_user_id,omitempty"`
	// Organization identifier for multi-org support
	OrgId string `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Tenant identifier for multi-tenant support
	TenantId string `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// User's email address
	Email string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	// Timestamp of last modification
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Soft delete timestamp
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Account creation timestamp
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Associated scraping jobs for this account
	ScrapingJobs []*ScrapingJob `protobuf:"bytes,9,rep,name=scraping_jobs,json=scrapingJobs,proto3" json:"scraping_jobs,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{0}
}

func (x *Account) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Account) GetAuthPlatformUserId() string {
	if x != nil {
		return x.AuthPlatformUserId
	}
	return ""
}

func (x *Account) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Account) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Account) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Account) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *Account) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Account) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Account) GetScrapingJobs() []*ScrapingJob {
	if x != nil {
		return x.ScrapingJobs
	}
	return nil
}

// ScrapingJob represents a Google Maps scraping task.
// This message defines both the configuration and current state of a scraping operation.
//
// Key components:
// - Basic metadata (id, name, timestamps)
// - Job status tracking
// - Search configuration parameters
// - Geographic settings
// - Performance options
// - Multi-tenant context
//
// Database considerations:
// - Stored in "scraping_jobs" table
// - Uses GORM for ORM mapping
// - Includes foreign key to Account
// - Supports soft deletes
//
// Usage example:
// ```go
//
//	job := &ScrapingJob{
//	    Name: "Athens Cafes",
//	    Status: BackgroundJobStatus_BACKGROUND_JOB_STATUS_QUEUED,
//	    Keywords: []string{"cafe", "coffee"},
//	    Lang: "el",
//	    Zoom: 15,
//	    FastMode: true,
//	    MaxTime: 3600,
//	}
//
// ```
type ScrapingJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the job
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human-readable name for the job
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Job creation timestamp
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Current status of the job
	Status BackgroundJobStatus `protobuf:"varint,4,opt,name=status,proto3,enum=lead_scraper_service.v1.BackgroundJobStatus" json:"status,omitempty"`
	// Search terms for Google Maps
	Keywords []string `protobuf:"bytes,5,rep,name=keywords,proto3" json:"keywords,omitempty"`
	// ISO 639-1 language code (e.g., "en", "el")
	Lang string `protobuf:"bytes,6,opt,name=lang,proto3" json:"lang,omitempty"`
	// Map zoom level (1-20)
	Zoom int32 `protobuf:"varint,7,opt,name=zoom,proto3" json:"zoom,omitempty"`
	// Latitude coordinate
	Lat string `protobuf:"bytes,8,opt,name=lat,proto3" json:"lat,omitempty"`
	// Longitude coordinate
	Lon string `protobuf:"bytes,9,opt,name=lon,proto3" json:"lon,omitempty"`
	// Enable faster but potentially less thorough scraping
	FastMode bool `protobuf:"varint,10,opt,name=fast_mode,json=fastMode,proto3" json:"fast_mode,omitempty"`
	// Search radius in meters
	Radius int32 `protobuf:"varint,11,opt,name=radius,proto3" json:"radius,omitempty"`
	// Depth of recursive search (1-10)
	Depth int32 `protobuf:"varint,12,opt,name=depth,proto3" json:"depth,omitempty"`
	// Whether to extract email addresses
	Email bool `protobuf:"varint,13,opt,name=email,proto3" json:"email,omitempty"`
	// Maximum execution time in seconds
	MaxTime int32 `protobuf:"varint,14,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	// List of proxy servers to use
	Proxies []string `protobuf:"bytes,15,rep,name=proxies,proto3" json:"proxies,omitempty"`
	// Last update timestamp
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Soft delete timestamp
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Account that created the jobs
	PayloadType string `protobuf:"bytes,21,opt,name=payload_type,json=payloadType,proto3" json:"payload_type,omitempty"`
	// Priority level of the job
	Priority int32 `protobuf:"varint,22,opt,name=priority,proto3" json:"priority,omitempty"`
	// Payload data
	Payload []byte `protobuf:"bytes,23,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ScrapingJob) Reset() {
	*x = ScrapingJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrapingJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrapingJob) ProtoMessage() {}

func (x *ScrapingJob) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrapingJob.ProtoReflect.Descriptor instead.
func (*ScrapingJob) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{1}
}

func (x *ScrapingJob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScrapingJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScrapingJob) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ScrapingJob) GetStatus() BackgroundJobStatus {
	if x != nil {
		return x.Status
	}
	return BackgroundJobStatus_BACKGROUND_JOB_STATUS_UNSPECIFIED
}

func (x *ScrapingJob) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *ScrapingJob) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *ScrapingJob) GetZoom() int32 {
	if x != nil {
		return x.Zoom
	}
	return 0
}

func (x *ScrapingJob) GetLat() string {
	if x != nil {
		return x.Lat
	}
	return ""
}

func (x *ScrapingJob) GetLon() string {
	if x != nil {
		return x.Lon
	}
	return ""
}

func (x *ScrapingJob) GetFastMode() bool {
	if x != nil {
		return x.FastMode
	}
	return false
}

func (x *ScrapingJob) GetRadius() int32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *ScrapingJob) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *ScrapingJob) GetEmail() bool {
	if x != nil {
		return x.Email
	}
	return false
}

func (x *ScrapingJob) GetMaxTime() int32 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

func (x *ScrapingJob) GetProxies() []string {
	if x != nil {
		return x.Proxies
	}
	return nil
}

func (x *ScrapingJob) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ScrapingJob) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *ScrapingJob) GetPayloadType() string {
	if x != nil {
		return x.PayloadType
	}
	return ""
}

func (x *ScrapingJob) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ScrapingJob) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_lead_scraper_service_v1_schema_proto protoreflect.FileDescriptor

var file_lead_scraper_service_v1_schema_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf6, 0x03, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x13, 0xba, 0xb9,
	0x19, 0x0f, 0x0a, 0x0d, 0x5a, 0x0b, 0x69, 0x64, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xba, 0xb9, 0x19, 0x22, 0x0a, 0x20, 0x52, 0x1e, 0x69, 0x64,
	0x78, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x12, 0x61, 0x75,
	0x74, 0x68, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x4a, 0x6f, 0x62, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x3a, 0x10, 0xba, 0xb9, 0x19,
	0x0c, 0x08, 0x01, 0x1a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x96, 0x05,
	0x0a, 0x0b, 0x53, 0x63, 0x72, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x3a,
	0x15, 0xba, 0xb9, 0x19, 0x11, 0x08, 0x01, 0x1a, 0x0d, 0x73, 0x63, 0x72, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x2a, 0x96, 0x02, 0x0a, 0x13, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x21, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4a, 0x4f, 0x42,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x41, 0x43, 0x4b, 0x47,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x23,
	0x0a, 0x1f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4a, 0x4f, 0x42,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x41,
	0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x42,
	0xb8, 0x02, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42,
	0x0b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x96,
	0x01, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x6c, 0x65, 0x61, 0x64, 0x2d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2f, 0x6c, 0x65, 0x61, 0x64, 0x2d, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31,
	0x3b, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4c, 0x58, 0x58, 0xaa, 0x02, 0x15,
	0x4c, 0x65, 0x61, 0x64, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x15, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x21,
	0x4c, 0x65, 0x61, 0x64, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x16, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_lead_scraper_service_v1_schema_proto_rawDescOnce sync.Once
	file_lead_scraper_service_v1_schema_proto_rawDescData = file_lead_scraper_service_v1_schema_proto_rawDesc
)

func file_lead_scraper_service_v1_schema_proto_rawDescGZIP() []byte {
	file_lead_scraper_service_v1_schema_proto_rawDescOnce.Do(func() {
		file_lead_scraper_service_v1_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_lead_scraper_service_v1_schema_proto_rawDescData)
	})
	return file_lead_scraper_service_v1_schema_proto_rawDescData
}

var file_lead_scraper_service_v1_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_lead_scraper_service_v1_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_lead_scraper_service_v1_schema_proto_goTypes = []interface{}{
	(BackgroundJobStatus)(0),      // 0: lead_scraper_service.v1.BackgroundJobStatus
	(*Account)(nil),               // 1: lead_scraper_service.v1.Account
	(*ScrapingJob)(nil),           // 2: lead_scraper_service.v1.ScrapingJob
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_lead_scraper_service_v1_schema_proto_depIdxs = []int32{
	3, // 0: lead_scraper_service.v1.Account.last_modified_at:type_name -> google.protobuf.Timestamp
	3, // 1: lead_scraper_service.v1.Account.deleted_at:type_name -> google.protobuf.Timestamp
	3, // 2: lead_scraper_service.v1.Account.created_at:type_name -> google.protobuf.Timestamp
	2, // 3: lead_scraper_service.v1.Account.scraping_jobs:type_name -> lead_scraper_service.v1.ScrapingJob
	3, // 4: lead_scraper_service.v1.ScrapingJob.created_at:type_name -> google.protobuf.Timestamp
	0, // 5: lead_scraper_service.v1.ScrapingJob.status:type_name -> lead_scraper_service.v1.BackgroundJobStatus
	3, // 6: lead_scraper_service.v1.ScrapingJob.updated_at:type_name -> google.protobuf.Timestamp
	3, // 7: lead_scraper_service.v1.ScrapingJob.deleted_at:type_name -> google.protobuf.Timestamp
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_lead_scraper_service_v1_schema_proto_init() }
func file_lead_scraper_service_v1_schema_proto_init() {
	if File_lead_scraper_service_v1_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lead_scraper_service_v1_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrapingJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lead_scraper_service_v1_schema_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lead_scraper_service_v1_schema_proto_goTypes,
		DependencyIndexes: file_lead_scraper_service_v1_schema_proto_depIdxs,
		EnumInfos:         file_lead_scraper_service_v1_schema_proto_enumTypes,
		MessageInfos:      file_lead_scraper_service_v1_schema_proto_msgTypes,
	}.Build()
	File_lead_scraper_service_v1_schema_proto = out.File
	file_lead_scraper_service_v1_schema_proto_rawDesc = nil
	file_lead_scraper_service_v1_schema_proto_goTypes = nil
	file_lead_scraper_service_v1_schema_proto_depIdxs = nil
}
