// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: lead_scraper_service/v1/schema.proto

package lead_scraper_servicev1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BackgroundJobStatus represents the possible states of a background job.
// This enum is used to track the lifecycle of asynchronous tasks like scraping jobs.
//
// State transitions:
// 1. QUEUED -> IN_PROGRESS
// 2. IN_PROGRESS -> COMPLETED/FAILED/CANCELLED/TIMED_OUT
//
// Usage example:
// ```go
//
//	job := &ScrapingJob{
//	    Status: BackgroundJobStatus_BACKGROUND_JOB_STATUS_IN_PROGRESS,
//	}
//
// ```
type BackgroundJobStatus int32

const (
	// Default state, should not be used explicitly
	BackgroundJobStatus_BACKGROUND_JOB_STATUS_UNSPECIFIED BackgroundJobStatus = 0
	// Job is queued and waiting to be processed
	BackgroundJobStatus_BACKGROUND_JOB_STATUS_QUEUED BackgroundJobStatus = 1
	// Job is currently being processed
	BackgroundJobStatus_BACKGROUND_JOB_STATUS_IN_PROGRESS BackgroundJobStatus = 2
	// Job has completed successfully
	BackgroundJobStatus_BACKGROUND_JOB_STATUS_COMPLETED BackgroundJobStatus = 3
	// Job encountered an error and failed
	BackgroundJobStatus_BACKGROUND_JOB_STATUS_FAILED BackgroundJobStatus = 4
	// Job was manually cancelled by user
	BackgroundJobStatus_BACKGROUND_JOB_STATUS_CANCELLED BackgroundJobStatus = 5
	// Job exceeded its maximum execution time
	BackgroundJobStatus_BACKGROUND_JOB_STATUS_TIMED_OUT BackgroundJobStatus = 6
)

// Enum value maps for BackgroundJobStatus.
var (
	BackgroundJobStatus_name = map[int32]string{
		0: "BACKGROUND_JOB_STATUS_UNSPECIFIED",
		1: "BACKGROUND_JOB_STATUS_QUEUED",
		2: "BACKGROUND_JOB_STATUS_IN_PROGRESS",
		3: "BACKGROUND_JOB_STATUS_COMPLETED",
		4: "BACKGROUND_JOB_STATUS_FAILED",
		5: "BACKGROUND_JOB_STATUS_CANCELLED",
		6: "BACKGROUND_JOB_STATUS_TIMED_OUT",
	}
	BackgroundJobStatus_value = map[string]int32{
		"BACKGROUND_JOB_STATUS_UNSPECIFIED": 0,
		"BACKGROUND_JOB_STATUS_QUEUED":      1,
		"BACKGROUND_JOB_STATUS_IN_PROGRESS": 2,
		"BACKGROUND_JOB_STATUS_COMPLETED":   3,
		"BACKGROUND_JOB_STATUS_FAILED":      4,
		"BACKGROUND_JOB_STATUS_CANCELLED":   5,
		"BACKGROUND_JOB_STATUS_TIMED_OUT":   6,
	}
)

func (x BackgroundJobStatus) Enum() *BackgroundJobStatus {
	p := new(BackgroundJobStatus)
	*p = x
	return p
}

func (x BackgroundJobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackgroundJobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[0].Descriptor()
}

func (BackgroundJobStatus) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[0]
}

func (x BackgroundJobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackgroundJobStatus.Descriptor instead.
func (BackgroundJobStatus) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{0}
}

// WorkflowStatus represents the current state of a scraping workflow.
// This enum tracks the lifecycle of automated, recurring scraping configurations.
//
// State transitions:
// 1. DRAFT -> ACTIVE/ARCHIVED
// 2. ACTIVE -> PAUSED/FAILED/COMPLETED/ARCHIVED
// 3. PAUSED -> ACTIVE/ARCHIVED
// 4. FAILED -> ACTIVE/ARCHIVED
type WorkflowStatus int32

const (
	// Default state, should not be used explicitly
	WorkflowStatus_WORKFLOW_STATUS_UNSPECIFIED WorkflowStatus = 0
	// Initial draft state before activation
	WorkflowStatus_WORKFLOW_STATUS_DRAFT WorkflowStatus = 1
	// Workflow is actively running on schedule
	WorkflowStatus_WORKFLOW_STATUS_ACTIVE WorkflowStatus = 2
	// Workflow is temporarily suspended
	WorkflowStatus_WORKFLOW_STATUS_PAUSED WorkflowStatus = 3
	// Workflow encountered an error
	WorkflowStatus_WORKFLOW_STATUS_FAILED WorkflowStatus = 4
	// Workflow completed all scheduled runs
	WorkflowStatus_WORKFLOW_STATUS_COMPLETED WorkflowStatus = 5
	// Workflow is archived (soft-deleted)
	WorkflowStatus_WORKFLOW_STATUS_ARCHIVED WorkflowStatus = 6
	// Workflow is pending approval
	WorkflowStatus_WORKFLOW_STATUS_PENDING_APPROVAL WorkflowStatus = 7
	// Workflow is being validated
	WorkflowStatus_WORKFLOW_STATUS_VALIDATING WorkflowStatus = 8
	// Workflow exceeded resource quotas
	WorkflowStatus_WORKFLOW_STATUS_QUOTA_EXCEEDED WorkflowStatus = 9
	// Workflow is running but with warnings
	WorkflowStatus_WORKFLOW_STATUS_WARNING WorkflowStatus = 10
)

// Enum value maps for WorkflowStatus.
var (
	WorkflowStatus_name = map[int32]string{
		0:  "WORKFLOW_STATUS_UNSPECIFIED",
		1:  "WORKFLOW_STATUS_DRAFT",
		2:  "WORKFLOW_STATUS_ACTIVE",
		3:  "WORKFLOW_STATUS_PAUSED",
		4:  "WORKFLOW_STATUS_FAILED",
		5:  "WORKFLOW_STATUS_COMPLETED",
		6:  "WORKFLOW_STATUS_ARCHIVED",
		7:  "WORKFLOW_STATUS_PENDING_APPROVAL",
		8:  "WORKFLOW_STATUS_VALIDATING",
		9:  "WORKFLOW_STATUS_QUOTA_EXCEEDED",
		10: "WORKFLOW_STATUS_WARNING",
	}
	WorkflowStatus_value = map[string]int32{
		"WORKFLOW_STATUS_UNSPECIFIED":      0,
		"WORKFLOW_STATUS_DRAFT":            1,
		"WORKFLOW_STATUS_ACTIVE":           2,
		"WORKFLOW_STATUS_PAUSED":           3,
		"WORKFLOW_STATUS_FAILED":           4,
		"WORKFLOW_STATUS_COMPLETED":        5,
		"WORKFLOW_STATUS_ARCHIVED":         6,
		"WORKFLOW_STATUS_PENDING_APPROVAL": 7,
		"WORKFLOW_STATUS_VALIDATING":       8,
		"WORKFLOW_STATUS_QUOTA_EXCEEDED":   9,
		"WORKFLOW_STATUS_WARNING":          10,
	}
)

func (x WorkflowStatus) Enum() *WorkflowStatus {
	p := new(WorkflowStatus)
	*p = x
	return p
}

func (x WorkflowStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[1].Descriptor()
}

func (WorkflowStatus) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[1]
}

func (x WorkflowStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowStatus.Descriptor instead.
func (WorkflowStatus) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{1}
}

// Billing
type Organization_BillingPlan int32

const (
	Organization_BILLING_PLAN_UNSPECIFIED Organization_BillingPlan = 0
	Organization_BILLING_PLAN_STARTUP     Organization_BillingPlan = 1
	Organization_BILLING_PLAN_BUSINESS    Organization_BillingPlan = 2
	Organization_BILLING_PLAN_ENTERPRISE  Organization_BillingPlan = 3
)

// Enum value maps for Organization_BillingPlan.
var (
	Organization_BillingPlan_name = map[int32]string{
		0: "BILLING_PLAN_UNSPECIFIED",
		1: "BILLING_PLAN_STARTUP",
		2: "BILLING_PLAN_BUSINESS",
		3: "BILLING_PLAN_ENTERPRISE",
	}
	Organization_BillingPlan_value = map[string]int32{
		"BILLING_PLAN_UNSPECIFIED": 0,
		"BILLING_PLAN_STARTUP":     1,
		"BILLING_PLAN_BUSINESS":    2,
		"BILLING_PLAN_ENTERPRISE":  3,
	}
)

func (x Organization_BillingPlan) Enum() *Organization_BillingPlan {
	p := new(Organization_BillingPlan)
	*p = x
	return p
}

func (x Organization_BillingPlan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Organization_BillingPlan) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[2].Descriptor()
}

func (Organization_BillingPlan) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[2]
}

func (x Organization_BillingPlan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Organization_BillingPlan.Descriptor instead.
func (Organization_BillingPlan) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{0, 0}
}

// Status
type Organization_Status int32

const (
	Organization_STATUS_UNSPECIFIED          Organization_Status = 0
	Organization_STATUS_ACTIVE               Organization_Status = 1
	Organization_STATUS_SUSPENDED            Organization_Status = 2
	Organization_STATUS_PENDING_VERIFICATION Organization_Status = 3
)

// Enum value maps for Organization_Status.
var (
	Organization_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_ACTIVE",
		2: "STATUS_SUSPENDED",
		3: "STATUS_PENDING_VERIFICATION",
	}
	Organization_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":          0,
		"STATUS_ACTIVE":               1,
		"STATUS_SUSPENDED":            2,
		"STATUS_PENDING_VERIFICATION": 3,
	}
)

func (x Organization_Status) Enum() *Organization_Status {
	p := new(Organization_Status)
	*p = x
	return p
}

func (x Organization_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Organization_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[3].Descriptor()
}

func (Organization_Status) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[3]
}

func (x Organization_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Organization_Status.Descriptor instead.
func (Organization_Status) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{0, 1}
}

// Status
type Tenant_Status int32

const (
	Tenant_STATUS_UNSPECIFIED Tenant_Status = 0
	Tenant_STATUS_ACTIVE      Tenant_Status = 1
	Tenant_STATUS_SUSPENDED   Tenant_Status = 2
	Tenant_STATUS_MAINTENANCE Tenant_Status = 3
)

// Enum value maps for Tenant_Status.
var (
	Tenant_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_ACTIVE",
		2: "STATUS_SUSPENDED",
		3: "STATUS_MAINTENANCE",
	}
	Tenant_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_ACTIVE":      1,
		"STATUS_SUSPENDED":   2,
		"STATUS_MAINTENANCE": 3,
	}
)

func (x Tenant_Status) Enum() *Tenant_Status {
	p := new(Tenant_Status)
	*p = x
	return p
}

func (x Tenant_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tenant_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[4].Descriptor()
}

func (Tenant_Status) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[4]
}

func (x Tenant_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tenant_Status.Descriptor instead.
func (Tenant_Status) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{1, 0}
}

// Plan Details
type Subscription_PlanTier int32

const (
	Subscription_PLAN_TIER_UNSPECIFIED  Subscription_PlanTier = 0
	Subscription_PLAN_TIER_FREE         Subscription_PlanTier = 1
	Subscription_PLAN_TIER_STARTER      Subscription_PlanTier = 2
	Subscription_PLAN_TIER_PROFESSIONAL Subscription_PlanTier = 3
	Subscription_PLAN_TIER_ENTERPRISE   Subscription_PlanTier = 4
)

// Enum value maps for Subscription_PlanTier.
var (
	Subscription_PlanTier_name = map[int32]string{
		0: "PLAN_TIER_UNSPECIFIED",
		1: "PLAN_TIER_FREE",
		2: "PLAN_TIER_STARTER",
		3: "PLAN_TIER_PROFESSIONAL",
		4: "PLAN_TIER_ENTERPRISE",
	}
	Subscription_PlanTier_value = map[string]int32{
		"PLAN_TIER_UNSPECIFIED":  0,
		"PLAN_TIER_FREE":         1,
		"PLAN_TIER_STARTER":      2,
		"PLAN_TIER_PROFESSIONAL": 3,
		"PLAN_TIER_ENTERPRISE":   4,
	}
)

func (x Subscription_PlanTier) Enum() *Subscription_PlanTier {
	p := new(Subscription_PlanTier)
	*p = x
	return p
}

func (x Subscription_PlanTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Subscription_PlanTier) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[5].Descriptor()
}

func (Subscription_PlanTier) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[5]
}

func (x Subscription_PlanTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Subscription_PlanTier.Descriptor instead.
func (Subscription_PlanTier) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{2, 0}
}

// Billing Mode
type Subscription_BillingMode int32

const (
	Subscription_BILLING_MODE_UNSPECIFIED Subscription_BillingMode = 0
	Subscription_BILLING_MODE_LICENSED    Subscription_BillingMode = 1 // Fixed price per seat
	Subscription_BILLING_MODE_METERED     Subscription_BillingMode = 2 // Usage-based
	Subscription_BILLING_MODE_HYBRID      Subscription_BillingMode = 3 // Base price + usage
)

// Enum value maps for Subscription_BillingMode.
var (
	Subscription_BillingMode_name = map[int32]string{
		0: "BILLING_MODE_UNSPECIFIED",
		1: "BILLING_MODE_LICENSED",
		2: "BILLING_MODE_METERED",
		3: "BILLING_MODE_HYBRID",
	}
	Subscription_BillingMode_value = map[string]int32{
		"BILLING_MODE_UNSPECIFIED": 0,
		"BILLING_MODE_LICENSED":    1,
		"BILLING_MODE_METERED":     2,
		"BILLING_MODE_HYBRID":      3,
	}
)

func (x Subscription_BillingMode) Enum() *Subscription_BillingMode {
	p := new(Subscription_BillingMode)
	*p = x
	return p
}

func (x Subscription_BillingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Subscription_BillingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[6].Descriptor()
}

func (Subscription_BillingMode) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[6]
}

func (x Subscription_BillingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Subscription_BillingMode.Descriptor instead.
func (Subscription_BillingMode) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{2, 1}
}

type Subscription_Interval int32

const (
	Subscription_INTERVAL_UNSPECIFIED Subscription_Interval = 0
	Subscription_INTERVAL_MONTHLY     Subscription_Interval = 1
	Subscription_INTERVAL_YEARLY      Subscription_Interval = 2
)

// Enum value maps for Subscription_Interval.
var (
	Subscription_Interval_name = map[int32]string{
		0: "INTERVAL_UNSPECIFIED",
		1: "INTERVAL_MONTHLY",
		2: "INTERVAL_YEARLY",
	}
	Subscription_Interval_value = map[string]int32{
		"INTERVAL_UNSPECIFIED": 0,
		"INTERVAL_MONTHLY":     1,
		"INTERVAL_YEARLY":      2,
	}
)

func (x Subscription_Interval) Enum() *Subscription_Interval {
	p := new(Subscription_Interval)
	*p = x
	return p
}

func (x Subscription_Interval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Subscription_Interval) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[7].Descriptor()
}

func (Subscription_Interval) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[7]
}

func (x Subscription_Interval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Subscription_Interval.Descriptor instead.
func (Subscription_Interval) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{2, 2}
}

// Payment Status
type Subscription_PaymentStatus int32

const (
	Subscription_PAYMENT_STATUS_UNSPECIFIED Subscription_PaymentStatus = 0
	Subscription_PAYMENT_STATUS_PAID        Subscription_PaymentStatus = 1
	Subscription_PAYMENT_STATUS_PAST_DUE    Subscription_PaymentStatus = 2
	Subscription_PAYMENT_STATUS_FAILED      Subscription_PaymentStatus = 3
	Subscription_PAYMENT_STATUS_CANCELED    Subscription_PaymentStatus = 4
)

// Enum value maps for Subscription_PaymentStatus.
var (
	Subscription_PaymentStatus_name = map[int32]string{
		0: "PAYMENT_STATUS_UNSPECIFIED",
		1: "PAYMENT_STATUS_PAID",
		2: "PAYMENT_STATUS_PAST_DUE",
		3: "PAYMENT_STATUS_FAILED",
		4: "PAYMENT_STATUS_CANCELED",
	}
	Subscription_PaymentStatus_value = map[string]int32{
		"PAYMENT_STATUS_UNSPECIFIED": 0,
		"PAYMENT_STATUS_PAID":        1,
		"PAYMENT_STATUS_PAST_DUE":    2,
		"PAYMENT_STATUS_FAILED":      3,
		"PAYMENT_STATUS_CANCELED":    4,
	}
)

func (x Subscription_PaymentStatus) Enum() *Subscription_PaymentStatus {
	p := new(Subscription_PaymentStatus)
	*p = x
	return p
}

func (x Subscription_PaymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Subscription_PaymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[8].Descriptor()
}

func (Subscription_PaymentStatus) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[8]
}

func (x Subscription_PaymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Subscription_PaymentStatus.Descriptor instead.
func (Subscription_PaymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{2, 3}
}

// Account status and permissions
type Account_AccountStatus int32

const (
	Account_ACCOUNT_STATUS_UNSPECIFIED          Account_AccountStatus = 0
	Account_ACCOUNT_STATUS_ACTIVE               Account_AccountStatus = 1
	Account_ACCOUNT_STATUS_SUSPENDED            Account_AccountStatus = 2
	Account_ACCOUNT_STATUS_PENDING_VERIFICATION Account_AccountStatus = 3
)

// Enum value maps for Account_AccountStatus.
var (
	Account_AccountStatus_name = map[int32]string{
		0: "ACCOUNT_STATUS_UNSPECIFIED",
		1: "ACCOUNT_STATUS_ACTIVE",
		2: "ACCOUNT_STATUS_SUSPENDED",
		3: "ACCOUNT_STATUS_PENDING_VERIFICATION",
	}
	Account_AccountStatus_value = map[string]int32{
		"ACCOUNT_STATUS_UNSPECIFIED":          0,
		"ACCOUNT_STATUS_ACTIVE":               1,
		"ACCOUNT_STATUS_SUSPENDED":            2,
		"ACCOUNT_STATUS_PENDING_VERIFICATION": 3,
	}
)

func (x Account_AccountStatus) Enum() *Account_AccountStatus {
	p := new(Account_AccountStatus)
	*p = x
	return p
}

func (x Account_AccountStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Account_AccountStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[9].Descriptor()
}

func (Account_AccountStatus) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[9]
}

func (x Account_AccountStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Account_AccountStatus.Descriptor instead.
func (Account_AccountStatus) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{3, 0}
}

// Result handling
type ScrapingWorkflow_OutputFormat int32

const (
	ScrapingWorkflow_OUTPUT_FORMAT_UNSPECIFIED ScrapingWorkflow_OutputFormat = 0
	ScrapingWorkflow_OUTPUT_FORMAT_JSON        ScrapingWorkflow_OutputFormat = 1
	ScrapingWorkflow_OUTPUT_FORMAT_CSV         ScrapingWorkflow_OutputFormat = 2
	ScrapingWorkflow_OUTPUT_FORMAT_BIGQUERY    ScrapingWorkflow_OutputFormat = 3
	ScrapingWorkflow_OUTPUT_FORMAT_POSTGRES    ScrapingWorkflow_OutputFormat = 4
)

// Enum value maps for ScrapingWorkflow_OutputFormat.
var (
	ScrapingWorkflow_OutputFormat_name = map[int32]string{
		0: "OUTPUT_FORMAT_UNSPECIFIED",
		1: "OUTPUT_FORMAT_JSON",
		2: "OUTPUT_FORMAT_CSV",
		3: "OUTPUT_FORMAT_BIGQUERY",
		4: "OUTPUT_FORMAT_POSTGRES",
	}
	ScrapingWorkflow_OutputFormat_value = map[string]int32{
		"OUTPUT_FORMAT_UNSPECIFIED": 0,
		"OUTPUT_FORMAT_JSON":        1,
		"OUTPUT_FORMAT_CSV":         2,
		"OUTPUT_FORMAT_BIGQUERY":    3,
		"OUTPUT_FORMAT_POSTGRES":    4,
	}
)

func (x ScrapingWorkflow_OutputFormat) Enum() *ScrapingWorkflow_OutputFormat {
	p := new(ScrapingWorkflow_OutputFormat)
	*p = x
	return p
}

func (x ScrapingWorkflow_OutputFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScrapingWorkflow_OutputFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[10].Descriptor()
}

func (ScrapingWorkflow_OutputFormat) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[10]
}

func (x ScrapingWorkflow_OutputFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScrapingWorkflow_OutputFormat.Descriptor instead.
func (ScrapingWorkflow_OutputFormat) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{6, 0}
}

// Financial Metrics
type Lead_RevenueRange int32

const (
	Lead_REVENUE_RANGE_UNSPECIFIED Lead_RevenueRange = 0
	Lead_REVENUE_RANGE_UNDER_100K  Lead_RevenueRange = 1
	Lead_REVENUE_RANGE_100K_TO_1M  Lead_RevenueRange = 2
	Lead_REVENUE_RANGE_1M_TO_10M   Lead_RevenueRange = 3
	Lead_REVENUE_RANGE_10M_TO_50M  Lead_RevenueRange = 4
	Lead_REVENUE_RANGE_OVER_50M    Lead_RevenueRange = 5
)

// Enum value maps for Lead_RevenueRange.
var (
	Lead_RevenueRange_name = map[int32]string{
		0: "REVENUE_RANGE_UNSPECIFIED",
		1: "REVENUE_RANGE_UNDER_100K",
		2: "REVENUE_RANGE_100K_TO_1M",
		3: "REVENUE_RANGE_1M_TO_10M",
		4: "REVENUE_RANGE_10M_TO_50M",
		5: "REVENUE_RANGE_OVER_50M",
	}
	Lead_RevenueRange_value = map[string]int32{
		"REVENUE_RANGE_UNSPECIFIED": 0,
		"REVENUE_RANGE_UNDER_100K":  1,
		"REVENUE_RANGE_100K_TO_1M":  2,
		"REVENUE_RANGE_1M_TO_10M":   3,
		"REVENUE_RANGE_10M_TO_50M":  4,
		"REVENUE_RANGE_OVER_50M":    5,
	}
)

func (x Lead_RevenueRange) Enum() *Lead_RevenueRange {
	p := new(Lead_RevenueRange)
	*p = x
	return p
}

func (x Lead_RevenueRange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Lead_RevenueRange) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[11].Descriptor()
}

func (Lead_RevenueRange) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[11]
}

func (x Lead_RevenueRange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Lead_RevenueRange.Descriptor instead.
func (Lead_RevenueRange) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{7, 0}
}

// Employee & HR Data
type Lead_EmployeeBenefit int32

const (
	Lead_EMPLOYEE_BENEFIT_UNSPECIFIED      Lead_EmployeeBenefit = 0
	Lead_EMPLOYEE_BENEFIT_HEALTH_INSURANCE Lead_EmployeeBenefit = 1
	Lead_EMPLOYEE_BENEFIT_RETIREMENT_PLAN  Lead_EmployeeBenefit = 2
	Lead_EMPLOYEE_BENEFIT_PAID_TIME_OFF    Lead_EmployeeBenefit = 3
	Lead_EMPLOYEE_BENEFIT_REMOTE_WORK      Lead_EmployeeBenefit = 4
)

// Enum value maps for Lead_EmployeeBenefit.
var (
	Lead_EmployeeBenefit_name = map[int32]string{
		0: "EMPLOYEE_BENEFIT_UNSPECIFIED",
		1: "EMPLOYEE_BENEFIT_HEALTH_INSURANCE",
		2: "EMPLOYEE_BENEFIT_RETIREMENT_PLAN",
		3: "EMPLOYEE_BENEFIT_PAID_TIME_OFF",
		4: "EMPLOYEE_BENEFIT_REMOTE_WORK",
	}
	Lead_EmployeeBenefit_value = map[string]int32{
		"EMPLOYEE_BENEFIT_UNSPECIFIED":      0,
		"EMPLOYEE_BENEFIT_HEALTH_INSURANCE": 1,
		"EMPLOYEE_BENEFIT_RETIREMENT_PLAN":  2,
		"EMPLOYEE_BENEFIT_PAID_TIME_OFF":    3,
		"EMPLOYEE_BENEFIT_REMOTE_WORK":      4,
	}
)

func (x Lead_EmployeeBenefit) Enum() *Lead_EmployeeBenefit {
	p := new(Lead_EmployeeBenefit)
	*p = x
	return p
}

func (x Lead_EmployeeBenefit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Lead_EmployeeBenefit) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[12].Descriptor()
}

func (Lead_EmployeeBenefit) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[12]
}

func (x Lead_EmployeeBenefit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Lead_EmployeeBenefit.Descriptor instead.
func (Lead_EmployeeBenefit) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{7, 1}
}

type BusinessHours_DayOfWeek int32

const (
	BusinessHours_DAY_OF_WEEK_UNSPECIFIED BusinessHours_DayOfWeek = 0
	BusinessHours_DAY_OF_WEEK_MONDAY      BusinessHours_DayOfWeek = 1
	BusinessHours_DAY_OF_WEEK_TUESDAY     BusinessHours_DayOfWeek = 2
	BusinessHours_DAY_OF_WEEK_WEDNESDAY   BusinessHours_DayOfWeek = 3
	BusinessHours_DAY_OF_WEEK_THURSDAY    BusinessHours_DayOfWeek = 4
	BusinessHours_DAY_OF_WEEK_FRIDAY      BusinessHours_DayOfWeek = 5
	BusinessHours_DAY_OF_WEEK_SATURDAY    BusinessHours_DayOfWeek = 6
	BusinessHours_DAY_OF_WEEK_SUNDAY      BusinessHours_DayOfWeek = 7
)

// Enum value maps for BusinessHours_DayOfWeek.
var (
	BusinessHours_DayOfWeek_name = map[int32]string{
		0: "DAY_OF_WEEK_UNSPECIFIED",
		1: "DAY_OF_WEEK_MONDAY",
		2: "DAY_OF_WEEK_TUESDAY",
		3: "DAY_OF_WEEK_WEDNESDAY",
		4: "DAY_OF_WEEK_THURSDAY",
		5: "DAY_OF_WEEK_FRIDAY",
		6: "DAY_OF_WEEK_SATURDAY",
		7: "DAY_OF_WEEK_SUNDAY",
	}
	BusinessHours_DayOfWeek_value = map[string]int32{
		"DAY_OF_WEEK_UNSPECIFIED": 0,
		"DAY_OF_WEEK_MONDAY":      1,
		"DAY_OF_WEEK_TUESDAY":     2,
		"DAY_OF_WEEK_WEDNESDAY":   3,
		"DAY_OF_WEEK_THURSDAY":    4,
		"DAY_OF_WEEK_FRIDAY":      5,
		"DAY_OF_WEEK_SATURDAY":    6,
		"DAY_OF_WEEK_SUNDAY":      7,
	}
)

func (x BusinessHours_DayOfWeek) Enum() *BusinessHours_DayOfWeek {
	p := new(BusinessHours_DayOfWeek)
	*p = x
	return p
}

func (x BusinessHours_DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessHours_DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[13].Descriptor()
}

func (BusinessHours_DayOfWeek) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[13]
}

func (x BusinessHours_DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessHours_DayOfWeek.Descriptor instead.
func (BusinessHours_DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{9, 0}
}

// Key status and lifecycle
type APIKey_Status int32

const (
	APIKey_STATUS_UNSPECIFIED    APIKey_Status = 0
	APIKey_STATUS_ACTIVE         APIKey_Status = 1
	APIKey_STATUS_REVOKED        APIKey_Status = 2
	APIKey_STATUS_EXPIRED        APIKey_Status = 3
	APIKey_STATUS_RATE_LIMITED   APIKey_Status = 4
	APIKey_STATUS_SUSPENDED      APIKey_Status = 5
	APIKey_STATUS_PENDING_REVIEW APIKey_Status = 6
	APIKey_STATUS_DEPRECATED     APIKey_Status = 7
)

// Enum value maps for APIKey_Status.
var (
	APIKey_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_ACTIVE",
		2: "STATUS_REVOKED",
		3: "STATUS_EXPIRED",
		4: "STATUS_RATE_LIMITED",
		5: "STATUS_SUSPENDED",
		6: "STATUS_PENDING_REVIEW",
		7: "STATUS_DEPRECATED",
	}
	APIKey_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":    0,
		"STATUS_ACTIVE":         1,
		"STATUS_REVOKED":        2,
		"STATUS_EXPIRED":        3,
		"STATUS_RATE_LIMITED":   4,
		"STATUS_SUSPENDED":      5,
		"STATUS_PENDING_REVIEW": 6,
		"STATUS_DEPRECATED":     7,
	}
)

func (x APIKey_Status) Enum() *APIKey_Status {
	p := new(APIKey_Status)
	*p = x
	return p
}

func (x APIKey_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APIKey_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_lead_scraper_service_v1_schema_proto_enumTypes[14].Descriptor()
}

func (APIKey_Status) Type() protoreflect.EnumType {
	return &file_lead_scraper_service_v1_schema_proto_enumTypes[14]
}

func (x APIKey_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APIKey_Status.Descriptor instead.
func (APIKey_Status) EnumDescriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{11, 0}
}

// Organization represents a company using the platform
//
// Key features:
// - Multi-tenant support
// - Hierarchical structure
// - Enterprise features
// - Billing management
//
// Use cases:
// - Company creates multiple apps/tenants
// - Enterprise manages business units
// - Usage tracking across tenants
type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Basic Information
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Website     string `protobuf:"bytes,4,opt,name=website,proto3" json:"website,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Contact Information
	BillingEmail   string `protobuf:"bytes,6,opt,name=billing_email,json=billingEmail,proto3" json:"billing_email,omitempty"`
	TechnicalEmail string `protobuf:"bytes,7,opt,name=technical_email,json=technicalEmail,proto3" json:"technical_email,omitempty"`
	Phone          string `protobuf:"bytes,8,opt,name=phone,proto3" json:"phone,omitempty"`
	Address        string `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty"`
	// Enterprise Features
	SsoEnabled      bool                     `protobuf:"varint,10,opt,name=sso_enabled,json=ssoEnabled,proto3" json:"sso_enabled,omitempty"`
	SsoProvider     string                   `protobuf:"bytes,11,opt,name=sso_provider,json=ssoProvider,proto3" json:"sso_provider,omitempty"` // e.g., "okta", "azure_ad"
	SsoDomain       string                   `protobuf:"bytes,12,opt,name=sso_domain,json=ssoDomain,proto3" json:"sso_domain,omitempty"`
	AllowedDomains  []string                 `protobuf:"bytes,13,rep,name=allowed_domains,json=allowedDomains,proto3" json:"allowed_domains,omitempty"`
	Enforce_2Fa     bool                     `protobuf:"varint,14,opt,name=enforce_2fa,json=enforce2fa,proto3" json:"enforce_2fa,omitempty"`
	BillingPlan     Organization_BillingPlan `protobuf:"varint,15,opt,name=billing_plan,json=billingPlan,proto3,enum=lead_scraper_service.v1.Organization_BillingPlan" json:"billing_plan,omitempty"`
	BillingCurrency string                   `protobuf:"bytes,16,opt,name=billing_currency,json=billingCurrency,proto3" json:"billing_currency,omitempty"`
	AutoBilling     bool                     `protobuf:"varint,17,opt,name=auto_billing,json=autoBilling,proto3" json:"auto_billing,omitempty"`
	TaxId           string                   `protobuf:"bytes,18,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	// Compliance
	ComplianceFrameworks    []string `protobuf:"bytes,19,rep,name=compliance_frameworks,json=complianceFrameworks,proto3" json:"compliance_frameworks,omitempty"` // SOC2, GDPR, etc
	DataProcessingAgreement bool     `protobuf:"varint,20,opt,name=data_processing_agreement,json=dataProcessingAgreement,proto3" json:"data_processing_agreement,omitempty"`
	DataRegion              string   `protobuf:"bytes,21,opt,name=data_region,json=dataRegion,proto3" json:"data_region,omitempty"` // Primary data storage region
	// Resource Limits
	MaxTenants        int32 `protobuf:"varint,22,opt,name=max_tenants,json=maxTenants,proto3" json:"max_tenants,omitempty"`
	TotalStorageLimit int64 `protobuf:"varint,23,opt,name=total_storage_limit,json=totalStorageLimit,proto3" json:"total_storage_limit,omitempty"`
	MaxApiKeys        int32 `protobuf:"varint,24,opt,name=max_api_keys,json=maxApiKeys,proto3" json:"max_api_keys,omitempty"`
	MaxUsers          int32 `protobuf:"varint,25,opt,name=max_users,json=maxUsers,proto3" json:"max_users,omitempty"`
	// Relationships
	Tenants       []*Tenant     `protobuf:"bytes,26,rep,name=tenants,proto3" json:"tenants,omitempty"`
	Subscriptions *Subscription `protobuf:"bytes,27,opt,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	// Audit
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedBy string                 `protobuf:"bytes,31,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Status    Organization_Status    `protobuf:"varint,32,opt,name=status,proto3,enum=lead_scraper_service.v1.Organization_Status" json:"status,omitempty"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{0}
}

func (x *Organization) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Organization) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Organization) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Organization) GetBillingEmail() string {
	if x != nil {
		return x.BillingEmail
	}
	return ""
}

func (x *Organization) GetTechnicalEmail() string {
	if x != nil {
		return x.TechnicalEmail
	}
	return ""
}

func (x *Organization) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Organization) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Organization) GetSsoEnabled() bool {
	if x != nil {
		return x.SsoEnabled
	}
	return false
}

func (x *Organization) GetSsoProvider() string {
	if x != nil {
		return x.SsoProvider
	}
	return ""
}

func (x *Organization) GetSsoDomain() string {
	if x != nil {
		return x.SsoDomain
	}
	return ""
}

func (x *Organization) GetAllowedDomains() []string {
	if x != nil {
		return x.AllowedDomains
	}
	return nil
}

func (x *Organization) GetEnforce_2Fa() bool {
	if x != nil {
		return x.Enforce_2Fa
	}
	return false
}

func (x *Organization) GetBillingPlan() Organization_BillingPlan {
	if x != nil {
		return x.BillingPlan
	}
	return Organization_BILLING_PLAN_UNSPECIFIED
}

func (x *Organization) GetBillingCurrency() string {
	if x != nil {
		return x.BillingCurrency
	}
	return ""
}

func (x *Organization) GetAutoBilling() bool {
	if x != nil {
		return x.AutoBilling
	}
	return false
}

func (x *Organization) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *Organization) GetComplianceFrameworks() []string {
	if x != nil {
		return x.ComplianceFrameworks
	}
	return nil
}

func (x *Organization) GetDataProcessingAgreement() bool {
	if x != nil {
		return x.DataProcessingAgreement
	}
	return false
}

func (x *Organization) GetDataRegion() string {
	if x != nil {
		return x.DataRegion
	}
	return ""
}

func (x *Organization) GetMaxTenants() int32 {
	if x != nil {
		return x.MaxTenants
	}
	return 0
}

func (x *Organization) GetTotalStorageLimit() int64 {
	if x != nil {
		return x.TotalStorageLimit
	}
	return 0
}

func (x *Organization) GetMaxApiKeys() int32 {
	if x != nil {
		return x.MaxApiKeys
	}
	return 0
}

func (x *Organization) GetMaxUsers() int32 {
	if x != nil {
		return x.MaxUsers
	}
	return 0
}

func (x *Organization) GetTenants() []*Tenant {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *Organization) GetSubscriptions() *Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *Organization) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Organization) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Organization) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Organization) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Organization) GetStatus() Organization_Status {
	if x != nil {
		return x.Status
	}
	return Organization_STATUS_UNSPECIFIED
}

// Tenant represents an application/project within an organization
//
// Key features:
// - Resource isolation
// - Independent configuration
// - Usage tracking
// - Service subscriptions
type Tenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Basic Information
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Organization Context
	Organization *Organization `protobuf:"bytes,6,opt,name=organization,proto3" json:"organization,omitempty"`
	// Configuration
	ApiBaseUrl           string            `protobuf:"bytes,7,opt,name=api_base_url,json=apiBaseUrl,proto3" json:"api_base_url,omitempty"`
	EnvironmentVariables map[string]string `protobuf:"bytes,8,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AllowedOrigins       []string          `protobuf:"bytes,9,rep,name=allowed_origins,json=allowedOrigins,proto3" json:"allowed_origins,omitempty"`
	// Resource Management
	StorageQuota        int64 `protobuf:"varint,10,opt,name=storage_quota,json=storageQuota,proto3" json:"storage_quota,omitempty"`
	MonthlyRequestLimit int64 `protobuf:"varint,11,opt,name=monthly_request_limit,json=monthlyRequestLimit,proto3" json:"monthly_request_limit,omitempty"`
	MaxConcurrentJobs   int32 `protobuf:"varint,12,opt,name=max_concurrent_jobs,json=maxConcurrentJobs,proto3" json:"max_concurrent_jobs,omitempty"`
	// Feature Flags
	EnableCaching        bool `protobuf:"varint,13,opt,name=enable_caching,json=enableCaching,proto3" json:"enable_caching,omitempty"`
	EnableRateLimiting   bool `protobuf:"varint,14,opt,name=enable_rate_limiting,json=enableRateLimiting,proto3" json:"enable_rate_limiting,omitempty"`
	EnableRequestLogging bool `protobuf:"varint,15,opt,name=enable_request_logging,json=enableRequestLogging,proto3" json:"enable_request_logging,omitempty"`
	// Relationships
	Accounts []*Account      `protobuf:"bytes,16,rep,name=accounts,proto3" json:"accounts,omitempty"`
	ApiKeys  []*TenantAPIKey `protobuf:"bytes,17,rep,name=api_keys,json=apiKeys,proto3" json:"api_keys,omitempty"`
	// Usage Metrics
	TotalRequests       int64   `protobuf:"varint,19,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	TotalStorageUsed    int64   `protobuf:"varint,20,opt,name=total_storage_used,json=totalStorageUsed,proto3" json:"total_storage_used,omitempty"`
	AverageResponseTime float32 `protobuf:"fixed32,21,opt,name=average_response_time,json=averageResponseTime,proto3" json:"average_response_time,omitempty"`
	// Audit
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	Status    Tenant_Status          `protobuf:"varint,25,opt,name=status,proto3,enum=lead_scraper_service.v1.Tenant_Status" json:"status,omitempty"`
}

func (x *Tenant) Reset() {
	*x = Tenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tenant) ProtoMessage() {}

func (x *Tenant) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tenant.ProtoReflect.Descriptor instead.
func (*Tenant) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Tenant) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tenant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tenant) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Tenant) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tenant) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *Tenant) GetApiBaseUrl() string {
	if x != nil {
		return x.ApiBaseUrl
	}
	return ""
}

func (x *Tenant) GetEnvironmentVariables() map[string]string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *Tenant) GetAllowedOrigins() []string {
	if x != nil {
		return x.AllowedOrigins
	}
	return nil
}

func (x *Tenant) GetStorageQuota() int64 {
	if x != nil {
		return x.StorageQuota
	}
	return 0
}

func (x *Tenant) GetMonthlyRequestLimit() int64 {
	if x != nil {
		return x.MonthlyRequestLimit
	}
	return 0
}

func (x *Tenant) GetMaxConcurrentJobs() int32 {
	if x != nil {
		return x.MaxConcurrentJobs
	}
	return 0
}

func (x *Tenant) GetEnableCaching() bool {
	if x != nil {
		return x.EnableCaching
	}
	return false
}

func (x *Tenant) GetEnableRateLimiting() bool {
	if x != nil {
		return x.EnableRateLimiting
	}
	return false
}

func (x *Tenant) GetEnableRequestLogging() bool {
	if x != nil {
		return x.EnableRequestLogging
	}
	return false
}

func (x *Tenant) GetAccounts() []*Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *Tenant) GetApiKeys() []*TenantAPIKey {
	if x != nil {
		return x.ApiKeys
	}
	return nil
}

func (x *Tenant) GetTotalRequests() int64 {
	if x != nil {
		return x.TotalRequests
	}
	return 0
}

func (x *Tenant) GetTotalStorageUsed() int64 {
	if x != nil {
		return x.TotalStorageUsed
	}
	return 0
}

func (x *Tenant) GetAverageResponseTime() float32 {
	if x != nil {
		return x.AverageResponseTime
	}
	return 0
}

func (x *Tenant) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Tenant) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Tenant) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Tenant) GetStatus() Tenant_Status {
	if x != nil {
		return x.Status
	}
	return Tenant_STATUS_UNSPECIFIED
}

// Subscription represents a tenant's Stripe-based subscription
//
// Key features:
// - Stripe integration
// - Usage-based billing
// - Metered pricing
// - Feature flags
//
// Database considerations:
// - Syncs with Stripe webhooks
// - Tracks usage for metered billing
// - Maintains subscription lifecycle
type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Stripe Integration
	StripeCustomerId     string                   `protobuf:"bytes,4,opt,name=stripe_customer_id,json=stripeCustomerId,proto3" json:"stripe_customer_id,omitempty"`
	StripeSubscriptionId string                   `protobuf:"bytes,5,opt,name=stripe_subscription_id,json=stripeSubscriptionId,proto3" json:"stripe_subscription_id,omitempty"`
	StripePriceId        string                   `protobuf:"bytes,6,opt,name=stripe_price_id,json=stripePriceId,proto3" json:"stripe_price_id,omitempty"`
	StripeProductId      string                   `protobuf:"bytes,7,opt,name=stripe_product_id,json=stripeProductId,proto3" json:"stripe_product_id,omitempty"`
	PlanTier             Subscription_PlanTier    `protobuf:"varint,8,opt,name=plan_tier,json=planTier,proto3,enum=lead_scraper_service.v1.Subscription_PlanTier" json:"plan_tier,omitempty"`
	BillingMode          Subscription_BillingMode `protobuf:"varint,9,opt,name=billing_mode,json=billingMode,proto3,enum=lead_scraper_service.v1.Subscription_BillingMode" json:"billing_mode,omitempty"`
	// Usage Limits
	IncludedJobs      int32   `protobuf:"varint,10,opt,name=included_jobs,json=includedJobs,proto3" json:"included_jobs,omitempty"` // Jobs included in base price
	PerJobRate        float32 `protobuf:"fixed32,11,opt,name=per_job_rate,json=perJobRate,proto3" json:"per_job_rate,omitempty"`    // Cost per additional job
	MaxConcurrentJobs int32   `protobuf:"varint,12,opt,name=max_concurrent_jobs,json=maxConcurrentJobs,proto3" json:"max_concurrent_jobs,omitempty"`
	IncludedStorage   int64   `protobuf:"varint,13,opt,name=included_storage,json=includedStorage,proto3" json:"included_storage,omitempty"` // Storage included in base price
	PerGbRate         float32 `protobuf:"fixed32,14,opt,name=per_gb_rate,json=perGbRate,proto3" json:"per_gb_rate,omitempty"`                // Cost per additional GB
	// Feature Entitlements
	AdvancedFilteringEnabled bool  `protobuf:"varint,15,opt,name=advanced_filtering_enabled,json=advancedFilteringEnabled,proto3" json:"advanced_filtering_enabled,omitempty"`
	PrioritySupportEnabled   bool  `protobuf:"varint,16,opt,name=priority_support_enabled,json=prioritySupportEnabled,proto3" json:"priority_support_enabled,omitempty"`
	CustomExportsEnabled     bool  `protobuf:"varint,17,opt,name=custom_exports_enabled,json=customExportsEnabled,proto3" json:"custom_exports_enabled,omitempty"`
	ApiAccessEnabled         bool  `protobuf:"varint,18,opt,name=api_access_enabled,json=apiAccessEnabled,proto3" json:"api_access_enabled,omitempty"`
	CustomProxiesEnabled     bool  `protobuf:"varint,19,opt,name=custom_proxies_enabled,json=customProxiesEnabled,proto3" json:"custom_proxies_enabled,omitempty"`
	AdvancedAnalyticsEnabled bool  `protobuf:"varint,20,opt,name=advanced_analytics_enabled,json=advancedAnalyticsEnabled,proto3" json:"advanced_analytics_enabled,omitempty"`
	RetentionDays            int32 `protobuf:"varint,21,opt,name=retention_days,json=retentionDays,proto3" json:"retention_days,omitempty"`
	MaxResultsPerJob         int32 `protobuf:"varint,22,opt,name=max_results_per_job,json=maxResultsPerJob,proto3" json:"max_results_per_job,omitempty"`
	// Current Period
	CurrentPeriodStart *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=current_period_start,json=currentPeriodStart,proto3" json:"current_period_start,omitempty"`
	CurrentPeriodEnd   *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=current_period_end,json=currentPeriodEnd,proto3" json:"current_period_end,omitempty"`
	CurrentPeriodUsage float32                `protobuf:"fixed32,25,opt,name=current_period_usage,json=currentPeriodUsage,proto3" json:"current_period_usage,omitempty"` // Usage amount for current period
	// Billing
	Currency        string                     `protobuf:"bytes,26,opt,name=currency,proto3" json:"currency,omitempty"`                      // e.g., "usd"
	BasePrice       float32                    `protobuf:"fixed32,27,opt,name=base_price,json=basePrice,proto3" json:"base_price,omitempty"` // Monthly/yearly base price
	BillingInterval Subscription_Interval      `protobuf:"varint,28,opt,name=billing_interval,json=billingInterval,proto3,enum=lead_scraper_service.v1.Subscription_Interval" json:"billing_interval,omitempty"`
	AutoRenew       bool                       `protobuf:"varint,29,opt,name=auto_renew,json=autoRenew,proto3" json:"auto_renew,omitempty"`
	PaymentStatus   Subscription_PaymentStatus `protobuf:"varint,30,opt,name=payment_status,json=paymentStatus,proto3,enum=lead_scraper_service.v1.Subscription_PaymentStatus" json:"payment_status,omitempty"`
	// Trial
	IsTrial    bool                   `protobuf:"varint,31,opt,name=is_trial,json=isTrial,proto3" json:"is_trial,omitempty"`
	TrialStart *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=trial_start,json=trialStart,proto3" json:"trial_start,omitempty"`
	TrialEnd   *timestamppb.Timestamp `protobuf:"bytes,33,opt,name=trial_end,json=trialEnd,proto3" json:"trial_end,omitempty"`
	// Timestamps
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,34,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,35,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CanceledAt *timestamppb.Timestamp `protobuf:"bytes,36,opt,name=canceled_at,json=canceledAt,proto3" json:"canceled_at,omitempty"`
	EndedAt    *timestamppb.Timestamp `protobuf:"bytes,37,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{2}
}

func (x *Subscription) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Subscription) GetStripeCustomerId() string {
	if x != nil {
		return x.StripeCustomerId
	}
	return ""
}

func (x *Subscription) GetStripeSubscriptionId() string {
	if x != nil {
		return x.StripeSubscriptionId
	}
	return ""
}

func (x *Subscription) GetStripePriceId() string {
	if x != nil {
		return x.StripePriceId
	}
	return ""
}

func (x *Subscription) GetStripeProductId() string {
	if x != nil {
		return x.StripeProductId
	}
	return ""
}

func (x *Subscription) GetPlanTier() Subscription_PlanTier {
	if x != nil {
		return x.PlanTier
	}
	return Subscription_PLAN_TIER_UNSPECIFIED
}

func (x *Subscription) GetBillingMode() Subscription_BillingMode {
	if x != nil {
		return x.BillingMode
	}
	return Subscription_BILLING_MODE_UNSPECIFIED
}

func (x *Subscription) GetIncludedJobs() int32 {
	if x != nil {
		return x.IncludedJobs
	}
	return 0
}

func (x *Subscription) GetPerJobRate() float32 {
	if x != nil {
		return x.PerJobRate
	}
	return 0
}

func (x *Subscription) GetMaxConcurrentJobs() int32 {
	if x != nil {
		return x.MaxConcurrentJobs
	}
	return 0
}

func (x *Subscription) GetIncludedStorage() int64 {
	if x != nil {
		return x.IncludedStorage
	}
	return 0
}

func (x *Subscription) GetPerGbRate() float32 {
	if x != nil {
		return x.PerGbRate
	}
	return 0
}

func (x *Subscription) GetAdvancedFilteringEnabled() bool {
	if x != nil {
		return x.AdvancedFilteringEnabled
	}
	return false
}

func (x *Subscription) GetPrioritySupportEnabled() bool {
	if x != nil {
		return x.PrioritySupportEnabled
	}
	return false
}

func (x *Subscription) GetCustomExportsEnabled() bool {
	if x != nil {
		return x.CustomExportsEnabled
	}
	return false
}

func (x *Subscription) GetApiAccessEnabled() bool {
	if x != nil {
		return x.ApiAccessEnabled
	}
	return false
}

func (x *Subscription) GetCustomProxiesEnabled() bool {
	if x != nil {
		return x.CustomProxiesEnabled
	}
	return false
}

func (x *Subscription) GetAdvancedAnalyticsEnabled() bool {
	if x != nil {
		return x.AdvancedAnalyticsEnabled
	}
	return false
}

func (x *Subscription) GetRetentionDays() int32 {
	if x != nil {
		return x.RetentionDays
	}
	return 0
}

func (x *Subscription) GetMaxResultsPerJob() int32 {
	if x != nil {
		return x.MaxResultsPerJob
	}
	return 0
}

func (x *Subscription) GetCurrentPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPeriodStart
	}
	return nil
}

func (x *Subscription) GetCurrentPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPeriodEnd
	}
	return nil
}

func (x *Subscription) GetCurrentPeriodUsage() float32 {
	if x != nil {
		return x.CurrentPeriodUsage
	}
	return 0
}

func (x *Subscription) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Subscription) GetBasePrice() float32 {
	if x != nil {
		return x.BasePrice
	}
	return 0
}

func (x *Subscription) GetBillingInterval() Subscription_Interval {
	if x != nil {
		return x.BillingInterval
	}
	return Subscription_INTERVAL_UNSPECIFIED
}

func (x *Subscription) GetAutoRenew() bool {
	if x != nil {
		return x.AutoRenew
	}
	return false
}

func (x *Subscription) GetPaymentStatus() Subscription_PaymentStatus {
	if x != nil {
		return x.PaymentStatus
	}
	return Subscription_PAYMENT_STATUS_UNSPECIFIED
}

func (x *Subscription) GetIsTrial() bool {
	if x != nil {
		return x.IsTrial
	}
	return false
}

func (x *Subscription) GetTrialStart() *timestamppb.Timestamp {
	if x != nil {
		return x.TrialStart
	}
	return nil
}

func (x *Subscription) GetTrialEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TrialEnd
	}
	return nil
}

func (x *Subscription) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Subscription) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Subscription) GetCanceledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CanceledAt
	}
	return nil
}

func (x *Subscription) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

// Account represents a user account within the workspace service.
// It serves as the top-level container for all user-specific workspaces and settings.
//
// Key features:
// - Unique identification via Auth0
// - Organization and tenant context
// - Audit timestamps
// - Associated scraping jobs
//
// Database considerations:
// - Uses GORM for ORM mapping
// - Includes indexes for efficient querying
// - Supports soft deletes via deleted_at
//
// Usage example:
// ```go
//
//	account := &Account{
//	    AuthPlatformUserId: "auth0|123",
//	    OrgId: "org_123",
//	    TenantId: "tenant_456",
//	}
//
// ```
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the account
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Auth0 user identifier for authentication
	AuthPlatformUserId string `protobuf:"bytes,2,opt,name=auth_platform_user_id,json=authPlatformUserId,proto3" json:"auth_platform_user_id,omitempty"`
	// User's email address
	Email string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	// Soft delete timestamp
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Account creation timestamp
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	AccountStatus Account_AccountStatus  `protobuf:"varint,10,opt,name=account_status,json=accountStatus,proto3,enum=lead_scraper_service.v1.Account_AccountStatus" json:"account_status,omitempty"`
	// Role-based access control
	Roles       []string `protobuf:"bytes,11,rep,name=roles,proto3" json:"roles,omitempty"`
	Permissions []string `protobuf:"bytes,12,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// Security settings
	MfaEnabled  bool                   `protobuf:"varint,13,opt,name=mfa_enabled,json=mfaEnabled,proto3" json:"mfa_enabled,omitempty"`
	LastLoginAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=last_login_at,json=lastLoginAt,proto3" json:"last_login_at,omitempty"`
	Timezone    string                 `protobuf:"bytes,15,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Usage tracking
	TotalJobsRun       int32 `protobuf:"varint,17,opt,name=total_jobs_run,json=totalJobsRun,proto3" json:"total_jobs_run,omitempty"`
	MonthlyJobLimit    int32 `protobuf:"varint,18,opt,name=monthly_job_limit,json=monthlyJobLimit,proto3" json:"monthly_job_limit,omitempty"`
	ConcurrentJobLimit int32 `protobuf:"varint,19,opt,name=concurrent_job_limit,json=concurrentJobLimit,proto3" json:"concurrent_job_limit,omitempty"`
	// Relationships
	Workspaces []*Workspace     `protobuf:"bytes,20,rep,name=workspaces,proto3" json:"workspaces,omitempty"`
	Settings   *AccountSettings `protobuf:"bytes,21,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{3}
}

func (x *Account) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Account) GetAuthPlatformUserId() string {
	if x != nil {
		return x.AuthPlatformUserId
	}
	return ""
}

func (x *Account) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Account) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Account) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Account) GetAccountStatus() Account_AccountStatus {
	if x != nil {
		return x.AccountStatus
	}
	return Account_ACCOUNT_STATUS_UNSPECIFIED
}

func (x *Account) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Account) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Account) GetMfaEnabled() bool {
	if x != nil {
		return x.MfaEnabled
	}
	return false
}

func (x *Account) GetLastLoginAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastLoginAt
	}
	return nil
}

func (x *Account) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Account) GetTotalJobsRun() int32 {
	if x != nil {
		return x.TotalJobsRun
	}
	return 0
}

func (x *Account) GetMonthlyJobLimit() int32 {
	if x != nil {
		return x.MonthlyJobLimit
	}
	return 0
}

func (x *Account) GetConcurrentJobLimit() int32 {
	if x != nil {
		return x.ConcurrentJobLimit
	}
	return 0
}

func (x *Account) GetWorkspaces() []*Workspace {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *Account) GetSettings() *AccountSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// Workspace represents a business entity with multiple accounts
type Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Industry string `protobuf:"bytes,3,opt,name=industry,proto3" json:"industry,omitempty"`
	Domain   string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	// Compliance settings
	GdprCompliant  bool `protobuf:"varint,5,opt,name=gdpr_compliant,json=gdprCompliant,proto3" json:"gdpr_compliant,omitempty"`
	HipaaCompliant bool `protobuf:"varint,6,opt,name=hipaa_compliant,json=hipaaCompliant,proto3" json:"hipaa_compliant,omitempty"`
	Soc2Compliant  bool `protobuf:"varint,7,opt,name=soc2_compliant,json=soc2Compliant,proto3" json:"soc2_compliant,omitempty"`
	// Storage quotas
	StorageQuota int64 `protobuf:"varint,8,opt,name=storage_quota,json=storageQuota,proto3" json:"storage_quota,omitempty"` // in bytes
	UsedStorage  int64 `protobuf:"varint,9,opt,name=used_storage,json=usedStorage,proto3" json:"used_storage,omitempty"`
	// Audit fields
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Relationships
	Workflows []*ScrapingWorkflow `protobuf:"bytes,14,rep,name=workflows,proto3" json:"workflows,omitempty"`
	// Job tracking
	JobsRunThisMonth  int32 `protobuf:"varint,15,opt,name=jobs_run_this_month,json=jobsRunThisMonth,proto3" json:"jobs_run_this_month,omitempty"`
	WorkspaceJobLimit int32 `protobuf:"varint,16,opt,name=workspace_job_limit,json=workspaceJobLimit,proto3" json:"workspace_job_limit,omitempty"`
	DailyJobQuota     int32 `protobuf:"varint,17,opt,name=daily_job_quota,json=dailyJobQuota,proto3" json:"daily_job_quota,omitempty"`
	// Usage metrics
	ActiveScrapers      int32                  `protobuf:"varint,18,opt,name=active_scrapers,json=activeScrapers,proto3" json:"active_scrapers,omitempty"`
	TotalLeadsCollected int32                  `protobuf:"varint,19,opt,name=total_leads_collected,json=totalLeadsCollected,proto3" json:"total_leads_collected,omitempty"`
	LastJobRun          *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=last_job_run,json=lastJobRun,proto3" json:"last_job_run,omitempty"`
	// Associated scraping jobs for this workspace
	ScrapingJobs []*ScrapingJob `protobuf:"bytes,22,rep,name=scraping_jobs,json=scrapingJobs,proto3" json:"scraping_jobs,omitempty"`
	ApiKeys      []*APIKey      `protobuf:"bytes,23,rep,name=api_keys,json=apiKeys,proto3" json:"api_keys,omitempty"`
}

func (x *Workspace) Reset() {
	*x = Workspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspace) ProtoMessage() {}

func (x *Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspace.ProtoReflect.Descriptor instead.
func (*Workspace) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{4}
}

func (x *Workspace) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Workspace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workspace) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *Workspace) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Workspace) GetGdprCompliant() bool {
	if x != nil {
		return x.GdprCompliant
	}
	return false
}

func (x *Workspace) GetHipaaCompliant() bool {
	if x != nil {
		return x.HipaaCompliant
	}
	return false
}

func (x *Workspace) GetSoc2Compliant() bool {
	if x != nil {
		return x.Soc2Compliant
	}
	return false
}

func (x *Workspace) GetStorageQuota() int64 {
	if x != nil {
		return x.StorageQuota
	}
	return 0
}

func (x *Workspace) GetUsedStorage() int64 {
	if x != nil {
		return x.UsedStorage
	}
	return 0
}

func (x *Workspace) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Workspace) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Workspace) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Workspace) GetWorkflows() []*ScrapingWorkflow {
	if x != nil {
		return x.Workflows
	}
	return nil
}

func (x *Workspace) GetJobsRunThisMonth() int32 {
	if x != nil {
		return x.JobsRunThisMonth
	}
	return 0
}

func (x *Workspace) GetWorkspaceJobLimit() int32 {
	if x != nil {
		return x.WorkspaceJobLimit
	}
	return 0
}

func (x *Workspace) GetDailyJobQuota() int32 {
	if x != nil {
		return x.DailyJobQuota
	}
	return 0
}

func (x *Workspace) GetActiveScrapers() int32 {
	if x != nil {
		return x.ActiveScrapers
	}
	return 0
}

func (x *Workspace) GetTotalLeadsCollected() int32 {
	if x != nil {
		return x.TotalLeadsCollected
	}
	return 0
}

func (x *Workspace) GetLastJobRun() *timestamppb.Timestamp {
	if x != nil {
		return x.LastJobRun
	}
	return nil
}

func (x *Workspace) GetScrapingJobs() []*ScrapingJob {
	if x != nil {
		return x.ScrapingJobs
	}
	return nil
}

func (x *Workspace) GetApiKeys() []*APIKey {
	if x != nil {
		return x.ApiKeys
	}
	return nil
}

// ScrapingJob represents a Google Maps scraping task.
// This message defines both the configuration and current state of a scraping operation.
//
// Key components:
// - Basic metadata (id, name, timestamps)
// - Job status tracking
// - Search configuration parameters
// - Geographic settings
// - Performance options
// - Multi-tenant context
//
// Database considerations:
// - Stored in "gmaps_jobs" table
// - Uses GORM for ORM mapping
// - Includes foreign key to Account
// - Supports soft deletes
//
// Usage example:
// ```go
//
//	job := &ScrapingJob{
//	    Name: "Athens Cafes",
//	    Status: BackgroundJobStatus_BACKGROUND_JOB_STATUS_QUEUED,
//	    Keywords: []string{"cafe", "coffee"},
//	    Lang: "el",
//	    Zoom: 15,
//	    FastMode: true,
//	    MaxTime: 3600,
//	}
//
// ```
type ScrapingJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Changed from uint64 to string to support UUID
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Core fields matching DB schema
	Priority    int32                  `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	PayloadType string                 `protobuf:"bytes,3,opt,name=payload_type,json=payloadType,proto3" json:"payload_type,omitempty"`
	Payload     []byte                 `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status      BackgroundJobStatus    `protobuf:"varint,6,opt,name=status,proto3,enum=lead_scraper_service.v1.BackgroundJobStatus" json:"status,omitempty"`
	// Human-readable name for the job
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	// Search terms for Google Maps
	Keywords []string `protobuf:"bytes,8,rep,name=keywords,proto3" json:"keywords,omitempty"`
	// ISO 639-1 language code (e.g., "en", "el")
	Lang string `protobuf:"bytes,9,opt,name=lang,proto3" json:"lang,omitempty"`
	// Map zoom level (1-20)
	Zoom int32 `protobuf:"varint,10,opt,name=zoom,proto3" json:"zoom,omitempty"`
	// Latitude coordinate
	Lat string `protobuf:"bytes,11,opt,name=lat,proto3" json:"lat,omitempty"`
	// Longitude coordinate
	Lon string `protobuf:"bytes,12,opt,name=lon,proto3" json:"lon,omitempty"`
	// Enable faster but potentially less thorough scraping
	FastMode bool `protobuf:"varint,13,opt,name=fast_mode,json=fastMode,proto3" json:"fast_mode,omitempty"`
	// Search radius in meters
	Radius int32 `protobuf:"varint,14,opt,name=radius,proto3" json:"radius,omitempty"`
	// Depth of recursive search (1-10)
	Depth int32 `protobuf:"varint,15,opt,name=depth,proto3" json:"depth,omitempty"`
	// Whether to extract email addresses
	Email bool `protobuf:"varint,16,opt,name=email,proto3" json:"email,omitempty"`
	// Maximum execution time in seconds
	MaxTime int32 `protobuf:"varint,17,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	// List of proxy servers to use
	Proxies []string `protobuf:"bytes,18,rep,name=proxies,proto3" json:"proxies,omitempty"`
	// Last update timestamp
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Soft delete timestamp
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Lead tracking
	Leads []*Lead `protobuf:"bytes,21,rep,name=leads,proto3" json:"leads,omitempty"`
}

func (x *ScrapingJob) Reset() {
	*x = ScrapingJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrapingJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrapingJob) ProtoMessage() {}

func (x *ScrapingJob) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrapingJob.ProtoReflect.Descriptor instead.
func (*ScrapingJob) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{5}
}

func (x *ScrapingJob) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScrapingJob) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ScrapingJob) GetPayloadType() string {
	if x != nil {
		return x.PayloadType
	}
	return ""
}

func (x *ScrapingJob) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ScrapingJob) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ScrapingJob) GetStatus() BackgroundJobStatus {
	if x != nil {
		return x.Status
	}
	return BackgroundJobStatus_BACKGROUND_JOB_STATUS_UNSPECIFIED
}

func (x *ScrapingJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScrapingJob) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *ScrapingJob) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *ScrapingJob) GetZoom() int32 {
	if x != nil {
		return x.Zoom
	}
	return 0
}

func (x *ScrapingJob) GetLat() string {
	if x != nil {
		return x.Lat
	}
	return ""
}

func (x *ScrapingJob) GetLon() string {
	if x != nil {
		return x.Lon
	}
	return ""
}

func (x *ScrapingJob) GetFastMode() bool {
	if x != nil {
		return x.FastMode
	}
	return false
}

func (x *ScrapingJob) GetRadius() int32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *ScrapingJob) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *ScrapingJob) GetEmail() bool {
	if x != nil {
		return x.Email
	}
	return false
}

func (x *ScrapingJob) GetMaxTime() int32 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

func (x *ScrapingJob) GetProxies() []string {
	if x != nil {
		return x.Proxies
	}
	return nil
}

func (x *ScrapingJob) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ScrapingJob) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *ScrapingJob) GetLeads() []*Lead {
	if x != nil {
		return x.Leads
	}
	return nil
}

// ScrapingWorkflow defines recurring scraping configurations
type ScrapingWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Scheduling options
	CronExpression string `protobuf:"bytes,2,opt,name=cron_expression,json=cronExpression,proto3" json:"cron_expression,omitempty"`
	// Execution settings
	NextRunTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=next_run_time,json=nextRunTime,proto3" json:"next_run_time,omitempty"`
	LastRunTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_run_time,json=lastRunTime,proto3" json:"last_run_time,omitempty"`
	Status      WorkflowStatus         `protobuf:"varint,6,opt,name=status,proto3,enum=lead_scraper_service.v1.WorkflowStatus" json:"status,omitempty"`
	// Failure handling
	RetryCount  int32  `protobuf:"varint,7,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	MaxRetries  int32  `protobuf:"varint,8,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	AlertEmails string `protobuf:"bytes,9,opt,name=alert_emails,json=alertEmails,proto3" json:"alert_emails,omitempty"`
	// Org context
	OrgId    string `protobuf:"bytes,10,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	TenantId string `protobuf:"bytes,11,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Audit fields
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Relationships
	Jobs      []*ScrapingJob `protobuf:"bytes,15,rep,name=jobs,proto3" json:"jobs,omitempty"`
	Workspace *Workspace     `protobuf:"bytes,16,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// Advanced scraping configuration
	GeoFencingRadius  float32 `protobuf:"fixed32,18,opt,name=geo_fencing_radius,json=geoFencingRadius,proto3" json:"geo_fencing_radius,omitempty"`
	GeoFencingLat     float64 `protobuf:"fixed64,19,opt,name=geo_fencing_lat,json=geoFencingLat,proto3" json:"geo_fencing_lat,omitempty"`
	GeoFencingLon     float64 `protobuf:"fixed64,20,opt,name=geo_fencing_lon,json=geoFencingLon,proto3" json:"geo_fencing_lon,omitempty"`
	GeoFencingZoomMin int32   `protobuf:"varint,21,opt,name=geo_fencing_zoom_min,json=geoFencingZoomMin,proto3" json:"geo_fencing_zoom_min,omitempty"`
	GeoFencingZoomMax int32   `protobuf:"varint,22,opt,name=geo_fencing_zoom_max,json=geoFencingZoomMax,proto3" json:"geo_fencing_zoom_max,omitempty"`
	// Data collection parameters
	IncludeReviews        bool                          `protobuf:"varint,23,opt,name=include_reviews,json=includeReviews,proto3" json:"include_reviews,omitempty"`
	IncludePhotos         bool                          `protobuf:"varint,24,opt,name=include_photos,json=includePhotos,proto3" json:"include_photos,omitempty"`
	IncludeBusinessHours  bool                          `protobuf:"varint,25,opt,name=include_business_hours,json=includeBusinessHours,proto3" json:"include_business_hours,omitempty"`
	MaxReviewsPerBusiness int32                         `protobuf:"varint,26,opt,name=max_reviews_per_business,json=maxReviewsPerBusiness,proto3" json:"max_reviews_per_business,omitempty"`
	OutputFormat          ScrapingWorkflow_OutputFormat `protobuf:"varint,27,opt,name=output_format,json=outputFormat,proto3,enum=lead_scraper_service.v1.ScrapingWorkflow_OutputFormat" json:"output_format,omitempty"`
	OutputDestination     string                        `protobuf:"bytes,28,opt,name=output_destination,json=outputDestination,proto3" json:"output_destination,omitempty"` // URI or dataset name
	// Data retention
	DataRetention                 *durationpb.Duration `protobuf:"bytes,29,opt,name=data_retention,json=dataRetention,proto3" json:"data_retention,omitempty"`
	AnonymizePii                  bool                 `protobuf:"varint,30,opt,name=anonymize_pii,json=anonymizePii,proto3" json:"anonymize_pii,omitempty"`
	NotificationWebhookUrl        string               `protobuf:"bytes,31,opt,name=notification_webhook_url,json=notificationWebhookUrl,proto3" json:"notification_webhook_url,omitempty"`
	NotificationSlackChannel      string               `protobuf:"bytes,32,opt,name=notification_slack_channel,json=notificationSlackChannel,proto3" json:"notification_slack_channel,omitempty"`
	NotificationEmailGroup        string               `protobuf:"bytes,33,opt,name=notification_email_group,json=notificationEmailGroup,proto3" json:"notification_email_group,omitempty"`
	NotificationNotifyOnStart     bool                 `protobuf:"varint,34,opt,name=notification_notify_on_start,json=notificationNotifyOnStart,proto3" json:"notification_notify_on_start,omitempty"`
	NotificationNotifyOnComplete  bool                 `protobuf:"varint,35,opt,name=notification_notify_on_complete,json=notificationNotifyOnComplete,proto3" json:"notification_notify_on_complete,omitempty"`
	NotificationNotifyOnFailure   bool                 `protobuf:"varint,36,opt,name=notification_notify_on_failure,json=notificationNotifyOnFailure,proto3" json:"notification_notify_on_failure,omitempty"`
	ContentFilterAllowedCountries []string             `protobuf:"bytes,37,rep,name=content_filter_allowed_countries,json=contentFilterAllowedCountries,proto3" json:"content_filter_allowed_countries,omitempty"`
	ContentFilterExcludedTypes    []string             `protobuf:"bytes,38,rep,name=content_filter_excluded_types,json=contentFilterExcludedTypes,proto3" json:"content_filter_excluded_types,omitempty"`
	ContentFilterMinimumRating    float32              `protobuf:"fixed32,39,opt,name=content_filter_minimum_rating,json=contentFilterMinimumRating,proto3" json:"content_filter_minimum_rating,omitempty"`
	ContentFilterMinimumReviews   int32                `protobuf:"varint,40,opt,name=content_filter_minimum_reviews,json=contentFilterMinimumReviews,proto3" json:"content_filter_minimum_reviews,omitempty"`
	QosMaxConcurrentRequests      int32                `protobuf:"varint,41,opt,name=qos_max_concurrent_requests,json=qosMaxConcurrentRequests,proto3" json:"qos_max_concurrent_requests,omitempty"`
	QosMaxRetries                 int32                `protobuf:"varint,42,opt,name=qos_max_retries,json=qosMaxRetries,proto3" json:"qos_max_retries,omitempty"`
	QosRequestTimeout             *durationpb.Duration `protobuf:"bytes,43,opt,name=qos_request_timeout,json=qosRequestTimeout,proto3" json:"qos_request_timeout,omitempty"`
	QosEnableJavascript           bool                 `protobuf:"varint,44,opt,name=qos_enable_javascript,json=qosEnableJavascript,proto3" json:"qos_enable_javascript,omitempty"` // For full page rendering
	// Compliance
	RespectRobotsTxt     bool   `protobuf:"varint,45,opt,name=respect_robots_txt,json=respectRobotsTxt,proto3" json:"respect_robots_txt,omitempty"`
	AcceptTermsOfService bool   `protobuf:"varint,46,opt,name=accept_terms_of_service,json=acceptTermsOfService,proto3" json:"accept_terms_of_service,omitempty"`
	UserAgent            string `protobuf:"bytes,47,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
}

func (x *ScrapingWorkflow) Reset() {
	*x = ScrapingWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrapingWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrapingWorkflow) ProtoMessage() {}

func (x *ScrapingWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrapingWorkflow.ProtoReflect.Descriptor instead.
func (*ScrapingWorkflow) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{6}
}

func (x *ScrapingWorkflow) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScrapingWorkflow) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *ScrapingWorkflow) GetNextRunTime() *timestamppb.Timestamp {
	if x != nil {
		return x.NextRunTime
	}
	return nil
}

func (x *ScrapingWorkflow) GetLastRunTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRunTime
	}
	return nil
}

func (x *ScrapingWorkflow) GetStatus() WorkflowStatus {
	if x != nil {
		return x.Status
	}
	return WorkflowStatus_WORKFLOW_STATUS_UNSPECIFIED
}

func (x *ScrapingWorkflow) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *ScrapingWorkflow) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *ScrapingWorkflow) GetAlertEmails() string {
	if x != nil {
		return x.AlertEmails
	}
	return ""
}

func (x *ScrapingWorkflow) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ScrapingWorkflow) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ScrapingWorkflow) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ScrapingWorkflow) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ScrapingWorkflow) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *ScrapingWorkflow) GetJobs() []*ScrapingJob {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *ScrapingWorkflow) GetWorkspace() *Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *ScrapingWorkflow) GetGeoFencingRadius() float32 {
	if x != nil {
		return x.GeoFencingRadius
	}
	return 0
}

func (x *ScrapingWorkflow) GetGeoFencingLat() float64 {
	if x != nil {
		return x.GeoFencingLat
	}
	return 0
}

func (x *ScrapingWorkflow) GetGeoFencingLon() float64 {
	if x != nil {
		return x.GeoFencingLon
	}
	return 0
}

func (x *ScrapingWorkflow) GetGeoFencingZoomMin() int32 {
	if x != nil {
		return x.GeoFencingZoomMin
	}
	return 0
}

func (x *ScrapingWorkflow) GetGeoFencingZoomMax() int32 {
	if x != nil {
		return x.GeoFencingZoomMax
	}
	return 0
}

func (x *ScrapingWorkflow) GetIncludeReviews() bool {
	if x != nil {
		return x.IncludeReviews
	}
	return false
}

func (x *ScrapingWorkflow) GetIncludePhotos() bool {
	if x != nil {
		return x.IncludePhotos
	}
	return false
}

func (x *ScrapingWorkflow) GetIncludeBusinessHours() bool {
	if x != nil {
		return x.IncludeBusinessHours
	}
	return false
}

func (x *ScrapingWorkflow) GetMaxReviewsPerBusiness() int32 {
	if x != nil {
		return x.MaxReviewsPerBusiness
	}
	return 0
}

func (x *ScrapingWorkflow) GetOutputFormat() ScrapingWorkflow_OutputFormat {
	if x != nil {
		return x.OutputFormat
	}
	return ScrapingWorkflow_OUTPUT_FORMAT_UNSPECIFIED
}

func (x *ScrapingWorkflow) GetOutputDestination() string {
	if x != nil {
		return x.OutputDestination
	}
	return ""
}

func (x *ScrapingWorkflow) GetDataRetention() *durationpb.Duration {
	if x != nil {
		return x.DataRetention
	}
	return nil
}

func (x *ScrapingWorkflow) GetAnonymizePii() bool {
	if x != nil {
		return x.AnonymizePii
	}
	return false
}

func (x *ScrapingWorkflow) GetNotificationWebhookUrl() string {
	if x != nil {
		return x.NotificationWebhookUrl
	}
	return ""
}

func (x *ScrapingWorkflow) GetNotificationSlackChannel() string {
	if x != nil {
		return x.NotificationSlackChannel
	}
	return ""
}

func (x *ScrapingWorkflow) GetNotificationEmailGroup() string {
	if x != nil {
		return x.NotificationEmailGroup
	}
	return ""
}

func (x *ScrapingWorkflow) GetNotificationNotifyOnStart() bool {
	if x != nil {
		return x.NotificationNotifyOnStart
	}
	return false
}

func (x *ScrapingWorkflow) GetNotificationNotifyOnComplete() bool {
	if x != nil {
		return x.NotificationNotifyOnComplete
	}
	return false
}

func (x *ScrapingWorkflow) GetNotificationNotifyOnFailure() bool {
	if x != nil {
		return x.NotificationNotifyOnFailure
	}
	return false
}

func (x *ScrapingWorkflow) GetContentFilterAllowedCountries() []string {
	if x != nil {
		return x.ContentFilterAllowedCountries
	}
	return nil
}

func (x *ScrapingWorkflow) GetContentFilterExcludedTypes() []string {
	if x != nil {
		return x.ContentFilterExcludedTypes
	}
	return nil
}

func (x *ScrapingWorkflow) GetContentFilterMinimumRating() float32 {
	if x != nil {
		return x.ContentFilterMinimumRating
	}
	return 0
}

func (x *ScrapingWorkflow) GetContentFilterMinimumReviews() int32 {
	if x != nil {
		return x.ContentFilterMinimumReviews
	}
	return 0
}

func (x *ScrapingWorkflow) GetQosMaxConcurrentRequests() int32 {
	if x != nil {
		return x.QosMaxConcurrentRequests
	}
	return 0
}

func (x *ScrapingWorkflow) GetQosMaxRetries() int32 {
	if x != nil {
		return x.QosMaxRetries
	}
	return 0
}

func (x *ScrapingWorkflow) GetQosRequestTimeout() *durationpb.Duration {
	if x != nil {
		return x.QosRequestTimeout
	}
	return nil
}

func (x *ScrapingWorkflow) GetQosEnableJavascript() bool {
	if x != nil {
		return x.QosEnableJavascript
	}
	return false
}

func (x *ScrapingWorkflow) GetRespectRobotsTxt() bool {
	if x != nil {
		return x.RespectRobotsTxt
	}
	return false
}

func (x *ScrapingWorkflow) GetAcceptTermsOfService() bool {
	if x != nil {
		return x.AcceptTermsOfService
	}
	return false
}

func (x *ScrapingWorkflow) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

// Lead represents a scraped business entity
type Lead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Business details
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Website string `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	Phone   string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	City    string `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	State   string `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	Country string `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`
	// Scraped data
	Latitude     float64 `protobuf:"fixed64,9,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude    float64 `protobuf:"fixed64,10,opt,name=longitude,proto3" json:"longitude,omitempty"`
	GoogleRating float32 `protobuf:"fixed32,11,opt,name=google_rating,json=googleRating,proto3" json:"google_rating,omitempty"`
	ReviewCount  int32   `protobuf:"varint,12,opt,name=review_count,json=reviewCount,proto3" json:"review_count,omitempty"`
	// Enrichment data
	Industry         string `protobuf:"bytes,13,opt,name=industry,proto3" json:"industry,omitempty"`
	EmployeeCount    int32  `protobuf:"varint,14,opt,name=employee_count,json=employeeCount,proto3" json:"employee_count,omitempty"`
	EstimatedRevenue int64  `protobuf:"varint,15,opt,name=estimated_revenue,json=estimatedRevenue,proto3" json:"estimated_revenue,omitempty"`
	// Org context
	OrgId    string `protobuf:"bytes,16,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	TenantId string `protobuf:"bytes,17,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Audit fields
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Relationships
	Job       *ScrapingJob `protobuf:"bytes,21,opt,name=job,proto3" json:"job,omitempty"`
	Workspace *Workspace   `protobuf:"bytes,22,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// Detailed Google Maps metadata
	PlaceId        string           `protobuf:"bytes,23,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	GoogleMapsUrl  string           `protobuf:"bytes,24,opt,name=google_maps_url,json=googleMapsUrl,proto3" json:"google_maps_url,omitempty"`
	BusinessStatus string           `protobuf:"bytes,25,opt,name=business_status,json=businessStatus,proto3" json:"business_status,omitempty"` // OPERATIONAL, CLOSED_TEMPORARILY, etc
	RegularHours   []*BusinessHours `protobuf:"bytes,26,rep,name=regular_hours,json=regularHours,proto3" json:"regular_hours,omitempty"`
	SpecialHours   []*BusinessHours `protobuf:"bytes,27,rep,name=special_hours,json=specialHours,proto3" json:"special_hours,omitempty"`
	// Rich media
	PhotoReferences []string  `protobuf:"bytes,28,rep,name=photo_references,json=photoReferences,proto3" json:"photo_references,omitempty"` // Google Places photo IDs
	MainPhotoUrl    string    `protobuf:"bytes,29,opt,name=main_photo_url,json=mainPhotoUrl,proto3" json:"main_photo_url,omitempty"`
	Reviews         []*Review `protobuf:"bytes,30,rep,name=reviews,proto3" json:"reviews,omitempty"`
	// Categories and attributes
	Types                []string `protobuf:"bytes,31,rep,name=types,proto3" json:"types,omitempty"`         // Google Places types
	Amenities            []string `protobuf:"bytes,32,rep,name=amenities,proto3" json:"amenities,omitempty"` // wheelchair_accessible, restroom, etc
	ServesVegetarianFood bool     `protobuf:"varint,33,opt,name=serves_vegetarian_food,json=servesVegetarianFood,proto3" json:"serves_vegetarian_food,omitempty"`
	OutdoorSeating       bool     `protobuf:"varint,34,opt,name=outdoor_seating,json=outdoorSeating,proto3" json:"outdoor_seating,omitempty"`
	// Payment and accessibility
	PaymentMethods       []string `protobuf:"bytes,36,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty"` // visa, amex, cash, etc
	WheelchairAccessible bool     `protobuf:"varint,37,opt,name=wheelchair_accessible,json=wheelchairAccessible,proto3" json:"wheelchair_accessible,omitempty"`
	ParkingAvailable     bool     `protobuf:"varint,38,opt,name=parking_available,json=parkingAvailable,proto3" json:"parking_available,omitempty"`
	// Social media links
	SocialMedia    map[string]string `protobuf:"bytes,39,rep,name=social_media,json=socialMedia,proto3" json:"social_media,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // platform -> url
	RatingCategory string            `protobuf:"bytes,40,opt,name=rating_category,json=ratingCategory,proto3" json:"rating_category,omitempty"`
	Rating         float32           `protobuf:"fixed32,41,opt,name=rating,proto3" json:"rating,omitempty"`
	Count          int32             `protobuf:"varint,42,opt,name=count,proto3" json:"count,omitempty"`
	// Metadata
	LastUpdated       *timestamppb.Timestamp `protobuf:"bytes,43,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	DataSourceVersion string                 `protobuf:"bytes,44,opt,name=data_source_version,json=dataSourceVersion,proto3" json:"data_source_version,omitempty"`
	ScrapingSessionId string                 `protobuf:"bytes,45,opt,name=scraping_session_id,json=scrapingSessionId,proto3" json:"scraping_session_id,omitempty"`
	// Contact Information
	AlternatePhones    []string `protobuf:"bytes,46,rep,name=alternate_phones,json=alternatePhones,proto3" json:"alternate_phones,omitempty"`
	ContactPersonName  string   `protobuf:"bytes,47,opt,name=contact_person_name,json=contactPersonName,proto3" json:"contact_person_name,omitempty"`
	ContactPersonTitle string   `protobuf:"bytes,48,opt,name=contact_person_title,json=contactPersonTitle,proto3" json:"contact_person_title,omitempty"`
	ContactEmail       string   `protobuf:"bytes,49,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	// Business Operations
	FoundedYear     int32             `protobuf:"varint,50,opt,name=founded_year,json=foundedYear,proto3" json:"founded_year,omitempty"`
	BusinessType    string            `protobuf:"bytes,51,opt,name=business_type,json=businessType,proto3" json:"business_type,omitempty"`
	Certifications  []string          `protobuf:"bytes,52,rep,name=certifications,proto3" json:"certifications,omitempty"` // ISO, LEED, etc
	LicenseNumber   string            `protobuf:"bytes,53,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"`
	RevenueRange    Lead_RevenueRange `protobuf:"varint,54,opt,name=revenue_range,json=revenueRange,proto3,enum=lead_scraper_service.v1.Lead_RevenueRange" json:"revenue_range,omitempty"`
	FundingStage    string            `protobuf:"bytes,55,opt,name=funding_stage,json=fundingStage,proto3" json:"funding_stage,omitempty"` // Seed, Series A, etc
	IsPublicCompany bool              `protobuf:"varint,56,opt,name=is_public_company,json=isPublicCompany,proto3" json:"is_public_company,omitempty"`
	// Online Presence Metrics
	WebsiteLoadSpeed   float32  `protobuf:"fixed32,57,opt,name=website_load_speed,json=websiteLoadSpeed,proto3" json:"website_load_speed,omitempty"` // In seconds
	HasSslCertificate  bool     `protobuf:"varint,58,opt,name=has_ssl_certificate,json=hasSslCertificate,proto3" json:"has_ssl_certificate,omitempty"`
	CmsUsed            string   `protobuf:"bytes,59,opt,name=cms_used,json=cmsUsed,proto3" json:"cms_used,omitempty"` // e.g., WordPress, Shopify
	EcommercePlatforms []string `protobuf:"bytes,60,rep,name=ecommerce_platforms,json=ecommercePlatforms,proto3" json:"ecommerce_platforms,omitempty"`
	// Location Enhancements
	Timezone             string                 `protobuf:"bytes,61,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Neighborhood         string                 `protobuf:"bytes,62,opt,name=neighborhood,proto3" json:"neighborhood,omitempty"`
	NearbyLandmarks      []string               `protobuf:"bytes,63,rep,name=nearby_landmarks,json=nearbyLandmarks,proto3" json:"nearby_landmarks,omitempty"`
	TransportationAccess string                 `protobuf:"bytes,64,opt,name=transportation_access,json=transportationAccess,proto3" json:"transportation_access,omitempty"` // Near subway, parking, etc
	EmployeeBenefits     []Lead_EmployeeBenefit `protobuf:"varint,66,rep,packed,name=employee_benefits,json=employeeBenefits,proto3,enum=lead_scraper_service.v1.Lead_EmployeeBenefit" json:"employee_benefits,omitempty"`
	// Partnerships & Affiliations
	ParentCompany string   `protobuf:"bytes,67,opt,name=parent_company,json=parentCompany,proto3" json:"parent_company,omitempty"`
	Subsidiaries  []string `protobuf:"bytes,68,rep,name=subsidiaries,proto3" json:"subsidiaries,omitempty"`
	IsFranchise   bool     `protobuf:"varint,69,opt,name=is_franchise,json=isFranchise,proto3" json:"is_franchise,omitempty"`
	// Marketing & SEO
	SeoKeywords              []string `protobuf:"bytes,70,rep,name=seo_keywords,json=seoKeywords,proto3" json:"seo_keywords,omitempty"`
	UsesGoogleAds            bool     `protobuf:"varint,71,opt,name=uses_google_ads,json=usesGoogleAds,proto3" json:"uses_google_ads,omitempty"`
	GoogleMyBusinessCategory string   `protobuf:"bytes,72,opt,name=google_my_business_category,json=googleMyBusinessCategory,proto3" json:"google_my_business_category,omitempty"`
	// Industry Classification
	NaicsCode  string `protobuf:"bytes,73,opt,name=naics_code,json=naicsCode,proto3" json:"naics_code,omitempty"`
	SicCode    string `protobuf:"bytes,74,opt,name=sic_code,json=sicCode,proto3" json:"sic_code,omitempty"`
	UnspscCode string `protobuf:"bytes,75,opt,name=unspsc_code,json=unspscCode,proto3" json:"unspsc_code,omitempty"`
	// Sustainability
	IsGreenCertified     bool     `protobuf:"varint,76,opt,name=is_green_certified,json=isGreenCertified,proto3" json:"is_green_certified,omitempty"`
	EnergySources        []string `protobuf:"bytes,77,rep,name=energy_sources,json=energySources,proto3" json:"energy_sources,omitempty"` // Solar, Wind, etc
	SustainabilityRating string   `protobuf:"bytes,78,opt,name=sustainability_rating,json=sustainabilityRating,proto3" json:"sustainability_rating,omitempty"`
	// Recent Activity
	RecentAnnouncements []string               `protobuf:"bytes,79,rep,name=recent_announcements,json=recentAnnouncements,proto3" json:"recent_announcements,omitempty"`
	LastProductLaunch   *timestamppb.Timestamp `protobuf:"bytes,80,opt,name=last_product_launch,json=lastProductLaunch,proto3" json:"last_product_launch,omitempty"`
	// Legal & Compliance
	HasLitigationHistory bool   `protobuf:"varint,81,opt,name=has_litigation_history,json=hasLitigationHistory,proto3" json:"has_litigation_history,omitempty"`
	ExportControlStatus  string `protobuf:"bytes,82,opt,name=export_control_status,json=exportControlStatus,proto3" json:"export_control_status,omitempty"` // EAR, ITAR, etc
}

func (x *Lead) Reset() {
	*x = Lead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lead) ProtoMessage() {}

func (x *Lead) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lead.ProtoReflect.Descriptor instead.
func (*Lead) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{7}
}

func (x *Lead) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Lead) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Lead) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Lead) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Lead) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Lead) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Lead) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Lead) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Lead) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Lead) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Lead) GetGoogleRating() float32 {
	if x != nil {
		return x.GoogleRating
	}
	return 0
}

func (x *Lead) GetReviewCount() int32 {
	if x != nil {
		return x.ReviewCount
	}
	return 0
}

func (x *Lead) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *Lead) GetEmployeeCount() int32 {
	if x != nil {
		return x.EmployeeCount
	}
	return 0
}

func (x *Lead) GetEstimatedRevenue() int64 {
	if x != nil {
		return x.EstimatedRevenue
	}
	return 0
}

func (x *Lead) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Lead) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Lead) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Lead) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Lead) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Lead) GetJob() *ScrapingJob {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *Lead) GetWorkspace() *Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *Lead) GetPlaceId() string {
	if x != nil {
		return x.PlaceId
	}
	return ""
}

func (x *Lead) GetGoogleMapsUrl() string {
	if x != nil {
		return x.GoogleMapsUrl
	}
	return ""
}

func (x *Lead) GetBusinessStatus() string {
	if x != nil {
		return x.BusinessStatus
	}
	return ""
}

func (x *Lead) GetRegularHours() []*BusinessHours {
	if x != nil {
		return x.RegularHours
	}
	return nil
}

func (x *Lead) GetSpecialHours() []*BusinessHours {
	if x != nil {
		return x.SpecialHours
	}
	return nil
}

func (x *Lead) GetPhotoReferences() []string {
	if x != nil {
		return x.PhotoReferences
	}
	return nil
}

func (x *Lead) GetMainPhotoUrl() string {
	if x != nil {
		return x.MainPhotoUrl
	}
	return ""
}

func (x *Lead) GetReviews() []*Review {
	if x != nil {
		return x.Reviews
	}
	return nil
}

func (x *Lead) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Lead) GetAmenities() []string {
	if x != nil {
		return x.Amenities
	}
	return nil
}

func (x *Lead) GetServesVegetarianFood() bool {
	if x != nil {
		return x.ServesVegetarianFood
	}
	return false
}

func (x *Lead) GetOutdoorSeating() bool {
	if x != nil {
		return x.OutdoorSeating
	}
	return false
}

func (x *Lead) GetPaymentMethods() []string {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

func (x *Lead) GetWheelchairAccessible() bool {
	if x != nil {
		return x.WheelchairAccessible
	}
	return false
}

func (x *Lead) GetParkingAvailable() bool {
	if x != nil {
		return x.ParkingAvailable
	}
	return false
}

func (x *Lead) GetSocialMedia() map[string]string {
	if x != nil {
		return x.SocialMedia
	}
	return nil
}

func (x *Lead) GetRatingCategory() string {
	if x != nil {
		return x.RatingCategory
	}
	return ""
}

func (x *Lead) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Lead) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Lead) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *Lead) GetDataSourceVersion() string {
	if x != nil {
		return x.DataSourceVersion
	}
	return ""
}

func (x *Lead) GetScrapingSessionId() string {
	if x != nil {
		return x.ScrapingSessionId
	}
	return ""
}

func (x *Lead) GetAlternatePhones() []string {
	if x != nil {
		return x.AlternatePhones
	}
	return nil
}

func (x *Lead) GetContactPersonName() string {
	if x != nil {
		return x.ContactPersonName
	}
	return ""
}

func (x *Lead) GetContactPersonTitle() string {
	if x != nil {
		return x.ContactPersonTitle
	}
	return ""
}

func (x *Lead) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *Lead) GetFoundedYear() int32 {
	if x != nil {
		return x.FoundedYear
	}
	return 0
}

func (x *Lead) GetBusinessType() string {
	if x != nil {
		return x.BusinessType
	}
	return ""
}

func (x *Lead) GetCertifications() []string {
	if x != nil {
		return x.Certifications
	}
	return nil
}

func (x *Lead) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *Lead) GetRevenueRange() Lead_RevenueRange {
	if x != nil {
		return x.RevenueRange
	}
	return Lead_REVENUE_RANGE_UNSPECIFIED
}

func (x *Lead) GetFundingStage() string {
	if x != nil {
		return x.FundingStage
	}
	return ""
}

func (x *Lead) GetIsPublicCompany() bool {
	if x != nil {
		return x.IsPublicCompany
	}
	return false
}

func (x *Lead) GetWebsiteLoadSpeed() float32 {
	if x != nil {
		return x.WebsiteLoadSpeed
	}
	return 0
}

func (x *Lead) GetHasSslCertificate() bool {
	if x != nil {
		return x.HasSslCertificate
	}
	return false
}

func (x *Lead) GetCmsUsed() string {
	if x != nil {
		return x.CmsUsed
	}
	return ""
}

func (x *Lead) GetEcommercePlatforms() []string {
	if x != nil {
		return x.EcommercePlatforms
	}
	return nil
}

func (x *Lead) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Lead) GetNeighborhood() string {
	if x != nil {
		return x.Neighborhood
	}
	return ""
}

func (x *Lead) GetNearbyLandmarks() []string {
	if x != nil {
		return x.NearbyLandmarks
	}
	return nil
}

func (x *Lead) GetTransportationAccess() string {
	if x != nil {
		return x.TransportationAccess
	}
	return ""
}

func (x *Lead) GetEmployeeBenefits() []Lead_EmployeeBenefit {
	if x != nil {
		return x.EmployeeBenefits
	}
	return nil
}

func (x *Lead) GetParentCompany() string {
	if x != nil {
		return x.ParentCompany
	}
	return ""
}

func (x *Lead) GetSubsidiaries() []string {
	if x != nil {
		return x.Subsidiaries
	}
	return nil
}

func (x *Lead) GetIsFranchise() bool {
	if x != nil {
		return x.IsFranchise
	}
	return false
}

func (x *Lead) GetSeoKeywords() []string {
	if x != nil {
		return x.SeoKeywords
	}
	return nil
}

func (x *Lead) GetUsesGoogleAds() bool {
	if x != nil {
		return x.UsesGoogleAds
	}
	return false
}

func (x *Lead) GetGoogleMyBusinessCategory() string {
	if x != nil {
		return x.GoogleMyBusinessCategory
	}
	return ""
}

func (x *Lead) GetNaicsCode() string {
	if x != nil {
		return x.NaicsCode
	}
	return ""
}

func (x *Lead) GetSicCode() string {
	if x != nil {
		return x.SicCode
	}
	return ""
}

func (x *Lead) GetUnspscCode() string {
	if x != nil {
		return x.UnspscCode
	}
	return ""
}

func (x *Lead) GetIsGreenCertified() bool {
	if x != nil {
		return x.IsGreenCertified
	}
	return false
}

func (x *Lead) GetEnergySources() []string {
	if x != nil {
		return x.EnergySources
	}
	return nil
}

func (x *Lead) GetSustainabilityRating() string {
	if x != nil {
		return x.SustainabilityRating
	}
	return ""
}

func (x *Lead) GetRecentAnnouncements() []string {
	if x != nil {
		return x.RecentAnnouncements
	}
	return nil
}

func (x *Lead) GetLastProductLaunch() *timestamppb.Timestamp {
	if x != nil {
		return x.LastProductLaunch
	}
	return nil
}

func (x *Lead) GetHasLitigationHistory() bool {
	if x != nil {
		return x.HasLitigationHistory
	}
	return false
}

func (x *Lead) GetExportControlStatus() string {
	if x != nil {
		return x.ExportControlStatus
	}
	return ""
}

// Detailed reviews
type Review struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Author          string                 `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Rating          float32                `protobuf:"fixed32,3,opt,name=rating,proto3" json:"rating,omitempty"`
	Text            string                 `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Time            *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	Language        string                 `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
	ProfilePhotoUrl string                 `protobuf:"bytes,7,opt,name=profile_photo_url,json=profilePhotoUrl,proto3" json:"profile_photo_url,omitempty"`
	ReviewCount     int32                  `protobuf:"varint,8,opt,name=review_count,json=reviewCount,proto3" json:"review_count,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *Review) Reset() {
	*x = Review{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Review) ProtoMessage() {}

func (x *Review) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Review.ProtoReflect.Descriptor instead.
func (*Review) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{8}
}

func (x *Review) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Review) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Review) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Review) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Review) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Review) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Review) GetProfilePhotoUrl() string {
	if x != nil {
		return x.ProfilePhotoUrl
	}
	return ""
}

func (x *Review) GetReviewCount() int32 {
	if x != nil {
		return x.ReviewCount
	}
	return 0
}

func (x *Review) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Review) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Review) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

// Temporal data
type BusinessHours struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Day       BusinessHours_DayOfWeek `protobuf:"varint,2,opt,name=day,proto3,enum=lead_scraper_service.v1.BusinessHours_DayOfWeek" json:"day,omitempty"`
	OpenTime  string                  `protobuf:"bytes,3,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	CloseTime string                  `protobuf:"bytes,4,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	Closed    bool                    `protobuf:"varint,5,opt,name=closed,proto3" json:"closed,omitempty"`
	CreatedAt *timestamppb.Timestamp  `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp  `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt *timestamppb.Timestamp  `protobuf:"bytes,11,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessHours) Reset() {
	*x = BusinessHours{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessHours) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessHours) ProtoMessage() {}

func (x *BusinessHours) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessHours.ProtoReflect.Descriptor instead.
func (*BusinessHours) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{9}
}

func (x *BusinessHours) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BusinessHours) GetDay() BusinessHours_DayOfWeek {
	if x != nil {
		return x.Day
	}
	return BusinessHours_DAY_OF_WEEK_UNSPECIFIED
}

func (x *BusinessHours) GetOpenTime() string {
	if x != nil {
		return x.OpenTime
	}
	return ""
}

func (x *BusinessHours) GetCloseTime() string {
	if x != nil {
		return x.CloseTime
	}
	return ""
}

func (x *BusinessHours) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *BusinessHours) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BusinessHours) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *BusinessHours) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

// Account-wide settings
type AccountSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Notification preferences
	EmailNotifications bool `protobuf:"varint,3,opt,name=email_notifications,json=emailNotifications,proto3" json:"email_notifications,omitempty"`
	SlackNotifications bool `protobuf:"varint,4,opt,name=slack_notifications,json=slackNotifications,proto3" json:"slack_notifications,omitempty"`
	// Data retention
	DefaultDataRetention *durationpb.Duration `protobuf:"bytes,5,opt,name=default_data_retention,json=defaultDataRetention,proto3" json:"default_data_retention,omitempty"`
	AutoPurgeEnabled     bool                 `protobuf:"varint,6,opt,name=auto_purge_enabled,json=autoPurgeEnabled,proto3" json:"auto_purge_enabled,omitempty"`
	// Security
	Require_2Fa    bool                   `protobuf:"varint,7,opt,name=require_2fa,json=require2fa,proto3" json:"require_2fa,omitempty"`
	SessionTimeout *durationpb.Duration   `protobuf:"bytes,8,opt,name=session_timeout,json=sessionTimeout,proto3" json:"session_timeout,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt      *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *AccountSettings) Reset() {
	*x = AccountSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSettings) ProtoMessage() {}

func (x *AccountSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSettings.ProtoReflect.Descriptor instead.
func (*AccountSettings) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{10}
}

func (x *AccountSettings) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccountSettings) GetEmailNotifications() bool {
	if x != nil {
		return x.EmailNotifications
	}
	return false
}

func (x *AccountSettings) GetSlackNotifications() bool {
	if x != nil {
		return x.SlackNotifications
	}
	return false
}

func (x *AccountSettings) GetDefaultDataRetention() *durationpb.Duration {
	if x != nil {
		return x.DefaultDataRetention
	}
	return nil
}

func (x *AccountSettings) GetAutoPurgeEnabled() bool {
	if x != nil {
		return x.AutoPurgeEnabled
	}
	return false
}

func (x *AccountSettings) GetRequire_2Fa() bool {
	if x != nil {
		return x.Require_2Fa
	}
	return false
}

func (x *AccountSettings) GetSessionTimeout() *durationpb.Duration {
	if x != nil {
		return x.SessionTimeout
	}
	return nil
}

func (x *AccountSettings) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AccountSettings) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AccountSettings) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

// APIKey represents an authentication token for accessing the API.
// It includes features for rate limiting, permissions, and usage tracking.
//
// Key features:
// - Unique key identification
// - Scope-based access control
// - Rate limiting
// - Usage tracking
// - Expiration management
// - Multi-tenant support
//
// Database considerations:
// - Uses GORM for ORM mapping
// - Includes indexes for efficient querying
// - Supports soft deletes
//
// Usage example:
// ```go
//
//	apiKey := &APIKey{
//	    Name: "Production API Key",
//	    Scopes: []string{"leads:read", "leads:write"},
//	    ExpiresAt: timestamppb.New(time.Now().AddDate(1, 0, 0)),
//	}
//
// ```
type APIKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human-readable name for the key
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The actual API key value (hashed in storage)
	KeyHash string `protobuf:"bytes,3,opt,name=key_hash,json=keyHash,proto3" json:"key_hash,omitempty"`
	// Key prefix for display/reference (first 8 chars)
	KeyPrefix string `protobuf:"bytes,4,opt,name=key_prefix,json=keyPrefix,proto3" json:"key_prefix,omitempty"`
	// Multi-tenant context
	OrgId    string `protobuf:"bytes,5,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	TenantId string `protobuf:"bytes,6,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Access control and permissions
	Scopes              []string `protobuf:"bytes,9,rep,name=scopes,proto3" json:"scopes,omitempty"`
	AllowedIps          []string `protobuf:"bytes,10,rep,name=allowed_ips,json=allowedIps,proto3" json:"allowed_ips,omitempty"`
	AllowedDomains      []string `protobuf:"bytes,11,rep,name=allowed_domains,json=allowedDomains,proto3" json:"allowed_domains,omitempty"`
	AllowedEnvironments []string `protobuf:"bytes,12,rep,name=allowed_environments,json=allowedEnvironments,proto3" json:"allowed_environments,omitempty"` // e.g., dev, staging, prod
	IsTestKey           bool     `protobuf:"varint,13,opt,name=is_test_key,json=isTestKey,proto3" json:"is_test_key,omitempty"`                            // Indicates if this is a test API key
	// Rate limiting and quotas
	RequestsPerSecond   int32   `protobuf:"varint,14,opt,name=requests_per_second,json=requestsPerSecond,proto3" json:"requests_per_second,omitempty"`
	RequestsPerDay      int32   `protobuf:"varint,15,opt,name=requests_per_day,json=requestsPerDay,proto3" json:"requests_per_day,omitempty"`
	ConcurrentRequests  int32   `protobuf:"varint,16,opt,name=concurrent_requests,json=concurrentRequests,proto3" json:"concurrent_requests,omitempty"`
	MonthlyRequestQuota int64   `protobuf:"varint,17,opt,name=monthly_request_quota,json=monthlyRequestQuota,proto3" json:"monthly_request_quota,omitempty"`
	CostPerRequest      float32 `protobuf:"fixed32,18,opt,name=cost_per_request,json=costPerRequest,proto3" json:"cost_per_request,omitempty"` // For usage-based billing
	BillingTier         string  `protobuf:"bytes,19,opt,name=billing_tier,json=billingTier,proto3" json:"billing_tier,omitempty"`              // e.g., free, basic, premium
	// Usage tracking and analytics
	TotalRequests       int64                  `protobuf:"varint,20,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	TotalErrors         int64                  `protobuf:"varint,21,opt,name=total_errors,json=totalErrors,proto3" json:"total_errors,omitempty"`
	LastUsedAt          *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=last_used_at,json=lastUsedAt,proto3" json:"last_used_at,omitempty"`
	AverageResponseTime float32                `protobuf:"fixed32,23,opt,name=average_response_time,json=averageResponseTime,proto3" json:"average_response_time,omitempty"`
	// Store maps as JSONB in PostgreSQL
	EndpointUsageJson       []byte        `protobuf:"bytes,24,opt,name=endpoint_usage_json,json=endpointUsageJson,proto3" json:"endpoint_usage_json,omitempty"` // Tracks usage per endpoint
	ErrorRatesJson          []byte        `protobuf:"bytes,25,opt,name=error_rates_json,json=errorRatesJson,proto3" json:"error_rates_json,omitempty"`          // Error rates by error type
	RecentErrors            []byte        `protobuf:"bytes,26,opt,name=recent_errors,json=recentErrors,proto3" json:"recent_errors,omitempty"`                  // Recent error details with timestamps
	SuccessfulRequestsCount int32         `protobuf:"varint,27,opt,name=successful_requests_count,json=successfulRequestsCount,proto3" json:"successful_requests_count,omitempty"`
	SuccessRate             float32       `protobuf:"fixed32,28,opt,name=success_rate,json=successRate,proto3" json:"success_rate,omitempty"`
	Status                  APIKey_Status `protobuf:"varint,29,opt,name=status,proto3,enum=lead_scraper_service.v1.APIKey_Status" json:"status,omitempty"`
	// Timestamps
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ExpiresAt            *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	DeletedAt            *timestamppb.Timestamp `protobuf:"bytes,33,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	LastRotatedAt        *timestamppb.Timestamp `protobuf:"bytes,34,opt,name=last_rotated_at,json=lastRotatedAt,proto3" json:"last_rotated_at,omitempty"`
	LastSecurityReviewAt *timestamppb.Timestamp `protobuf:"bytes,35,opt,name=last_security_review_at,json=lastSecurityReviewAt,proto3" json:"last_security_review_at,omitempty"`
	// Security features
	RequiresClientSecret       bool     `protobuf:"varint,36,opt,name=requires_client_secret,json=requiresClientSecret,proto3" json:"requires_client_secret,omitempty"`
	ClientSecretHash           string   `protobuf:"bytes,37,opt,name=client_secret_hash,json=clientSecretHash,proto3" json:"client_secret_hash,omitempty"`
	EnforceHttps               bool     `protobuf:"varint,38,opt,name=enforce_https,json=enforceHttps,proto3" json:"enforce_https,omitempty"`
	EnforceSigning             bool     `protobuf:"varint,39,opt,name=enforce_signing,json=enforceSigning,proto3" json:"enforce_signing,omitempty"`
	AllowedSignatureAlgorithms []string `protobuf:"bytes,40,rep,name=allowed_signature_algorithms,json=allowedSignatureAlgorithms,proto3" json:"allowed_signature_algorithms,omitempty"`
	EnforceMutualTls           bool     `protobuf:"varint,41,opt,name=enforce_mutual_tls,json=enforceMutualTls,proto3" json:"enforce_mutual_tls,omitempty"`
	ClientCertificateHash      string   `protobuf:"bytes,42,opt,name=client_certificate_hash,json=clientCertificateHash,proto3" json:"client_certificate_hash,omitempty"`
	RequireRequestSigning      bool     `protobuf:"varint,43,opt,name=require_request_signing,json=requireRequestSigning,proto3" json:"require_request_signing,omitempty"`
	// Developer experience
	Description       string   `protobuf:"bytes,44,opt,name=description,proto3" json:"description,omitempty"`                       // Detailed description of key usage
	MetadataJson      []byte   `protobuf:"bytes,45,opt,name=metadata_json,json=metadataJson,proto3" json:"metadata_json,omitempty"` // Custom metadata stored as JSONB
	Tags              []string `protobuf:"bytes,46,rep,name=tags,proto3" json:"tags,omitempty"`
	ApiVersion        string   `protobuf:"bytes,47,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"` // API version this key is valid for
	SupportedFeatures []string `protobuf:"bytes,48,rep,name=supported_features,json=supportedFeatures,proto3" json:"supported_features,omitempty"`
	DocumentationUrl  string   `protobuf:"bytes,49,opt,name=documentation_url,json=documentationUrl,proto3" json:"documentation_url,omitempty"`
	SupportContact    string   `protobuf:"bytes,50,opt,name=support_contact,json=supportContact,proto3" json:"support_contact,omitempty"`
	// Relationships
	Account   *Account   `protobuf:"bytes,51,opt,name=account,proto3" json:"account,omitempty"`
	Workspace *Workspace `protobuf:"bytes,52,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// Compliance and auditing
	LogAllRequests        bool                   `protobuf:"varint,53,opt,name=log_all_requests,json=logAllRequests,proto3" json:"log_all_requests,omitempty"`
	LastRotationReason    string                 `protobuf:"bytes,54,opt,name=last_rotation_reason,json=lastRotationReason,proto3" json:"last_rotation_reason,omitempty"`
	LastRotationDate      *timestamppb.Timestamp `protobuf:"bytes,55,opt,name=last_rotation_date,json=lastRotationDate,proto3" json:"last_rotation_date,omitempty"`
	RotationFrequencyDays int32                  `protobuf:"varint,56,opt,name=rotation_frequency_days,json=rotationFrequencyDays,proto3" json:"rotation_frequency_days,omitempty"`
	ComplianceStandards   []string               `protobuf:"bytes,57,rep,name=compliance_standards,json=complianceStandards,proto3" json:"compliance_standards,omitempty"` // e.g., SOC2, GDPR
	RequiresAuditLogging  bool                   `protobuf:"varint,58,opt,name=requires_audit_logging,json=requiresAuditLogging,proto3" json:"requires_audit_logging,omitempty"`
	DataResidency         string                 `protobuf:"bytes,59,opt,name=data_residency,json=dataResidency,proto3" json:"data_residency,omitempty"` // Geographic location of data storage
	ApprovedIntegrations  []string               `protobuf:"bytes,60,rep,name=approved_integrations,json=approvedIntegrations,proto3" json:"approved_integrations,omitempty"`
	// Monitoring and alerts
	AlertEmails            []string `protobuf:"bytes,61,rep,name=alert_emails,json=alertEmails,proto3" json:"alert_emails,omitempty"`
	WebhookUrl             string   `protobuf:"bytes,62,opt,name=webhook_url,json=webhookUrl,proto3" json:"webhook_url,omitempty"`
	AlertOnQuotaThreshold  bool     `protobuf:"varint,63,opt,name=alert_on_quota_threshold,json=alertOnQuotaThreshold,proto3" json:"alert_on_quota_threshold,omitempty"`
	QuotaAlertThreshold    float32  `protobuf:"fixed32,64,opt,name=quota_alert_threshold,json=quotaAlertThreshold,proto3" json:"quota_alert_threshold,omitempty"`
	AlertOnErrorSpike      bool     `protobuf:"varint,65,opt,name=alert_on_error_spike,json=alertOnErrorSpike,proto3" json:"alert_on_error_spike,omitempty"`
	ErrorAlertThreshold    float32  `protobuf:"fixed32,66,opt,name=error_alert_threshold,json=errorAlertThreshold,proto3" json:"error_alert_threshold,omitempty"`
	MonitoringIntegrations []string `protobuf:"bytes,67,rep,name=monitoring_integrations,json=monitoringIntegrations,proto3" json:"monitoring_integrations,omitempty"`
	Encrypted              bool     `protobuf:"varint,68,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	DataClassification     string   `protobuf:"bytes,69,opt,name=data_classification,json=dataClassification,proto3" json:"data_classification,omitempty"`
}

func (x *APIKey) Reset() {
	*x = APIKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIKey) ProtoMessage() {}

func (x *APIKey) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIKey.ProtoReflect.Descriptor instead.
func (*APIKey) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{11}
}

func (x *APIKey) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APIKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APIKey) GetKeyHash() string {
	if x != nil {
		return x.KeyHash
	}
	return ""
}

func (x *APIKey) GetKeyPrefix() string {
	if x != nil {
		return x.KeyPrefix
	}
	return ""
}

func (x *APIKey) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *APIKey) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *APIKey) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *APIKey) GetAllowedIps() []string {
	if x != nil {
		return x.AllowedIps
	}
	return nil
}

func (x *APIKey) GetAllowedDomains() []string {
	if x != nil {
		return x.AllowedDomains
	}
	return nil
}

func (x *APIKey) GetAllowedEnvironments() []string {
	if x != nil {
		return x.AllowedEnvironments
	}
	return nil
}

func (x *APIKey) GetIsTestKey() bool {
	if x != nil {
		return x.IsTestKey
	}
	return false
}

func (x *APIKey) GetRequestsPerSecond() int32 {
	if x != nil {
		return x.RequestsPerSecond
	}
	return 0
}

func (x *APIKey) GetRequestsPerDay() int32 {
	if x != nil {
		return x.RequestsPerDay
	}
	return 0
}

func (x *APIKey) GetConcurrentRequests() int32 {
	if x != nil {
		return x.ConcurrentRequests
	}
	return 0
}

func (x *APIKey) GetMonthlyRequestQuota() int64 {
	if x != nil {
		return x.MonthlyRequestQuota
	}
	return 0
}

func (x *APIKey) GetCostPerRequest() float32 {
	if x != nil {
		return x.CostPerRequest
	}
	return 0
}

func (x *APIKey) GetBillingTier() string {
	if x != nil {
		return x.BillingTier
	}
	return ""
}

func (x *APIKey) GetTotalRequests() int64 {
	if x != nil {
		return x.TotalRequests
	}
	return 0
}

func (x *APIKey) GetTotalErrors() int64 {
	if x != nil {
		return x.TotalErrors
	}
	return 0
}

func (x *APIKey) GetLastUsedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsedAt
	}
	return nil
}

func (x *APIKey) GetAverageResponseTime() float32 {
	if x != nil {
		return x.AverageResponseTime
	}
	return 0
}

func (x *APIKey) GetEndpointUsageJson() []byte {
	if x != nil {
		return x.EndpointUsageJson
	}
	return nil
}

func (x *APIKey) GetErrorRatesJson() []byte {
	if x != nil {
		return x.ErrorRatesJson
	}
	return nil
}

func (x *APIKey) GetRecentErrors() []byte {
	if x != nil {
		return x.RecentErrors
	}
	return nil
}

func (x *APIKey) GetSuccessfulRequestsCount() int32 {
	if x != nil {
		return x.SuccessfulRequestsCount
	}
	return 0
}

func (x *APIKey) GetSuccessRate() float32 {
	if x != nil {
		return x.SuccessRate
	}
	return 0
}

func (x *APIKey) GetStatus() APIKey_Status {
	if x != nil {
		return x.Status
	}
	return APIKey_STATUS_UNSPECIFIED
}

func (x *APIKey) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *APIKey) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *APIKey) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *APIKey) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *APIKey) GetLastRotatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRotatedAt
	}
	return nil
}

func (x *APIKey) GetLastSecurityReviewAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSecurityReviewAt
	}
	return nil
}

func (x *APIKey) GetRequiresClientSecret() bool {
	if x != nil {
		return x.RequiresClientSecret
	}
	return false
}

func (x *APIKey) GetClientSecretHash() string {
	if x != nil {
		return x.ClientSecretHash
	}
	return ""
}

func (x *APIKey) GetEnforceHttps() bool {
	if x != nil {
		return x.EnforceHttps
	}
	return false
}

func (x *APIKey) GetEnforceSigning() bool {
	if x != nil {
		return x.EnforceSigning
	}
	return false
}

func (x *APIKey) GetAllowedSignatureAlgorithms() []string {
	if x != nil {
		return x.AllowedSignatureAlgorithms
	}
	return nil
}

func (x *APIKey) GetEnforceMutualTls() bool {
	if x != nil {
		return x.EnforceMutualTls
	}
	return false
}

func (x *APIKey) GetClientCertificateHash() string {
	if x != nil {
		return x.ClientCertificateHash
	}
	return ""
}

func (x *APIKey) GetRequireRequestSigning() bool {
	if x != nil {
		return x.RequireRequestSigning
	}
	return false
}

func (x *APIKey) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *APIKey) GetMetadataJson() []byte {
	if x != nil {
		return x.MetadataJson
	}
	return nil
}

func (x *APIKey) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *APIKey) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *APIKey) GetSupportedFeatures() []string {
	if x != nil {
		return x.SupportedFeatures
	}
	return nil
}

func (x *APIKey) GetDocumentationUrl() string {
	if x != nil {
		return x.DocumentationUrl
	}
	return ""
}

func (x *APIKey) GetSupportContact() string {
	if x != nil {
		return x.SupportContact
	}
	return ""
}

func (x *APIKey) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *APIKey) GetWorkspace() *Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *APIKey) GetLogAllRequests() bool {
	if x != nil {
		return x.LogAllRequests
	}
	return false
}

func (x *APIKey) GetLastRotationReason() string {
	if x != nil {
		return x.LastRotationReason
	}
	return ""
}

func (x *APIKey) GetLastRotationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRotationDate
	}
	return nil
}

func (x *APIKey) GetRotationFrequencyDays() int32 {
	if x != nil {
		return x.RotationFrequencyDays
	}
	return 0
}

func (x *APIKey) GetComplianceStandards() []string {
	if x != nil {
		return x.ComplianceStandards
	}
	return nil
}

func (x *APIKey) GetRequiresAuditLogging() bool {
	if x != nil {
		return x.RequiresAuditLogging
	}
	return false
}

func (x *APIKey) GetDataResidency() string {
	if x != nil {
		return x.DataResidency
	}
	return ""
}

func (x *APIKey) GetApprovedIntegrations() []string {
	if x != nil {
		return x.ApprovedIntegrations
	}
	return nil
}

func (x *APIKey) GetAlertEmails() []string {
	if x != nil {
		return x.AlertEmails
	}
	return nil
}

func (x *APIKey) GetWebhookUrl() string {
	if x != nil {
		return x.WebhookUrl
	}
	return ""
}

func (x *APIKey) GetAlertOnQuotaThreshold() bool {
	if x != nil {
		return x.AlertOnQuotaThreshold
	}
	return false
}

func (x *APIKey) GetQuotaAlertThreshold() float32 {
	if x != nil {
		return x.QuotaAlertThreshold
	}
	return 0
}

func (x *APIKey) GetAlertOnErrorSpike() bool {
	if x != nil {
		return x.AlertOnErrorSpike
	}
	return false
}

func (x *APIKey) GetErrorAlertThreshold() float32 {
	if x != nil {
		return x.ErrorAlertThreshold
	}
	return 0
}

func (x *APIKey) GetMonitoringIntegrations() []string {
	if x != nil {
		return x.MonitoringIntegrations
	}
	return nil
}

func (x *APIKey) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

func (x *APIKey) GetDataClassification() string {
	if x != nil {
		return x.DataClassification
	}
	return ""
}

type TenantAPIKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	KeyHash     string                 `protobuf:"bytes,2,opt,name=key_hash,json=keyHash,proto3" json:"key_hash,omitempty"`
	KeyPrefix   string                 `protobuf:"bytes,3,opt,name=key_prefix,json=keyPrefix,proto3" json:"key_prefix,omitempty"`
	Name        string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Status      string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *TenantAPIKey) Reset() {
	*x = TenantAPIKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantAPIKey) ProtoMessage() {}

func (x *TenantAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantAPIKey.ProtoReflect.Descriptor instead.
func (*TenantAPIKey) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{12}
}

func (x *TenantAPIKey) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TenantAPIKey) GetKeyHash() string {
	if x != nil {
		return x.KeyHash
	}
	return ""
}

func (x *TenantAPIKey) GetKeyPrefix() string {
	if x != nil {
		return x.KeyPrefix
	}
	return ""
}

func (x *TenantAPIKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TenantAPIKey) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TenantAPIKey) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TenantAPIKey) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TenantAPIKey) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TenantAPIKey) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

// Result represents a scraped business result stored in JSONB format
// This aligns with the results table in the database
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// JSONB data field containing all business details
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_lead_scraper_service_v1_schema_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_lead_scraper_service_v1_schema_proto_rawDescGZIP(), []int{13}
}

func (x *Result) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Result) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_lead_scraper_service_v1_schema_proto protoreflect.FileDescriptor

var file_lead_scraper_service_v1_schema_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x0d,
	0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04,
	0x0a, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x88, 0x01, 0x01, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x0c,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x0f,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x0e,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x73, 0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x73, 0x6f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x73, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x73, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x73, 0x6f, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x73, 0x6f, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x37, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a,
	0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x32, 0x66, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x32, 0x66, 0x61, 0x12, 0x54, 0x0a, 0x0c, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74,
	0x65, 0x78, 0x74, 0x5b, 0x5d, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x61, 0x64,
	0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x2a, 0x00, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x1a,
	0x00, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7d, 0x0a, 0x0b, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50,
	0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x42, 0x55,
	0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x49, 0x4c, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52,
	0x49, 0x53, 0x45, 0x10, 0x03, 0x22, 0x6a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x3a, 0x15, 0xba, 0xb9, 0x19, 0x11, 0x08, 0x01, 0x1a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x81, 0x0b, 0x0a, 0x06, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x22, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x42, 0x61, 0x73,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x6e, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba,
	0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d, 0x52, 0x0e, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a,
	0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x34, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x2a,
	0x00, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x2a, 0x00, 0x52, 0x07, 0x61, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0x47, 0x0a, 0x19, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x3a, 0x0f, 0xba, 0xb9, 0x19,
	0x0b, 0x08, 0x01, 0x1a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x22, 0xa7, 0x13, 0x0a,
	0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a,
	0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x70,
	0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x29, 0xba, 0xb9, 0x19, 0x25, 0x0a, 0x23, 0x52, 0x21, 0x69, 0x64, 0x78,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x10,
	0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x63, 0x0a, 0x16, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0xba, 0xb9, 0x19, 0x29, 0x0a, 0x27, 0x52, 0x25, 0x69, 0x64, 0x78, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x70, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x14, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6c,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x4a, 0x6f, 0x62,
	0x73, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4a,
	0x6f, 0x62, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x62, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x65, 0x72, 0x47, 0x62, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3c,
	0x0a, 0x1a, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x70, 0x69, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x69, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x4a, 0x6f, 0x62, 0x12, 0x4c, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6e,
	0x65, 0x77, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x12, 0x5a, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6c, 0x65,
	0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x50,
	0x6c, 0x61, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c, 0x41, 0x4e, 0x5f,
	0x54, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f,
	0x46, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54,
	0x49, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x41,
	0x4e, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53,
	0x45, 0x10, 0x04, 0x22, 0x79, 0x0a, 0x0b, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x42,
	0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x10, 0x03, 0x22, 0x4f,
	0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x02, 0x22,
	0x9d, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x53,
	0x54, 0x5f, 0x44, 0x55, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x3a,
	0x15, 0xba, 0xb9, 0x19, 0x11, 0x08, 0x01, 0x1a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc1, 0x08, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08,
	0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6e, 0x0a, 0x15,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xfa, 0x42, 0x12,
	0x72, 0x10, 0x18, 0x80, 0x01, 0x32, 0x0b, 0x5e, 0x61, 0x75, 0x74, 0x68, 0x30, 0x5c, 0x7c, 0x2e,
	0x2a, 0x24, 0xba, 0xb9, 0x19, 0x22, 0x0a, 0x20, 0x52, 0x1e, 0x69, 0x64, 0x78, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xba, 0xb9, 0x19,
	0x16, 0x0a, 0x14, 0x52, 0x12, 0x69, 0x64, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x39,
	0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a,
	0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06,
	0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x66, 0x61, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x66, 0x61, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x72,
	0x75, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4a,
	0x6f, 0x62, 0x73, 0x52, 0x75, 0x6e, 0x12, 0x33, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x14, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x20, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x6f,
	0x62, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x61,
	0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x08,
	0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x27, 0x0a, 0x23, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x3a, 0x10, 0xba, 0xb9, 0x19, 0x0c, 0x08, 0x01,
	0x1a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xd5, 0x08, 0x0a, 0x09, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x28, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0xb9, 0x19, 0x17, 0x0a, 0x15, 0x52,
	0x13, 0x69, 0x64, 0x78, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x18, 0xfd, 0x01,
	0x60, 0x01, 0xba, 0xb9, 0x19, 0x19, 0x0a, 0x17, 0x52, 0x15, 0x69, 0x64, 0x78, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x64, 0x70, 0x72, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x67, 0x64, 0x70, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x68, 0x69, 0x70, 0x61, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x69, 0x70, 0x61, 0x61, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x63, 0x32, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x6f, 0x63, 0x32, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x61,
	0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x2a, 0x00, 0x52, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6a, 0x6f, 0x62, 0x73,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6a, 0x6f, 0x62, 0x73, 0x52, 0x75, 0x6e, 0x54, 0x68,
	0x69, 0x73, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x11, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x4a, 0x6f, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6a, 0x6f,
	0x62, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4a, 0x6f, 0x62,
	0x52, 0x75, 0x6e, 0x12, 0x53, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x6a, 0x6f, 0x62, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x61,
	0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62,
	0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x61,
	0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x07, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x3a, 0x12,
	0xba, 0xb9, 0x19, 0x0e, 0x08, 0x01, 0x1a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x22, 0x85, 0x06, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4a,
	0x6f, 0x62, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08,
	0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0xb9, 0x19, 0x1a, 0x0a, 0x18, 0x52, 0x16, 0x69, 0x64,
	0x78, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x04, 0x7a, 0x6f,
	0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18,
	0x14, 0x28, 0x01, 0x52, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x66, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x78, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78,
	0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x2a, 0x00, 0x52,
	0x05, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x3a, 0x12, 0xba, 0xb9, 0x19, 0x0e, 0x08, 0x01, 0x1a, 0x0a,
	0x67, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0xdd, 0x15, 0x0a, 0x10, 0x53,
	0x63, 0x72, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x0a, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x6f,
	0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x20, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x1e, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x72, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x42, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x2a, 0x00, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x22, 0x00, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x67, 0x65, 0x6f, 0x5f, 0x66, 0x65, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d, 0x00, 0x50, 0xc3, 0x47, 0x2d, 0x00, 0x00, 0x00,
	0x00, 0x52, 0x10, 0x67, 0x65, 0x6f, 0x46, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x67, 0x65, 0x6f, 0x5f, 0x66, 0x65, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x42, 0x17, 0xfa, 0x42,
	0x14, 0x12, 0x12, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x56, 0x40, 0x29, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x80, 0x56, 0xc0, 0x52, 0x0d, 0x67, 0x65, 0x6f, 0x46, 0x65, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x4c, 0x61, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x67, 0x65, 0x6f, 0x5f, 0x66, 0x65, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x42, 0x17, 0xfa,
	0x42, 0x14, 0x12, 0x12, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x66, 0x40, 0x29, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x80, 0x66, 0xc0, 0x52, 0x0d, 0x67, 0x65, 0x6f, 0x46, 0x65, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x4c, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x14, 0x67, 0x65, 0x6f, 0x5f, 0x66, 0x65, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x14, 0x28, 0x01, 0x52, 0x11,
	0x67, 0x65, 0x6f, 0x46, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x69,
	0x6e, 0x12, 0x3a, 0x0a, 0x14, 0x67, 0x65, 0x6f, 0x5f, 0x66, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x14, 0x28, 0x01, 0x52, 0x11, 0x67, 0x65, 0x6f, 0x46,
	0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x78, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x34, 0x0a,
	0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x1a, 0x03, 0x18, 0xf4, 0x03, 0x52,
	0x15, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x50, 0x65, 0x72, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x5b, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a,
	0x65, 0x5f, 0x70, 0x69, 0x69, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x50, 0x69, 0x69, 0x12, 0x42, 0x0a, 0x18, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a,
	0x1a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c,
	0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6c, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3f, 0x0a, 0x1c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x43, 0x0a,
	0x1e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x26, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d,
	0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x0a, 0x05, 0x2d, 0x00, 0x00, 0x00,
	0x00, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a,
	0x1e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x1b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x46, 0x0a, 0x1b, 0x71,
	0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x18, 0x64, 0x52, 0x18, 0x71, 0x6f, 0x73, 0x4d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x0d, 0x71, 0x6f, 0x73, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x71, 0x6f,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x71, 0x6f, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6a, 0x61,
	0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x71, 0x6f, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x74, 0x78, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x54, 0x78,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f,
	0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x55, 0x54, 0x50,
	0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x55, 0x54, 0x50, 0x55,
	0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x43, 0x53, 0x56, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x42, 0x49, 0x47, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x10, 0x04, 0x3a, 0x1a,
	0xba, 0xb9, 0x19, 0x16, 0x08, 0x01, 0x1a, 0x12, 0x73, 0x63, 0x72, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0xd1, 0x23, 0x0a, 0x04, 0x4c,
	0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0xba, 0xb9, 0x19, 0x12, 0x0a, 0x10, 0x52, 0x0e, 0x69, 0x64, 0x78, 0x5f,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x07, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0xb9, 0x19, 0x13, 0x0a, 0x11, 0x52, 0x0f, 0x69, 0x64, 0x78,
	0x5f, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xba, 0xb9, 0x19,
	0x12, 0x0a, 0x10, 0x52, 0x0e, 0x69, 0x64, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0xb9, 0x19, 0x13, 0x0a, 0x11,
	0x52, 0x0f, 0x69, 0x64, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0xb9, 0x19, 0x15, 0x0a,
	0x13, 0x52, 0x11, 0x69, 0x64, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x33, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x17, 0xfa, 0x42, 0x14, 0x12, 0x12, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x56, 0x40, 0x29,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x56, 0xc0, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x12, 0x12, 0x19, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x80, 0x66, 0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x66, 0xc0, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d, 0x00, 0x00, 0xa0, 0x40, 0x2d, 0x00, 0x00, 0x00,
	0x00, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x2a, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x0b,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x10, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0xb9, 0x19, 0x14, 0x0a, 0x12, 0x52, 0x10, 0x69, 0x64,
	0x78, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0xba, 0xb9, 0x19, 0x17, 0x0a, 0x15, 0x52, 0x13, 0x69, 0x64, 0x78, 0x5f, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1c, 0xba, 0xb9, 0x19, 0x18, 0x0a, 0x16, 0x52, 0x14,
	0x69, 0x64, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x22, 0x00,
	0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x48, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x22, 0x00, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x3e, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0xb9, 0x19, 0x18, 0x0a, 0x16,
	0x30, 0x01, 0x52, 0x12, 0x69, 0x64, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x88,
	0x01, 0x01, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x55, 0x72,
	0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x2a,
	0x00, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12,
	0x53, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x2a, 0x00, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x2a, 0x00, 0x52,
	0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x6d, 0x65, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x6d, 0x65, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x67, 0x65, 0x74, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x56, 0x65, 0x67, 0x65, 0x74, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x46, 0x6f,
	0x6f, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x73, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x75, 0x74,
	0x64, 0x6f, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x24,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x63, 0x68, 0x61,
	0x69, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x72, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x2e, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x63, 0x72, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a,
	0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d, 0x52, 0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x0c, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0xe9, 0x0f, 0x28, 0xc0, 0x0c, 0x52, 0x0b, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x12, 0x31, 0x0a, 0x0d, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xba, 0xb9, 0x19, 0x08, 0x0a, 0x06, 0x12, 0x04, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x34, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74,
	0x65, 0x78, 0x74, 0x5b, 0x5d, 0x52, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0d,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65,
	0x61, 0x64, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0c, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2c,
	0x0a, 0x12, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x68, 0x61, 0x73, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x53, 0x73,
	0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x6d, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6d, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x13, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x3c,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65,
	0x78, 0x74, 0x5b, 0x5d, 0x52, 0x12, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x68, 0x6f, 0x6f, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x68, 0x6f, 0x6f, 0x64, 0x12, 0x39, 0x0a, 0x10, 0x6e, 0x65, 0x61, 0x72,
	0x62, 0x79, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x3f, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74,
	0x5b, 0x5d, 0x52, 0x0f, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x4c, 0x61, 0x6e, 0x64, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6a, 0x0a, 0x11, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x18, 0x42, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65,
	0x61, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74,
	0x5b, 0x5d, 0x52, 0x10, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x32, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x44, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74, 0x5b,
	0x5d, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x18,
	0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x65, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x46, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08,
	0x12, 0x06, 0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d, 0x52, 0x0b, 0x73, 0x65, 0x6f, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x73, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x12, 0x3d, 0x0a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x48, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4d, 0x79, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x0a,
	0x6e, 0x61, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0xfa, 0x42, 0x0e, 0x72, 0x0c, 0x32, 0x0a, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b,
	0x36, 0x7d, 0x24, 0x52, 0x09, 0x6e, 0x61, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c,
	0x0a, 0x08, 0x73, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0xfa, 0x42, 0x0e, 0x72, 0x0c, 0x32, 0x0a, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b,
	0x34, 0x7d, 0x24, 0x52, 0x07, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x73, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0xfa, 0x42, 0x0e, 0x72, 0x0c, 0x32, 0x0a, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d,
	0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a, 0x75, 0x6e, 0x73, 0x70, 0x73, 0x63, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73,
	0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x35,
	0x0a, 0x0e, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x4d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06,
	0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d, 0x52, 0x0d, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x14, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x4f, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08,
	0x12, 0x06, 0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a,
	0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x68, 0x61, 0x73,
	0x5f, 0x6c, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x51, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x61, 0x73, 0x4c, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x32, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x31, 0x30, 0x30, 0x4b, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x5f, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x31, 0x30, 0x30, 0x4b, 0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x4d, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x31, 0x4d, 0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x30, 0x4d, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18,
	0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x31, 0x30,
	0x4d, 0x5f, 0x54, 0x4f, 0x5f, 0x35, 0x30, 0x4d, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45,
	0x56, 0x45, 0x4e, 0x55, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x5f, 0x35, 0x30, 0x4d, 0x10, 0x05, 0x22, 0xc6, 0x01, 0x0a, 0x0f, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4d,
	0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21,
	0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54,
	0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f,
	0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4d, 0x50,
	0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x5f, 0x50, 0x41,
	0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x03, 0x12, 0x20, 0x0a,
	0x1c, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49,
	0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x04, 0x3a,
	0x0d, 0xba, 0xb9, 0x19, 0x09, 0x08, 0x01, 0x1a, 0x05, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x22, 0xf9,
	0x03, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x28, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0xba, 0xb9, 0x19, 0x16, 0x0a, 0x14, 0x52, 0x12, 0x69, 0x64, 0x78,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x18, 0xba,
	0xb9, 0x19, 0x14, 0x0a, 0x12, 0x52, 0x10, 0x69, 0x64, 0x78, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x0f, 0xba, 0xb9, 0x19, 0x0b, 0x08,
	0x01, 0x1a, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0x89, 0x05, 0x0a, 0x0d, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02,
	0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x44, 0x61, 0x79, 0x4f,
	0x66, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa,
	0x42, 0x1f, 0x72, 0x1d, 0x18, 0x05, 0x32, 0x19, 0x5e, 0x28, 0x5b, 0x30, 0x31, 0x5d, 0x5c, 0x64,
	0x7c, 0x32, 0x5b, 0x30, 0x2d, 0x33, 0x5d, 0x29, 0x3a, 0x5b, 0x30, 0x2d, 0x35, 0x5d, 0x5c, 0x64,
	0x24, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65,
	0x6b, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x4d, 0x4f,
	0x4e, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46,
	0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x54, 0x55, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x57,
	0x45, 0x44, 0x4e, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x41,
	0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x54, 0x48, 0x55, 0x52, 0x53, 0x44,
	0x41, 0x59, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57,
	0x45, 0x45, 0x4b, 0x5f, 0x46, 0x52, 0x49, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14,
	0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x53, 0x41, 0x54, 0x55,
	0x52, 0x44, 0x41, 0x59, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46,
	0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x53, 0x55, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x07, 0x3a, 0x16,
	0xba, 0xb9, 0x19, 0x12, 0x08, 0x01, 0x1a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x22, 0xbc, 0x04, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x28, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x70, 0x75, 0x72, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x75, 0x72, 0x67, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x5f, 0x32, 0x66, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x32, 0x66, 0x61, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x18, 0xba, 0xb9, 0x19,
	0x14, 0x08, 0x01, 0x1a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xa6, 0x1e, 0x0a, 0x06, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xba, 0xb9,
	0x19, 0x04, 0x0a, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0xba, 0xb9, 0x19, 0x15, 0x0a, 0x13, 0x52, 0x11, 0x69, 0x64, 0x78, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x30, 0x01, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3a, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0xb9, 0x19, 0x17, 0x0a,
	0x15, 0x52, 0x13, 0x69, 0x64, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0xb9, 0x19, 0x17, 0x0a, 0x15,
	0x52, 0x13, 0x69, 0x64, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x25, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0xb9, 0x19, 0x1a, 0x0a, 0x18, 0x52, 0x16,
	0x69, 0x64, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba,
	0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d, 0x52, 0x0a, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x70, 0x73, 0x12, 0x37, 0x0a, 0x0f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74,
	0x5b, 0x5d, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x41, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d,
	0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54, 0x65,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x31,
	0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20,
	0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61,
	0x79, 0x12, 0x38, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x73, 0x74, 0x50,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1e, 0xba, 0xb9, 0x19, 0x1a, 0x0a, 0x18,
	0x52, 0x16, 0x69, 0x64, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x13, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0d, 0xba, 0xb9, 0x19, 0x09, 0x0a, 0x07, 0x12, 0x05, 0x6a,
	0x73, 0x6f, 0x6e, 0x62, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x0d, 0xba, 0xb9, 0x19, 0x09, 0x0a, 0x07, 0x12, 0x05, 0x6a, 0x73, 0x6f, 0x6e, 0x62,
	0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x4a, 0x73, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0d, 0xba, 0xb9, 0x19, 0x09, 0x0a, 0x07, 0x12,
	0x05, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x1b, 0xba, 0xb9, 0x19,
	0x17, 0x0a, 0x15, 0x52, 0x13, 0x69, 0x64, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x57, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1c, 0xba, 0xb9, 0x19, 0x18, 0x0a, 0x16, 0x52, 0x14,
	0x69, 0x64, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x51,
	0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41,
	0x74, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x0d, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x6a, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x48, 0x74,
	0x74, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x1c,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x28, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74,
	0x5b, 0x5d, 0x52, 0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x74, 0x6c, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0d, 0xba, 0xb9, 0x19, 0x09, 0x0a, 0x07, 0x12, 0x05, 0x6a,
	0x73, 0x6f, 0x6e, 0x62, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x73,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x30, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78,
	0x74, 0x5b, 0x5d, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x22, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x48, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x22, 0x00, 0x52,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f,
	0x67, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3f, 0x0a, 0x17, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x15, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x41, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x18, 0x39, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d, 0x52,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x43, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d,
	0x52, 0x14, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0xb9,
	0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d, 0x52, 0x0b, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x4f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x13, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x70, 0x69, 0x6b, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x47, 0x0a, 0x17,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x43, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba,
	0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x06, 0x74, 0x65, 0x78, 0x74, 0x5b, 0x5d, 0x52, 0x16, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x27, 0xfa, 0x42, 0x24, 0x72, 0x22, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x01,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x56,
	0x49, 0x45, 0x57, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x07, 0x3a, 0x10, 0xba, 0xb9,
	0x19, 0x0c, 0x08, 0x01, 0x1a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xa8,
	0x03, 0x0a, 0x0c, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x0a, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x0a, 0x02, 0x30, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x41,
	0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x22, 0xba, 0xb9, 0x19, 0x1e, 0x0a, 0x1c, 0x52, 0x1a, 0x69, 0x64, 0x78, 0x5f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x3a, 0x17, 0xba, 0xb9, 0x19, 0x13, 0x08, 0x01, 0x1a, 0x0f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x47, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x3a, 0x0f, 0xba, 0xb9, 0x19, 0x0b, 0x08, 0x01, 0x1a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x2a, 0x96, 0x02, 0x0a, 0x13, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x41,
	0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x41,
	0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x20, 0x0a, 0x1c, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4a, 0x4f,
	0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x2a, 0xe4, 0x02, 0x0a, 0x0e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x1b, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1d,
	0x0a, 0x19, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1c, 0x0a,
	0x18, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x57,
	0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10,
	0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x08, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x0a, 0x42, 0xbf, 0x02, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x5f,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x9d, 0x01, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x2d,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x65, 0x61, 0x64, 0x5f,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x4c, 0x58, 0x58, 0xaa, 0x02, 0x15, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x15, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x21, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x4c, 0x65,
	0x61, 0x64, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lead_scraper_service_v1_schema_proto_rawDescOnce sync.Once
	file_lead_scraper_service_v1_schema_proto_rawDescData = file_lead_scraper_service_v1_schema_proto_rawDesc
)

func file_lead_scraper_service_v1_schema_proto_rawDescGZIP() []byte {
	file_lead_scraper_service_v1_schema_proto_rawDescOnce.Do(func() {
		file_lead_scraper_service_v1_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_lead_scraper_service_v1_schema_proto_rawDescData)
	})
	return file_lead_scraper_service_v1_schema_proto_rawDescData
}

var file_lead_scraper_service_v1_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_lead_scraper_service_v1_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_lead_scraper_service_v1_schema_proto_goTypes = []interface{}{
	(BackgroundJobStatus)(0),           // 0: lead_scraper_service.v1.BackgroundJobStatus
	(WorkflowStatus)(0),                // 1: lead_scraper_service.v1.WorkflowStatus
	(Organization_BillingPlan)(0),      // 2: lead_scraper_service.v1.Organization.BillingPlan
	(Organization_Status)(0),           // 3: lead_scraper_service.v1.Organization.Status
	(Tenant_Status)(0),                 // 4: lead_scraper_service.v1.Tenant.Status
	(Subscription_PlanTier)(0),         // 5: lead_scraper_service.v1.Subscription.PlanTier
	(Subscription_BillingMode)(0),      // 6: lead_scraper_service.v1.Subscription.BillingMode
	(Subscription_Interval)(0),         // 7: lead_scraper_service.v1.Subscription.Interval
	(Subscription_PaymentStatus)(0),    // 8: lead_scraper_service.v1.Subscription.PaymentStatus
	(Account_AccountStatus)(0),         // 9: lead_scraper_service.v1.Account.AccountStatus
	(ScrapingWorkflow_OutputFormat)(0), // 10: lead_scraper_service.v1.ScrapingWorkflow.OutputFormat
	(Lead_RevenueRange)(0),             // 11: lead_scraper_service.v1.Lead.RevenueRange
	(Lead_EmployeeBenefit)(0),          // 12: lead_scraper_service.v1.Lead.EmployeeBenefit
	(BusinessHours_DayOfWeek)(0),       // 13: lead_scraper_service.v1.BusinessHours.DayOfWeek
	(APIKey_Status)(0),                 // 14: lead_scraper_service.v1.APIKey.Status
	(*Organization)(nil),               // 15: lead_scraper_service.v1.Organization
	(*Tenant)(nil),                     // 16: lead_scraper_service.v1.Tenant
	(*Subscription)(nil),               // 17: lead_scraper_service.v1.Subscription
	(*Account)(nil),                    // 18: lead_scraper_service.v1.Account
	(*Workspace)(nil),                  // 19: lead_scraper_service.v1.Workspace
	(*ScrapingJob)(nil),                // 20: lead_scraper_service.v1.ScrapingJob
	(*ScrapingWorkflow)(nil),           // 21: lead_scraper_service.v1.ScrapingWorkflow
	(*Lead)(nil),                       // 22: lead_scraper_service.v1.Lead
	(*Review)(nil),                     // 23: lead_scraper_service.v1.Review
	(*BusinessHours)(nil),              // 24: lead_scraper_service.v1.BusinessHours
	(*AccountSettings)(nil),            // 25: lead_scraper_service.v1.AccountSettings
	(*APIKey)(nil),                     // 26: lead_scraper_service.v1.APIKey
	(*TenantAPIKey)(nil),               // 27: lead_scraper_service.v1.TenantAPIKey
	(*Result)(nil),                     // 28: lead_scraper_service.v1.Result
	nil,                                // 29: lead_scraper_service.v1.Tenant.EnvironmentVariablesEntry
	nil,                                // 30: lead_scraper_service.v1.Lead.SocialMediaEntry
	(*timestamppb.Timestamp)(nil),      // 31: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),        // 32: google.protobuf.Duration
}
var file_lead_scraper_service_v1_schema_proto_depIdxs = []int32{
	2,  // 0: lead_scraper_service.v1.Organization.billing_plan:type_name -> lead_scraper_service.v1.Organization.BillingPlan
	16, // 1: lead_scraper_service.v1.Organization.tenants:type_name -> lead_scraper_service.v1.Tenant
	17, // 2: lead_scraper_service.v1.Organization.subscriptions:type_name -> lead_scraper_service.v1.Subscription
	31, // 3: lead_scraper_service.v1.Organization.created_at:type_name -> google.protobuf.Timestamp
	31, // 4: lead_scraper_service.v1.Organization.updated_at:type_name -> google.protobuf.Timestamp
	31, // 5: lead_scraper_service.v1.Organization.deleted_at:type_name -> google.protobuf.Timestamp
	3,  // 6: lead_scraper_service.v1.Organization.status:type_name -> lead_scraper_service.v1.Organization.Status
	15, // 7: lead_scraper_service.v1.Tenant.organization:type_name -> lead_scraper_service.v1.Organization
	29, // 8: lead_scraper_service.v1.Tenant.environment_variables:type_name -> lead_scraper_service.v1.Tenant.EnvironmentVariablesEntry
	18, // 9: lead_scraper_service.v1.Tenant.accounts:type_name -> lead_scraper_service.v1.Account
	27, // 10: lead_scraper_service.v1.Tenant.api_keys:type_name -> lead_scraper_service.v1.TenantAPIKey
	31, // 11: lead_scraper_service.v1.Tenant.created_at:type_name -> google.protobuf.Timestamp
	31, // 12: lead_scraper_service.v1.Tenant.updated_at:type_name -> google.protobuf.Timestamp
	31, // 13: lead_scraper_service.v1.Tenant.deleted_at:type_name -> google.protobuf.Timestamp
	4,  // 14: lead_scraper_service.v1.Tenant.status:type_name -> lead_scraper_service.v1.Tenant.Status
	5,  // 15: lead_scraper_service.v1.Subscription.plan_tier:type_name -> lead_scraper_service.v1.Subscription.PlanTier
	6,  // 16: lead_scraper_service.v1.Subscription.billing_mode:type_name -> lead_scraper_service.v1.Subscription.BillingMode
	31, // 17: lead_scraper_service.v1.Subscription.current_period_start:type_name -> google.protobuf.Timestamp
	31, // 18: lead_scraper_service.v1.Subscription.current_period_end:type_name -> google.protobuf.Timestamp
	7,  // 19: lead_scraper_service.v1.Subscription.billing_interval:type_name -> lead_scraper_service.v1.Subscription.Interval
	8,  // 20: lead_scraper_service.v1.Subscription.payment_status:type_name -> lead_scraper_service.v1.Subscription.PaymentStatus
	31, // 21: lead_scraper_service.v1.Subscription.trial_start:type_name -> google.protobuf.Timestamp
	31, // 22: lead_scraper_service.v1.Subscription.trial_end:type_name -> google.protobuf.Timestamp
	31, // 23: lead_scraper_service.v1.Subscription.created_at:type_name -> google.protobuf.Timestamp
	31, // 24: lead_scraper_service.v1.Subscription.updated_at:type_name -> google.protobuf.Timestamp
	31, // 25: lead_scraper_service.v1.Subscription.canceled_at:type_name -> google.protobuf.Timestamp
	31, // 26: lead_scraper_service.v1.Subscription.ended_at:type_name -> google.protobuf.Timestamp
	31, // 27: lead_scraper_service.v1.Account.deleted_at:type_name -> google.protobuf.Timestamp
	31, // 28: lead_scraper_service.v1.Account.created_at:type_name -> google.protobuf.Timestamp
	9,  // 29: lead_scraper_service.v1.Account.account_status:type_name -> lead_scraper_service.v1.Account.AccountStatus
	31, // 30: lead_scraper_service.v1.Account.last_login_at:type_name -> google.protobuf.Timestamp
	19, // 31: lead_scraper_service.v1.Account.workspaces:type_name -> lead_scraper_service.v1.Workspace
	25, // 32: lead_scraper_service.v1.Account.settings:type_name -> lead_scraper_service.v1.AccountSettings
	31, // 33: lead_scraper_service.v1.Workspace.created_at:type_name -> google.protobuf.Timestamp
	31, // 34: lead_scraper_service.v1.Workspace.updated_at:type_name -> google.protobuf.Timestamp
	31, // 35: lead_scraper_service.v1.Workspace.deleted_at:type_name -> google.protobuf.Timestamp
	21, // 36: lead_scraper_service.v1.Workspace.workflows:type_name -> lead_scraper_service.v1.ScrapingWorkflow
	31, // 37: lead_scraper_service.v1.Workspace.last_job_run:type_name -> google.protobuf.Timestamp
	20, // 38: lead_scraper_service.v1.Workspace.scraping_jobs:type_name -> lead_scraper_service.v1.ScrapingJob
	26, // 39: lead_scraper_service.v1.Workspace.api_keys:type_name -> lead_scraper_service.v1.APIKey
	31, // 40: lead_scraper_service.v1.ScrapingJob.created_at:type_name -> google.protobuf.Timestamp
	0,  // 41: lead_scraper_service.v1.ScrapingJob.status:type_name -> lead_scraper_service.v1.BackgroundJobStatus
	31, // 42: lead_scraper_service.v1.ScrapingJob.updated_at:type_name -> google.protobuf.Timestamp
	31, // 43: lead_scraper_service.v1.ScrapingJob.deleted_at:type_name -> google.protobuf.Timestamp
	22, // 44: lead_scraper_service.v1.ScrapingJob.leads:type_name -> lead_scraper_service.v1.Lead
	31, // 45: lead_scraper_service.v1.ScrapingWorkflow.next_run_time:type_name -> google.protobuf.Timestamp
	31, // 46: lead_scraper_service.v1.ScrapingWorkflow.last_run_time:type_name -> google.protobuf.Timestamp
	1,  // 47: lead_scraper_service.v1.ScrapingWorkflow.status:type_name -> lead_scraper_service.v1.WorkflowStatus
	31, // 48: lead_scraper_service.v1.ScrapingWorkflow.created_at:type_name -> google.protobuf.Timestamp
	31, // 49: lead_scraper_service.v1.ScrapingWorkflow.updated_at:type_name -> google.protobuf.Timestamp
	31, // 50: lead_scraper_service.v1.ScrapingWorkflow.deleted_at:type_name -> google.protobuf.Timestamp
	20, // 51: lead_scraper_service.v1.ScrapingWorkflow.jobs:type_name -> lead_scraper_service.v1.ScrapingJob
	19, // 52: lead_scraper_service.v1.ScrapingWorkflow.workspace:type_name -> lead_scraper_service.v1.Workspace
	10, // 53: lead_scraper_service.v1.ScrapingWorkflow.output_format:type_name -> lead_scraper_service.v1.ScrapingWorkflow.OutputFormat
	32, // 54: lead_scraper_service.v1.ScrapingWorkflow.data_retention:type_name -> google.protobuf.Duration
	32, // 55: lead_scraper_service.v1.ScrapingWorkflow.qos_request_timeout:type_name -> google.protobuf.Duration
	31, // 56: lead_scraper_service.v1.Lead.created_at:type_name -> google.protobuf.Timestamp
	31, // 57: lead_scraper_service.v1.Lead.updated_at:type_name -> google.protobuf.Timestamp
	31, // 58: lead_scraper_service.v1.Lead.deleted_at:type_name -> google.protobuf.Timestamp
	20, // 59: lead_scraper_service.v1.Lead.job:type_name -> lead_scraper_service.v1.ScrapingJob
	19, // 60: lead_scraper_service.v1.Lead.workspace:type_name -> lead_scraper_service.v1.Workspace
	24, // 61: lead_scraper_service.v1.Lead.regular_hours:type_name -> lead_scraper_service.v1.BusinessHours
	24, // 62: lead_scraper_service.v1.Lead.special_hours:type_name -> lead_scraper_service.v1.BusinessHours
	23, // 63: lead_scraper_service.v1.Lead.reviews:type_name -> lead_scraper_service.v1.Review
	30, // 64: lead_scraper_service.v1.Lead.social_media:type_name -> lead_scraper_service.v1.Lead.SocialMediaEntry
	31, // 65: lead_scraper_service.v1.Lead.last_updated:type_name -> google.protobuf.Timestamp
	11, // 66: lead_scraper_service.v1.Lead.revenue_range:type_name -> lead_scraper_service.v1.Lead.RevenueRange
	12, // 67: lead_scraper_service.v1.Lead.employee_benefits:type_name -> lead_scraper_service.v1.Lead.EmployeeBenefit
	31, // 68: lead_scraper_service.v1.Lead.last_product_launch:type_name -> google.protobuf.Timestamp
	31, // 69: lead_scraper_service.v1.Review.time:type_name -> google.protobuf.Timestamp
	31, // 70: lead_scraper_service.v1.Review.created_at:type_name -> google.protobuf.Timestamp
	31, // 71: lead_scraper_service.v1.Review.updated_at:type_name -> google.protobuf.Timestamp
	31, // 72: lead_scraper_service.v1.Review.deleted_at:type_name -> google.protobuf.Timestamp
	13, // 73: lead_scraper_service.v1.BusinessHours.day:type_name -> lead_scraper_service.v1.BusinessHours.DayOfWeek
	31, // 74: lead_scraper_service.v1.BusinessHours.created_at:type_name -> google.protobuf.Timestamp
	31, // 75: lead_scraper_service.v1.BusinessHours.updated_at:type_name -> google.protobuf.Timestamp
	31, // 76: lead_scraper_service.v1.BusinessHours.deleted_at:type_name -> google.protobuf.Timestamp
	32, // 77: lead_scraper_service.v1.AccountSettings.default_data_retention:type_name -> google.protobuf.Duration
	32, // 78: lead_scraper_service.v1.AccountSettings.session_timeout:type_name -> google.protobuf.Duration
	31, // 79: lead_scraper_service.v1.AccountSettings.created_at:type_name -> google.protobuf.Timestamp
	31, // 80: lead_scraper_service.v1.AccountSettings.updated_at:type_name -> google.protobuf.Timestamp
	31, // 81: lead_scraper_service.v1.AccountSettings.deleted_at:type_name -> google.protobuf.Timestamp
	31, // 82: lead_scraper_service.v1.APIKey.last_used_at:type_name -> google.protobuf.Timestamp
	14, // 83: lead_scraper_service.v1.APIKey.status:type_name -> lead_scraper_service.v1.APIKey.Status
	31, // 84: lead_scraper_service.v1.APIKey.created_at:type_name -> google.protobuf.Timestamp
	31, // 85: lead_scraper_service.v1.APIKey.updated_at:type_name -> google.protobuf.Timestamp
	31, // 86: lead_scraper_service.v1.APIKey.expires_at:type_name -> google.protobuf.Timestamp
	31, // 87: lead_scraper_service.v1.APIKey.deleted_at:type_name -> google.protobuf.Timestamp
	31, // 88: lead_scraper_service.v1.APIKey.last_rotated_at:type_name -> google.protobuf.Timestamp
	31, // 89: lead_scraper_service.v1.APIKey.last_security_review_at:type_name -> google.protobuf.Timestamp
	18, // 90: lead_scraper_service.v1.APIKey.account:type_name -> lead_scraper_service.v1.Account
	19, // 91: lead_scraper_service.v1.APIKey.workspace:type_name -> lead_scraper_service.v1.Workspace
	31, // 92: lead_scraper_service.v1.APIKey.last_rotation_date:type_name -> google.protobuf.Timestamp
	31, // 93: lead_scraper_service.v1.TenantAPIKey.created_at:type_name -> google.protobuf.Timestamp
	31, // 94: lead_scraper_service.v1.TenantAPIKey.updated_at:type_name -> google.protobuf.Timestamp
	31, // 95: lead_scraper_service.v1.TenantAPIKey.deleted_at:type_name -> google.protobuf.Timestamp
	96, // [96:96] is the sub-list for method output_type
	96, // [96:96] is the sub-list for method input_type
	96, // [96:96] is the sub-list for extension type_name
	96, // [96:96] is the sub-list for extension extendee
	0,  // [0:96] is the sub-list for field type_name
}

func init() { file_lead_scraper_service_v1_schema_proto_init() }
func file_lead_scraper_service_v1_schema_proto_init() {
	if File_lead_scraper_service_v1_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lead_scraper_service_v1_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_schema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrapingJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_schema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrapingWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_schema_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_schema_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Review); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_schema_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessHours); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_schema_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_schema_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_schema_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantAPIKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lead_scraper_service_v1_schema_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lead_scraper_service_v1_schema_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lead_scraper_service_v1_schema_proto_goTypes,
		DependencyIndexes: file_lead_scraper_service_v1_schema_proto_depIdxs,
		EnumInfos:         file_lead_scraper_service_v1_schema_proto_enumTypes,
		MessageInfos:      file_lead_scraper_service_v1_schema_proto_msgTypes,
	}.Build()
	File_lead_scraper_service_v1_schema_proto = out.File
	file_lead_scraper_service_v1_schema_proto_rawDesc = nil
	file_lead_scraper_service_v1_schema_proto_goTypes = nil
	file_lead_scraper_service_v1_schema_proto_depIdxs = nil
}
