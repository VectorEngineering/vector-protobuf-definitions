// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	workspace_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/workspace_service/v1"

	"time"
)

func newAccountORM(db *gorm.DB, opts ...gen.DOOption) accountORM {
	_accountORM := accountORM{}

	_accountORM.accountORMDo.UseDB(db, opts...)
	_accountORM.accountORMDo.UseModel(&workspace_servicev1.AccountORM{})

	tableName := _accountORM.accountORMDo.TableName()
	_accountORM.ALL = field.NewAsterisk(tableName)
	_accountORM.ApiKeys = field.NewField(tableName, "api_keys")
	_accountORM.Auth0UserId = field.NewString(tableName, "auth0_user_id")
	_accountORM.BaseDirectory = field.NewString(tableName, "base_directory")
	_accountORM.BucketName = field.NewString(tableName, "bucket_name")
	_accountORM.ComplianceLevel = field.NewString(tableName, "compliance_level")
	_accountORM.CreatedAt = field.NewTime(tableName, "created_at")
	_accountORM.DeletedAt = field.NewTime(tableName, "deleted_at")
	_accountORM.Email = field.NewString(tableName, "email")
	_accountORM.Id = field.NewUint64(tableName, "id")
	_accountORM.MfaEnabled = field.NewBool(tableName, "mfa_enabled")
	_accountORM.OrgId = field.NewUint64(tableName, "org_id")
	_accountORM.Permissions = field.NewField(tableName, "permissions")
	_accountORM.Region = field.NewString(tableName, "region")
	_accountORM.Roles = field.NewField(tableName, "roles")
	_accountORM.TenantId = field.NewUint64(tableName, "tenant_id")
	_accountORM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_accountORM.DataProfiles = accountORMHasManyDataProfiles{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("DataProfiles", "workspace_servicev1.DataProfileORM"),
	}

	_accountORM.Workspaces = accountORMHasManyWorkspaces{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Workspaces", "workspace_servicev1.WorkspaceORM"),
		Activities: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Workspaces.Activities", "workspace_servicev1.WorkspaceActivityORM"),
		},
		Compliance: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Workspaces.Compliance", "workspace_servicev1.WorkspaceComplianceORM"),
		},
		Folders: struct {
			field.RelationField
			ChildFolders struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Workspaces.Folders", "workspace_servicev1.FolderMetadataORM"),
			ChildFolders: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Workspaces.Folders.ChildFolders", "workspace_servicev1.FolderMetadataORM"),
			},
		},
		InstalledApps: struct {
			field.RelationField
			Info struct {
				field.RelationField
			}
			Analytics struct {
				field.RelationField
			}
			Installations struct {
				field.RelationField
			}
			Permissions struct {
				field.RelationField
			}
			Reviews struct {
				field.RelationField
			}
			Versions struct {
				field.RelationField
			}
			Webhooks struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Workspaces.InstalledApps", "workspace_servicev1.MarketplaceAppORM"),
			Info: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Workspaces.InstalledApps.Info", "workspace_servicev1.AppDevelopmentInfoORM"),
			},
			Analytics: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Workspaces.InstalledApps.Analytics", "workspace_servicev1.AppAnalyticsORM"),
			},
			Installations: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Workspaces.InstalledApps.Installations", "workspace_servicev1.AppInstallationORM"),
			},
			Permissions: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Workspaces.InstalledApps.Permissions", "workspace_servicev1.AppPermissionORM"),
			},
			Reviews: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Workspaces.InstalledApps.Reviews", "workspace_servicev1.AppReviewORM"),
			},
			Versions: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Workspaces.InstalledApps.Versions", "workspace_servicev1.AppVersionORM"),
			},
			Webhooks: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Workspaces.InstalledApps.Webhooks", "workspace_servicev1.AppWebhookORM"),
			},
		},
		Sharing: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Workspaces.Sharing", "workspace_servicev1.WorkspaceSharingORM"),
		},
		Templates: struct {
			field.RelationField
			Explanations struct {
				field.RelationField
			}
			Instances struct {
				field.RelationField
				Negotiation struct {
					field.RelationField
					Rounds struct {
						field.RelationField
					}
				}
				AiAssistance struct {
					field.RelationField
				}
				SignatureRequests struct {
					field.RelationField
					Workflow struct {
						field.RelationField
					}
					SignatureBlocks struct {
						field.RelationField
					}
				}
				Versions struct {
					field.RelationField
					Branches struct {
						field.RelationField
						Policy struct {
							field.RelationField
						}
						MergeRequests struct {
							field.RelationField
						}
						Merges struct {
							field.RelationField
						}
					}
					Changes struct {
						field.RelationField
					}
					Summaries struct {
						field.RelationField
					}
				}
			}
			Intelligence struct {
				field.RelationField
				ComplianceChecks struct {
					field.RelationField
				}
				RiskAssessments struct {
					field.RelationField
				}
			}
			Variables struct {
				field.RelationField
			}
			Versions struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Workspaces.Templates", "workspace_servicev1.DocumentTemplateORM"),
			Explanations: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Workspaces.Templates.Explanations", "workspace_servicev1.ExplanationBlockORM"),
			},
			Instances: struct {
				field.RelationField
				Negotiation struct {
					field.RelationField
					Rounds struct {
						field.RelationField
					}
				}
				AiAssistance struct {
					field.RelationField
				}
				SignatureRequests struct {
					field.RelationField
					Workflow struct {
						field.RelationField
					}
					SignatureBlocks struct {
						field.RelationField
					}
				}
				Versions struct {
					field.RelationField
					Branches struct {
						field.RelationField
						Policy struct {
							field.RelationField
						}
						MergeRequests struct {
							field.RelationField
						}
						Merges struct {
							field.RelationField
						}
					}
					Changes struct {
						field.RelationField
					}
					Summaries struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("Workspaces.Templates.Instances", "workspace_servicev1.DocumentInstanceORM"),
				Negotiation: struct {
					field.RelationField
					Rounds struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Workspaces.Templates.Instances.Negotiation", "workspace_servicev1.NegotiationHistoryORM"),
					Rounds: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Workspaces.Templates.Instances.Negotiation.Rounds", "workspace_servicev1.NegotiationRoundORM"),
					},
				},
				AiAssistance: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Workspaces.Templates.Instances.AiAssistance", "workspace_servicev1.AIAssistanceLogORM"),
				},
				SignatureRequests: struct {
					field.RelationField
					Workflow struct {
						field.RelationField
					}
					SignatureBlocks struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Workspaces.Templates.Instances.SignatureRequests", "workspace_servicev1.SignatureRequestORM"),
					Workflow: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Workspaces.Templates.Instances.SignatureRequests.Workflow", "workspace_servicev1.SignatureWorkflowORM"),
					},
					SignatureBlocks: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Workspaces.Templates.Instances.SignatureRequests.SignatureBlocks", "workspace_servicev1.SignatureBlockORM"),
					},
				},
				Versions: struct {
					field.RelationField
					Branches struct {
						field.RelationField
						Policy struct {
							field.RelationField
						}
						MergeRequests struct {
							field.RelationField
						}
						Merges struct {
							field.RelationField
						}
					}
					Changes struct {
						field.RelationField
					}
					Summaries struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Workspaces.Templates.Instances.Versions", "workspace_servicev1.DocumentVersionORM"),
					Branches: struct {
						field.RelationField
						Policy struct {
							field.RelationField
						}
						MergeRequests struct {
							field.RelationField
						}
						Merges struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("Workspaces.Templates.Instances.Versions.Branches", "workspace_servicev1.DocumentBranchORM"),
						Policy: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Workspaces.Templates.Instances.Versions.Branches.Policy", "workspace_servicev1.BranchPolicyORM"),
						},
						MergeRequests: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Workspaces.Templates.Instances.Versions.Branches.MergeRequests", "workspace_servicev1.MergeRequestORM"),
						},
						Merges: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Workspaces.Templates.Instances.Versions.Branches.Merges", "workspace_servicev1.BranchMergeORM"),
						},
					},
					Changes: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Workspaces.Templates.Instances.Versions.Changes", "workspace_servicev1.ChangeSetORM"),
					},
					Summaries: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Workspaces.Templates.Instances.Versions.Summaries", "workspace_servicev1.ContextualSummaryORM"),
					},
				},
			},
			Intelligence: struct {
				field.RelationField
				ComplianceChecks struct {
					field.RelationField
				}
				RiskAssessments struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Workspaces.Templates.Intelligence", "workspace_servicev1.ContractIntelligenceORM"),
				ComplianceChecks: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Workspaces.Templates.Intelligence.ComplianceChecks", "workspace_servicev1.ComplianceCheckORM"),
				},
				RiskAssessments: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Workspaces.Templates.Intelligence.RiskAssessments", "workspace_servicev1.RiskAssessmentORM"),
				},
			},
			Variables: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Workspaces.Templates.Variables", "workspace_servicev1.TemplateVariableORM"),
			},
			Versions: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Workspaces.Templates.Versions", "workspace_servicev1.TemplateVersionORM"),
			},
		},
	}

	_accountORM.fillFieldMap()

	return _accountORM
}

type accountORM struct {
	accountORMDo

	ALL             field.Asterisk
	ApiKeys         field.Field
	Auth0UserId     field.String
	BaseDirectory   field.String
	BucketName      field.String
	ComplianceLevel field.String
	CreatedAt       field.Time
	DeletedAt       field.Time
	Email           field.String
	Id              field.Uint64
	MfaEnabled      field.Bool
	OrgId           field.Uint64
	Permissions     field.Field
	Region          field.String
	Roles           field.Field
	TenantId        field.Uint64
	UpdatedAt       field.Time
	DataProfiles    accountORMHasManyDataProfiles

	Workspaces accountORMHasManyWorkspaces

	fieldMap map[string]field.Expr
}

func (a accountORM) Table(newTableName string) *accountORM {
	a.accountORMDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountORM) As(alias string) *accountORM {
	a.accountORMDo.DO = *(a.accountORMDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountORM) updateTableName(table string) *accountORM {
	a.ALL = field.NewAsterisk(table)
	a.ApiKeys = field.NewField(table, "api_keys")
	a.Auth0UserId = field.NewString(table, "auth0_user_id")
	a.BaseDirectory = field.NewString(table, "base_directory")
	a.BucketName = field.NewString(table, "bucket_name")
	a.ComplianceLevel = field.NewString(table, "compliance_level")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.DeletedAt = field.NewTime(table, "deleted_at")
	a.Email = field.NewString(table, "email")
	a.Id = field.NewUint64(table, "id")
	a.MfaEnabled = field.NewBool(table, "mfa_enabled")
	a.OrgId = field.NewUint64(table, "org_id")
	a.Permissions = field.NewField(table, "permissions")
	a.Region = field.NewString(table, "region")
	a.Roles = field.NewField(table, "roles")
	a.TenantId = field.NewUint64(table, "tenant_id")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *accountORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountORM) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 18)
	a.fieldMap["api_keys"] = a.ApiKeys
	a.fieldMap["auth0_user_id"] = a.Auth0UserId
	a.fieldMap["base_directory"] = a.BaseDirectory
	a.fieldMap["bucket_name"] = a.BucketName
	a.fieldMap["compliance_level"] = a.ComplianceLevel
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["email"] = a.Email
	a.fieldMap["id"] = a.Id
	a.fieldMap["mfa_enabled"] = a.MfaEnabled
	a.fieldMap["org_id"] = a.OrgId
	a.fieldMap["permissions"] = a.Permissions
	a.fieldMap["region"] = a.Region
	a.fieldMap["roles"] = a.Roles
	a.fieldMap["tenant_id"] = a.TenantId
	a.fieldMap["updated_at"] = a.UpdatedAt

}

func (a accountORM) clone(db *gorm.DB) accountORM {
	a.accountORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountORM) replaceDB(db *gorm.DB) accountORM {
	a.accountORMDo.ReplaceDB(db)
	return a
}

type accountORMHasManyDataProfiles struct {
	db *gorm.DB

	field.RelationField
}

func (a accountORMHasManyDataProfiles) Where(conds ...field.Expr) *accountORMHasManyDataProfiles {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a accountORMHasManyDataProfiles) WithContext(ctx context.Context) *accountORMHasManyDataProfiles {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a accountORMHasManyDataProfiles) Session(session *gorm.Session) *accountORMHasManyDataProfiles {
	a.db = a.db.Session(session)
	return &a
}

func (a accountORMHasManyDataProfiles) Model(m *workspace_servicev1.AccountORM) *accountORMHasManyDataProfilesTx {
	return &accountORMHasManyDataProfilesTx{a.db.Model(m).Association(a.Name())}
}

type accountORMHasManyDataProfilesTx struct{ tx *gorm.Association }

func (a accountORMHasManyDataProfilesTx) Find() (result []*workspace_servicev1.DataProfileORM, err error) {
	return result, a.tx.Find(&result)
}

func (a accountORMHasManyDataProfilesTx) Append(values ...*workspace_servicev1.DataProfileORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a accountORMHasManyDataProfilesTx) Replace(values ...*workspace_servicev1.DataProfileORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a accountORMHasManyDataProfilesTx) Delete(values ...*workspace_servicev1.DataProfileORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a accountORMHasManyDataProfilesTx) Clear() error {
	return a.tx.Clear()
}

func (a accountORMHasManyDataProfilesTx) Count() int64 {
	return a.tx.Count()
}

type accountORMHasManyWorkspaces struct {
	db *gorm.DB

	field.RelationField

	Activities struct {
		field.RelationField
	}
	Compliance struct {
		field.RelationField
	}
	Folders struct {
		field.RelationField
		ChildFolders struct {
			field.RelationField
		}
	}
	InstalledApps struct {
		field.RelationField
		Info struct {
			field.RelationField
		}
		Analytics struct {
			field.RelationField
		}
		Installations struct {
			field.RelationField
		}
		Permissions struct {
			field.RelationField
		}
		Reviews struct {
			field.RelationField
		}
		Versions struct {
			field.RelationField
		}
		Webhooks struct {
			field.RelationField
		}
	}
	Sharing struct {
		field.RelationField
	}
	Templates struct {
		field.RelationField
		Explanations struct {
			field.RelationField
		}
		Instances struct {
			field.RelationField
			Negotiation struct {
				field.RelationField
				Rounds struct {
					field.RelationField
				}
			}
			AiAssistance struct {
				field.RelationField
			}
			SignatureRequests struct {
				field.RelationField
				Workflow struct {
					field.RelationField
				}
				SignatureBlocks struct {
					field.RelationField
				}
			}
			Versions struct {
				field.RelationField
				Branches struct {
					field.RelationField
					Policy struct {
						field.RelationField
					}
					MergeRequests struct {
						field.RelationField
					}
					Merges struct {
						field.RelationField
					}
				}
				Changes struct {
					field.RelationField
				}
				Summaries struct {
					field.RelationField
				}
			}
		}
		Intelligence struct {
			field.RelationField
			ComplianceChecks struct {
				field.RelationField
			}
			RiskAssessments struct {
				field.RelationField
			}
		}
		Variables struct {
			field.RelationField
		}
		Versions struct {
			field.RelationField
		}
	}
}

func (a accountORMHasManyWorkspaces) Where(conds ...field.Expr) *accountORMHasManyWorkspaces {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a accountORMHasManyWorkspaces) WithContext(ctx context.Context) *accountORMHasManyWorkspaces {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a accountORMHasManyWorkspaces) Session(session *gorm.Session) *accountORMHasManyWorkspaces {
	a.db = a.db.Session(session)
	return &a
}

func (a accountORMHasManyWorkspaces) Model(m *workspace_servicev1.AccountORM) *accountORMHasManyWorkspacesTx {
	return &accountORMHasManyWorkspacesTx{a.db.Model(m).Association(a.Name())}
}

type accountORMHasManyWorkspacesTx struct{ tx *gorm.Association }

func (a accountORMHasManyWorkspacesTx) Find() (result []*workspace_servicev1.WorkspaceORM, err error) {
	return result, a.tx.Find(&result)
}

func (a accountORMHasManyWorkspacesTx) Append(values ...*workspace_servicev1.WorkspaceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a accountORMHasManyWorkspacesTx) Replace(values ...*workspace_servicev1.WorkspaceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a accountORMHasManyWorkspacesTx) Delete(values ...*workspace_servicev1.WorkspaceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a accountORMHasManyWorkspacesTx) Clear() error {
	return a.tx.Clear()
}

func (a accountORMHasManyWorkspacesTx) Count() int64 {
	return a.tx.Count()
}

type accountORMDo struct{ gen.DO }

type IAccountORMDo interface {
	gen.SubQuery
	Debug() IAccountORMDo
	WithContext(ctx context.Context) IAccountORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAccountORMDo
	WriteDB() IAccountORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAccountORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAccountORMDo
	Not(conds ...gen.Condition) IAccountORMDo
	Or(conds ...gen.Condition) IAccountORMDo
	Select(conds ...field.Expr) IAccountORMDo
	Where(conds ...gen.Condition) IAccountORMDo
	Order(conds ...field.Expr) IAccountORMDo
	Distinct(cols ...field.Expr) IAccountORMDo
	Omit(cols ...field.Expr) IAccountORMDo
	Join(table schema.Tabler, on ...field.Expr) IAccountORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAccountORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAccountORMDo
	Group(cols ...field.Expr) IAccountORMDo
	Having(conds ...gen.Condition) IAccountORMDo
	Limit(limit int) IAccountORMDo
	Offset(offset int) IAccountORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountORMDo
	Unscoped() IAccountORMDo
	Create(values ...*workspace_servicev1.AccountORM) error
	CreateInBatches(values []*workspace_servicev1.AccountORM, batchSize int) error
	Save(values ...*workspace_servicev1.AccountORM) error
	First() (*workspace_servicev1.AccountORM, error)
	Take() (*workspace_servicev1.AccountORM, error)
	Last() (*workspace_servicev1.AccountORM, error)
	Find() ([]*workspace_servicev1.AccountORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.AccountORM, err error)
	FindInBatches(result *[]*workspace_servicev1.AccountORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*workspace_servicev1.AccountORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAccountORMDo
	Assign(attrs ...field.AssignExpr) IAccountORMDo
	Joins(fields ...field.RelationField) IAccountORMDo
	Preload(fields ...field.RelationField) IAccountORMDo
	FirstOrInit() (*workspace_servicev1.AccountORM, error)
	FirstOrCreate() (*workspace_servicev1.AccountORM, error)
	FindByPage(offset int, limit int) (result []*workspace_servicev1.AccountORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAccountORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result workspace_servicev1.AccountORM, err error)
	GetRecordByIDs(ids []uint64) (result []workspace_servicev1.AccountORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.AccountORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result workspace_servicev1.AccountORM, err error)
	GetByIDs(ids []uint64) (result []workspace_servicev1.AccountORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.AccountORM, err error)
	GetDeleted() (result []workspace_servicev1.AccountORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	DeleteInBatch(ids []uint64, batchSize int) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.AccountORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.AccountORM, err error)
	FindByPattern(columnName string, pattern string) (result []workspace_servicev1.AccountORM, err error)
	GetDistinct(columnName string) (result []workspace_servicev1.AccountORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.AccountORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.AccountORM, err error)
	ExistsAndGet(column string, value interface{}) (result workspace_servicev1.AccountORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.AccountORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountORMDo) GetRecordByID(id uint64) (result workspace_servicev1.AccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a accountORMDo) GetRecordByIDs(ids []uint64) (result []workspace_servicev1.AccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounts ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (a accountORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.AccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM accounts ORDER BY " + a.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (a accountORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM accounts ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountORMDo) GetByID(id uint64) (result workspace_servicev1.AccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a accountORMDo) GetByIDs(ids []uint64) (result []workspace_servicev1.AccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounts ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (a accountORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.AccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounts ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + a.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (a accountORMDo) GetDeleted() (result []workspace_servicev1.AccountORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounts ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE accounts SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE accounts SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
// LIMIT @batchSize
func (a accountORMDo) DeleteInBatch(ids []uint64, batchSize int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM accounts ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, batchSize)
	generateSQL.WriteString("LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (a accountORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.AccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounts ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (a accountORMDo) FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.AccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounts ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (a accountORMDo) FindByPattern(columnName string, pattern string) (result []workspace_servicev1.AccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounts ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (a accountORMDo) GetDistinct(columnName string) (result []workspace_servicev1.AccountORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM accounts ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (a accountORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.AccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounts ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE accounts SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (a accountORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM accounts ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (a accountORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (a accountORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.AccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounts ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (a accountORMDo) ExistsAndGet(column string, value interface{}) (result workspace_servicev1.AccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM accounts ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM accounts ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (a accountORMDo) ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.AccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM accounts ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM accounts ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a accountORMDo) Debug() IAccountORMDo {
	return a.withDO(a.DO.Debug())
}

func (a accountORMDo) WithContext(ctx context.Context) IAccountORMDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountORMDo) ReadDB() IAccountORMDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountORMDo) WriteDB() IAccountORMDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountORMDo) Session(config *gorm.Session) IAccountORMDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountORMDo) Clauses(conds ...clause.Expression) IAccountORMDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountORMDo) Returning(value interface{}, columns ...string) IAccountORMDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountORMDo) Not(conds ...gen.Condition) IAccountORMDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountORMDo) Or(conds ...gen.Condition) IAccountORMDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountORMDo) Select(conds ...field.Expr) IAccountORMDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountORMDo) Where(conds ...gen.Condition) IAccountORMDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountORMDo) Order(conds ...field.Expr) IAccountORMDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountORMDo) Distinct(cols ...field.Expr) IAccountORMDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountORMDo) Omit(cols ...field.Expr) IAccountORMDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountORMDo) Join(table schema.Tabler, on ...field.Expr) IAccountORMDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAccountORMDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IAccountORMDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountORMDo) Group(cols ...field.Expr) IAccountORMDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountORMDo) Having(conds ...gen.Condition) IAccountORMDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountORMDo) Limit(limit int) IAccountORMDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountORMDo) Offset(offset int) IAccountORMDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountORMDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountORMDo) Unscoped() IAccountORMDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountORMDo) Create(values ...*workspace_servicev1.AccountORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountORMDo) CreateInBatches(values []*workspace_servicev1.AccountORM, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountORMDo) Save(values ...*workspace_servicev1.AccountORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountORMDo) First() (*workspace_servicev1.AccountORM, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.AccountORM), nil
	}
}

func (a accountORMDo) Take() (*workspace_servicev1.AccountORM, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.AccountORM), nil
	}
}

func (a accountORMDo) Last() (*workspace_servicev1.AccountORM, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.AccountORM), nil
	}
}

func (a accountORMDo) Find() ([]*workspace_servicev1.AccountORM, error) {
	result, err := a.DO.Find()
	return result.([]*workspace_servicev1.AccountORM), err
}

func (a accountORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.AccountORM, err error) {
	buf := make([]*workspace_servicev1.AccountORM, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountORMDo) FindInBatches(result *[]*workspace_servicev1.AccountORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountORMDo) Attrs(attrs ...field.AssignExpr) IAccountORMDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountORMDo) Assign(attrs ...field.AssignExpr) IAccountORMDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountORMDo) Joins(fields ...field.RelationField) IAccountORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountORMDo) Preload(fields ...field.RelationField) IAccountORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountORMDo) FirstOrInit() (*workspace_servicev1.AccountORM, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.AccountORM), nil
	}
}

func (a accountORMDo) FirstOrCreate() (*workspace_servicev1.AccountORM, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.AccountORM), nil
	}
}

func (a accountORMDo) FindByPage(offset int, limit int) (result []*workspace_servicev1.AccountORM, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountORMDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountORMDo) Delete(models ...*workspace_servicev1.AccountORM) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountORMDo) withDO(do gen.Dao) *accountORMDo {
	a.DO = *do.(*gen.DO)
	return a
}
