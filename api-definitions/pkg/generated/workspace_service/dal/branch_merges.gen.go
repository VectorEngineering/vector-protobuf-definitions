// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	workspace_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/workspace_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newBranchMergeORM(db *gorm.DB, opts ...gen.DOOption) branchMergeORM {
	_branchMergeORM := branchMergeORM{}

	_branchMergeORM.branchMergeORMDo.UseDB(db, opts...)
	_branchMergeORM.branchMergeORMDo.UseModel(&workspace_servicev1.BranchMergeORM{})

	tableName := _branchMergeORM.branchMergeORMDo.TableName()
	_branchMergeORM.ALL = field.NewAsterisk(tableName)
	_branchMergeORM.BranchId = field.NewUint64(tableName, "branch_id")
	_branchMergeORM.CompletedAt = field.NewTime(tableName, "completed_at")
	_branchMergeORM.Conflicts = field.NewField(tableName, "conflicts")
	_branchMergeORM.CreatedAt = field.NewTime(tableName, "created_at")
	_branchMergeORM.DocumentBranchId = field.NewUint64(tableName, "document_branch_id")
	_branchMergeORM.Id = field.NewUint64(tableName, "id")
	_branchMergeORM.MergeStatus = field.NewString(tableName, "merge_status")
	_branchMergeORM.MergeStrategy = field.NewString(tableName, "merge_strategy")
	_branchMergeORM.MergerId = field.NewString(tableName, "merger_id")
	_branchMergeORM.SourceBranch = field.NewString(tableName, "source_branch")
	_branchMergeORM.TargetBranch = field.NewString(tableName, "target_branch")

	_branchMergeORM.fillFieldMap()

	return _branchMergeORM
}

type branchMergeORM struct {
	branchMergeORMDo

	ALL              field.Asterisk
	BranchId         field.Uint64
	CompletedAt      field.Time
	Conflicts        field.Field
	CreatedAt        field.Time
	DocumentBranchId field.Uint64
	Id               field.Uint64
	MergeStatus      field.String
	MergeStrategy    field.String
	MergerId         field.String
	SourceBranch     field.String
	TargetBranch     field.String

	fieldMap map[string]field.Expr
}

func (b branchMergeORM) Table(newTableName string) *branchMergeORM {
	b.branchMergeORMDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b branchMergeORM) As(alias string) *branchMergeORM {
	b.branchMergeORMDo.DO = *(b.branchMergeORMDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *branchMergeORM) updateTableName(table string) *branchMergeORM {
	b.ALL = field.NewAsterisk(table)
	b.BranchId = field.NewUint64(table, "branch_id")
	b.CompletedAt = field.NewTime(table, "completed_at")
	b.Conflicts = field.NewField(table, "conflicts")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.DocumentBranchId = field.NewUint64(table, "document_branch_id")
	b.Id = field.NewUint64(table, "id")
	b.MergeStatus = field.NewString(table, "merge_status")
	b.MergeStrategy = field.NewString(table, "merge_strategy")
	b.MergerId = field.NewString(table, "merger_id")
	b.SourceBranch = field.NewString(table, "source_branch")
	b.TargetBranch = field.NewString(table, "target_branch")

	b.fillFieldMap()

	return b
}

func (b *branchMergeORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *branchMergeORM) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 11)
	b.fieldMap["branch_id"] = b.BranchId
	b.fieldMap["completed_at"] = b.CompletedAt
	b.fieldMap["conflicts"] = b.Conflicts
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["document_branch_id"] = b.DocumentBranchId
	b.fieldMap["id"] = b.Id
	b.fieldMap["merge_status"] = b.MergeStatus
	b.fieldMap["merge_strategy"] = b.MergeStrategy
	b.fieldMap["merger_id"] = b.MergerId
	b.fieldMap["source_branch"] = b.SourceBranch
	b.fieldMap["target_branch"] = b.TargetBranch
}

func (b branchMergeORM) clone(db *gorm.DB) branchMergeORM {
	b.branchMergeORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b branchMergeORM) replaceDB(db *gorm.DB) branchMergeORM {
	b.branchMergeORMDo.ReplaceDB(db)
	return b
}

type branchMergeORMDo struct{ gen.DO }

type IBranchMergeORMDo interface {
	gen.SubQuery
	Debug() IBranchMergeORMDo
	WithContext(ctx context.Context) IBranchMergeORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBranchMergeORMDo
	WriteDB() IBranchMergeORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBranchMergeORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBranchMergeORMDo
	Not(conds ...gen.Condition) IBranchMergeORMDo
	Or(conds ...gen.Condition) IBranchMergeORMDo
	Select(conds ...field.Expr) IBranchMergeORMDo
	Where(conds ...gen.Condition) IBranchMergeORMDo
	Order(conds ...field.Expr) IBranchMergeORMDo
	Distinct(cols ...field.Expr) IBranchMergeORMDo
	Omit(cols ...field.Expr) IBranchMergeORMDo
	Join(table schema.Tabler, on ...field.Expr) IBranchMergeORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBranchMergeORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBranchMergeORMDo
	Group(cols ...field.Expr) IBranchMergeORMDo
	Having(conds ...gen.Condition) IBranchMergeORMDo
	Limit(limit int) IBranchMergeORMDo
	Offset(offset int) IBranchMergeORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBranchMergeORMDo
	Unscoped() IBranchMergeORMDo
	Create(values ...*workspace_servicev1.BranchMergeORM) error
	CreateInBatches(values []*workspace_servicev1.BranchMergeORM, batchSize int) error
	Save(values ...*workspace_servicev1.BranchMergeORM) error
	First() (*workspace_servicev1.BranchMergeORM, error)
	Take() (*workspace_servicev1.BranchMergeORM, error)
	Last() (*workspace_servicev1.BranchMergeORM, error)
	Find() ([]*workspace_servicev1.BranchMergeORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.BranchMergeORM, err error)
	FindInBatches(result *[]*workspace_servicev1.BranchMergeORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*workspace_servicev1.BranchMergeORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBranchMergeORMDo
	Assign(attrs ...field.AssignExpr) IBranchMergeORMDo
	Joins(fields ...field.RelationField) IBranchMergeORMDo
	Preload(fields ...field.RelationField) IBranchMergeORMDo
	FirstOrInit() (*workspace_servicev1.BranchMergeORM, error)
	FirstOrCreate() (*workspace_servicev1.BranchMergeORM, error)
	FindByPage(offset int, limit int) (result []*workspace_servicev1.BranchMergeORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBranchMergeORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result workspace_servicev1.BranchMergeORM, err error)
	GetRecordByIDs(ids []uint64) (result []workspace_servicev1.BranchMergeORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.BranchMergeORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result workspace_servicev1.BranchMergeORM, err error)
	GetByIDs(ids []uint64) (result []workspace_servicev1.BranchMergeORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.BranchMergeORM, err error)
	GetDeleted() (result []workspace_servicev1.BranchMergeORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	DeleteInBatch(ids []uint64, batchSize int) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.BranchMergeORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.BranchMergeORM, err error)
	FindByPattern(columnName string, pattern string) (result []workspace_servicev1.BranchMergeORM, err error)
	GetDistinct(columnName string) (result []workspace_servicev1.BranchMergeORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.BranchMergeORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.BranchMergeORM, err error)
	ExistsAndGet(column string, value interface{}) (result workspace_servicev1.BranchMergeORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.BranchMergeORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b branchMergeORMDo) GetRecordByID(id uint64) (result workspace_servicev1.BranchMergeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_merges ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (b branchMergeORMDo) GetRecordByIDs(ids []uint64) (result []workspace_servicev1.BranchMergeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_merges ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b branchMergeORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM branch_merges ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (b branchMergeORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.BranchMergeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM branch_merges ORDER BY " + b.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (b branchMergeORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM branch_merges ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b branchMergeORMDo) GetByID(id uint64) (result workspace_servicev1.BranchMergeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_merges ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (b branchMergeORMDo) GetByIDs(ids []uint64) (result []workspace_servicev1.BranchMergeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_merges ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (b branchMergeORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.BranchMergeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_merges ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + b.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (b branchMergeORMDo) GetDeleted() (result []workspace_servicev1.BranchMergeORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_merges ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (b branchMergeORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE branch_merges SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (b branchMergeORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE branch_merges SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
// LIMIT @batchSize
func (b branchMergeORMDo) DeleteInBatch(ids []uint64, batchSize int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM branch_merges ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, batchSize)
	generateSQL.WriteString("LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (b branchMergeORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.BranchMergeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_merges ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (b branchMergeORMDo) FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.BranchMergeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_merges ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (b branchMergeORMDo) FindByPattern(columnName string, pattern string) (result []workspace_servicev1.BranchMergeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_merges ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (b branchMergeORMDo) GetDistinct(columnName string) (result []workspace_servicev1.BranchMergeORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM branch_merges ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (b branchMergeORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.BranchMergeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_merges ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (b branchMergeORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE branch_merges SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (b branchMergeORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM branch_merges ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (b branchMergeORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM branch_merges ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (b branchMergeORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.BranchMergeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_merges ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (b branchMergeORMDo) ExistsAndGet(column string, value interface{}) (result workspace_servicev1.BranchMergeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM branch_merges ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM branch_merges ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (b branchMergeORMDo) ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.BranchMergeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM branch_merges ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM branch_merges ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (b branchMergeORMDo) Debug() IBranchMergeORMDo {
	return b.withDO(b.DO.Debug())
}

func (b branchMergeORMDo) WithContext(ctx context.Context) IBranchMergeORMDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b branchMergeORMDo) ReadDB() IBranchMergeORMDo {
	return b.Clauses(dbresolver.Read)
}

func (b branchMergeORMDo) WriteDB() IBranchMergeORMDo {
	return b.Clauses(dbresolver.Write)
}

func (b branchMergeORMDo) Session(config *gorm.Session) IBranchMergeORMDo {
	return b.withDO(b.DO.Session(config))
}

func (b branchMergeORMDo) Clauses(conds ...clause.Expression) IBranchMergeORMDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b branchMergeORMDo) Returning(value interface{}, columns ...string) IBranchMergeORMDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b branchMergeORMDo) Not(conds ...gen.Condition) IBranchMergeORMDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b branchMergeORMDo) Or(conds ...gen.Condition) IBranchMergeORMDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b branchMergeORMDo) Select(conds ...field.Expr) IBranchMergeORMDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b branchMergeORMDo) Where(conds ...gen.Condition) IBranchMergeORMDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b branchMergeORMDo) Order(conds ...field.Expr) IBranchMergeORMDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b branchMergeORMDo) Distinct(cols ...field.Expr) IBranchMergeORMDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b branchMergeORMDo) Omit(cols ...field.Expr) IBranchMergeORMDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b branchMergeORMDo) Join(table schema.Tabler, on ...field.Expr) IBranchMergeORMDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b branchMergeORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBranchMergeORMDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b branchMergeORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IBranchMergeORMDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b branchMergeORMDo) Group(cols ...field.Expr) IBranchMergeORMDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b branchMergeORMDo) Having(conds ...gen.Condition) IBranchMergeORMDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b branchMergeORMDo) Limit(limit int) IBranchMergeORMDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b branchMergeORMDo) Offset(offset int) IBranchMergeORMDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b branchMergeORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBranchMergeORMDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b branchMergeORMDo) Unscoped() IBranchMergeORMDo {
	return b.withDO(b.DO.Unscoped())
}

func (b branchMergeORMDo) Create(values ...*workspace_servicev1.BranchMergeORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b branchMergeORMDo) CreateInBatches(values []*workspace_servicev1.BranchMergeORM, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b branchMergeORMDo) Save(values ...*workspace_servicev1.BranchMergeORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b branchMergeORMDo) First() (*workspace_servicev1.BranchMergeORM, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.BranchMergeORM), nil
	}
}

func (b branchMergeORMDo) Take() (*workspace_servicev1.BranchMergeORM, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.BranchMergeORM), nil
	}
}

func (b branchMergeORMDo) Last() (*workspace_servicev1.BranchMergeORM, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.BranchMergeORM), nil
	}
}

func (b branchMergeORMDo) Find() ([]*workspace_servicev1.BranchMergeORM, error) {
	result, err := b.DO.Find()
	return result.([]*workspace_servicev1.BranchMergeORM), err
}

func (b branchMergeORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.BranchMergeORM, err error) {
	buf := make([]*workspace_servicev1.BranchMergeORM, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b branchMergeORMDo) FindInBatches(result *[]*workspace_servicev1.BranchMergeORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b branchMergeORMDo) Attrs(attrs ...field.AssignExpr) IBranchMergeORMDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b branchMergeORMDo) Assign(attrs ...field.AssignExpr) IBranchMergeORMDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b branchMergeORMDo) Joins(fields ...field.RelationField) IBranchMergeORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b branchMergeORMDo) Preload(fields ...field.RelationField) IBranchMergeORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b branchMergeORMDo) FirstOrInit() (*workspace_servicev1.BranchMergeORM, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.BranchMergeORM), nil
	}
}

func (b branchMergeORMDo) FirstOrCreate() (*workspace_servicev1.BranchMergeORM, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.BranchMergeORM), nil
	}
}

func (b branchMergeORMDo) FindByPage(offset int, limit int) (result []*workspace_servicev1.BranchMergeORM, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b branchMergeORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b branchMergeORMDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b branchMergeORMDo) Delete(models ...*workspace_servicev1.BranchMergeORM) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *branchMergeORMDo) withDO(do gen.Dao) *branchMergeORMDo {
	b.DO = *do.(*gen.DO)
	return b
}
