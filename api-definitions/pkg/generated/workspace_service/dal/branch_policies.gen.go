// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	workspace_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/workspace_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newBranchPolicyORM(db *gorm.DB, opts ...gen.DOOption) branchPolicyORM {
	_branchPolicyORM := branchPolicyORM{}

	_branchPolicyORM.branchPolicyORMDo.UseDB(db, opts...)
	_branchPolicyORM.branchPolicyORMDo.UseModel(&workspace_servicev1.BranchPolicyORM{})

	tableName := _branchPolicyORM.branchPolicyORMDo.TableName()
	_branchPolicyORM.ALL = field.NewAsterisk(tableName)
	_branchPolicyORM.AllowForcePush = field.NewBool(tableName, "allow_force_push")
	_branchPolicyORM.AutomatedChecks = field.NewField(tableName, "automated_checks")
	_branchPolicyORM.BranchId = field.NewUint64(tableName, "branch_id")
	_branchPolicyORM.CreatedAt = field.NewTime(tableName, "created_at")
	_branchPolicyORM.DocumentBranchId = field.NewUint64(tableName, "document_branch_id")
	_branchPolicyORM.EnforceLinearHistory = field.NewBool(tableName, "enforce_linear_history")
	_branchPolicyORM.Id = field.NewUint64(tableName, "id")
	_branchPolicyORM.MinimumApprovals = field.NewInt32(tableName, "minimum_approvals")
	_branchPolicyORM.ProtectedPaths = field.NewField(tableName, "protected_paths")
	_branchPolicyORM.RequiredApprovers = field.NewField(tableName, "required_approvers")
	_branchPolicyORM.UpdatedAt = field.NewTime(tableName, "updated_at")

	_branchPolicyORM.fillFieldMap()

	return _branchPolicyORM
}

type branchPolicyORM struct {
	branchPolicyORMDo

	ALL                  field.Asterisk
	AllowForcePush       field.Bool
	AutomatedChecks      field.Field
	BranchId             field.Uint64
	CreatedAt            field.Time
	DocumentBranchId     field.Uint64
	EnforceLinearHistory field.Bool
	Id                   field.Uint64
	MinimumApprovals     field.Int32
	ProtectedPaths       field.Field
	RequiredApprovers    field.Field
	UpdatedAt            field.Time

	fieldMap map[string]field.Expr
}

func (b branchPolicyORM) Table(newTableName string) *branchPolicyORM {
	b.branchPolicyORMDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b branchPolicyORM) As(alias string) *branchPolicyORM {
	b.branchPolicyORMDo.DO = *(b.branchPolicyORMDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *branchPolicyORM) updateTableName(table string) *branchPolicyORM {
	b.ALL = field.NewAsterisk(table)
	b.AllowForcePush = field.NewBool(table, "allow_force_push")
	b.AutomatedChecks = field.NewField(table, "automated_checks")
	b.BranchId = field.NewUint64(table, "branch_id")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.DocumentBranchId = field.NewUint64(table, "document_branch_id")
	b.EnforceLinearHistory = field.NewBool(table, "enforce_linear_history")
	b.Id = field.NewUint64(table, "id")
	b.MinimumApprovals = field.NewInt32(table, "minimum_approvals")
	b.ProtectedPaths = field.NewField(table, "protected_paths")
	b.RequiredApprovers = field.NewField(table, "required_approvers")
	b.UpdatedAt = field.NewTime(table, "updated_at")

	b.fillFieldMap()

	return b
}

func (b *branchPolicyORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *branchPolicyORM) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 11)
	b.fieldMap["allow_force_push"] = b.AllowForcePush
	b.fieldMap["automated_checks"] = b.AutomatedChecks
	b.fieldMap["branch_id"] = b.BranchId
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["document_branch_id"] = b.DocumentBranchId
	b.fieldMap["enforce_linear_history"] = b.EnforceLinearHistory
	b.fieldMap["id"] = b.Id
	b.fieldMap["minimum_approvals"] = b.MinimumApprovals
	b.fieldMap["protected_paths"] = b.ProtectedPaths
	b.fieldMap["required_approvers"] = b.RequiredApprovers
	b.fieldMap["updated_at"] = b.UpdatedAt
}

func (b branchPolicyORM) clone(db *gorm.DB) branchPolicyORM {
	b.branchPolicyORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b branchPolicyORM) replaceDB(db *gorm.DB) branchPolicyORM {
	b.branchPolicyORMDo.ReplaceDB(db)
	return b
}

type branchPolicyORMDo struct{ gen.DO }

type IBranchPolicyORMDo interface {
	gen.SubQuery
	Debug() IBranchPolicyORMDo
	WithContext(ctx context.Context) IBranchPolicyORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBranchPolicyORMDo
	WriteDB() IBranchPolicyORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBranchPolicyORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBranchPolicyORMDo
	Not(conds ...gen.Condition) IBranchPolicyORMDo
	Or(conds ...gen.Condition) IBranchPolicyORMDo
	Select(conds ...field.Expr) IBranchPolicyORMDo
	Where(conds ...gen.Condition) IBranchPolicyORMDo
	Order(conds ...field.Expr) IBranchPolicyORMDo
	Distinct(cols ...field.Expr) IBranchPolicyORMDo
	Omit(cols ...field.Expr) IBranchPolicyORMDo
	Join(table schema.Tabler, on ...field.Expr) IBranchPolicyORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBranchPolicyORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBranchPolicyORMDo
	Group(cols ...field.Expr) IBranchPolicyORMDo
	Having(conds ...gen.Condition) IBranchPolicyORMDo
	Limit(limit int) IBranchPolicyORMDo
	Offset(offset int) IBranchPolicyORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBranchPolicyORMDo
	Unscoped() IBranchPolicyORMDo
	Create(values ...*workspace_servicev1.BranchPolicyORM) error
	CreateInBatches(values []*workspace_servicev1.BranchPolicyORM, batchSize int) error
	Save(values ...*workspace_servicev1.BranchPolicyORM) error
	First() (*workspace_servicev1.BranchPolicyORM, error)
	Take() (*workspace_servicev1.BranchPolicyORM, error)
	Last() (*workspace_servicev1.BranchPolicyORM, error)
	Find() ([]*workspace_servicev1.BranchPolicyORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.BranchPolicyORM, err error)
	FindInBatches(result *[]*workspace_servicev1.BranchPolicyORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*workspace_servicev1.BranchPolicyORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBranchPolicyORMDo
	Assign(attrs ...field.AssignExpr) IBranchPolicyORMDo
	Joins(fields ...field.RelationField) IBranchPolicyORMDo
	Preload(fields ...field.RelationField) IBranchPolicyORMDo
	FirstOrInit() (*workspace_servicev1.BranchPolicyORM, error)
	FirstOrCreate() (*workspace_servicev1.BranchPolicyORM, error)
	FindByPage(offset int, limit int) (result []*workspace_servicev1.BranchPolicyORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBranchPolicyORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result workspace_servicev1.BranchPolicyORM, err error)
	GetRecordByIDs(ids []uint64) (result []workspace_servicev1.BranchPolicyORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.BranchPolicyORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result workspace_servicev1.BranchPolicyORM, err error)
	GetByIDs(ids []uint64) (result []workspace_servicev1.BranchPolicyORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.BranchPolicyORM, err error)
	GetDeleted() (result []workspace_servicev1.BranchPolicyORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	DeleteInBatch(ids []uint64, batchSize int) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.BranchPolicyORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.BranchPolicyORM, err error)
	FindByPattern(columnName string, pattern string) (result []workspace_servicev1.BranchPolicyORM, err error)
	GetDistinct(columnName string) (result []workspace_servicev1.BranchPolicyORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.BranchPolicyORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.BranchPolicyORM, err error)
	ExistsAndGet(column string, value interface{}) (result workspace_servicev1.BranchPolicyORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.BranchPolicyORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b branchPolicyORMDo) GetRecordByID(id uint64) (result workspace_servicev1.BranchPolicyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_policies ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (b branchPolicyORMDo) GetRecordByIDs(ids []uint64) (result []workspace_servicev1.BranchPolicyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_policies ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b branchPolicyORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM branch_policies ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (b branchPolicyORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.BranchPolicyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM branch_policies ORDER BY " + b.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (b branchPolicyORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM branch_policies ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b branchPolicyORMDo) GetByID(id uint64) (result workspace_servicev1.BranchPolicyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_policies ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (b branchPolicyORMDo) GetByIDs(ids []uint64) (result []workspace_servicev1.BranchPolicyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_policies ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (b branchPolicyORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.BranchPolicyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_policies ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + b.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (b branchPolicyORMDo) GetDeleted() (result []workspace_servicev1.BranchPolicyORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_policies ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (b branchPolicyORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE branch_policies SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (b branchPolicyORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE branch_policies SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
// LIMIT @batchSize
func (b branchPolicyORMDo) DeleteInBatch(ids []uint64, batchSize int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM branch_policies ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, batchSize)
	generateSQL.WriteString("LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (b branchPolicyORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.BranchPolicyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_policies ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (b branchPolicyORMDo) FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.BranchPolicyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_policies ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (b branchPolicyORMDo) FindByPattern(columnName string, pattern string) (result []workspace_servicev1.BranchPolicyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_policies ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (b branchPolicyORMDo) GetDistinct(columnName string) (result []workspace_servicev1.BranchPolicyORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM branch_policies ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (b branchPolicyORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.BranchPolicyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_policies ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (b branchPolicyORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE branch_policies SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (b branchPolicyORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM branch_policies ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (b branchPolicyORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM branch_policies ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (b branchPolicyORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.BranchPolicyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM branch_policies ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (b branchPolicyORMDo) ExistsAndGet(column string, value interface{}) (result workspace_servicev1.BranchPolicyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM branch_policies ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM branch_policies ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (b branchPolicyORMDo) ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.BranchPolicyORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM branch_policies ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM branch_policies ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (b branchPolicyORMDo) Debug() IBranchPolicyORMDo {
	return b.withDO(b.DO.Debug())
}

func (b branchPolicyORMDo) WithContext(ctx context.Context) IBranchPolicyORMDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b branchPolicyORMDo) ReadDB() IBranchPolicyORMDo {
	return b.Clauses(dbresolver.Read)
}

func (b branchPolicyORMDo) WriteDB() IBranchPolicyORMDo {
	return b.Clauses(dbresolver.Write)
}

func (b branchPolicyORMDo) Session(config *gorm.Session) IBranchPolicyORMDo {
	return b.withDO(b.DO.Session(config))
}

func (b branchPolicyORMDo) Clauses(conds ...clause.Expression) IBranchPolicyORMDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b branchPolicyORMDo) Returning(value interface{}, columns ...string) IBranchPolicyORMDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b branchPolicyORMDo) Not(conds ...gen.Condition) IBranchPolicyORMDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b branchPolicyORMDo) Or(conds ...gen.Condition) IBranchPolicyORMDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b branchPolicyORMDo) Select(conds ...field.Expr) IBranchPolicyORMDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b branchPolicyORMDo) Where(conds ...gen.Condition) IBranchPolicyORMDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b branchPolicyORMDo) Order(conds ...field.Expr) IBranchPolicyORMDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b branchPolicyORMDo) Distinct(cols ...field.Expr) IBranchPolicyORMDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b branchPolicyORMDo) Omit(cols ...field.Expr) IBranchPolicyORMDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b branchPolicyORMDo) Join(table schema.Tabler, on ...field.Expr) IBranchPolicyORMDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b branchPolicyORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBranchPolicyORMDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b branchPolicyORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IBranchPolicyORMDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b branchPolicyORMDo) Group(cols ...field.Expr) IBranchPolicyORMDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b branchPolicyORMDo) Having(conds ...gen.Condition) IBranchPolicyORMDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b branchPolicyORMDo) Limit(limit int) IBranchPolicyORMDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b branchPolicyORMDo) Offset(offset int) IBranchPolicyORMDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b branchPolicyORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBranchPolicyORMDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b branchPolicyORMDo) Unscoped() IBranchPolicyORMDo {
	return b.withDO(b.DO.Unscoped())
}

func (b branchPolicyORMDo) Create(values ...*workspace_servicev1.BranchPolicyORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b branchPolicyORMDo) CreateInBatches(values []*workspace_servicev1.BranchPolicyORM, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b branchPolicyORMDo) Save(values ...*workspace_servicev1.BranchPolicyORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b branchPolicyORMDo) First() (*workspace_servicev1.BranchPolicyORM, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.BranchPolicyORM), nil
	}
}

func (b branchPolicyORMDo) Take() (*workspace_servicev1.BranchPolicyORM, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.BranchPolicyORM), nil
	}
}

func (b branchPolicyORMDo) Last() (*workspace_servicev1.BranchPolicyORM, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.BranchPolicyORM), nil
	}
}

func (b branchPolicyORMDo) Find() ([]*workspace_servicev1.BranchPolicyORM, error) {
	result, err := b.DO.Find()
	return result.([]*workspace_servicev1.BranchPolicyORM), err
}

func (b branchPolicyORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.BranchPolicyORM, err error) {
	buf := make([]*workspace_servicev1.BranchPolicyORM, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b branchPolicyORMDo) FindInBatches(result *[]*workspace_servicev1.BranchPolicyORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b branchPolicyORMDo) Attrs(attrs ...field.AssignExpr) IBranchPolicyORMDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b branchPolicyORMDo) Assign(attrs ...field.AssignExpr) IBranchPolicyORMDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b branchPolicyORMDo) Joins(fields ...field.RelationField) IBranchPolicyORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b branchPolicyORMDo) Preload(fields ...field.RelationField) IBranchPolicyORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b branchPolicyORMDo) FirstOrInit() (*workspace_servicev1.BranchPolicyORM, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.BranchPolicyORM), nil
	}
}

func (b branchPolicyORMDo) FirstOrCreate() (*workspace_servicev1.BranchPolicyORM, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.BranchPolicyORM), nil
	}
}

func (b branchPolicyORMDo) FindByPage(offset int, limit int) (result []*workspace_servicev1.BranchPolicyORM, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b branchPolicyORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b branchPolicyORMDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b branchPolicyORMDo) Delete(models ...*workspace_servicev1.BranchPolicyORM) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *branchPolicyORMDo) withDO(do gen.Dao) *branchPolicyORMDo {
	b.DO = *do.(*gen.DO)
	return b
}
