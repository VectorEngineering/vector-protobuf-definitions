// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	workspace_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/workspace_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newContextualSummaryORM(db *gorm.DB, opts ...gen.DOOption) contextualSummaryORM {
	_contextualSummaryORM := contextualSummaryORM{}

	_contextualSummaryORM.contextualSummaryORMDo.UseDB(db, opts...)
	_contextualSummaryORM.contextualSummaryORMDo.UseModel(&workspace_servicev1.ContextualSummaryORM{})

	tableName := _contextualSummaryORM.contextualSummaryORMDo.TableName()
	_contextualSummaryORM.ALL = field.NewAsterisk(tableName)
	_contextualSummaryORM.Content = field.NewString(tableName, "content")
	_contextualSummaryORM.CreatedAt = field.NewTime(tableName, "created_at")
	_contextualSummaryORM.DocumentVersionId = field.NewUint64(tableName, "document_version_id")
	_contextualSummaryORM.Id = field.NewUint64(tableName, "id")
	_contextualSummaryORM.KeyPoints = field.NewField(tableName, "key_points")
	_contextualSummaryORM.SummaryType = field.NewString(tableName, "summary_type")
	_contextualSummaryORM.TargetAudience = field.NewString(tableName, "target_audience")
	_contextualSummaryORM.VersionId = field.NewUint64(tableName, "version_id")

	_contextualSummaryORM.fillFieldMap()

	return _contextualSummaryORM
}

type contextualSummaryORM struct {
	contextualSummaryORMDo

	ALL               field.Asterisk
	Content           field.String
	CreatedAt         field.Time
	DocumentVersionId field.Uint64
	Id                field.Uint64
	KeyPoints         field.Field
	SummaryType       field.String
	TargetAudience    field.String
	VersionId         field.Uint64

	fieldMap map[string]field.Expr
}

func (c contextualSummaryORM) Table(newTableName string) *contextualSummaryORM {
	c.contextualSummaryORMDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c contextualSummaryORM) As(alias string) *contextualSummaryORM {
	c.contextualSummaryORMDo.DO = *(c.contextualSummaryORMDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *contextualSummaryORM) updateTableName(table string) *contextualSummaryORM {
	c.ALL = field.NewAsterisk(table)
	c.Content = field.NewString(table, "content")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.DocumentVersionId = field.NewUint64(table, "document_version_id")
	c.Id = field.NewUint64(table, "id")
	c.KeyPoints = field.NewField(table, "key_points")
	c.SummaryType = field.NewString(table, "summary_type")
	c.TargetAudience = field.NewString(table, "target_audience")
	c.VersionId = field.NewUint64(table, "version_id")

	c.fillFieldMap()

	return c
}

func (c *contextualSummaryORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *contextualSummaryORM) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["content"] = c.Content
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["document_version_id"] = c.DocumentVersionId
	c.fieldMap["id"] = c.Id
	c.fieldMap["key_points"] = c.KeyPoints
	c.fieldMap["summary_type"] = c.SummaryType
	c.fieldMap["target_audience"] = c.TargetAudience
	c.fieldMap["version_id"] = c.VersionId
}

func (c contextualSummaryORM) clone(db *gorm.DB) contextualSummaryORM {
	c.contextualSummaryORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c contextualSummaryORM) replaceDB(db *gorm.DB) contextualSummaryORM {
	c.contextualSummaryORMDo.ReplaceDB(db)
	return c
}

type contextualSummaryORMDo struct{ gen.DO }

type IContextualSummaryORMDo interface {
	gen.SubQuery
	Debug() IContextualSummaryORMDo
	WithContext(ctx context.Context) IContextualSummaryORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IContextualSummaryORMDo
	WriteDB() IContextualSummaryORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IContextualSummaryORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IContextualSummaryORMDo
	Not(conds ...gen.Condition) IContextualSummaryORMDo
	Or(conds ...gen.Condition) IContextualSummaryORMDo
	Select(conds ...field.Expr) IContextualSummaryORMDo
	Where(conds ...gen.Condition) IContextualSummaryORMDo
	Order(conds ...field.Expr) IContextualSummaryORMDo
	Distinct(cols ...field.Expr) IContextualSummaryORMDo
	Omit(cols ...field.Expr) IContextualSummaryORMDo
	Join(table schema.Tabler, on ...field.Expr) IContextualSummaryORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IContextualSummaryORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IContextualSummaryORMDo
	Group(cols ...field.Expr) IContextualSummaryORMDo
	Having(conds ...gen.Condition) IContextualSummaryORMDo
	Limit(limit int) IContextualSummaryORMDo
	Offset(offset int) IContextualSummaryORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IContextualSummaryORMDo
	Unscoped() IContextualSummaryORMDo
	Create(values ...*workspace_servicev1.ContextualSummaryORM) error
	CreateInBatches(values []*workspace_servicev1.ContextualSummaryORM, batchSize int) error
	Save(values ...*workspace_servicev1.ContextualSummaryORM) error
	First() (*workspace_servicev1.ContextualSummaryORM, error)
	Take() (*workspace_servicev1.ContextualSummaryORM, error)
	Last() (*workspace_servicev1.ContextualSummaryORM, error)
	Find() ([]*workspace_servicev1.ContextualSummaryORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.ContextualSummaryORM, err error)
	FindInBatches(result *[]*workspace_servicev1.ContextualSummaryORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*workspace_servicev1.ContextualSummaryORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IContextualSummaryORMDo
	Assign(attrs ...field.AssignExpr) IContextualSummaryORMDo
	Joins(fields ...field.RelationField) IContextualSummaryORMDo
	Preload(fields ...field.RelationField) IContextualSummaryORMDo
	FirstOrInit() (*workspace_servicev1.ContextualSummaryORM, error)
	FirstOrCreate() (*workspace_servicev1.ContextualSummaryORM, error)
	FindByPage(offset int, limit int) (result []*workspace_servicev1.ContextualSummaryORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IContextualSummaryORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result workspace_servicev1.ContextualSummaryORM, err error)
	GetRecordByIDs(ids []uint64) (result []workspace_servicev1.ContextualSummaryORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.ContextualSummaryORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result workspace_servicev1.ContextualSummaryORM, err error)
	GetByIDs(ids []uint64) (result []workspace_servicev1.ContextualSummaryORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.ContextualSummaryORM, err error)
	GetDeleted() (result []workspace_servicev1.ContextualSummaryORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	CreateInBatch(items []workspace_servicev1.ContextualSummaryORM, batchSize int) (err error)
	DeleteInBatch(ids []uint64) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.ContextualSummaryORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.ContextualSummaryORM, err error)
	FindByPattern(columnName string, pattern string) (result []workspace_servicev1.ContextualSummaryORM, err error)
	GetDistinct(columnName string) (result []workspace_servicev1.ContextualSummaryORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.ContextualSummaryORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.ContextualSummaryORM, err error)
	ExistsAndGet(column string, value interface{}) (result workspace_servicev1.ContextualSummaryORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.ContextualSummaryORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c contextualSummaryORMDo) GetRecordByID(id uint64) (result workspace_servicev1.ContextualSummaryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (c contextualSummaryORMDo) GetRecordByIDs(ids []uint64) (result []workspace_servicev1.ContextualSummaryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c contextualSummaryORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (c contextualSummaryORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.ContextualSummaryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM contextual_summaries ORDER BY " + c.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (c contextualSummaryORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM contextual_summaries ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c contextualSummaryORMDo) GetByID(id uint64) (result workspace_servicev1.ContextualSummaryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (c contextualSummaryORMDo) GetByIDs(ids []uint64) (result []workspace_servicev1.ContextualSummaryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (c contextualSummaryORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.ContextualSummaryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + c.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (c contextualSummaryORMDo) GetDeleted() (result []workspace_servicev1.ContextualSummaryORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (c contextualSummaryORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE contextual_summaries SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (c contextualSummaryORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE contextual_summaries SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values...)
func (c contextualSummaryORMDo) CreateInBatch(items []workspace_servicev1.ContextualSummaryORM, batchSize int) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO contextual_summaries (columns) VALUES (values...) ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (c contextualSummaryORMDo) DeleteInBatch(ids []uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (c contextualSummaryORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.ContextualSummaryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (c contextualSummaryORMDo) FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.ContextualSummaryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (c contextualSummaryORMDo) FindByPattern(columnName string, pattern string) (result []workspace_servicev1.ContextualSummaryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (c contextualSummaryORMDo) GetDistinct(columnName string) (result []workspace_servicev1.ContextualSummaryORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM contextual_summaries ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (c contextualSummaryORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.ContextualSummaryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (c contextualSummaryORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE contextual_summaries SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (c contextualSummaryORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (c contextualSummaryORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (c contextualSummaryORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.ContextualSummaryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (c contextualSummaryORMDo) ExistsAndGet(column string, value interface{}) (result workspace_servicev1.ContextualSummaryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM contextual_summaries ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (c contextualSummaryORMDo) ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.ContextualSummaryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM contextual_summaries ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM contextual_summaries ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c contextualSummaryORMDo) Debug() IContextualSummaryORMDo {
	return c.withDO(c.DO.Debug())
}

func (c contextualSummaryORMDo) WithContext(ctx context.Context) IContextualSummaryORMDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c contextualSummaryORMDo) ReadDB() IContextualSummaryORMDo {
	return c.Clauses(dbresolver.Read)
}

func (c contextualSummaryORMDo) WriteDB() IContextualSummaryORMDo {
	return c.Clauses(dbresolver.Write)
}

func (c contextualSummaryORMDo) Session(config *gorm.Session) IContextualSummaryORMDo {
	return c.withDO(c.DO.Session(config))
}

func (c contextualSummaryORMDo) Clauses(conds ...clause.Expression) IContextualSummaryORMDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c contextualSummaryORMDo) Returning(value interface{}, columns ...string) IContextualSummaryORMDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c contextualSummaryORMDo) Not(conds ...gen.Condition) IContextualSummaryORMDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c contextualSummaryORMDo) Or(conds ...gen.Condition) IContextualSummaryORMDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c contextualSummaryORMDo) Select(conds ...field.Expr) IContextualSummaryORMDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c contextualSummaryORMDo) Where(conds ...gen.Condition) IContextualSummaryORMDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c contextualSummaryORMDo) Order(conds ...field.Expr) IContextualSummaryORMDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c contextualSummaryORMDo) Distinct(cols ...field.Expr) IContextualSummaryORMDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c contextualSummaryORMDo) Omit(cols ...field.Expr) IContextualSummaryORMDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c contextualSummaryORMDo) Join(table schema.Tabler, on ...field.Expr) IContextualSummaryORMDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c contextualSummaryORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IContextualSummaryORMDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c contextualSummaryORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IContextualSummaryORMDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c contextualSummaryORMDo) Group(cols ...field.Expr) IContextualSummaryORMDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c contextualSummaryORMDo) Having(conds ...gen.Condition) IContextualSummaryORMDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c contextualSummaryORMDo) Limit(limit int) IContextualSummaryORMDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c contextualSummaryORMDo) Offset(offset int) IContextualSummaryORMDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c contextualSummaryORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IContextualSummaryORMDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c contextualSummaryORMDo) Unscoped() IContextualSummaryORMDo {
	return c.withDO(c.DO.Unscoped())
}

func (c contextualSummaryORMDo) Create(values ...*workspace_servicev1.ContextualSummaryORM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c contextualSummaryORMDo) CreateInBatches(values []*workspace_servicev1.ContextualSummaryORM, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c contextualSummaryORMDo) Save(values ...*workspace_servicev1.ContextualSummaryORM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c contextualSummaryORMDo) First() (*workspace_servicev1.ContextualSummaryORM, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.ContextualSummaryORM), nil
	}
}

func (c contextualSummaryORMDo) Take() (*workspace_servicev1.ContextualSummaryORM, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.ContextualSummaryORM), nil
	}
}

func (c contextualSummaryORMDo) Last() (*workspace_servicev1.ContextualSummaryORM, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.ContextualSummaryORM), nil
	}
}

func (c contextualSummaryORMDo) Find() ([]*workspace_servicev1.ContextualSummaryORM, error) {
	result, err := c.DO.Find()
	return result.([]*workspace_servicev1.ContextualSummaryORM), err
}

func (c contextualSummaryORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.ContextualSummaryORM, err error) {
	buf := make([]*workspace_servicev1.ContextualSummaryORM, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c contextualSummaryORMDo) FindInBatches(result *[]*workspace_servicev1.ContextualSummaryORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c contextualSummaryORMDo) Attrs(attrs ...field.AssignExpr) IContextualSummaryORMDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c contextualSummaryORMDo) Assign(attrs ...field.AssignExpr) IContextualSummaryORMDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c contextualSummaryORMDo) Joins(fields ...field.RelationField) IContextualSummaryORMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c contextualSummaryORMDo) Preload(fields ...field.RelationField) IContextualSummaryORMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c contextualSummaryORMDo) FirstOrInit() (*workspace_servicev1.ContextualSummaryORM, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.ContextualSummaryORM), nil
	}
}

func (c contextualSummaryORMDo) FirstOrCreate() (*workspace_servicev1.ContextualSummaryORM, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.ContextualSummaryORM), nil
	}
}

func (c contextualSummaryORMDo) FindByPage(offset int, limit int) (result []*workspace_servicev1.ContextualSummaryORM, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c contextualSummaryORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c contextualSummaryORMDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c contextualSummaryORMDo) Delete(models ...*workspace_servicev1.ContextualSummaryORM) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *contextualSummaryORMDo) withDO(do gen.Dao) *contextualSummaryORMDo {
	c.DO = *do.(*gen.DO)
	return c
}
