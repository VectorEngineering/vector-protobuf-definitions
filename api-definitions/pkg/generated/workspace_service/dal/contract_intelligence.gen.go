// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	workspace_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/workspace_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newContractIntelligenceORM(db *gorm.DB, opts ...gen.DOOption) contractIntelligenceORM {
	_contractIntelligenceORM := contractIntelligenceORM{}

	_contractIntelligenceORM.contractIntelligenceORMDo.UseDB(db, opts...)
	_contractIntelligenceORM.contractIntelligenceORMDo.UseModel(&workspace_servicev1.ContractIntelligenceORM{})

	tableName := _contractIntelligenceORM.contractIntelligenceORMDo.TableName()
	_contractIntelligenceORM.ALL = field.NewAsterisk(tableName)
	_contractIntelligenceORM.AnalysisDate = field.NewTime(tableName, "analysis_date")
	_contractIntelligenceORM.ContractType = field.NewString(tableName, "contract_type")
	_contractIntelligenceORM.DocumentTemplateId = field.NewUint64(tableName, "document_template_id")
	_contractIntelligenceORM.GoverningLaws = field.NewField(tableName, "governing_laws")
	_contractIntelligenceORM.Id = field.NewUint64(tableName, "id")
	_contractIntelligenceORM.Jurisdiction = field.NewString(tableName, "jurisdiction")
	_contractIntelligenceORM.KeyObligations = field.NewField(tableName, "key_obligations")
	_contractIntelligenceORM.ComplianceChecks = contractIntelligenceORMHasManyComplianceChecks{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ComplianceChecks", "workspace_servicev1.ComplianceCheckORM"),
	}

	_contractIntelligenceORM.RiskAssessments = contractIntelligenceORMHasManyRiskAssessments{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("RiskAssessments", "workspace_servicev1.RiskAssessmentORM"),
	}

	_contractIntelligenceORM.fillFieldMap()

	return _contractIntelligenceORM
}

type contractIntelligenceORM struct {
	contractIntelligenceORMDo

	ALL                field.Asterisk
	AnalysisDate       field.Time
	ContractType       field.String
	DocumentTemplateId field.Uint64
	GoverningLaws      field.Field
	Id                 field.Uint64
	Jurisdiction       field.String
	KeyObligations     field.Field
	ComplianceChecks   contractIntelligenceORMHasManyComplianceChecks

	RiskAssessments contractIntelligenceORMHasManyRiskAssessments

	fieldMap map[string]field.Expr
}

func (c contractIntelligenceORM) Table(newTableName string) *contractIntelligenceORM {
	c.contractIntelligenceORMDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c contractIntelligenceORM) As(alias string) *contractIntelligenceORM {
	c.contractIntelligenceORMDo.DO = *(c.contractIntelligenceORMDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *contractIntelligenceORM) updateTableName(table string) *contractIntelligenceORM {
	c.ALL = field.NewAsterisk(table)
	c.AnalysisDate = field.NewTime(table, "analysis_date")
	c.ContractType = field.NewString(table, "contract_type")
	c.DocumentTemplateId = field.NewUint64(table, "document_template_id")
	c.GoverningLaws = field.NewField(table, "governing_laws")
	c.Id = field.NewUint64(table, "id")
	c.Jurisdiction = field.NewString(table, "jurisdiction")
	c.KeyObligations = field.NewField(table, "key_obligations")

	c.fillFieldMap()

	return c
}

func (c *contractIntelligenceORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *contractIntelligenceORM) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["analysis_date"] = c.AnalysisDate
	c.fieldMap["contract_type"] = c.ContractType
	c.fieldMap["document_template_id"] = c.DocumentTemplateId
	c.fieldMap["governing_laws"] = c.GoverningLaws
	c.fieldMap["id"] = c.Id
	c.fieldMap["jurisdiction"] = c.Jurisdiction
	c.fieldMap["key_obligations"] = c.KeyObligations

}

func (c contractIntelligenceORM) clone(db *gorm.DB) contractIntelligenceORM {
	c.contractIntelligenceORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c contractIntelligenceORM) replaceDB(db *gorm.DB) contractIntelligenceORM {
	c.contractIntelligenceORMDo.ReplaceDB(db)
	return c
}

type contractIntelligenceORMHasManyComplianceChecks struct {
	db *gorm.DB

	field.RelationField
}

func (a contractIntelligenceORMHasManyComplianceChecks) Where(conds ...field.Expr) *contractIntelligenceORMHasManyComplianceChecks {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a contractIntelligenceORMHasManyComplianceChecks) WithContext(ctx context.Context) *contractIntelligenceORMHasManyComplianceChecks {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a contractIntelligenceORMHasManyComplianceChecks) Session(session *gorm.Session) *contractIntelligenceORMHasManyComplianceChecks {
	a.db = a.db.Session(session)
	return &a
}

func (a contractIntelligenceORMHasManyComplianceChecks) Model(m *workspace_servicev1.ContractIntelligenceORM) *contractIntelligenceORMHasManyComplianceChecksTx {
	return &contractIntelligenceORMHasManyComplianceChecksTx{a.db.Model(m).Association(a.Name())}
}

type contractIntelligenceORMHasManyComplianceChecksTx struct{ tx *gorm.Association }

func (a contractIntelligenceORMHasManyComplianceChecksTx) Find() (result []*workspace_servicev1.ComplianceCheckORM, err error) {
	return result, a.tx.Find(&result)
}

func (a contractIntelligenceORMHasManyComplianceChecksTx) Append(values ...*workspace_servicev1.ComplianceCheckORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a contractIntelligenceORMHasManyComplianceChecksTx) Replace(values ...*workspace_servicev1.ComplianceCheckORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a contractIntelligenceORMHasManyComplianceChecksTx) Delete(values ...*workspace_servicev1.ComplianceCheckORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a contractIntelligenceORMHasManyComplianceChecksTx) Clear() error {
	return a.tx.Clear()
}

func (a contractIntelligenceORMHasManyComplianceChecksTx) Count() int64 {
	return a.tx.Count()
}

type contractIntelligenceORMHasManyRiskAssessments struct {
	db *gorm.DB

	field.RelationField
}

func (a contractIntelligenceORMHasManyRiskAssessments) Where(conds ...field.Expr) *contractIntelligenceORMHasManyRiskAssessments {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a contractIntelligenceORMHasManyRiskAssessments) WithContext(ctx context.Context) *contractIntelligenceORMHasManyRiskAssessments {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a contractIntelligenceORMHasManyRiskAssessments) Session(session *gorm.Session) *contractIntelligenceORMHasManyRiskAssessments {
	a.db = a.db.Session(session)
	return &a
}

func (a contractIntelligenceORMHasManyRiskAssessments) Model(m *workspace_servicev1.ContractIntelligenceORM) *contractIntelligenceORMHasManyRiskAssessmentsTx {
	return &contractIntelligenceORMHasManyRiskAssessmentsTx{a.db.Model(m).Association(a.Name())}
}

type contractIntelligenceORMHasManyRiskAssessmentsTx struct{ tx *gorm.Association }

func (a contractIntelligenceORMHasManyRiskAssessmentsTx) Find() (result []*workspace_servicev1.RiskAssessmentORM, err error) {
	return result, a.tx.Find(&result)
}

func (a contractIntelligenceORMHasManyRiskAssessmentsTx) Append(values ...*workspace_servicev1.RiskAssessmentORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a contractIntelligenceORMHasManyRiskAssessmentsTx) Replace(values ...*workspace_servicev1.RiskAssessmentORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a contractIntelligenceORMHasManyRiskAssessmentsTx) Delete(values ...*workspace_servicev1.RiskAssessmentORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a contractIntelligenceORMHasManyRiskAssessmentsTx) Clear() error {
	return a.tx.Clear()
}

func (a contractIntelligenceORMHasManyRiskAssessmentsTx) Count() int64 {
	return a.tx.Count()
}

type contractIntelligenceORMDo struct{ gen.DO }

type IContractIntelligenceORMDo interface {
	gen.SubQuery
	Debug() IContractIntelligenceORMDo
	WithContext(ctx context.Context) IContractIntelligenceORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IContractIntelligenceORMDo
	WriteDB() IContractIntelligenceORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IContractIntelligenceORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IContractIntelligenceORMDo
	Not(conds ...gen.Condition) IContractIntelligenceORMDo
	Or(conds ...gen.Condition) IContractIntelligenceORMDo
	Select(conds ...field.Expr) IContractIntelligenceORMDo
	Where(conds ...gen.Condition) IContractIntelligenceORMDo
	Order(conds ...field.Expr) IContractIntelligenceORMDo
	Distinct(cols ...field.Expr) IContractIntelligenceORMDo
	Omit(cols ...field.Expr) IContractIntelligenceORMDo
	Join(table schema.Tabler, on ...field.Expr) IContractIntelligenceORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IContractIntelligenceORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IContractIntelligenceORMDo
	Group(cols ...field.Expr) IContractIntelligenceORMDo
	Having(conds ...gen.Condition) IContractIntelligenceORMDo
	Limit(limit int) IContractIntelligenceORMDo
	Offset(offset int) IContractIntelligenceORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IContractIntelligenceORMDo
	Unscoped() IContractIntelligenceORMDo
	Create(values ...*workspace_servicev1.ContractIntelligenceORM) error
	CreateInBatches(values []*workspace_servicev1.ContractIntelligenceORM, batchSize int) error
	Save(values ...*workspace_servicev1.ContractIntelligenceORM) error
	First() (*workspace_servicev1.ContractIntelligenceORM, error)
	Take() (*workspace_servicev1.ContractIntelligenceORM, error)
	Last() (*workspace_servicev1.ContractIntelligenceORM, error)
	Find() ([]*workspace_servicev1.ContractIntelligenceORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.ContractIntelligenceORM, err error)
	FindInBatches(result *[]*workspace_servicev1.ContractIntelligenceORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*workspace_servicev1.ContractIntelligenceORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IContractIntelligenceORMDo
	Assign(attrs ...field.AssignExpr) IContractIntelligenceORMDo
	Joins(fields ...field.RelationField) IContractIntelligenceORMDo
	Preload(fields ...field.RelationField) IContractIntelligenceORMDo
	FirstOrInit() (*workspace_servicev1.ContractIntelligenceORM, error)
	FirstOrCreate() (*workspace_servicev1.ContractIntelligenceORM, error)
	FindByPage(offset int, limit int) (result []*workspace_servicev1.ContractIntelligenceORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IContractIntelligenceORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result workspace_servicev1.ContractIntelligenceORM, err error)
	GetRecordByIDs(ids []uint64) (result []workspace_servicev1.ContractIntelligenceORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.ContractIntelligenceORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result workspace_servicev1.ContractIntelligenceORM, err error)
	GetByIDs(ids []uint64) (result []workspace_servicev1.ContractIntelligenceORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.ContractIntelligenceORM, err error)
	GetDeleted() (result []workspace_servicev1.ContractIntelligenceORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	DeleteInBatch(ids []uint64, batchSize int) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.ContractIntelligenceORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.ContractIntelligenceORM, err error)
	FindByPattern(columnName string, pattern string) (result []workspace_servicev1.ContractIntelligenceORM, err error)
	GetDistinct(columnName string) (result []workspace_servicev1.ContractIntelligenceORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.ContractIntelligenceORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.ContractIntelligenceORM, err error)
	ExistsAndGet(column string, value interface{}) (result workspace_servicev1.ContractIntelligenceORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.ContractIntelligenceORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c contractIntelligenceORMDo) GetRecordByID(id uint64) (result workspace_servicev1.ContractIntelligenceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (c contractIntelligenceORMDo) GetRecordByIDs(ids []uint64) (result []workspace_servicev1.ContractIntelligenceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c contractIntelligenceORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (c contractIntelligenceORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.ContractIntelligenceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM contract_intelligence ORDER BY " + c.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (c contractIntelligenceORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM contract_intelligence ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c contractIntelligenceORMDo) GetByID(id uint64) (result workspace_servicev1.ContractIntelligenceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (c contractIntelligenceORMDo) GetByIDs(ids []uint64) (result []workspace_servicev1.ContractIntelligenceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (c contractIntelligenceORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.ContractIntelligenceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + c.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (c contractIntelligenceORMDo) GetDeleted() (result []workspace_servicev1.ContractIntelligenceORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (c contractIntelligenceORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE contract_intelligence SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (c contractIntelligenceORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE contract_intelligence SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
// LIMIT @batchSize
func (c contractIntelligenceORMDo) DeleteInBatch(ids []uint64, batchSize int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, batchSize)
	generateSQL.WriteString("LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (c contractIntelligenceORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.ContractIntelligenceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (c contractIntelligenceORMDo) FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.ContractIntelligenceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (c contractIntelligenceORMDo) FindByPattern(columnName string, pattern string) (result []workspace_servicev1.ContractIntelligenceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (c contractIntelligenceORMDo) GetDistinct(columnName string) (result []workspace_servicev1.ContractIntelligenceORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM contract_intelligence ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (c contractIntelligenceORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.ContractIntelligenceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (c contractIntelligenceORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE contract_intelligence SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (c contractIntelligenceORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (c contractIntelligenceORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (c contractIntelligenceORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.ContractIntelligenceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (c contractIntelligenceORMDo) ExistsAndGet(column string, value interface{}) (result workspace_servicev1.ContractIntelligenceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM contract_intelligence ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (c contractIntelligenceORMDo) ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.ContractIntelligenceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM contract_intelligence ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM contract_intelligence ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c contractIntelligenceORMDo) Debug() IContractIntelligenceORMDo {
	return c.withDO(c.DO.Debug())
}

func (c contractIntelligenceORMDo) WithContext(ctx context.Context) IContractIntelligenceORMDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c contractIntelligenceORMDo) ReadDB() IContractIntelligenceORMDo {
	return c.Clauses(dbresolver.Read)
}

func (c contractIntelligenceORMDo) WriteDB() IContractIntelligenceORMDo {
	return c.Clauses(dbresolver.Write)
}

func (c contractIntelligenceORMDo) Session(config *gorm.Session) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Session(config))
}

func (c contractIntelligenceORMDo) Clauses(conds ...clause.Expression) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c contractIntelligenceORMDo) Returning(value interface{}, columns ...string) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c contractIntelligenceORMDo) Not(conds ...gen.Condition) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c contractIntelligenceORMDo) Or(conds ...gen.Condition) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c contractIntelligenceORMDo) Select(conds ...field.Expr) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c contractIntelligenceORMDo) Where(conds ...gen.Condition) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c contractIntelligenceORMDo) Order(conds ...field.Expr) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c contractIntelligenceORMDo) Distinct(cols ...field.Expr) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c contractIntelligenceORMDo) Omit(cols ...field.Expr) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c contractIntelligenceORMDo) Join(table schema.Tabler, on ...field.Expr) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c contractIntelligenceORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IContractIntelligenceORMDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c contractIntelligenceORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IContractIntelligenceORMDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c contractIntelligenceORMDo) Group(cols ...field.Expr) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c contractIntelligenceORMDo) Having(conds ...gen.Condition) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c contractIntelligenceORMDo) Limit(limit int) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c contractIntelligenceORMDo) Offset(offset int) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c contractIntelligenceORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c contractIntelligenceORMDo) Unscoped() IContractIntelligenceORMDo {
	return c.withDO(c.DO.Unscoped())
}

func (c contractIntelligenceORMDo) Create(values ...*workspace_servicev1.ContractIntelligenceORM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c contractIntelligenceORMDo) CreateInBatches(values []*workspace_servicev1.ContractIntelligenceORM, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c contractIntelligenceORMDo) Save(values ...*workspace_servicev1.ContractIntelligenceORM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c contractIntelligenceORMDo) First() (*workspace_servicev1.ContractIntelligenceORM, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.ContractIntelligenceORM), nil
	}
}

func (c contractIntelligenceORMDo) Take() (*workspace_servicev1.ContractIntelligenceORM, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.ContractIntelligenceORM), nil
	}
}

func (c contractIntelligenceORMDo) Last() (*workspace_servicev1.ContractIntelligenceORM, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.ContractIntelligenceORM), nil
	}
}

func (c contractIntelligenceORMDo) Find() ([]*workspace_servicev1.ContractIntelligenceORM, error) {
	result, err := c.DO.Find()
	return result.([]*workspace_servicev1.ContractIntelligenceORM), err
}

func (c contractIntelligenceORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.ContractIntelligenceORM, err error) {
	buf := make([]*workspace_servicev1.ContractIntelligenceORM, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c contractIntelligenceORMDo) FindInBatches(result *[]*workspace_servicev1.ContractIntelligenceORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c contractIntelligenceORMDo) Attrs(attrs ...field.AssignExpr) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c contractIntelligenceORMDo) Assign(attrs ...field.AssignExpr) IContractIntelligenceORMDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c contractIntelligenceORMDo) Joins(fields ...field.RelationField) IContractIntelligenceORMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c contractIntelligenceORMDo) Preload(fields ...field.RelationField) IContractIntelligenceORMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c contractIntelligenceORMDo) FirstOrInit() (*workspace_servicev1.ContractIntelligenceORM, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.ContractIntelligenceORM), nil
	}
}

func (c contractIntelligenceORMDo) FirstOrCreate() (*workspace_servicev1.ContractIntelligenceORM, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.ContractIntelligenceORM), nil
	}
}

func (c contractIntelligenceORMDo) FindByPage(offset int, limit int) (result []*workspace_servicev1.ContractIntelligenceORM, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c contractIntelligenceORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c contractIntelligenceORMDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c contractIntelligenceORMDo) Delete(models ...*workspace_servicev1.ContractIntelligenceORM) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *contractIntelligenceORMDo) withDO(do gen.Dao) *contractIntelligenceORMDo {
	c.DO = *do.(*gen.DO)
	return c
}
