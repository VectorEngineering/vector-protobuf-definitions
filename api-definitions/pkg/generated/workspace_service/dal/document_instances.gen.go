// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	workspace_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/workspace_service/v1"

	"time"
)

func newDocumentInstanceORM(db *gorm.DB, opts ...gen.DOOption) documentInstanceORM {
	_documentInstanceORM := documentInstanceORM{}

	_documentInstanceORM.documentInstanceORMDo.UseDB(db, opts...)
	_documentInstanceORM.documentInstanceORMDo.UseModel(&workspace_servicev1.DocumentInstanceORM{})

	tableName := _documentInstanceORM.documentInstanceORMDo.TableName()
	_documentInstanceORM.ALL = field.NewAsterisk(tableName)
	_documentInstanceORM.Attachments = field.NewField(tableName, "attachments")
	_documentInstanceORM.CreatedAt = field.NewTime(tableName, "created_at")
	_documentInstanceORM.DocumentTemplateId = field.NewUint64(tableName, "document_template_id")
	_documentInstanceORM.DueDate = field.NewTime(tableName, "due_date")
	_documentInstanceORM.GeneratedContent = field.NewString(tableName, "generated_content")
	_documentInstanceORM.Id = field.NewUint64(tableName, "id")
	_documentInstanceORM.IsCompleted = field.NewBool(tableName, "is_completed")
	_documentInstanceORM.Language = field.NewString(tableName, "language")
	_documentInstanceORM.Signers = field.NewField(tableName, "signers")
	_documentInstanceORM.Status = field.NewString(tableName, "status")
	_documentInstanceORM.TemplateId = field.NewUint64(tableName, "template_id")
	_documentInstanceORM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_documentInstanceORM.Negotiation = documentInstanceORMHasOneNegotiation{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Negotiation", "workspace_servicev1.NegotiationHistoryORM"),
		Rounds: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Negotiation.Rounds", "workspace_servicev1.NegotiationRoundORM"),
		},
	}

	_documentInstanceORM.AiAssistance = documentInstanceORMHasManyAiAssistance{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AiAssistance", "workspace_servicev1.AIAssistanceLogORM"),
	}

	_documentInstanceORM.SignatureRequests = documentInstanceORMHasManySignatureRequests{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SignatureRequests", "workspace_servicev1.SignatureRequestORM"),
		Workflow: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("SignatureRequests.Workflow", "workspace_servicev1.SignatureWorkflowORM"),
		},
		SignatureBlocks: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("SignatureRequests.SignatureBlocks", "workspace_servicev1.SignatureBlockORM"),
		},
	}

	_documentInstanceORM.Versions = documentInstanceORMHasManyVersions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Versions", "workspace_servicev1.DocumentVersionORM"),
		Branches: struct {
			field.RelationField
			Policy struct {
				field.RelationField
			}
			MergeRequests struct {
				field.RelationField
			}
			Merges struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Versions.Branches", "workspace_servicev1.DocumentBranchORM"),
			Policy: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Versions.Branches.Policy", "workspace_servicev1.BranchPolicyORM"),
			},
			MergeRequests: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Versions.Branches.MergeRequests", "workspace_servicev1.MergeRequestORM"),
			},
			Merges: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Versions.Branches.Merges", "workspace_servicev1.BranchMergeORM"),
			},
		},
		Changes: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Versions.Changes", "workspace_servicev1.ChangeSetORM"),
		},
		Summaries: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Versions.Summaries", "workspace_servicev1.ContextualSummaryORM"),
		},
	}

	_documentInstanceORM.fillFieldMap()

	return _documentInstanceORM
}

type documentInstanceORM struct {
	documentInstanceORMDo

	ALL                field.Asterisk
	Attachments        field.Field
	CreatedAt          field.Time
	DocumentTemplateId field.Uint64
	DueDate            field.Time
	GeneratedContent   field.String
	Id                 field.Uint64
	IsCompleted        field.Bool
	Language           field.String
	Signers            field.Field
	Status             field.String
	TemplateId         field.Uint64
	UpdatedAt          field.Time
	Negotiation        documentInstanceORMHasOneNegotiation

	AiAssistance documentInstanceORMHasManyAiAssistance

	SignatureRequests documentInstanceORMHasManySignatureRequests

	Versions documentInstanceORMHasManyVersions

	fieldMap map[string]field.Expr
}

func (d documentInstanceORM) Table(newTableName string) *documentInstanceORM {
	d.documentInstanceORMDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d documentInstanceORM) As(alias string) *documentInstanceORM {
	d.documentInstanceORMDo.DO = *(d.documentInstanceORMDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *documentInstanceORM) updateTableName(table string) *documentInstanceORM {
	d.ALL = field.NewAsterisk(table)
	d.Attachments = field.NewField(table, "attachments")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.DocumentTemplateId = field.NewUint64(table, "document_template_id")
	d.DueDate = field.NewTime(table, "due_date")
	d.GeneratedContent = field.NewString(table, "generated_content")
	d.Id = field.NewUint64(table, "id")
	d.IsCompleted = field.NewBool(table, "is_completed")
	d.Language = field.NewString(table, "language")
	d.Signers = field.NewField(table, "signers")
	d.Status = field.NewString(table, "status")
	d.TemplateId = field.NewUint64(table, "template_id")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *documentInstanceORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *documentInstanceORM) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 16)
	d.fieldMap["attachments"] = d.Attachments
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["document_template_id"] = d.DocumentTemplateId
	d.fieldMap["due_date"] = d.DueDate
	d.fieldMap["generated_content"] = d.GeneratedContent
	d.fieldMap["id"] = d.Id
	d.fieldMap["is_completed"] = d.IsCompleted
	d.fieldMap["language"] = d.Language
	d.fieldMap["signers"] = d.Signers
	d.fieldMap["status"] = d.Status
	d.fieldMap["template_id"] = d.TemplateId
	d.fieldMap["updated_at"] = d.UpdatedAt

}

func (d documentInstanceORM) clone(db *gorm.DB) documentInstanceORM {
	d.documentInstanceORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d documentInstanceORM) replaceDB(db *gorm.DB) documentInstanceORM {
	d.documentInstanceORMDo.ReplaceDB(db)
	return d
}

type documentInstanceORMHasOneNegotiation struct {
	db *gorm.DB

	field.RelationField

	Rounds struct {
		field.RelationField
	}
}

func (a documentInstanceORMHasOneNegotiation) Where(conds ...field.Expr) *documentInstanceORMHasOneNegotiation {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a documentInstanceORMHasOneNegotiation) WithContext(ctx context.Context) *documentInstanceORMHasOneNegotiation {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a documentInstanceORMHasOneNegotiation) Session(session *gorm.Session) *documentInstanceORMHasOneNegotiation {
	a.db = a.db.Session(session)
	return &a
}

func (a documentInstanceORMHasOneNegotiation) Model(m *workspace_servicev1.DocumentInstanceORM) *documentInstanceORMHasOneNegotiationTx {
	return &documentInstanceORMHasOneNegotiationTx{a.db.Model(m).Association(a.Name())}
}

type documentInstanceORMHasOneNegotiationTx struct{ tx *gorm.Association }

func (a documentInstanceORMHasOneNegotiationTx) Find() (result *workspace_servicev1.NegotiationHistoryORM, err error) {
	return result, a.tx.Find(&result)
}

func (a documentInstanceORMHasOneNegotiationTx) Append(values ...*workspace_servicev1.NegotiationHistoryORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a documentInstanceORMHasOneNegotiationTx) Replace(values ...*workspace_servicev1.NegotiationHistoryORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a documentInstanceORMHasOneNegotiationTx) Delete(values ...*workspace_servicev1.NegotiationHistoryORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a documentInstanceORMHasOneNegotiationTx) Clear() error {
	return a.tx.Clear()
}

func (a documentInstanceORMHasOneNegotiationTx) Count() int64 {
	return a.tx.Count()
}

type documentInstanceORMHasManyAiAssistance struct {
	db *gorm.DB

	field.RelationField
}

func (a documentInstanceORMHasManyAiAssistance) Where(conds ...field.Expr) *documentInstanceORMHasManyAiAssistance {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a documentInstanceORMHasManyAiAssistance) WithContext(ctx context.Context) *documentInstanceORMHasManyAiAssistance {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a documentInstanceORMHasManyAiAssistance) Session(session *gorm.Session) *documentInstanceORMHasManyAiAssistance {
	a.db = a.db.Session(session)
	return &a
}

func (a documentInstanceORMHasManyAiAssistance) Model(m *workspace_servicev1.DocumentInstanceORM) *documentInstanceORMHasManyAiAssistanceTx {
	return &documentInstanceORMHasManyAiAssistanceTx{a.db.Model(m).Association(a.Name())}
}

type documentInstanceORMHasManyAiAssistanceTx struct{ tx *gorm.Association }

func (a documentInstanceORMHasManyAiAssistanceTx) Find() (result []*workspace_servicev1.AIAssistanceLogORM, err error) {
	return result, a.tx.Find(&result)
}

func (a documentInstanceORMHasManyAiAssistanceTx) Append(values ...*workspace_servicev1.AIAssistanceLogORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a documentInstanceORMHasManyAiAssistanceTx) Replace(values ...*workspace_servicev1.AIAssistanceLogORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a documentInstanceORMHasManyAiAssistanceTx) Delete(values ...*workspace_servicev1.AIAssistanceLogORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a documentInstanceORMHasManyAiAssistanceTx) Clear() error {
	return a.tx.Clear()
}

func (a documentInstanceORMHasManyAiAssistanceTx) Count() int64 {
	return a.tx.Count()
}

type documentInstanceORMHasManySignatureRequests struct {
	db *gorm.DB

	field.RelationField

	Workflow struct {
		field.RelationField
	}
	SignatureBlocks struct {
		field.RelationField
	}
}

func (a documentInstanceORMHasManySignatureRequests) Where(conds ...field.Expr) *documentInstanceORMHasManySignatureRequests {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a documentInstanceORMHasManySignatureRequests) WithContext(ctx context.Context) *documentInstanceORMHasManySignatureRequests {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a documentInstanceORMHasManySignatureRequests) Session(session *gorm.Session) *documentInstanceORMHasManySignatureRequests {
	a.db = a.db.Session(session)
	return &a
}

func (a documentInstanceORMHasManySignatureRequests) Model(m *workspace_servicev1.DocumentInstanceORM) *documentInstanceORMHasManySignatureRequestsTx {
	return &documentInstanceORMHasManySignatureRequestsTx{a.db.Model(m).Association(a.Name())}
}

type documentInstanceORMHasManySignatureRequestsTx struct{ tx *gorm.Association }

func (a documentInstanceORMHasManySignatureRequestsTx) Find() (result []*workspace_servicev1.SignatureRequestORM, err error) {
	return result, a.tx.Find(&result)
}

func (a documentInstanceORMHasManySignatureRequestsTx) Append(values ...*workspace_servicev1.SignatureRequestORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a documentInstanceORMHasManySignatureRequestsTx) Replace(values ...*workspace_servicev1.SignatureRequestORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a documentInstanceORMHasManySignatureRequestsTx) Delete(values ...*workspace_servicev1.SignatureRequestORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a documentInstanceORMHasManySignatureRequestsTx) Clear() error {
	return a.tx.Clear()
}

func (a documentInstanceORMHasManySignatureRequestsTx) Count() int64 {
	return a.tx.Count()
}

type documentInstanceORMHasManyVersions struct {
	db *gorm.DB

	field.RelationField

	Branches struct {
		field.RelationField
		Policy struct {
			field.RelationField
		}
		MergeRequests struct {
			field.RelationField
		}
		Merges struct {
			field.RelationField
		}
	}
	Changes struct {
		field.RelationField
	}
	Summaries struct {
		field.RelationField
	}
}

func (a documentInstanceORMHasManyVersions) Where(conds ...field.Expr) *documentInstanceORMHasManyVersions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a documentInstanceORMHasManyVersions) WithContext(ctx context.Context) *documentInstanceORMHasManyVersions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a documentInstanceORMHasManyVersions) Session(session *gorm.Session) *documentInstanceORMHasManyVersions {
	a.db = a.db.Session(session)
	return &a
}

func (a documentInstanceORMHasManyVersions) Model(m *workspace_servicev1.DocumentInstanceORM) *documentInstanceORMHasManyVersionsTx {
	return &documentInstanceORMHasManyVersionsTx{a.db.Model(m).Association(a.Name())}
}

type documentInstanceORMHasManyVersionsTx struct{ tx *gorm.Association }

func (a documentInstanceORMHasManyVersionsTx) Find() (result []*workspace_servicev1.DocumentVersionORM, err error) {
	return result, a.tx.Find(&result)
}

func (a documentInstanceORMHasManyVersionsTx) Append(values ...*workspace_servicev1.DocumentVersionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a documentInstanceORMHasManyVersionsTx) Replace(values ...*workspace_servicev1.DocumentVersionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a documentInstanceORMHasManyVersionsTx) Delete(values ...*workspace_servicev1.DocumentVersionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a documentInstanceORMHasManyVersionsTx) Clear() error {
	return a.tx.Clear()
}

func (a documentInstanceORMHasManyVersionsTx) Count() int64 {
	return a.tx.Count()
}

type documentInstanceORMDo struct{ gen.DO }

type IDocumentInstanceORMDo interface {
	gen.SubQuery
	Debug() IDocumentInstanceORMDo
	WithContext(ctx context.Context) IDocumentInstanceORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDocumentInstanceORMDo
	WriteDB() IDocumentInstanceORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDocumentInstanceORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDocumentInstanceORMDo
	Not(conds ...gen.Condition) IDocumentInstanceORMDo
	Or(conds ...gen.Condition) IDocumentInstanceORMDo
	Select(conds ...field.Expr) IDocumentInstanceORMDo
	Where(conds ...gen.Condition) IDocumentInstanceORMDo
	Order(conds ...field.Expr) IDocumentInstanceORMDo
	Distinct(cols ...field.Expr) IDocumentInstanceORMDo
	Omit(cols ...field.Expr) IDocumentInstanceORMDo
	Join(table schema.Tabler, on ...field.Expr) IDocumentInstanceORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDocumentInstanceORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDocumentInstanceORMDo
	Group(cols ...field.Expr) IDocumentInstanceORMDo
	Having(conds ...gen.Condition) IDocumentInstanceORMDo
	Limit(limit int) IDocumentInstanceORMDo
	Offset(offset int) IDocumentInstanceORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDocumentInstanceORMDo
	Unscoped() IDocumentInstanceORMDo
	Create(values ...*workspace_servicev1.DocumentInstanceORM) error
	CreateInBatches(values []*workspace_servicev1.DocumentInstanceORM, batchSize int) error
	Save(values ...*workspace_servicev1.DocumentInstanceORM) error
	First() (*workspace_servicev1.DocumentInstanceORM, error)
	Take() (*workspace_servicev1.DocumentInstanceORM, error)
	Last() (*workspace_servicev1.DocumentInstanceORM, error)
	Find() ([]*workspace_servicev1.DocumentInstanceORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.DocumentInstanceORM, err error)
	FindInBatches(result *[]*workspace_servicev1.DocumentInstanceORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*workspace_servicev1.DocumentInstanceORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDocumentInstanceORMDo
	Assign(attrs ...field.AssignExpr) IDocumentInstanceORMDo
	Joins(fields ...field.RelationField) IDocumentInstanceORMDo
	Preload(fields ...field.RelationField) IDocumentInstanceORMDo
	FirstOrInit() (*workspace_servicev1.DocumentInstanceORM, error)
	FirstOrCreate() (*workspace_servicev1.DocumentInstanceORM, error)
	FindByPage(offset int, limit int) (result []*workspace_servicev1.DocumentInstanceORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDocumentInstanceORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result workspace_servicev1.DocumentInstanceORM, err error)
	GetRecordByIDs(ids []uint64) (result []workspace_servicev1.DocumentInstanceORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.DocumentInstanceORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result workspace_servicev1.DocumentInstanceORM, err error)
	GetByIDs(ids []uint64) (result []workspace_servicev1.DocumentInstanceORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.DocumentInstanceORM, err error)
	GetDeleted() (result []workspace_servicev1.DocumentInstanceORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	CreateInBatch(items []workspace_servicev1.DocumentInstanceORM, batchSize int) (err error)
	DeleteInBatch(ids []uint64) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.DocumentInstanceORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.DocumentInstanceORM, err error)
	FindByPattern(columnName string, pattern string) (result []workspace_servicev1.DocumentInstanceORM, err error)
	GetDistinct(columnName string) (result []workspace_servicev1.DocumentInstanceORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.DocumentInstanceORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.DocumentInstanceORM, err error)
	ExistsAndGet(column string, value interface{}) (result workspace_servicev1.DocumentInstanceORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.DocumentInstanceORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentInstanceORMDo) GetRecordByID(id uint64) (result workspace_servicev1.DocumentInstanceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_instances ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (d documentInstanceORMDo) GetRecordByIDs(ids []uint64) (result []workspace_servicev1.DocumentInstanceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_instances ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentInstanceORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM document_instances ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (d documentInstanceORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.DocumentInstanceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM document_instances ORDER BY " + d.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (d documentInstanceORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM document_instances ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentInstanceORMDo) GetByID(id uint64) (result workspace_servicev1.DocumentInstanceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_instances ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (d documentInstanceORMDo) GetByIDs(ids []uint64) (result []workspace_servicev1.DocumentInstanceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_instances ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (d documentInstanceORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.DocumentInstanceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_instances ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + d.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (d documentInstanceORMDo) GetDeleted() (result []workspace_servicev1.DocumentInstanceORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_instances ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentInstanceORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE document_instances SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentInstanceORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE document_instances SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values...)
func (d documentInstanceORMDo) CreateInBatch(items []workspace_servicev1.DocumentInstanceORM, batchSize int) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO document_instances (columns) VALUES (values...) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (d documentInstanceORMDo) DeleteInBatch(ids []uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM document_instances ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (d documentInstanceORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.DocumentInstanceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_instances ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (d documentInstanceORMDo) FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.DocumentInstanceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_instances ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (d documentInstanceORMDo) FindByPattern(columnName string, pattern string) (result []workspace_servicev1.DocumentInstanceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_instances ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (d documentInstanceORMDo) GetDistinct(columnName string) (result []workspace_servicev1.DocumentInstanceORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM document_instances ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (d documentInstanceORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.DocumentInstanceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_instances ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentInstanceORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE document_instances SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (d documentInstanceORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM document_instances ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (d documentInstanceORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM document_instances ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (d documentInstanceORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.DocumentInstanceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_instances ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (d documentInstanceORMDo) ExistsAndGet(column string, value interface{}) (result workspace_servicev1.DocumentInstanceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM document_instances ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM document_instances ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (d documentInstanceORMDo) ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.DocumentInstanceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM document_instances ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM document_instances ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (d documentInstanceORMDo) Debug() IDocumentInstanceORMDo {
	return d.withDO(d.DO.Debug())
}

func (d documentInstanceORMDo) WithContext(ctx context.Context) IDocumentInstanceORMDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d documentInstanceORMDo) ReadDB() IDocumentInstanceORMDo {
	return d.Clauses(dbresolver.Read)
}

func (d documentInstanceORMDo) WriteDB() IDocumentInstanceORMDo {
	return d.Clauses(dbresolver.Write)
}

func (d documentInstanceORMDo) Session(config *gorm.Session) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Session(config))
}

func (d documentInstanceORMDo) Clauses(conds ...clause.Expression) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d documentInstanceORMDo) Returning(value interface{}, columns ...string) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d documentInstanceORMDo) Not(conds ...gen.Condition) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d documentInstanceORMDo) Or(conds ...gen.Condition) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d documentInstanceORMDo) Select(conds ...field.Expr) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d documentInstanceORMDo) Where(conds ...gen.Condition) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d documentInstanceORMDo) Order(conds ...field.Expr) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d documentInstanceORMDo) Distinct(cols ...field.Expr) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d documentInstanceORMDo) Omit(cols ...field.Expr) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d documentInstanceORMDo) Join(table schema.Tabler, on ...field.Expr) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d documentInstanceORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDocumentInstanceORMDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d documentInstanceORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IDocumentInstanceORMDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d documentInstanceORMDo) Group(cols ...field.Expr) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d documentInstanceORMDo) Having(conds ...gen.Condition) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d documentInstanceORMDo) Limit(limit int) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d documentInstanceORMDo) Offset(offset int) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d documentInstanceORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d documentInstanceORMDo) Unscoped() IDocumentInstanceORMDo {
	return d.withDO(d.DO.Unscoped())
}

func (d documentInstanceORMDo) Create(values ...*workspace_servicev1.DocumentInstanceORM) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d documentInstanceORMDo) CreateInBatches(values []*workspace_servicev1.DocumentInstanceORM, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d documentInstanceORMDo) Save(values ...*workspace_servicev1.DocumentInstanceORM) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d documentInstanceORMDo) First() (*workspace_servicev1.DocumentInstanceORM, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.DocumentInstanceORM), nil
	}
}

func (d documentInstanceORMDo) Take() (*workspace_servicev1.DocumentInstanceORM, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.DocumentInstanceORM), nil
	}
}

func (d documentInstanceORMDo) Last() (*workspace_servicev1.DocumentInstanceORM, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.DocumentInstanceORM), nil
	}
}

func (d documentInstanceORMDo) Find() ([]*workspace_servicev1.DocumentInstanceORM, error) {
	result, err := d.DO.Find()
	return result.([]*workspace_servicev1.DocumentInstanceORM), err
}

func (d documentInstanceORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.DocumentInstanceORM, err error) {
	buf := make([]*workspace_servicev1.DocumentInstanceORM, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d documentInstanceORMDo) FindInBatches(result *[]*workspace_servicev1.DocumentInstanceORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d documentInstanceORMDo) Attrs(attrs ...field.AssignExpr) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d documentInstanceORMDo) Assign(attrs ...field.AssignExpr) IDocumentInstanceORMDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d documentInstanceORMDo) Joins(fields ...field.RelationField) IDocumentInstanceORMDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d documentInstanceORMDo) Preload(fields ...field.RelationField) IDocumentInstanceORMDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d documentInstanceORMDo) FirstOrInit() (*workspace_servicev1.DocumentInstanceORM, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.DocumentInstanceORM), nil
	}
}

func (d documentInstanceORMDo) FirstOrCreate() (*workspace_servicev1.DocumentInstanceORM, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.DocumentInstanceORM), nil
	}
}

func (d documentInstanceORMDo) FindByPage(offset int, limit int) (result []*workspace_servicev1.DocumentInstanceORM, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d documentInstanceORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d documentInstanceORMDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d documentInstanceORMDo) Delete(models ...*workspace_servicev1.DocumentInstanceORM) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *documentInstanceORMDo) withDO(do gen.Dao) *documentInstanceORMDo {
	d.DO = *do.(*gen.DO)
	return d
}
