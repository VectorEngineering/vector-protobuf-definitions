// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	workspace_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/workspace_service/v1"

	"time"
)

func newDocumentTemplateORM(db *gorm.DB, opts ...gen.DOOption) documentTemplateORM {
	_documentTemplateORM := documentTemplateORM{}

	_documentTemplateORM.documentTemplateORMDo.UseDB(db, opts...)
	_documentTemplateORM.documentTemplateORMDo.UseModel(&workspace_servicev1.DocumentTemplateORM{})

	tableName := _documentTemplateORM.documentTemplateORMDo.TableName()
	_documentTemplateORM.ALL = field.NewAsterisk(tableName)
	_documentTemplateORM.BaseContent = field.NewString(tableName, "base_content")
	_documentTemplateORM.ConditionalSections = field.NewField(tableName, "conditional_sections")
	_documentTemplateORM.Content = field.NewString(tableName, "content")
	_documentTemplateORM.CreatedAt = field.NewTime(tableName, "created_at")
	_documentTemplateORM.Description = field.NewString(tableName, "description")
	_documentTemplateORM.DetectedVariables = field.NewField(tableName, "detected_variables")
	_documentTemplateORM.DocumentType = field.NewString(tableName, "document_type")
	_documentTemplateORM.Id = field.NewUint64(tableName, "id")
	_documentTemplateORM.IndustryType = field.NewString(tableName, "industry_type")
	_documentTemplateORM.IsAdaptive = field.NewBool(tableName, "is_adaptive")
	_documentTemplateORM.IsContextAware = field.NewBool(tableName, "is_context_aware")
	_documentTemplateORM.Name = field.NewString(tableName, "name")
	_documentTemplateORM.RequiredDataFields = field.NewField(tableName, "required_data_fields")
	_documentTemplateORM.SupportedContexts = field.NewField(tableName, "supported_contexts")
	_documentTemplateORM.SupportedLanguages = field.NewField(tableName, "supported_languages")
	_documentTemplateORM.TemplateType = field.NewString(tableName, "template_type")
	_documentTemplateORM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_documentTemplateORM.Version = field.NewString(tableName, "version")
	_documentTemplateORM.WorkspaceId = field.NewUint64(tableName, "workspace_id")
	_documentTemplateORM.Explanations = documentTemplateORMHasManyExplanations{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Explanations", "workspace_servicev1.ExplanationBlockORM"),
	}

	_documentTemplateORM.Instances = documentTemplateORMHasManyInstances{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Instances", "workspace_servicev1.DocumentInstanceORM"),
		Negotiation: struct {
			field.RelationField
			Rounds struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Instances.Negotiation", "workspace_servicev1.NegotiationHistoryORM"),
			Rounds: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Instances.Negotiation.Rounds", "workspace_servicev1.NegotiationRoundORM"),
			},
		},
		AiAssistance: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Instances.AiAssistance", "workspace_servicev1.AIAssistanceLogORM"),
		},
		SignatureRequests: struct {
			field.RelationField
			Workflow struct {
				field.RelationField
			}
			SignatureBlocks struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Instances.SignatureRequests", "workspace_servicev1.SignatureRequestORM"),
			Workflow: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Instances.SignatureRequests.Workflow", "workspace_servicev1.SignatureWorkflowORM"),
			},
			SignatureBlocks: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Instances.SignatureRequests.SignatureBlocks", "workspace_servicev1.SignatureBlockORM"),
			},
		},
		Versions: struct {
			field.RelationField
			Branches struct {
				field.RelationField
				Policy struct {
					field.RelationField
				}
				MergeRequests struct {
					field.RelationField
				}
				Merges struct {
					field.RelationField
				}
			}
			Changes struct {
				field.RelationField
			}
			Summaries struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Instances.Versions", "workspace_servicev1.DocumentVersionORM"),
			Branches: struct {
				field.RelationField
				Policy struct {
					field.RelationField
				}
				MergeRequests struct {
					field.RelationField
				}
				Merges struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Instances.Versions.Branches", "workspace_servicev1.DocumentBranchORM"),
				Policy: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Instances.Versions.Branches.Policy", "workspace_servicev1.BranchPolicyORM"),
				},
				MergeRequests: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Instances.Versions.Branches.MergeRequests", "workspace_servicev1.MergeRequestORM"),
				},
				Merges: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Instances.Versions.Branches.Merges", "workspace_servicev1.BranchMergeORM"),
				},
			},
			Changes: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Instances.Versions.Changes", "workspace_servicev1.ChangeSetORM"),
			},
			Summaries: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Instances.Versions.Summaries", "workspace_servicev1.ContextualSummaryORM"),
			},
		},
	}

	_documentTemplateORM.Intelligence = documentTemplateORMHasManyIntelligence{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Intelligence", "workspace_servicev1.ContractIntelligenceORM"),
		ComplianceChecks: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Intelligence.ComplianceChecks", "workspace_servicev1.ComplianceCheckORM"),
		},
		RiskAssessments: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Intelligence.RiskAssessments", "workspace_servicev1.RiskAssessmentORM"),
		},
	}

	_documentTemplateORM.Variables = documentTemplateORMHasManyVariables{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Variables", "workspace_servicev1.TemplateVariableORM"),
	}

	_documentTemplateORM.Versions = documentTemplateORMHasManyVersions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Versions", "workspace_servicev1.TemplateVersionORM"),
	}

	_documentTemplateORM.fillFieldMap()

	return _documentTemplateORM
}

type documentTemplateORM struct {
	documentTemplateORMDo

	ALL                 field.Asterisk
	BaseContent         field.String
	ConditionalSections field.Field
	Content             field.String
	CreatedAt           field.Time
	Description         field.String
	DetectedVariables   field.Field
	DocumentType        field.String
	Id                  field.Uint64
	IndustryType        field.String
	IsAdaptive          field.Bool
	IsContextAware      field.Bool
	Name                field.String
	RequiredDataFields  field.Field
	SupportedContexts   field.Field
	SupportedLanguages  field.Field
	TemplateType        field.String
	UpdatedAt           field.Time
	Version             field.String
	WorkspaceId         field.Uint64
	Explanations        documentTemplateORMHasManyExplanations

	Instances documentTemplateORMHasManyInstances

	Intelligence documentTemplateORMHasManyIntelligence

	Variables documentTemplateORMHasManyVariables

	Versions documentTemplateORMHasManyVersions

	fieldMap map[string]field.Expr
}

func (d documentTemplateORM) Table(newTableName string) *documentTemplateORM {
	d.documentTemplateORMDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d documentTemplateORM) As(alias string) *documentTemplateORM {
	d.documentTemplateORMDo.DO = *(d.documentTemplateORMDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *documentTemplateORM) updateTableName(table string) *documentTemplateORM {
	d.ALL = field.NewAsterisk(table)
	d.BaseContent = field.NewString(table, "base_content")
	d.ConditionalSections = field.NewField(table, "conditional_sections")
	d.Content = field.NewString(table, "content")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.Description = field.NewString(table, "description")
	d.DetectedVariables = field.NewField(table, "detected_variables")
	d.DocumentType = field.NewString(table, "document_type")
	d.Id = field.NewUint64(table, "id")
	d.IndustryType = field.NewString(table, "industry_type")
	d.IsAdaptive = field.NewBool(table, "is_adaptive")
	d.IsContextAware = field.NewBool(table, "is_context_aware")
	d.Name = field.NewString(table, "name")
	d.RequiredDataFields = field.NewField(table, "required_data_fields")
	d.SupportedContexts = field.NewField(table, "supported_contexts")
	d.SupportedLanguages = field.NewField(table, "supported_languages")
	d.TemplateType = field.NewString(table, "template_type")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.Version = field.NewString(table, "version")
	d.WorkspaceId = field.NewUint64(table, "workspace_id")

	d.fillFieldMap()

	return d
}

func (d *documentTemplateORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *documentTemplateORM) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 24)
	d.fieldMap["base_content"] = d.BaseContent
	d.fieldMap["conditional_sections"] = d.ConditionalSections
	d.fieldMap["content"] = d.Content
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["description"] = d.Description
	d.fieldMap["detected_variables"] = d.DetectedVariables
	d.fieldMap["document_type"] = d.DocumentType
	d.fieldMap["id"] = d.Id
	d.fieldMap["industry_type"] = d.IndustryType
	d.fieldMap["is_adaptive"] = d.IsAdaptive
	d.fieldMap["is_context_aware"] = d.IsContextAware
	d.fieldMap["name"] = d.Name
	d.fieldMap["required_data_fields"] = d.RequiredDataFields
	d.fieldMap["supported_contexts"] = d.SupportedContexts
	d.fieldMap["supported_languages"] = d.SupportedLanguages
	d.fieldMap["template_type"] = d.TemplateType
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["version"] = d.Version
	d.fieldMap["workspace_id"] = d.WorkspaceId

}

func (d documentTemplateORM) clone(db *gorm.DB) documentTemplateORM {
	d.documentTemplateORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d documentTemplateORM) replaceDB(db *gorm.DB) documentTemplateORM {
	d.documentTemplateORMDo.ReplaceDB(db)
	return d
}

type documentTemplateORMHasManyExplanations struct {
	db *gorm.DB

	field.RelationField
}

func (a documentTemplateORMHasManyExplanations) Where(conds ...field.Expr) *documentTemplateORMHasManyExplanations {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a documentTemplateORMHasManyExplanations) WithContext(ctx context.Context) *documentTemplateORMHasManyExplanations {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a documentTemplateORMHasManyExplanations) Session(session *gorm.Session) *documentTemplateORMHasManyExplanations {
	a.db = a.db.Session(session)
	return &a
}

func (a documentTemplateORMHasManyExplanations) Model(m *workspace_servicev1.DocumentTemplateORM) *documentTemplateORMHasManyExplanationsTx {
	return &documentTemplateORMHasManyExplanationsTx{a.db.Model(m).Association(a.Name())}
}

type documentTemplateORMHasManyExplanationsTx struct{ tx *gorm.Association }

func (a documentTemplateORMHasManyExplanationsTx) Find() (result []*workspace_servicev1.ExplanationBlockORM, err error) {
	return result, a.tx.Find(&result)
}

func (a documentTemplateORMHasManyExplanationsTx) Append(values ...*workspace_servicev1.ExplanationBlockORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a documentTemplateORMHasManyExplanationsTx) Replace(values ...*workspace_servicev1.ExplanationBlockORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a documentTemplateORMHasManyExplanationsTx) Delete(values ...*workspace_servicev1.ExplanationBlockORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a documentTemplateORMHasManyExplanationsTx) Clear() error {
	return a.tx.Clear()
}

func (a documentTemplateORMHasManyExplanationsTx) Count() int64 {
	return a.tx.Count()
}

type documentTemplateORMHasManyInstances struct {
	db *gorm.DB

	field.RelationField

	Negotiation struct {
		field.RelationField
		Rounds struct {
			field.RelationField
		}
	}
	AiAssistance struct {
		field.RelationField
	}
	SignatureRequests struct {
		field.RelationField
		Workflow struct {
			field.RelationField
		}
		SignatureBlocks struct {
			field.RelationField
		}
	}
	Versions struct {
		field.RelationField
		Branches struct {
			field.RelationField
			Policy struct {
				field.RelationField
			}
			MergeRequests struct {
				field.RelationField
			}
			Merges struct {
				field.RelationField
			}
		}
		Changes struct {
			field.RelationField
		}
		Summaries struct {
			field.RelationField
		}
	}
}

func (a documentTemplateORMHasManyInstances) Where(conds ...field.Expr) *documentTemplateORMHasManyInstances {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a documentTemplateORMHasManyInstances) WithContext(ctx context.Context) *documentTemplateORMHasManyInstances {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a documentTemplateORMHasManyInstances) Session(session *gorm.Session) *documentTemplateORMHasManyInstances {
	a.db = a.db.Session(session)
	return &a
}

func (a documentTemplateORMHasManyInstances) Model(m *workspace_servicev1.DocumentTemplateORM) *documentTemplateORMHasManyInstancesTx {
	return &documentTemplateORMHasManyInstancesTx{a.db.Model(m).Association(a.Name())}
}

type documentTemplateORMHasManyInstancesTx struct{ tx *gorm.Association }

func (a documentTemplateORMHasManyInstancesTx) Find() (result []*workspace_servicev1.DocumentInstanceORM, err error) {
	return result, a.tx.Find(&result)
}

func (a documentTemplateORMHasManyInstancesTx) Append(values ...*workspace_servicev1.DocumentInstanceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a documentTemplateORMHasManyInstancesTx) Replace(values ...*workspace_servicev1.DocumentInstanceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a documentTemplateORMHasManyInstancesTx) Delete(values ...*workspace_servicev1.DocumentInstanceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a documentTemplateORMHasManyInstancesTx) Clear() error {
	return a.tx.Clear()
}

func (a documentTemplateORMHasManyInstancesTx) Count() int64 {
	return a.tx.Count()
}

type documentTemplateORMHasManyIntelligence struct {
	db *gorm.DB

	field.RelationField

	ComplianceChecks struct {
		field.RelationField
	}
	RiskAssessments struct {
		field.RelationField
	}
}

func (a documentTemplateORMHasManyIntelligence) Where(conds ...field.Expr) *documentTemplateORMHasManyIntelligence {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a documentTemplateORMHasManyIntelligence) WithContext(ctx context.Context) *documentTemplateORMHasManyIntelligence {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a documentTemplateORMHasManyIntelligence) Session(session *gorm.Session) *documentTemplateORMHasManyIntelligence {
	a.db = a.db.Session(session)
	return &a
}

func (a documentTemplateORMHasManyIntelligence) Model(m *workspace_servicev1.DocumentTemplateORM) *documentTemplateORMHasManyIntelligenceTx {
	return &documentTemplateORMHasManyIntelligenceTx{a.db.Model(m).Association(a.Name())}
}

type documentTemplateORMHasManyIntelligenceTx struct{ tx *gorm.Association }

func (a documentTemplateORMHasManyIntelligenceTx) Find() (result []*workspace_servicev1.ContractIntelligenceORM, err error) {
	return result, a.tx.Find(&result)
}

func (a documentTemplateORMHasManyIntelligenceTx) Append(values ...*workspace_servicev1.ContractIntelligenceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a documentTemplateORMHasManyIntelligenceTx) Replace(values ...*workspace_servicev1.ContractIntelligenceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a documentTemplateORMHasManyIntelligenceTx) Delete(values ...*workspace_servicev1.ContractIntelligenceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a documentTemplateORMHasManyIntelligenceTx) Clear() error {
	return a.tx.Clear()
}

func (a documentTemplateORMHasManyIntelligenceTx) Count() int64 {
	return a.tx.Count()
}

type documentTemplateORMHasManyVariables struct {
	db *gorm.DB

	field.RelationField
}

func (a documentTemplateORMHasManyVariables) Where(conds ...field.Expr) *documentTemplateORMHasManyVariables {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a documentTemplateORMHasManyVariables) WithContext(ctx context.Context) *documentTemplateORMHasManyVariables {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a documentTemplateORMHasManyVariables) Session(session *gorm.Session) *documentTemplateORMHasManyVariables {
	a.db = a.db.Session(session)
	return &a
}

func (a documentTemplateORMHasManyVariables) Model(m *workspace_servicev1.DocumentTemplateORM) *documentTemplateORMHasManyVariablesTx {
	return &documentTemplateORMHasManyVariablesTx{a.db.Model(m).Association(a.Name())}
}

type documentTemplateORMHasManyVariablesTx struct{ tx *gorm.Association }

func (a documentTemplateORMHasManyVariablesTx) Find() (result []*workspace_servicev1.TemplateVariableORM, err error) {
	return result, a.tx.Find(&result)
}

func (a documentTemplateORMHasManyVariablesTx) Append(values ...*workspace_servicev1.TemplateVariableORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a documentTemplateORMHasManyVariablesTx) Replace(values ...*workspace_servicev1.TemplateVariableORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a documentTemplateORMHasManyVariablesTx) Delete(values ...*workspace_servicev1.TemplateVariableORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a documentTemplateORMHasManyVariablesTx) Clear() error {
	return a.tx.Clear()
}

func (a documentTemplateORMHasManyVariablesTx) Count() int64 {
	return a.tx.Count()
}

type documentTemplateORMHasManyVersions struct {
	db *gorm.DB

	field.RelationField
}

func (a documentTemplateORMHasManyVersions) Where(conds ...field.Expr) *documentTemplateORMHasManyVersions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a documentTemplateORMHasManyVersions) WithContext(ctx context.Context) *documentTemplateORMHasManyVersions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a documentTemplateORMHasManyVersions) Session(session *gorm.Session) *documentTemplateORMHasManyVersions {
	a.db = a.db.Session(session)
	return &a
}

func (a documentTemplateORMHasManyVersions) Model(m *workspace_servicev1.DocumentTemplateORM) *documentTemplateORMHasManyVersionsTx {
	return &documentTemplateORMHasManyVersionsTx{a.db.Model(m).Association(a.Name())}
}

type documentTemplateORMHasManyVersionsTx struct{ tx *gorm.Association }

func (a documentTemplateORMHasManyVersionsTx) Find() (result []*workspace_servicev1.TemplateVersionORM, err error) {
	return result, a.tx.Find(&result)
}

func (a documentTemplateORMHasManyVersionsTx) Append(values ...*workspace_servicev1.TemplateVersionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a documentTemplateORMHasManyVersionsTx) Replace(values ...*workspace_servicev1.TemplateVersionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a documentTemplateORMHasManyVersionsTx) Delete(values ...*workspace_servicev1.TemplateVersionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a documentTemplateORMHasManyVersionsTx) Clear() error {
	return a.tx.Clear()
}

func (a documentTemplateORMHasManyVersionsTx) Count() int64 {
	return a.tx.Count()
}

type documentTemplateORMDo struct{ gen.DO }

type IDocumentTemplateORMDo interface {
	gen.SubQuery
	Debug() IDocumentTemplateORMDo
	WithContext(ctx context.Context) IDocumentTemplateORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDocumentTemplateORMDo
	WriteDB() IDocumentTemplateORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDocumentTemplateORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDocumentTemplateORMDo
	Not(conds ...gen.Condition) IDocumentTemplateORMDo
	Or(conds ...gen.Condition) IDocumentTemplateORMDo
	Select(conds ...field.Expr) IDocumentTemplateORMDo
	Where(conds ...gen.Condition) IDocumentTemplateORMDo
	Order(conds ...field.Expr) IDocumentTemplateORMDo
	Distinct(cols ...field.Expr) IDocumentTemplateORMDo
	Omit(cols ...field.Expr) IDocumentTemplateORMDo
	Join(table schema.Tabler, on ...field.Expr) IDocumentTemplateORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDocumentTemplateORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDocumentTemplateORMDo
	Group(cols ...field.Expr) IDocumentTemplateORMDo
	Having(conds ...gen.Condition) IDocumentTemplateORMDo
	Limit(limit int) IDocumentTemplateORMDo
	Offset(offset int) IDocumentTemplateORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDocumentTemplateORMDo
	Unscoped() IDocumentTemplateORMDo
	Create(values ...*workspace_servicev1.DocumentTemplateORM) error
	CreateInBatches(values []*workspace_servicev1.DocumentTemplateORM, batchSize int) error
	Save(values ...*workspace_servicev1.DocumentTemplateORM) error
	First() (*workspace_servicev1.DocumentTemplateORM, error)
	Take() (*workspace_servicev1.DocumentTemplateORM, error)
	Last() (*workspace_servicev1.DocumentTemplateORM, error)
	Find() ([]*workspace_servicev1.DocumentTemplateORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.DocumentTemplateORM, err error)
	FindInBatches(result *[]*workspace_servicev1.DocumentTemplateORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*workspace_servicev1.DocumentTemplateORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDocumentTemplateORMDo
	Assign(attrs ...field.AssignExpr) IDocumentTemplateORMDo
	Joins(fields ...field.RelationField) IDocumentTemplateORMDo
	Preload(fields ...field.RelationField) IDocumentTemplateORMDo
	FirstOrInit() (*workspace_servicev1.DocumentTemplateORM, error)
	FirstOrCreate() (*workspace_servicev1.DocumentTemplateORM, error)
	FindByPage(offset int, limit int) (result []*workspace_servicev1.DocumentTemplateORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDocumentTemplateORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result workspace_servicev1.DocumentTemplateORM, err error)
	GetRecordByIDs(ids []uint64) (result []workspace_servicev1.DocumentTemplateORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.DocumentTemplateORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result workspace_servicev1.DocumentTemplateORM, err error)
	GetByIDs(ids []uint64) (result []workspace_servicev1.DocumentTemplateORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.DocumentTemplateORM, err error)
	GetDeleted() (result []workspace_servicev1.DocumentTemplateORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	CreateInBatch(items []workspace_servicev1.DocumentTemplateORM, batchSize int) (err error)
	DeleteInBatch(ids []uint64) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.DocumentTemplateORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.DocumentTemplateORM, err error)
	FindByPattern(columnName string, pattern string) (result []workspace_servicev1.DocumentTemplateORM, err error)
	GetDistinct(columnName string) (result []workspace_servicev1.DocumentTemplateORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.DocumentTemplateORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.DocumentTemplateORM, err error)
	ExistsAndGet(column string, value interface{}) (result workspace_servicev1.DocumentTemplateORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.DocumentTemplateORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentTemplateORMDo) GetRecordByID(id uint64) (result workspace_servicev1.DocumentTemplateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_templates ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (d documentTemplateORMDo) GetRecordByIDs(ids []uint64) (result []workspace_servicev1.DocumentTemplateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_templates ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentTemplateORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM document_templates ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (d documentTemplateORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.DocumentTemplateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM document_templates ORDER BY " + d.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (d documentTemplateORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM document_templates ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentTemplateORMDo) GetByID(id uint64) (result workspace_servicev1.DocumentTemplateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_templates ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (d documentTemplateORMDo) GetByIDs(ids []uint64) (result []workspace_servicev1.DocumentTemplateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_templates ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (d documentTemplateORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.DocumentTemplateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_templates ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + d.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (d documentTemplateORMDo) GetDeleted() (result []workspace_servicev1.DocumentTemplateORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_templates ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentTemplateORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE document_templates SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentTemplateORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE document_templates SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values...)
func (d documentTemplateORMDo) CreateInBatch(items []workspace_servicev1.DocumentTemplateORM, batchSize int) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO document_templates (columns) VALUES (values...) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (d documentTemplateORMDo) DeleteInBatch(ids []uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM document_templates ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (d documentTemplateORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.DocumentTemplateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_templates ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (d documentTemplateORMDo) FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.DocumentTemplateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_templates ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (d documentTemplateORMDo) FindByPattern(columnName string, pattern string) (result []workspace_servicev1.DocumentTemplateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_templates ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (d documentTemplateORMDo) GetDistinct(columnName string) (result []workspace_servicev1.DocumentTemplateORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM document_templates ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (d documentTemplateORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.DocumentTemplateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_templates ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentTemplateORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE document_templates SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (d documentTemplateORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM document_templates ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (d documentTemplateORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM document_templates ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (d documentTemplateORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.DocumentTemplateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_templates ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (d documentTemplateORMDo) ExistsAndGet(column string, value interface{}) (result workspace_servicev1.DocumentTemplateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM document_templates ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM document_templates ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (d documentTemplateORMDo) ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.DocumentTemplateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM document_templates ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM document_templates ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (d documentTemplateORMDo) Debug() IDocumentTemplateORMDo {
	return d.withDO(d.DO.Debug())
}

func (d documentTemplateORMDo) WithContext(ctx context.Context) IDocumentTemplateORMDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d documentTemplateORMDo) ReadDB() IDocumentTemplateORMDo {
	return d.Clauses(dbresolver.Read)
}

func (d documentTemplateORMDo) WriteDB() IDocumentTemplateORMDo {
	return d.Clauses(dbresolver.Write)
}

func (d documentTemplateORMDo) Session(config *gorm.Session) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Session(config))
}

func (d documentTemplateORMDo) Clauses(conds ...clause.Expression) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d documentTemplateORMDo) Returning(value interface{}, columns ...string) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d documentTemplateORMDo) Not(conds ...gen.Condition) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d documentTemplateORMDo) Or(conds ...gen.Condition) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d documentTemplateORMDo) Select(conds ...field.Expr) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d documentTemplateORMDo) Where(conds ...gen.Condition) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d documentTemplateORMDo) Order(conds ...field.Expr) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d documentTemplateORMDo) Distinct(cols ...field.Expr) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d documentTemplateORMDo) Omit(cols ...field.Expr) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d documentTemplateORMDo) Join(table schema.Tabler, on ...field.Expr) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d documentTemplateORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDocumentTemplateORMDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d documentTemplateORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IDocumentTemplateORMDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d documentTemplateORMDo) Group(cols ...field.Expr) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d documentTemplateORMDo) Having(conds ...gen.Condition) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d documentTemplateORMDo) Limit(limit int) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d documentTemplateORMDo) Offset(offset int) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d documentTemplateORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d documentTemplateORMDo) Unscoped() IDocumentTemplateORMDo {
	return d.withDO(d.DO.Unscoped())
}

func (d documentTemplateORMDo) Create(values ...*workspace_servicev1.DocumentTemplateORM) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d documentTemplateORMDo) CreateInBatches(values []*workspace_servicev1.DocumentTemplateORM, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d documentTemplateORMDo) Save(values ...*workspace_servicev1.DocumentTemplateORM) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d documentTemplateORMDo) First() (*workspace_servicev1.DocumentTemplateORM, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.DocumentTemplateORM), nil
	}
}

func (d documentTemplateORMDo) Take() (*workspace_servicev1.DocumentTemplateORM, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.DocumentTemplateORM), nil
	}
}

func (d documentTemplateORMDo) Last() (*workspace_servicev1.DocumentTemplateORM, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.DocumentTemplateORM), nil
	}
}

func (d documentTemplateORMDo) Find() ([]*workspace_servicev1.DocumentTemplateORM, error) {
	result, err := d.DO.Find()
	return result.([]*workspace_servicev1.DocumentTemplateORM), err
}

func (d documentTemplateORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.DocumentTemplateORM, err error) {
	buf := make([]*workspace_servicev1.DocumentTemplateORM, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d documentTemplateORMDo) FindInBatches(result *[]*workspace_servicev1.DocumentTemplateORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d documentTemplateORMDo) Attrs(attrs ...field.AssignExpr) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d documentTemplateORMDo) Assign(attrs ...field.AssignExpr) IDocumentTemplateORMDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d documentTemplateORMDo) Joins(fields ...field.RelationField) IDocumentTemplateORMDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d documentTemplateORMDo) Preload(fields ...field.RelationField) IDocumentTemplateORMDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d documentTemplateORMDo) FirstOrInit() (*workspace_servicev1.DocumentTemplateORM, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.DocumentTemplateORM), nil
	}
}

func (d documentTemplateORMDo) FirstOrCreate() (*workspace_servicev1.DocumentTemplateORM, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.DocumentTemplateORM), nil
	}
}

func (d documentTemplateORMDo) FindByPage(offset int, limit int) (result []*workspace_servicev1.DocumentTemplateORM, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d documentTemplateORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d documentTemplateORMDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d documentTemplateORMDo) Delete(models ...*workspace_servicev1.DocumentTemplateORM) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *documentTemplateORMDo) withDO(do gen.Dao) *documentTemplateORMDo {
	d.DO = *do.(*gen.DO)
	return d
}
