// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	workspace_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/workspace_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newDocumentVersionORM(db *gorm.DB, opts ...gen.DOOption) documentVersionORM {
	_documentVersionORM := documentVersionORM{}

	_documentVersionORM.documentVersionORMDo.UseDB(db, opts...)
	_documentVersionORM.documentVersionORMDo.UseModel(&workspace_servicev1.DocumentVersionORM{})

	tableName := _documentVersionORM.documentVersionORMDo.TableName()
	_documentVersionORM.ALL = field.NewAsterisk(tableName)
	_documentVersionORM.ApprovalChain = field.NewString(tableName, "approval_chain")
	_documentVersionORM.AuthorId = field.NewString(tableName, "author_id")
	_documentVersionORM.BranchName = field.NewString(tableName, "branch_name")
	_documentVersionORM.CommitMessage = field.NewString(tableName, "commit_message")
	_documentVersionORM.CreatedAt = field.NewTime(tableName, "created_at")
	_documentVersionORM.DocumentInstanceId = field.NewUint64(tableName, "document_instance_id")
	_documentVersionORM.Id = field.NewUint64(tableName, "id")
	_documentVersionORM.IsApproved = field.NewBool(tableName, "is_approved")
	_documentVersionORM.ParentHash = field.NewString(tableName, "parent_hash")
	_documentVersionORM.Tags = field.NewField(tableName, "tags")
	_documentVersionORM.VersionHash = field.NewString(tableName, "version_hash")
	_documentVersionORM.Branches = documentVersionORMHasManyBranches{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Branches", "workspace_servicev1.DocumentBranchORM"),
		Policy: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Branches.Policy", "workspace_servicev1.BranchPolicyORM"),
		},
		MergeRequests: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Branches.MergeRequests", "workspace_servicev1.MergeRequestORM"),
		},
		Merges: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Branches.Merges", "workspace_servicev1.BranchMergeORM"),
		},
	}

	_documentVersionORM.Changes = documentVersionORMHasManyChanges{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Changes", "workspace_servicev1.ChangeSetORM"),
	}

	_documentVersionORM.Summaries = documentVersionORMHasManySummaries{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Summaries", "workspace_servicev1.ContextualSummaryORM"),
	}

	_documentVersionORM.fillFieldMap()

	return _documentVersionORM
}

type documentVersionORM struct {
	documentVersionORMDo

	ALL                field.Asterisk
	ApprovalChain      field.String
	AuthorId           field.String
	BranchName         field.String
	CommitMessage      field.String
	CreatedAt          field.Time
	DocumentInstanceId field.Uint64
	Id                 field.Uint64
	IsApproved         field.Bool
	ParentHash         field.String
	Tags               field.Field
	VersionHash        field.String
	Branches           documentVersionORMHasManyBranches

	Changes documentVersionORMHasManyChanges

	Summaries documentVersionORMHasManySummaries

	fieldMap map[string]field.Expr
}

func (d documentVersionORM) Table(newTableName string) *documentVersionORM {
	d.documentVersionORMDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d documentVersionORM) As(alias string) *documentVersionORM {
	d.documentVersionORMDo.DO = *(d.documentVersionORMDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *documentVersionORM) updateTableName(table string) *documentVersionORM {
	d.ALL = field.NewAsterisk(table)
	d.ApprovalChain = field.NewString(table, "approval_chain")
	d.AuthorId = field.NewString(table, "author_id")
	d.BranchName = field.NewString(table, "branch_name")
	d.CommitMessage = field.NewString(table, "commit_message")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.DocumentInstanceId = field.NewUint64(table, "document_instance_id")
	d.Id = field.NewUint64(table, "id")
	d.IsApproved = field.NewBool(table, "is_approved")
	d.ParentHash = field.NewString(table, "parent_hash")
	d.Tags = field.NewField(table, "tags")
	d.VersionHash = field.NewString(table, "version_hash")

	d.fillFieldMap()

	return d
}

func (d *documentVersionORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *documentVersionORM) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 14)
	d.fieldMap["approval_chain"] = d.ApprovalChain
	d.fieldMap["author_id"] = d.AuthorId
	d.fieldMap["branch_name"] = d.BranchName
	d.fieldMap["commit_message"] = d.CommitMessage
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["document_instance_id"] = d.DocumentInstanceId
	d.fieldMap["id"] = d.Id
	d.fieldMap["is_approved"] = d.IsApproved
	d.fieldMap["parent_hash"] = d.ParentHash
	d.fieldMap["tags"] = d.Tags
	d.fieldMap["version_hash"] = d.VersionHash

}

func (d documentVersionORM) clone(db *gorm.DB) documentVersionORM {
	d.documentVersionORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d documentVersionORM) replaceDB(db *gorm.DB) documentVersionORM {
	d.documentVersionORMDo.ReplaceDB(db)
	return d
}

type documentVersionORMHasManyBranches struct {
	db *gorm.DB

	field.RelationField

	Policy struct {
		field.RelationField
	}
	MergeRequests struct {
		field.RelationField
	}
	Merges struct {
		field.RelationField
	}
}

func (a documentVersionORMHasManyBranches) Where(conds ...field.Expr) *documentVersionORMHasManyBranches {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a documentVersionORMHasManyBranches) WithContext(ctx context.Context) *documentVersionORMHasManyBranches {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a documentVersionORMHasManyBranches) Session(session *gorm.Session) *documentVersionORMHasManyBranches {
	a.db = a.db.Session(session)
	return &a
}

func (a documentVersionORMHasManyBranches) Model(m *workspace_servicev1.DocumentVersionORM) *documentVersionORMHasManyBranchesTx {
	return &documentVersionORMHasManyBranchesTx{a.db.Model(m).Association(a.Name())}
}

type documentVersionORMHasManyBranchesTx struct{ tx *gorm.Association }

func (a documentVersionORMHasManyBranchesTx) Find() (result []*workspace_servicev1.DocumentBranchORM, err error) {
	return result, a.tx.Find(&result)
}

func (a documentVersionORMHasManyBranchesTx) Append(values ...*workspace_servicev1.DocumentBranchORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a documentVersionORMHasManyBranchesTx) Replace(values ...*workspace_servicev1.DocumentBranchORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a documentVersionORMHasManyBranchesTx) Delete(values ...*workspace_servicev1.DocumentBranchORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a documentVersionORMHasManyBranchesTx) Clear() error {
	return a.tx.Clear()
}

func (a documentVersionORMHasManyBranchesTx) Count() int64 {
	return a.tx.Count()
}

type documentVersionORMHasManyChanges struct {
	db *gorm.DB

	field.RelationField
}

func (a documentVersionORMHasManyChanges) Where(conds ...field.Expr) *documentVersionORMHasManyChanges {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a documentVersionORMHasManyChanges) WithContext(ctx context.Context) *documentVersionORMHasManyChanges {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a documentVersionORMHasManyChanges) Session(session *gorm.Session) *documentVersionORMHasManyChanges {
	a.db = a.db.Session(session)
	return &a
}

func (a documentVersionORMHasManyChanges) Model(m *workspace_servicev1.DocumentVersionORM) *documentVersionORMHasManyChangesTx {
	return &documentVersionORMHasManyChangesTx{a.db.Model(m).Association(a.Name())}
}

type documentVersionORMHasManyChangesTx struct{ tx *gorm.Association }

func (a documentVersionORMHasManyChangesTx) Find() (result []*workspace_servicev1.ChangeSetORM, err error) {
	return result, a.tx.Find(&result)
}

func (a documentVersionORMHasManyChangesTx) Append(values ...*workspace_servicev1.ChangeSetORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a documentVersionORMHasManyChangesTx) Replace(values ...*workspace_servicev1.ChangeSetORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a documentVersionORMHasManyChangesTx) Delete(values ...*workspace_servicev1.ChangeSetORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a documentVersionORMHasManyChangesTx) Clear() error {
	return a.tx.Clear()
}

func (a documentVersionORMHasManyChangesTx) Count() int64 {
	return a.tx.Count()
}

type documentVersionORMHasManySummaries struct {
	db *gorm.DB

	field.RelationField
}

func (a documentVersionORMHasManySummaries) Where(conds ...field.Expr) *documentVersionORMHasManySummaries {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a documentVersionORMHasManySummaries) WithContext(ctx context.Context) *documentVersionORMHasManySummaries {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a documentVersionORMHasManySummaries) Session(session *gorm.Session) *documentVersionORMHasManySummaries {
	a.db = a.db.Session(session)
	return &a
}

func (a documentVersionORMHasManySummaries) Model(m *workspace_servicev1.DocumentVersionORM) *documentVersionORMHasManySummariesTx {
	return &documentVersionORMHasManySummariesTx{a.db.Model(m).Association(a.Name())}
}

type documentVersionORMHasManySummariesTx struct{ tx *gorm.Association }

func (a documentVersionORMHasManySummariesTx) Find() (result []*workspace_servicev1.ContextualSummaryORM, err error) {
	return result, a.tx.Find(&result)
}

func (a documentVersionORMHasManySummariesTx) Append(values ...*workspace_servicev1.ContextualSummaryORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a documentVersionORMHasManySummariesTx) Replace(values ...*workspace_servicev1.ContextualSummaryORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a documentVersionORMHasManySummariesTx) Delete(values ...*workspace_servicev1.ContextualSummaryORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a documentVersionORMHasManySummariesTx) Clear() error {
	return a.tx.Clear()
}

func (a documentVersionORMHasManySummariesTx) Count() int64 {
	return a.tx.Count()
}

type documentVersionORMDo struct{ gen.DO }

type IDocumentVersionORMDo interface {
	gen.SubQuery
	Debug() IDocumentVersionORMDo
	WithContext(ctx context.Context) IDocumentVersionORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDocumentVersionORMDo
	WriteDB() IDocumentVersionORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDocumentVersionORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDocumentVersionORMDo
	Not(conds ...gen.Condition) IDocumentVersionORMDo
	Or(conds ...gen.Condition) IDocumentVersionORMDo
	Select(conds ...field.Expr) IDocumentVersionORMDo
	Where(conds ...gen.Condition) IDocumentVersionORMDo
	Order(conds ...field.Expr) IDocumentVersionORMDo
	Distinct(cols ...field.Expr) IDocumentVersionORMDo
	Omit(cols ...field.Expr) IDocumentVersionORMDo
	Join(table schema.Tabler, on ...field.Expr) IDocumentVersionORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDocumentVersionORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDocumentVersionORMDo
	Group(cols ...field.Expr) IDocumentVersionORMDo
	Having(conds ...gen.Condition) IDocumentVersionORMDo
	Limit(limit int) IDocumentVersionORMDo
	Offset(offset int) IDocumentVersionORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDocumentVersionORMDo
	Unscoped() IDocumentVersionORMDo
	Create(values ...*workspace_servicev1.DocumentVersionORM) error
	CreateInBatches(values []*workspace_servicev1.DocumentVersionORM, batchSize int) error
	Save(values ...*workspace_servicev1.DocumentVersionORM) error
	First() (*workspace_servicev1.DocumentVersionORM, error)
	Take() (*workspace_servicev1.DocumentVersionORM, error)
	Last() (*workspace_servicev1.DocumentVersionORM, error)
	Find() ([]*workspace_servicev1.DocumentVersionORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.DocumentVersionORM, err error)
	FindInBatches(result *[]*workspace_servicev1.DocumentVersionORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*workspace_servicev1.DocumentVersionORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDocumentVersionORMDo
	Assign(attrs ...field.AssignExpr) IDocumentVersionORMDo
	Joins(fields ...field.RelationField) IDocumentVersionORMDo
	Preload(fields ...field.RelationField) IDocumentVersionORMDo
	FirstOrInit() (*workspace_servicev1.DocumentVersionORM, error)
	FirstOrCreate() (*workspace_servicev1.DocumentVersionORM, error)
	FindByPage(offset int, limit int) (result []*workspace_servicev1.DocumentVersionORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDocumentVersionORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result workspace_servicev1.DocumentVersionORM, err error)
	GetRecordByIDs(ids []uint64) (result []workspace_servicev1.DocumentVersionORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.DocumentVersionORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result workspace_servicev1.DocumentVersionORM, err error)
	GetByIDs(ids []uint64) (result []workspace_servicev1.DocumentVersionORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.DocumentVersionORM, err error)
	GetDeleted() (result []workspace_servicev1.DocumentVersionORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	CreateInBatch(items []workspace_servicev1.DocumentVersionORM, batchSize int) (err error)
	DeleteInBatch(ids []uint64) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.DocumentVersionORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.DocumentVersionORM, err error)
	FindByPattern(columnName string, pattern string) (result []workspace_servicev1.DocumentVersionORM, err error)
	GetDistinct(columnName string) (result []workspace_servicev1.DocumentVersionORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.DocumentVersionORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.DocumentVersionORM, err error)
	ExistsAndGet(column string, value interface{}) (result workspace_servicev1.DocumentVersionORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.DocumentVersionORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentVersionORMDo) GetRecordByID(id uint64) (result workspace_servicev1.DocumentVersionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_versions ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (d documentVersionORMDo) GetRecordByIDs(ids []uint64) (result []workspace_servicev1.DocumentVersionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_versions ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentVersionORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM document_versions ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (d documentVersionORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.DocumentVersionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM document_versions ORDER BY " + d.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (d documentVersionORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM document_versions ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentVersionORMDo) GetByID(id uint64) (result workspace_servicev1.DocumentVersionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_versions ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (d documentVersionORMDo) GetByIDs(ids []uint64) (result []workspace_servicev1.DocumentVersionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_versions ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (d documentVersionORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.DocumentVersionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_versions ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + d.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (d documentVersionORMDo) GetDeleted() (result []workspace_servicev1.DocumentVersionORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_versions ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentVersionORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE document_versions SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentVersionORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE document_versions SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values...)
func (d documentVersionORMDo) CreateInBatch(items []workspace_servicev1.DocumentVersionORM, batchSize int) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO document_versions (columns) VALUES (values...) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (d documentVersionORMDo) DeleteInBatch(ids []uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM document_versions ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (d documentVersionORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.DocumentVersionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_versions ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (d documentVersionORMDo) FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.DocumentVersionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_versions ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (d documentVersionORMDo) FindByPattern(columnName string, pattern string) (result []workspace_servicev1.DocumentVersionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_versions ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (d documentVersionORMDo) GetDistinct(columnName string) (result []workspace_servicev1.DocumentVersionORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM document_versions ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (d documentVersionORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.DocumentVersionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_versions ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (d documentVersionORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE document_versions SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (d documentVersionORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM document_versions ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (d documentVersionORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM document_versions ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (d documentVersionORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.DocumentVersionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM document_versions ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (d documentVersionORMDo) ExistsAndGet(column string, value interface{}) (result workspace_servicev1.DocumentVersionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM document_versions ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM document_versions ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (d documentVersionORMDo) ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.DocumentVersionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM document_versions ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM document_versions ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (d documentVersionORMDo) Debug() IDocumentVersionORMDo {
	return d.withDO(d.DO.Debug())
}

func (d documentVersionORMDo) WithContext(ctx context.Context) IDocumentVersionORMDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d documentVersionORMDo) ReadDB() IDocumentVersionORMDo {
	return d.Clauses(dbresolver.Read)
}

func (d documentVersionORMDo) WriteDB() IDocumentVersionORMDo {
	return d.Clauses(dbresolver.Write)
}

func (d documentVersionORMDo) Session(config *gorm.Session) IDocumentVersionORMDo {
	return d.withDO(d.DO.Session(config))
}

func (d documentVersionORMDo) Clauses(conds ...clause.Expression) IDocumentVersionORMDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d documentVersionORMDo) Returning(value interface{}, columns ...string) IDocumentVersionORMDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d documentVersionORMDo) Not(conds ...gen.Condition) IDocumentVersionORMDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d documentVersionORMDo) Or(conds ...gen.Condition) IDocumentVersionORMDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d documentVersionORMDo) Select(conds ...field.Expr) IDocumentVersionORMDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d documentVersionORMDo) Where(conds ...gen.Condition) IDocumentVersionORMDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d documentVersionORMDo) Order(conds ...field.Expr) IDocumentVersionORMDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d documentVersionORMDo) Distinct(cols ...field.Expr) IDocumentVersionORMDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d documentVersionORMDo) Omit(cols ...field.Expr) IDocumentVersionORMDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d documentVersionORMDo) Join(table schema.Tabler, on ...field.Expr) IDocumentVersionORMDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d documentVersionORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDocumentVersionORMDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d documentVersionORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IDocumentVersionORMDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d documentVersionORMDo) Group(cols ...field.Expr) IDocumentVersionORMDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d documentVersionORMDo) Having(conds ...gen.Condition) IDocumentVersionORMDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d documentVersionORMDo) Limit(limit int) IDocumentVersionORMDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d documentVersionORMDo) Offset(offset int) IDocumentVersionORMDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d documentVersionORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDocumentVersionORMDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d documentVersionORMDo) Unscoped() IDocumentVersionORMDo {
	return d.withDO(d.DO.Unscoped())
}

func (d documentVersionORMDo) Create(values ...*workspace_servicev1.DocumentVersionORM) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d documentVersionORMDo) CreateInBatches(values []*workspace_servicev1.DocumentVersionORM, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d documentVersionORMDo) Save(values ...*workspace_servicev1.DocumentVersionORM) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d documentVersionORMDo) First() (*workspace_servicev1.DocumentVersionORM, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.DocumentVersionORM), nil
	}
}

func (d documentVersionORMDo) Take() (*workspace_servicev1.DocumentVersionORM, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.DocumentVersionORM), nil
	}
}

func (d documentVersionORMDo) Last() (*workspace_servicev1.DocumentVersionORM, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.DocumentVersionORM), nil
	}
}

func (d documentVersionORMDo) Find() ([]*workspace_servicev1.DocumentVersionORM, error) {
	result, err := d.DO.Find()
	return result.([]*workspace_servicev1.DocumentVersionORM), err
}

func (d documentVersionORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.DocumentVersionORM, err error) {
	buf := make([]*workspace_servicev1.DocumentVersionORM, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d documentVersionORMDo) FindInBatches(result *[]*workspace_servicev1.DocumentVersionORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d documentVersionORMDo) Attrs(attrs ...field.AssignExpr) IDocumentVersionORMDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d documentVersionORMDo) Assign(attrs ...field.AssignExpr) IDocumentVersionORMDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d documentVersionORMDo) Joins(fields ...field.RelationField) IDocumentVersionORMDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d documentVersionORMDo) Preload(fields ...field.RelationField) IDocumentVersionORMDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d documentVersionORMDo) FirstOrInit() (*workspace_servicev1.DocumentVersionORM, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.DocumentVersionORM), nil
	}
}

func (d documentVersionORMDo) FirstOrCreate() (*workspace_servicev1.DocumentVersionORM, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.DocumentVersionORM), nil
	}
}

func (d documentVersionORMDo) FindByPage(offset int, limit int) (result []*workspace_servicev1.DocumentVersionORM, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d documentVersionORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d documentVersionORMDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d documentVersionORMDo) Delete(models ...*workspace_servicev1.DocumentVersionORM) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *documentVersionORMDo) withDO(do gen.Dao) *documentVersionORMDo {
	d.DO = *do.(*gen.DO)
	return d
}
