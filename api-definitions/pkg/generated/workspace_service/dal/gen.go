// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                       = new(Query)
	AIAssistanceLogORM      *aIAssistanceLogORM
	AccountORM              *accountORM
	AppAnalyticsORM         *appAnalyticsORM
	AppDevelopmentInfoORM   *appDevelopmentInfoORM
	AppInstallationORM      *appInstallationORM
	AppPermissionORM        *appPermissionORM
	AppVersionORM           *appVersionORM
	AppWebhookORM           *appWebhookORM
	BranchMergeORM          *branchMergeORM
	BranchPolicyORM         *branchPolicyORM
	ChangeSetORM            *changeSetORM
	CommentThreadORM        *commentThreadORM
	ComplianceCheckORM      *complianceCheckORM
	ContextualSummaryORM    *contextualSummaryORM
	ContractIntelligenceORM *contractIntelligenceORM
	DataProfileORM          *dataProfileORM
	DocumentBranchORM       *documentBranchORM
	DocumentInstanceORM     *documentInstanceORM
	DocumentSnapshotORM     *documentSnapshotORM
	DocumentTemplateORM     *documentTemplateORM
	DocumentVersionORM      *documentVersionORM
	ExplanationBlockORM     *explanationBlockORM
	FileEmbeddingsORM       *fileEmbeddingsORM
	FileSharingORM          *fileSharingORM
	FileVersionORM          *fileVersionORM
	FolderMetadataORM       *folderMetadataORM
	MarketplaceAppORM       *marketplaceAppORM
	MergeRequestORM         *mergeRequestORM
	NegotiationHistoryORM   *negotiationHistoryORM
	NegotiationRoundORM     *negotiationRoundORM
	RiskAssessmentORM       *riskAssessmentORM
	SignatureBlockORM       *signatureBlockORM
	SignatureRequestORM     *signatureRequestORM
	SignatureWorkflowORM    *signatureWorkflowORM
	TemplateVariableORM     *templateVariableORM
	TemplateVersionORM      *templateVersionORM
	WorkspaceActivityORM    *workspaceActivityORM
	WorkspaceComplianceORM  *workspaceComplianceORM
	WorkspaceORM            *workspaceORM
	WorkspaceSharingORM     *workspaceSharingORM
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AIAssistanceLogORM = &Q.AIAssistanceLogORM
	AccountORM = &Q.AccountORM
	AppAnalyticsORM = &Q.AppAnalyticsORM
	AppDevelopmentInfoORM = &Q.AppDevelopmentInfoORM
	AppInstallationORM = &Q.AppInstallationORM
	AppPermissionORM = &Q.AppPermissionORM
	AppVersionORM = &Q.AppVersionORM
	AppWebhookORM = &Q.AppWebhookORM
	BranchMergeORM = &Q.BranchMergeORM
	BranchPolicyORM = &Q.BranchPolicyORM
	ChangeSetORM = &Q.ChangeSetORM
	CommentThreadORM = &Q.CommentThreadORM
	ComplianceCheckORM = &Q.ComplianceCheckORM
	ContextualSummaryORM = &Q.ContextualSummaryORM
	ContractIntelligenceORM = &Q.ContractIntelligenceORM
	DataProfileORM = &Q.DataProfileORM
	DocumentBranchORM = &Q.DocumentBranchORM
	DocumentInstanceORM = &Q.DocumentInstanceORM
	DocumentSnapshotORM = &Q.DocumentSnapshotORM
	DocumentTemplateORM = &Q.DocumentTemplateORM
	DocumentVersionORM = &Q.DocumentVersionORM
	ExplanationBlockORM = &Q.ExplanationBlockORM
	FileEmbeddingsORM = &Q.FileEmbeddingsORM
	FileSharingORM = &Q.FileSharingORM
	FileVersionORM = &Q.FileVersionORM
	FolderMetadataORM = &Q.FolderMetadataORM
	MarketplaceAppORM = &Q.MarketplaceAppORM
	MergeRequestORM = &Q.MergeRequestORM
	NegotiationHistoryORM = &Q.NegotiationHistoryORM
	NegotiationRoundORM = &Q.NegotiationRoundORM
	RiskAssessmentORM = &Q.RiskAssessmentORM
	SignatureBlockORM = &Q.SignatureBlockORM
	SignatureRequestORM = &Q.SignatureRequestORM
	SignatureWorkflowORM = &Q.SignatureWorkflowORM
	TemplateVariableORM = &Q.TemplateVariableORM
	TemplateVersionORM = &Q.TemplateVersionORM
	WorkspaceActivityORM = &Q.WorkspaceActivityORM
	WorkspaceComplianceORM = &Q.WorkspaceComplianceORM
	WorkspaceORM = &Q.WorkspaceORM
	WorkspaceSharingORM = &Q.WorkspaceSharingORM
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                      db,
		AIAssistanceLogORM:      newAIAssistanceLogORM(db, opts...),
		AccountORM:              newAccountORM(db, opts...),
		AppAnalyticsORM:         newAppAnalyticsORM(db, opts...),
		AppDevelopmentInfoORM:   newAppDevelopmentInfoORM(db, opts...),
		AppInstallationORM:      newAppInstallationORM(db, opts...),
		AppPermissionORM:        newAppPermissionORM(db, opts...),
		AppVersionORM:           newAppVersionORM(db, opts...),
		AppWebhookORM:           newAppWebhookORM(db, opts...),
		BranchMergeORM:          newBranchMergeORM(db, opts...),
		BranchPolicyORM:         newBranchPolicyORM(db, opts...),
		ChangeSetORM:            newChangeSetORM(db, opts...),
		CommentThreadORM:        newCommentThreadORM(db, opts...),
		ComplianceCheckORM:      newComplianceCheckORM(db, opts...),
		ContextualSummaryORM:    newContextualSummaryORM(db, opts...),
		ContractIntelligenceORM: newContractIntelligenceORM(db, opts...),
		DataProfileORM:          newDataProfileORM(db, opts...),
		DocumentBranchORM:       newDocumentBranchORM(db, opts...),
		DocumentInstanceORM:     newDocumentInstanceORM(db, opts...),
		DocumentSnapshotORM:     newDocumentSnapshotORM(db, opts...),
		DocumentTemplateORM:     newDocumentTemplateORM(db, opts...),
		DocumentVersionORM:      newDocumentVersionORM(db, opts...),
		ExplanationBlockORM:     newExplanationBlockORM(db, opts...),
		FileEmbeddingsORM:       newFileEmbeddingsORM(db, opts...),
		FileSharingORM:          newFileSharingORM(db, opts...),
		FileVersionORM:          newFileVersionORM(db, opts...),
		FolderMetadataORM:       newFolderMetadataORM(db, opts...),
		MarketplaceAppORM:       newMarketplaceAppORM(db, opts...),
		MergeRequestORM:         newMergeRequestORM(db, opts...),
		NegotiationHistoryORM:   newNegotiationHistoryORM(db, opts...),
		NegotiationRoundORM:     newNegotiationRoundORM(db, opts...),
		RiskAssessmentORM:       newRiskAssessmentORM(db, opts...),
		SignatureBlockORM:       newSignatureBlockORM(db, opts...),
		SignatureRequestORM:     newSignatureRequestORM(db, opts...),
		SignatureWorkflowORM:    newSignatureWorkflowORM(db, opts...),
		TemplateVariableORM:     newTemplateVariableORM(db, opts...),
		TemplateVersionORM:      newTemplateVersionORM(db, opts...),
		WorkspaceActivityORM:    newWorkspaceActivityORM(db, opts...),
		WorkspaceComplianceORM:  newWorkspaceComplianceORM(db, opts...),
		WorkspaceORM:            newWorkspaceORM(db, opts...),
		WorkspaceSharingORM:     newWorkspaceSharingORM(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AIAssistanceLogORM      aIAssistanceLogORM
	AccountORM              accountORM
	AppAnalyticsORM         appAnalyticsORM
	AppDevelopmentInfoORM   appDevelopmentInfoORM
	AppInstallationORM      appInstallationORM
	AppPermissionORM        appPermissionORM
	AppVersionORM           appVersionORM
	AppWebhookORM           appWebhookORM
	BranchMergeORM          branchMergeORM
	BranchPolicyORM         branchPolicyORM
	ChangeSetORM            changeSetORM
	CommentThreadORM        commentThreadORM
	ComplianceCheckORM      complianceCheckORM
	ContextualSummaryORM    contextualSummaryORM
	ContractIntelligenceORM contractIntelligenceORM
	DataProfileORM          dataProfileORM
	DocumentBranchORM       documentBranchORM
	DocumentInstanceORM     documentInstanceORM
	DocumentSnapshotORM     documentSnapshotORM
	DocumentTemplateORM     documentTemplateORM
	DocumentVersionORM      documentVersionORM
	ExplanationBlockORM     explanationBlockORM
	FileEmbeddingsORM       fileEmbeddingsORM
	FileSharingORM          fileSharingORM
	FileVersionORM          fileVersionORM
	FolderMetadataORM       folderMetadataORM
	MarketplaceAppORM       marketplaceAppORM
	MergeRequestORM         mergeRequestORM
	NegotiationHistoryORM   negotiationHistoryORM
	NegotiationRoundORM     negotiationRoundORM
	RiskAssessmentORM       riskAssessmentORM
	SignatureBlockORM       signatureBlockORM
	SignatureRequestORM     signatureRequestORM
	SignatureWorkflowORM    signatureWorkflowORM
	TemplateVariableORM     templateVariableORM
	TemplateVersionORM      templateVersionORM
	WorkspaceActivityORM    workspaceActivityORM
	WorkspaceComplianceORM  workspaceComplianceORM
	WorkspaceORM            workspaceORM
	WorkspaceSharingORM     workspaceSharingORM
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                      db,
		AIAssistanceLogORM:      q.AIAssistanceLogORM.clone(db),
		AccountORM:              q.AccountORM.clone(db),
		AppAnalyticsORM:         q.AppAnalyticsORM.clone(db),
		AppDevelopmentInfoORM:   q.AppDevelopmentInfoORM.clone(db),
		AppInstallationORM:      q.AppInstallationORM.clone(db),
		AppPermissionORM:        q.AppPermissionORM.clone(db),
		AppVersionORM:           q.AppVersionORM.clone(db),
		AppWebhookORM:           q.AppWebhookORM.clone(db),
		BranchMergeORM:          q.BranchMergeORM.clone(db),
		BranchPolicyORM:         q.BranchPolicyORM.clone(db),
		ChangeSetORM:            q.ChangeSetORM.clone(db),
		CommentThreadORM:        q.CommentThreadORM.clone(db),
		ComplianceCheckORM:      q.ComplianceCheckORM.clone(db),
		ContextualSummaryORM:    q.ContextualSummaryORM.clone(db),
		ContractIntelligenceORM: q.ContractIntelligenceORM.clone(db),
		DataProfileORM:          q.DataProfileORM.clone(db),
		DocumentBranchORM:       q.DocumentBranchORM.clone(db),
		DocumentInstanceORM:     q.DocumentInstanceORM.clone(db),
		DocumentSnapshotORM:     q.DocumentSnapshotORM.clone(db),
		DocumentTemplateORM:     q.DocumentTemplateORM.clone(db),
		DocumentVersionORM:      q.DocumentVersionORM.clone(db),
		ExplanationBlockORM:     q.ExplanationBlockORM.clone(db),
		FileEmbeddingsORM:       q.FileEmbeddingsORM.clone(db),
		FileSharingORM:          q.FileSharingORM.clone(db),
		FileVersionORM:          q.FileVersionORM.clone(db),
		FolderMetadataORM:       q.FolderMetadataORM.clone(db),
		MarketplaceAppORM:       q.MarketplaceAppORM.clone(db),
		MergeRequestORM:         q.MergeRequestORM.clone(db),
		NegotiationHistoryORM:   q.NegotiationHistoryORM.clone(db),
		NegotiationRoundORM:     q.NegotiationRoundORM.clone(db),
		RiskAssessmentORM:       q.RiskAssessmentORM.clone(db),
		SignatureBlockORM:       q.SignatureBlockORM.clone(db),
		SignatureRequestORM:     q.SignatureRequestORM.clone(db),
		SignatureWorkflowORM:    q.SignatureWorkflowORM.clone(db),
		TemplateVariableORM:     q.TemplateVariableORM.clone(db),
		TemplateVersionORM:      q.TemplateVersionORM.clone(db),
		WorkspaceActivityORM:    q.WorkspaceActivityORM.clone(db),
		WorkspaceComplianceORM:  q.WorkspaceComplianceORM.clone(db),
		WorkspaceORM:            q.WorkspaceORM.clone(db),
		WorkspaceSharingORM:     q.WorkspaceSharingORM.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                      db,
		AIAssistanceLogORM:      q.AIAssistanceLogORM.replaceDB(db),
		AccountORM:              q.AccountORM.replaceDB(db),
		AppAnalyticsORM:         q.AppAnalyticsORM.replaceDB(db),
		AppDevelopmentInfoORM:   q.AppDevelopmentInfoORM.replaceDB(db),
		AppInstallationORM:      q.AppInstallationORM.replaceDB(db),
		AppPermissionORM:        q.AppPermissionORM.replaceDB(db),
		AppVersionORM:           q.AppVersionORM.replaceDB(db),
		AppWebhookORM:           q.AppWebhookORM.replaceDB(db),
		BranchMergeORM:          q.BranchMergeORM.replaceDB(db),
		BranchPolicyORM:         q.BranchPolicyORM.replaceDB(db),
		ChangeSetORM:            q.ChangeSetORM.replaceDB(db),
		CommentThreadORM:        q.CommentThreadORM.replaceDB(db),
		ComplianceCheckORM:      q.ComplianceCheckORM.replaceDB(db),
		ContextualSummaryORM:    q.ContextualSummaryORM.replaceDB(db),
		ContractIntelligenceORM: q.ContractIntelligenceORM.replaceDB(db),
		DataProfileORM:          q.DataProfileORM.replaceDB(db),
		DocumentBranchORM:       q.DocumentBranchORM.replaceDB(db),
		DocumentInstanceORM:     q.DocumentInstanceORM.replaceDB(db),
		DocumentSnapshotORM:     q.DocumentSnapshotORM.replaceDB(db),
		DocumentTemplateORM:     q.DocumentTemplateORM.replaceDB(db),
		DocumentVersionORM:      q.DocumentVersionORM.replaceDB(db),
		ExplanationBlockORM:     q.ExplanationBlockORM.replaceDB(db),
		FileEmbeddingsORM:       q.FileEmbeddingsORM.replaceDB(db),
		FileSharingORM:          q.FileSharingORM.replaceDB(db),
		FileVersionORM:          q.FileVersionORM.replaceDB(db),
		FolderMetadataORM:       q.FolderMetadataORM.replaceDB(db),
		MarketplaceAppORM:       q.MarketplaceAppORM.replaceDB(db),
		MergeRequestORM:         q.MergeRequestORM.replaceDB(db),
		NegotiationHistoryORM:   q.NegotiationHistoryORM.replaceDB(db),
		NegotiationRoundORM:     q.NegotiationRoundORM.replaceDB(db),
		RiskAssessmentORM:       q.RiskAssessmentORM.replaceDB(db),
		SignatureBlockORM:       q.SignatureBlockORM.replaceDB(db),
		SignatureRequestORM:     q.SignatureRequestORM.replaceDB(db),
		SignatureWorkflowORM:    q.SignatureWorkflowORM.replaceDB(db),
		TemplateVariableORM:     q.TemplateVariableORM.replaceDB(db),
		TemplateVersionORM:      q.TemplateVersionORM.replaceDB(db),
		WorkspaceActivityORM:    q.WorkspaceActivityORM.replaceDB(db),
		WorkspaceComplianceORM:  q.WorkspaceComplianceORM.replaceDB(db),
		WorkspaceORM:            q.WorkspaceORM.replaceDB(db),
		WorkspaceSharingORM:     q.WorkspaceSharingORM.replaceDB(db),
	}
}

type queryCtx struct {
	AIAssistanceLogORM      IAIAssistanceLogORMDo
	AccountORM              IAccountORMDo
	AppAnalyticsORM         IAppAnalyticsORMDo
	AppDevelopmentInfoORM   IAppDevelopmentInfoORMDo
	AppInstallationORM      IAppInstallationORMDo
	AppPermissionORM        IAppPermissionORMDo
	AppVersionORM           IAppVersionORMDo
	AppWebhookORM           IAppWebhookORMDo
	BranchMergeORM          IBranchMergeORMDo
	BranchPolicyORM         IBranchPolicyORMDo
	ChangeSetORM            IChangeSetORMDo
	CommentThreadORM        ICommentThreadORMDo
	ComplianceCheckORM      IComplianceCheckORMDo
	ContextualSummaryORM    IContextualSummaryORMDo
	ContractIntelligenceORM IContractIntelligenceORMDo
	DataProfileORM          IDataProfileORMDo
	DocumentBranchORM       IDocumentBranchORMDo
	DocumentInstanceORM     IDocumentInstanceORMDo
	DocumentSnapshotORM     IDocumentSnapshotORMDo
	DocumentTemplateORM     IDocumentTemplateORMDo
	DocumentVersionORM      IDocumentVersionORMDo
	ExplanationBlockORM     IExplanationBlockORMDo
	FileEmbeddingsORM       IFileEmbeddingsORMDo
	FileSharingORM          IFileSharingORMDo
	FileVersionORM          IFileVersionORMDo
	FolderMetadataORM       IFolderMetadataORMDo
	MarketplaceAppORM       IMarketplaceAppORMDo
	MergeRequestORM         IMergeRequestORMDo
	NegotiationHistoryORM   INegotiationHistoryORMDo
	NegotiationRoundORM     INegotiationRoundORMDo
	RiskAssessmentORM       IRiskAssessmentORMDo
	SignatureBlockORM       ISignatureBlockORMDo
	SignatureRequestORM     ISignatureRequestORMDo
	SignatureWorkflowORM    ISignatureWorkflowORMDo
	TemplateVariableORM     ITemplateVariableORMDo
	TemplateVersionORM      ITemplateVersionORMDo
	WorkspaceActivityORM    IWorkspaceActivityORMDo
	WorkspaceComplianceORM  IWorkspaceComplianceORMDo
	WorkspaceORM            IWorkspaceORMDo
	WorkspaceSharingORM     IWorkspaceSharingORMDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AIAssistanceLogORM:      q.AIAssistanceLogORM.WithContext(ctx),
		AccountORM:              q.AccountORM.WithContext(ctx),
		AppAnalyticsORM:         q.AppAnalyticsORM.WithContext(ctx),
		AppDevelopmentInfoORM:   q.AppDevelopmentInfoORM.WithContext(ctx),
		AppInstallationORM:      q.AppInstallationORM.WithContext(ctx),
		AppPermissionORM:        q.AppPermissionORM.WithContext(ctx),
		AppVersionORM:           q.AppVersionORM.WithContext(ctx),
		AppWebhookORM:           q.AppWebhookORM.WithContext(ctx),
		BranchMergeORM:          q.BranchMergeORM.WithContext(ctx),
		BranchPolicyORM:         q.BranchPolicyORM.WithContext(ctx),
		ChangeSetORM:            q.ChangeSetORM.WithContext(ctx),
		CommentThreadORM:        q.CommentThreadORM.WithContext(ctx),
		ComplianceCheckORM:      q.ComplianceCheckORM.WithContext(ctx),
		ContextualSummaryORM:    q.ContextualSummaryORM.WithContext(ctx),
		ContractIntelligenceORM: q.ContractIntelligenceORM.WithContext(ctx),
		DataProfileORM:          q.DataProfileORM.WithContext(ctx),
		DocumentBranchORM:       q.DocumentBranchORM.WithContext(ctx),
		DocumentInstanceORM:     q.DocumentInstanceORM.WithContext(ctx),
		DocumentSnapshotORM:     q.DocumentSnapshotORM.WithContext(ctx),
		DocumentTemplateORM:     q.DocumentTemplateORM.WithContext(ctx),
		DocumentVersionORM:      q.DocumentVersionORM.WithContext(ctx),
		ExplanationBlockORM:     q.ExplanationBlockORM.WithContext(ctx),
		FileEmbeddingsORM:       q.FileEmbeddingsORM.WithContext(ctx),
		FileSharingORM:          q.FileSharingORM.WithContext(ctx),
		FileVersionORM:          q.FileVersionORM.WithContext(ctx),
		FolderMetadataORM:       q.FolderMetadataORM.WithContext(ctx),
		MarketplaceAppORM:       q.MarketplaceAppORM.WithContext(ctx),
		MergeRequestORM:         q.MergeRequestORM.WithContext(ctx),
		NegotiationHistoryORM:   q.NegotiationHistoryORM.WithContext(ctx),
		NegotiationRoundORM:     q.NegotiationRoundORM.WithContext(ctx),
		RiskAssessmentORM:       q.RiskAssessmentORM.WithContext(ctx),
		SignatureBlockORM:       q.SignatureBlockORM.WithContext(ctx),
		SignatureRequestORM:     q.SignatureRequestORM.WithContext(ctx),
		SignatureWorkflowORM:    q.SignatureWorkflowORM.WithContext(ctx),
		TemplateVariableORM:     q.TemplateVariableORM.WithContext(ctx),
		TemplateVersionORM:      q.TemplateVersionORM.WithContext(ctx),
		WorkspaceActivityORM:    q.WorkspaceActivityORM.WithContext(ctx),
		WorkspaceComplianceORM:  q.WorkspaceComplianceORM.WithContext(ctx),
		WorkspaceORM:            q.WorkspaceORM.WithContext(ctx),
		WorkspaceSharingORM:     q.WorkspaceSharingORM.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
