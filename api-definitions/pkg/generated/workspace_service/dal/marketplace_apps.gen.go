// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	workspace_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/workspace_service/v1"

	"time"
)

func newMarketplaceAppORM(db *gorm.DB, opts ...gen.DOOption) marketplaceAppORM {
	_marketplaceAppORM := marketplaceAppORM{}

	_marketplaceAppORM.marketplaceAppORMDo.UseDB(db, opts...)
	_marketplaceAppORM.marketplaceAppORMDo.UseModel(&workspace_servicev1.MarketplaceAppORM{})

	tableName := _marketplaceAppORM.marketplaceAppORMDo.TableName()
	_marketplaceAppORM.ALL = field.NewAsterisk(tableName)
	_marketplaceAppORM.Category = field.NewString(tableName, "category")
	_marketplaceAppORM.Description = field.NewString(tableName, "description")
	_marketplaceAppORM.DeveloperId = field.NewString(tableName, "developer_id")
	_marketplaceAppORM.DocumentationUrl = field.NewString(tableName, "documentation_url")
	_marketplaceAppORM.Features = field.NewField(tableName, "features")
	_marketplaceAppORM.Id = field.NewUint64(tableName, "id")
	_marketplaceAppORM.InstallationCount = field.NewInt32(tableName, "installation_count")
	_marketplaceAppORM.IsVerified = field.NewBool(tableName, "is_verified")
	_marketplaceAppORM.LastUpdated = field.NewTime(tableName, "last_updated")
	_marketplaceAppORM.Name = field.NewString(tableName, "name")
	_marketplaceAppORM.PricingModel = field.NewString(tableName, "pricing_model")
	_marketplaceAppORM.PrivacyPolicyUrl = field.NewString(tableName, "privacy_policy_url")
	_marketplaceAppORM.PublishedAt = field.NewTime(tableName, "published_at")
	_marketplaceAppORM.Rating = field.NewFloat32(tableName, "rating")
	_marketplaceAppORM.RequiredPermissions = field.NewField(tableName, "required_permissions")
	_marketplaceAppORM.Screenshots = field.NewField(tableName, "screenshots")
	_marketplaceAppORM.SupportEmail = field.NewString(tableName, "support_email")
	_marketplaceAppORM.SupportedContractTypes = field.NewField(tableName, "supported_contract_types")
	_marketplaceAppORM.SupportedIntegrations = field.NewField(tableName, "supported_integrations")
	_marketplaceAppORM.TermsUrl = field.NewString(tableName, "terms_url")
	_marketplaceAppORM.WorkspaceId = field.NewUint64(tableName, "workspace_id")
	_marketplaceAppORM.Info = marketplaceAppORMHasOneInfo{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Info", "workspace_servicev1.AppDevelopmentInfoORM"),
	}

	_marketplaceAppORM.Analytics = marketplaceAppORMHasManyAnalytics{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Analytics", "workspace_servicev1.AppAnalyticsORM"),
	}

	_marketplaceAppORM.Installations = marketplaceAppORMHasManyInstallations{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Installations", "workspace_servicev1.AppInstallationORM"),
	}

	_marketplaceAppORM.Permissions = marketplaceAppORMHasManyPermissions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Permissions", "workspace_servicev1.AppPermissionORM"),
	}

	_marketplaceAppORM.Reviews = marketplaceAppORMHasManyReviews{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Reviews", "workspace_servicev1.AppReviewORM"),
	}

	_marketplaceAppORM.Versions = marketplaceAppORMHasManyVersions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Versions", "workspace_servicev1.AppVersionORM"),
	}

	_marketplaceAppORM.Webhooks = marketplaceAppORMHasManyWebhooks{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Webhooks", "workspace_servicev1.AppWebhookORM"),
	}

	_marketplaceAppORM.fillFieldMap()

	return _marketplaceAppORM
}

type marketplaceAppORM struct {
	marketplaceAppORMDo

	ALL                    field.Asterisk
	Category               field.String
	Description            field.String
	DeveloperId            field.String
	DocumentationUrl       field.String
	Features               field.Field
	Id                     field.Uint64
	InstallationCount      field.Int32
	IsVerified             field.Bool
	LastUpdated            field.Time
	Name                   field.String
	PricingModel           field.String
	PrivacyPolicyUrl       field.String
	PublishedAt            field.Time
	Rating                 field.Float32
	RequiredPermissions    field.Field
	Screenshots            field.Field
	SupportEmail           field.String
	SupportedContractTypes field.Field
	SupportedIntegrations  field.Field
	TermsUrl               field.String
	WorkspaceId            field.Uint64
	Info                   marketplaceAppORMHasOneInfo

	Analytics marketplaceAppORMHasManyAnalytics

	Installations marketplaceAppORMHasManyInstallations

	Permissions marketplaceAppORMHasManyPermissions

	Reviews marketplaceAppORMHasManyReviews

	Versions marketplaceAppORMHasManyVersions

	Webhooks marketplaceAppORMHasManyWebhooks

	fieldMap map[string]field.Expr
}

func (m marketplaceAppORM) Table(newTableName string) *marketplaceAppORM {
	m.marketplaceAppORMDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m marketplaceAppORM) As(alias string) *marketplaceAppORM {
	m.marketplaceAppORMDo.DO = *(m.marketplaceAppORMDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *marketplaceAppORM) updateTableName(table string) *marketplaceAppORM {
	m.ALL = field.NewAsterisk(table)
	m.Category = field.NewString(table, "category")
	m.Description = field.NewString(table, "description")
	m.DeveloperId = field.NewString(table, "developer_id")
	m.DocumentationUrl = field.NewString(table, "documentation_url")
	m.Features = field.NewField(table, "features")
	m.Id = field.NewUint64(table, "id")
	m.InstallationCount = field.NewInt32(table, "installation_count")
	m.IsVerified = field.NewBool(table, "is_verified")
	m.LastUpdated = field.NewTime(table, "last_updated")
	m.Name = field.NewString(table, "name")
	m.PricingModel = field.NewString(table, "pricing_model")
	m.PrivacyPolicyUrl = field.NewString(table, "privacy_policy_url")
	m.PublishedAt = field.NewTime(table, "published_at")
	m.Rating = field.NewFloat32(table, "rating")
	m.RequiredPermissions = field.NewField(table, "required_permissions")
	m.Screenshots = field.NewField(table, "screenshots")
	m.SupportEmail = field.NewString(table, "support_email")
	m.SupportedContractTypes = field.NewField(table, "supported_contract_types")
	m.SupportedIntegrations = field.NewField(table, "supported_integrations")
	m.TermsUrl = field.NewString(table, "terms_url")
	m.WorkspaceId = field.NewUint64(table, "workspace_id")

	m.fillFieldMap()

	return m
}

func (m *marketplaceAppORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *marketplaceAppORM) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 28)
	m.fieldMap["category"] = m.Category
	m.fieldMap["description"] = m.Description
	m.fieldMap["developer_id"] = m.DeveloperId
	m.fieldMap["documentation_url"] = m.DocumentationUrl
	m.fieldMap["features"] = m.Features
	m.fieldMap["id"] = m.Id
	m.fieldMap["installation_count"] = m.InstallationCount
	m.fieldMap["is_verified"] = m.IsVerified
	m.fieldMap["last_updated"] = m.LastUpdated
	m.fieldMap["name"] = m.Name
	m.fieldMap["pricing_model"] = m.PricingModel
	m.fieldMap["privacy_policy_url"] = m.PrivacyPolicyUrl
	m.fieldMap["published_at"] = m.PublishedAt
	m.fieldMap["rating"] = m.Rating
	m.fieldMap["required_permissions"] = m.RequiredPermissions
	m.fieldMap["screenshots"] = m.Screenshots
	m.fieldMap["support_email"] = m.SupportEmail
	m.fieldMap["supported_contract_types"] = m.SupportedContractTypes
	m.fieldMap["supported_integrations"] = m.SupportedIntegrations
	m.fieldMap["terms_url"] = m.TermsUrl
	m.fieldMap["workspace_id"] = m.WorkspaceId

}

func (m marketplaceAppORM) clone(db *gorm.DB) marketplaceAppORM {
	m.marketplaceAppORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m marketplaceAppORM) replaceDB(db *gorm.DB) marketplaceAppORM {
	m.marketplaceAppORMDo.ReplaceDB(db)
	return m
}

type marketplaceAppORMHasOneInfo struct {
	db *gorm.DB

	field.RelationField
}

func (a marketplaceAppORMHasOneInfo) Where(conds ...field.Expr) *marketplaceAppORMHasOneInfo {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a marketplaceAppORMHasOneInfo) WithContext(ctx context.Context) *marketplaceAppORMHasOneInfo {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a marketplaceAppORMHasOneInfo) Session(session *gorm.Session) *marketplaceAppORMHasOneInfo {
	a.db = a.db.Session(session)
	return &a
}

func (a marketplaceAppORMHasOneInfo) Model(m *workspace_servicev1.MarketplaceAppORM) *marketplaceAppORMHasOneInfoTx {
	return &marketplaceAppORMHasOneInfoTx{a.db.Model(m).Association(a.Name())}
}

type marketplaceAppORMHasOneInfoTx struct{ tx *gorm.Association }

func (a marketplaceAppORMHasOneInfoTx) Find() (result *workspace_servicev1.AppDevelopmentInfoORM, err error) {
	return result, a.tx.Find(&result)
}

func (a marketplaceAppORMHasOneInfoTx) Append(values ...*workspace_servicev1.AppDevelopmentInfoORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a marketplaceAppORMHasOneInfoTx) Replace(values ...*workspace_servicev1.AppDevelopmentInfoORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a marketplaceAppORMHasOneInfoTx) Delete(values ...*workspace_servicev1.AppDevelopmentInfoORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a marketplaceAppORMHasOneInfoTx) Clear() error {
	return a.tx.Clear()
}

func (a marketplaceAppORMHasOneInfoTx) Count() int64 {
	return a.tx.Count()
}

type marketplaceAppORMHasManyAnalytics struct {
	db *gorm.DB

	field.RelationField
}

func (a marketplaceAppORMHasManyAnalytics) Where(conds ...field.Expr) *marketplaceAppORMHasManyAnalytics {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a marketplaceAppORMHasManyAnalytics) WithContext(ctx context.Context) *marketplaceAppORMHasManyAnalytics {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a marketplaceAppORMHasManyAnalytics) Session(session *gorm.Session) *marketplaceAppORMHasManyAnalytics {
	a.db = a.db.Session(session)
	return &a
}

func (a marketplaceAppORMHasManyAnalytics) Model(m *workspace_servicev1.MarketplaceAppORM) *marketplaceAppORMHasManyAnalyticsTx {
	return &marketplaceAppORMHasManyAnalyticsTx{a.db.Model(m).Association(a.Name())}
}

type marketplaceAppORMHasManyAnalyticsTx struct{ tx *gorm.Association }

func (a marketplaceAppORMHasManyAnalyticsTx) Find() (result []*workspace_servicev1.AppAnalyticsORM, err error) {
	return result, a.tx.Find(&result)
}

func (a marketplaceAppORMHasManyAnalyticsTx) Append(values ...*workspace_servicev1.AppAnalyticsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a marketplaceAppORMHasManyAnalyticsTx) Replace(values ...*workspace_servicev1.AppAnalyticsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a marketplaceAppORMHasManyAnalyticsTx) Delete(values ...*workspace_servicev1.AppAnalyticsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a marketplaceAppORMHasManyAnalyticsTx) Clear() error {
	return a.tx.Clear()
}

func (a marketplaceAppORMHasManyAnalyticsTx) Count() int64 {
	return a.tx.Count()
}

type marketplaceAppORMHasManyInstallations struct {
	db *gorm.DB

	field.RelationField
}

func (a marketplaceAppORMHasManyInstallations) Where(conds ...field.Expr) *marketplaceAppORMHasManyInstallations {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a marketplaceAppORMHasManyInstallations) WithContext(ctx context.Context) *marketplaceAppORMHasManyInstallations {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a marketplaceAppORMHasManyInstallations) Session(session *gorm.Session) *marketplaceAppORMHasManyInstallations {
	a.db = a.db.Session(session)
	return &a
}

func (a marketplaceAppORMHasManyInstallations) Model(m *workspace_servicev1.MarketplaceAppORM) *marketplaceAppORMHasManyInstallationsTx {
	return &marketplaceAppORMHasManyInstallationsTx{a.db.Model(m).Association(a.Name())}
}

type marketplaceAppORMHasManyInstallationsTx struct{ tx *gorm.Association }

func (a marketplaceAppORMHasManyInstallationsTx) Find() (result []*workspace_servicev1.AppInstallationORM, err error) {
	return result, a.tx.Find(&result)
}

func (a marketplaceAppORMHasManyInstallationsTx) Append(values ...*workspace_servicev1.AppInstallationORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a marketplaceAppORMHasManyInstallationsTx) Replace(values ...*workspace_servicev1.AppInstallationORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a marketplaceAppORMHasManyInstallationsTx) Delete(values ...*workspace_servicev1.AppInstallationORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a marketplaceAppORMHasManyInstallationsTx) Clear() error {
	return a.tx.Clear()
}

func (a marketplaceAppORMHasManyInstallationsTx) Count() int64 {
	return a.tx.Count()
}

type marketplaceAppORMHasManyPermissions struct {
	db *gorm.DB

	field.RelationField
}

func (a marketplaceAppORMHasManyPermissions) Where(conds ...field.Expr) *marketplaceAppORMHasManyPermissions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a marketplaceAppORMHasManyPermissions) WithContext(ctx context.Context) *marketplaceAppORMHasManyPermissions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a marketplaceAppORMHasManyPermissions) Session(session *gorm.Session) *marketplaceAppORMHasManyPermissions {
	a.db = a.db.Session(session)
	return &a
}

func (a marketplaceAppORMHasManyPermissions) Model(m *workspace_servicev1.MarketplaceAppORM) *marketplaceAppORMHasManyPermissionsTx {
	return &marketplaceAppORMHasManyPermissionsTx{a.db.Model(m).Association(a.Name())}
}

type marketplaceAppORMHasManyPermissionsTx struct{ tx *gorm.Association }

func (a marketplaceAppORMHasManyPermissionsTx) Find() (result []*workspace_servicev1.AppPermissionORM, err error) {
	return result, a.tx.Find(&result)
}

func (a marketplaceAppORMHasManyPermissionsTx) Append(values ...*workspace_servicev1.AppPermissionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a marketplaceAppORMHasManyPermissionsTx) Replace(values ...*workspace_servicev1.AppPermissionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a marketplaceAppORMHasManyPermissionsTx) Delete(values ...*workspace_servicev1.AppPermissionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a marketplaceAppORMHasManyPermissionsTx) Clear() error {
	return a.tx.Clear()
}

func (a marketplaceAppORMHasManyPermissionsTx) Count() int64 {
	return a.tx.Count()
}

type marketplaceAppORMHasManyReviews struct {
	db *gorm.DB

	field.RelationField
}

func (a marketplaceAppORMHasManyReviews) Where(conds ...field.Expr) *marketplaceAppORMHasManyReviews {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a marketplaceAppORMHasManyReviews) WithContext(ctx context.Context) *marketplaceAppORMHasManyReviews {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a marketplaceAppORMHasManyReviews) Session(session *gorm.Session) *marketplaceAppORMHasManyReviews {
	a.db = a.db.Session(session)
	return &a
}

func (a marketplaceAppORMHasManyReviews) Model(m *workspace_servicev1.MarketplaceAppORM) *marketplaceAppORMHasManyReviewsTx {
	return &marketplaceAppORMHasManyReviewsTx{a.db.Model(m).Association(a.Name())}
}

type marketplaceAppORMHasManyReviewsTx struct{ tx *gorm.Association }

func (a marketplaceAppORMHasManyReviewsTx) Find() (result []*workspace_servicev1.AppReviewORM, err error) {
	return result, a.tx.Find(&result)
}

func (a marketplaceAppORMHasManyReviewsTx) Append(values ...*workspace_servicev1.AppReviewORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a marketplaceAppORMHasManyReviewsTx) Replace(values ...*workspace_servicev1.AppReviewORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a marketplaceAppORMHasManyReviewsTx) Delete(values ...*workspace_servicev1.AppReviewORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a marketplaceAppORMHasManyReviewsTx) Clear() error {
	return a.tx.Clear()
}

func (a marketplaceAppORMHasManyReviewsTx) Count() int64 {
	return a.tx.Count()
}

type marketplaceAppORMHasManyVersions struct {
	db *gorm.DB

	field.RelationField
}

func (a marketplaceAppORMHasManyVersions) Where(conds ...field.Expr) *marketplaceAppORMHasManyVersions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a marketplaceAppORMHasManyVersions) WithContext(ctx context.Context) *marketplaceAppORMHasManyVersions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a marketplaceAppORMHasManyVersions) Session(session *gorm.Session) *marketplaceAppORMHasManyVersions {
	a.db = a.db.Session(session)
	return &a
}

func (a marketplaceAppORMHasManyVersions) Model(m *workspace_servicev1.MarketplaceAppORM) *marketplaceAppORMHasManyVersionsTx {
	return &marketplaceAppORMHasManyVersionsTx{a.db.Model(m).Association(a.Name())}
}

type marketplaceAppORMHasManyVersionsTx struct{ tx *gorm.Association }

func (a marketplaceAppORMHasManyVersionsTx) Find() (result []*workspace_servicev1.AppVersionORM, err error) {
	return result, a.tx.Find(&result)
}

func (a marketplaceAppORMHasManyVersionsTx) Append(values ...*workspace_servicev1.AppVersionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a marketplaceAppORMHasManyVersionsTx) Replace(values ...*workspace_servicev1.AppVersionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a marketplaceAppORMHasManyVersionsTx) Delete(values ...*workspace_servicev1.AppVersionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a marketplaceAppORMHasManyVersionsTx) Clear() error {
	return a.tx.Clear()
}

func (a marketplaceAppORMHasManyVersionsTx) Count() int64 {
	return a.tx.Count()
}

type marketplaceAppORMHasManyWebhooks struct {
	db *gorm.DB

	field.RelationField
}

func (a marketplaceAppORMHasManyWebhooks) Where(conds ...field.Expr) *marketplaceAppORMHasManyWebhooks {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a marketplaceAppORMHasManyWebhooks) WithContext(ctx context.Context) *marketplaceAppORMHasManyWebhooks {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a marketplaceAppORMHasManyWebhooks) Session(session *gorm.Session) *marketplaceAppORMHasManyWebhooks {
	a.db = a.db.Session(session)
	return &a
}

func (a marketplaceAppORMHasManyWebhooks) Model(m *workspace_servicev1.MarketplaceAppORM) *marketplaceAppORMHasManyWebhooksTx {
	return &marketplaceAppORMHasManyWebhooksTx{a.db.Model(m).Association(a.Name())}
}

type marketplaceAppORMHasManyWebhooksTx struct{ tx *gorm.Association }

func (a marketplaceAppORMHasManyWebhooksTx) Find() (result []*workspace_servicev1.AppWebhookORM, err error) {
	return result, a.tx.Find(&result)
}

func (a marketplaceAppORMHasManyWebhooksTx) Append(values ...*workspace_servicev1.AppWebhookORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a marketplaceAppORMHasManyWebhooksTx) Replace(values ...*workspace_servicev1.AppWebhookORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a marketplaceAppORMHasManyWebhooksTx) Delete(values ...*workspace_servicev1.AppWebhookORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a marketplaceAppORMHasManyWebhooksTx) Clear() error {
	return a.tx.Clear()
}

func (a marketplaceAppORMHasManyWebhooksTx) Count() int64 {
	return a.tx.Count()
}

type marketplaceAppORMDo struct{ gen.DO }

type IMarketplaceAppORMDo interface {
	gen.SubQuery
	Debug() IMarketplaceAppORMDo
	WithContext(ctx context.Context) IMarketplaceAppORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMarketplaceAppORMDo
	WriteDB() IMarketplaceAppORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMarketplaceAppORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMarketplaceAppORMDo
	Not(conds ...gen.Condition) IMarketplaceAppORMDo
	Or(conds ...gen.Condition) IMarketplaceAppORMDo
	Select(conds ...field.Expr) IMarketplaceAppORMDo
	Where(conds ...gen.Condition) IMarketplaceAppORMDo
	Order(conds ...field.Expr) IMarketplaceAppORMDo
	Distinct(cols ...field.Expr) IMarketplaceAppORMDo
	Omit(cols ...field.Expr) IMarketplaceAppORMDo
	Join(table schema.Tabler, on ...field.Expr) IMarketplaceAppORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMarketplaceAppORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMarketplaceAppORMDo
	Group(cols ...field.Expr) IMarketplaceAppORMDo
	Having(conds ...gen.Condition) IMarketplaceAppORMDo
	Limit(limit int) IMarketplaceAppORMDo
	Offset(offset int) IMarketplaceAppORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMarketplaceAppORMDo
	Unscoped() IMarketplaceAppORMDo
	Create(values ...*workspace_servicev1.MarketplaceAppORM) error
	CreateInBatches(values []*workspace_servicev1.MarketplaceAppORM, batchSize int) error
	Save(values ...*workspace_servicev1.MarketplaceAppORM) error
	First() (*workspace_servicev1.MarketplaceAppORM, error)
	Take() (*workspace_servicev1.MarketplaceAppORM, error)
	Last() (*workspace_servicev1.MarketplaceAppORM, error)
	Find() ([]*workspace_servicev1.MarketplaceAppORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.MarketplaceAppORM, err error)
	FindInBatches(result *[]*workspace_servicev1.MarketplaceAppORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*workspace_servicev1.MarketplaceAppORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMarketplaceAppORMDo
	Assign(attrs ...field.AssignExpr) IMarketplaceAppORMDo
	Joins(fields ...field.RelationField) IMarketplaceAppORMDo
	Preload(fields ...field.RelationField) IMarketplaceAppORMDo
	FirstOrInit() (*workspace_servicev1.MarketplaceAppORM, error)
	FirstOrCreate() (*workspace_servicev1.MarketplaceAppORM, error)
	FindByPage(offset int, limit int) (result []*workspace_servicev1.MarketplaceAppORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMarketplaceAppORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result workspace_servicev1.MarketplaceAppORM, err error)
	GetRecordByIDs(ids []uint64) (result []workspace_servicev1.MarketplaceAppORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.MarketplaceAppORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result workspace_servicev1.MarketplaceAppORM, err error)
	GetByIDs(ids []uint64) (result []workspace_servicev1.MarketplaceAppORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.MarketplaceAppORM, err error)
	GetDeleted() (result []workspace_servicev1.MarketplaceAppORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	CreateInBatch(items []workspace_servicev1.MarketplaceAppORM, batchSize int) (err error)
	DeleteInBatch(ids []uint64) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.MarketplaceAppORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.MarketplaceAppORM, err error)
	FindByPattern(columnName string, pattern string) (result []workspace_servicev1.MarketplaceAppORM, err error)
	GetDistinct(columnName string) (result []workspace_servicev1.MarketplaceAppORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.MarketplaceAppORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.MarketplaceAppORM, err error)
	ExistsAndGet(column string, value interface{}) (result workspace_servicev1.MarketplaceAppORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.MarketplaceAppORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m marketplaceAppORMDo) GetRecordByID(id uint64) (result workspace_servicev1.MarketplaceAppORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m marketplaceAppORMDo) GetRecordByIDs(ids []uint64) (result []workspace_servicev1.MarketplaceAppORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m marketplaceAppORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (m marketplaceAppORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.MarketplaceAppORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM marketplace_apps ORDER BY " + m.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (m marketplaceAppORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM marketplace_apps ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m marketplaceAppORMDo) GetByID(id uint64) (result workspace_servicev1.MarketplaceAppORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m marketplaceAppORMDo) GetByIDs(ids []uint64) (result []workspace_servicev1.MarketplaceAppORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (m marketplaceAppORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.MarketplaceAppORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + m.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (m marketplaceAppORMDo) GetDeleted() (result []workspace_servicev1.MarketplaceAppORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (m marketplaceAppORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE marketplace_apps SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (m marketplaceAppORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE marketplace_apps SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values...)
func (m marketplaceAppORMDo) CreateInBatch(items []workspace_servicev1.MarketplaceAppORM, batchSize int) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO marketplace_apps (columns) VALUES (values...) ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m marketplaceAppORMDo) DeleteInBatch(ids []uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (m marketplaceAppORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.MarketplaceAppORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (m marketplaceAppORMDo) FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.MarketplaceAppORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (m marketplaceAppORMDo) FindByPattern(columnName string, pattern string) (result []workspace_servicev1.MarketplaceAppORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (m marketplaceAppORMDo) GetDistinct(columnName string) (result []workspace_servicev1.MarketplaceAppORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM marketplace_apps ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (m marketplaceAppORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.MarketplaceAppORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (m marketplaceAppORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE marketplace_apps SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (m marketplaceAppORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (m marketplaceAppORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (m marketplaceAppORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.MarketplaceAppORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (m marketplaceAppORMDo) ExistsAndGet(column string, value interface{}) (result workspace_servicev1.MarketplaceAppORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM marketplace_apps ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (m marketplaceAppORMDo) ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.MarketplaceAppORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM marketplace_apps ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM marketplace_apps ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m marketplaceAppORMDo) Debug() IMarketplaceAppORMDo {
	return m.withDO(m.DO.Debug())
}

func (m marketplaceAppORMDo) WithContext(ctx context.Context) IMarketplaceAppORMDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m marketplaceAppORMDo) ReadDB() IMarketplaceAppORMDo {
	return m.Clauses(dbresolver.Read)
}

func (m marketplaceAppORMDo) WriteDB() IMarketplaceAppORMDo {
	return m.Clauses(dbresolver.Write)
}

func (m marketplaceAppORMDo) Session(config *gorm.Session) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Session(config))
}

func (m marketplaceAppORMDo) Clauses(conds ...clause.Expression) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m marketplaceAppORMDo) Returning(value interface{}, columns ...string) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m marketplaceAppORMDo) Not(conds ...gen.Condition) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m marketplaceAppORMDo) Or(conds ...gen.Condition) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m marketplaceAppORMDo) Select(conds ...field.Expr) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m marketplaceAppORMDo) Where(conds ...gen.Condition) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m marketplaceAppORMDo) Order(conds ...field.Expr) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m marketplaceAppORMDo) Distinct(cols ...field.Expr) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m marketplaceAppORMDo) Omit(cols ...field.Expr) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m marketplaceAppORMDo) Join(table schema.Tabler, on ...field.Expr) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m marketplaceAppORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMarketplaceAppORMDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m marketplaceAppORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IMarketplaceAppORMDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m marketplaceAppORMDo) Group(cols ...field.Expr) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m marketplaceAppORMDo) Having(conds ...gen.Condition) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m marketplaceAppORMDo) Limit(limit int) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m marketplaceAppORMDo) Offset(offset int) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m marketplaceAppORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m marketplaceAppORMDo) Unscoped() IMarketplaceAppORMDo {
	return m.withDO(m.DO.Unscoped())
}

func (m marketplaceAppORMDo) Create(values ...*workspace_servicev1.MarketplaceAppORM) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m marketplaceAppORMDo) CreateInBatches(values []*workspace_servicev1.MarketplaceAppORM, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m marketplaceAppORMDo) Save(values ...*workspace_servicev1.MarketplaceAppORM) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m marketplaceAppORMDo) First() (*workspace_servicev1.MarketplaceAppORM, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.MarketplaceAppORM), nil
	}
}

func (m marketplaceAppORMDo) Take() (*workspace_servicev1.MarketplaceAppORM, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.MarketplaceAppORM), nil
	}
}

func (m marketplaceAppORMDo) Last() (*workspace_servicev1.MarketplaceAppORM, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.MarketplaceAppORM), nil
	}
}

func (m marketplaceAppORMDo) Find() ([]*workspace_servicev1.MarketplaceAppORM, error) {
	result, err := m.DO.Find()
	return result.([]*workspace_servicev1.MarketplaceAppORM), err
}

func (m marketplaceAppORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.MarketplaceAppORM, err error) {
	buf := make([]*workspace_servicev1.MarketplaceAppORM, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m marketplaceAppORMDo) FindInBatches(result *[]*workspace_servicev1.MarketplaceAppORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m marketplaceAppORMDo) Attrs(attrs ...field.AssignExpr) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m marketplaceAppORMDo) Assign(attrs ...field.AssignExpr) IMarketplaceAppORMDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m marketplaceAppORMDo) Joins(fields ...field.RelationField) IMarketplaceAppORMDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m marketplaceAppORMDo) Preload(fields ...field.RelationField) IMarketplaceAppORMDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m marketplaceAppORMDo) FirstOrInit() (*workspace_servicev1.MarketplaceAppORM, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.MarketplaceAppORM), nil
	}
}

func (m marketplaceAppORMDo) FirstOrCreate() (*workspace_servicev1.MarketplaceAppORM, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.MarketplaceAppORM), nil
	}
}

func (m marketplaceAppORMDo) FindByPage(offset int, limit int) (result []*workspace_servicev1.MarketplaceAppORM, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m marketplaceAppORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m marketplaceAppORMDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m marketplaceAppORMDo) Delete(models ...*workspace_servicev1.MarketplaceAppORM) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *marketplaceAppORMDo) withDO(do gen.Dao) *marketplaceAppORMDo {
	m.DO = *do.(*gen.DO)
	return m
}
