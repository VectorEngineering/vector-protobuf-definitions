// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	workspace_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/workspace_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newMergeRequestORM(db *gorm.DB, opts ...gen.DOOption) mergeRequestORM {
	_mergeRequestORM := mergeRequestORM{}

	_mergeRequestORM.mergeRequestORMDo.UseDB(db, opts...)
	_mergeRequestORM.mergeRequestORMDo.UseModel(&workspace_servicev1.MergeRequestORM{})

	tableName := _mergeRequestORM.mergeRequestORMDo.TableName()
	_mergeRequestORM.ALL = field.NewAsterisk(tableName)
	_mergeRequestORM.AuthorId = field.NewString(tableName, "author_id")
	_mergeRequestORM.AutomatedCheckResults = field.NewField(tableName, "automated_check_results")
	_mergeRequestORM.CreatedAt = field.NewTime(tableName, "created_at")
	_mergeRequestORM.Description = field.NewString(tableName, "description")
	_mergeRequestORM.DocumentBranchId = field.NewUint64(tableName, "document_branch_id")
	_mergeRequestORM.HasConflicts = field.NewBool(tableName, "has_conflicts")
	_mergeRequestORM.Id = field.NewUint64(tableName, "id")
	_mergeRequestORM.Labels = field.NewField(tableName, "labels")
	_mergeRequestORM.Reviewers = field.NewField(tableName, "reviewers")
	_mergeRequestORM.SourceBranchId = field.NewUint64(tableName, "source_branch_id")
	_mergeRequestORM.Status = field.NewString(tableName, "status")
	_mergeRequestORM.TargetBranchId = field.NewUint64(tableName, "target_branch_id")
	_mergeRequestORM.Title = field.NewString(tableName, "title")
	_mergeRequestORM.UpdatedAt = field.NewTime(tableName, "updated_at")

	_mergeRequestORM.fillFieldMap()

	return _mergeRequestORM
}

type mergeRequestORM struct {
	mergeRequestORMDo

	ALL                   field.Asterisk
	AuthorId              field.String
	AutomatedCheckResults field.Field
	CreatedAt             field.Time
	Description           field.String
	DocumentBranchId      field.Uint64
	HasConflicts          field.Bool
	Id                    field.Uint64
	Labels                field.Field
	Reviewers             field.Field
	SourceBranchId        field.Uint64
	Status                field.String
	TargetBranchId        field.Uint64
	Title                 field.String
	UpdatedAt             field.Time

	fieldMap map[string]field.Expr
}

func (m mergeRequestORM) Table(newTableName string) *mergeRequestORM {
	m.mergeRequestORMDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mergeRequestORM) As(alias string) *mergeRequestORM {
	m.mergeRequestORMDo.DO = *(m.mergeRequestORMDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mergeRequestORM) updateTableName(table string) *mergeRequestORM {
	m.ALL = field.NewAsterisk(table)
	m.AuthorId = field.NewString(table, "author_id")
	m.AutomatedCheckResults = field.NewField(table, "automated_check_results")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.Description = field.NewString(table, "description")
	m.DocumentBranchId = field.NewUint64(table, "document_branch_id")
	m.HasConflicts = field.NewBool(table, "has_conflicts")
	m.Id = field.NewUint64(table, "id")
	m.Labels = field.NewField(table, "labels")
	m.Reviewers = field.NewField(table, "reviewers")
	m.SourceBranchId = field.NewUint64(table, "source_branch_id")
	m.Status = field.NewString(table, "status")
	m.TargetBranchId = field.NewUint64(table, "target_branch_id")
	m.Title = field.NewString(table, "title")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *mergeRequestORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mergeRequestORM) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 14)
	m.fieldMap["author_id"] = m.AuthorId
	m.fieldMap["automated_check_results"] = m.AutomatedCheckResults
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["description"] = m.Description
	m.fieldMap["document_branch_id"] = m.DocumentBranchId
	m.fieldMap["has_conflicts"] = m.HasConflicts
	m.fieldMap["id"] = m.Id
	m.fieldMap["labels"] = m.Labels
	m.fieldMap["reviewers"] = m.Reviewers
	m.fieldMap["source_branch_id"] = m.SourceBranchId
	m.fieldMap["status"] = m.Status
	m.fieldMap["target_branch_id"] = m.TargetBranchId
	m.fieldMap["title"] = m.Title
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m mergeRequestORM) clone(db *gorm.DB) mergeRequestORM {
	m.mergeRequestORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mergeRequestORM) replaceDB(db *gorm.DB) mergeRequestORM {
	m.mergeRequestORMDo.ReplaceDB(db)
	return m
}

type mergeRequestORMDo struct{ gen.DO }

type IMergeRequestORMDo interface {
	gen.SubQuery
	Debug() IMergeRequestORMDo
	WithContext(ctx context.Context) IMergeRequestORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMergeRequestORMDo
	WriteDB() IMergeRequestORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMergeRequestORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMergeRequestORMDo
	Not(conds ...gen.Condition) IMergeRequestORMDo
	Or(conds ...gen.Condition) IMergeRequestORMDo
	Select(conds ...field.Expr) IMergeRequestORMDo
	Where(conds ...gen.Condition) IMergeRequestORMDo
	Order(conds ...field.Expr) IMergeRequestORMDo
	Distinct(cols ...field.Expr) IMergeRequestORMDo
	Omit(cols ...field.Expr) IMergeRequestORMDo
	Join(table schema.Tabler, on ...field.Expr) IMergeRequestORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMergeRequestORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMergeRequestORMDo
	Group(cols ...field.Expr) IMergeRequestORMDo
	Having(conds ...gen.Condition) IMergeRequestORMDo
	Limit(limit int) IMergeRequestORMDo
	Offset(offset int) IMergeRequestORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMergeRequestORMDo
	Unscoped() IMergeRequestORMDo
	Create(values ...*workspace_servicev1.MergeRequestORM) error
	CreateInBatches(values []*workspace_servicev1.MergeRequestORM, batchSize int) error
	Save(values ...*workspace_servicev1.MergeRequestORM) error
	First() (*workspace_servicev1.MergeRequestORM, error)
	Take() (*workspace_servicev1.MergeRequestORM, error)
	Last() (*workspace_servicev1.MergeRequestORM, error)
	Find() ([]*workspace_servicev1.MergeRequestORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.MergeRequestORM, err error)
	FindInBatches(result *[]*workspace_servicev1.MergeRequestORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*workspace_servicev1.MergeRequestORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMergeRequestORMDo
	Assign(attrs ...field.AssignExpr) IMergeRequestORMDo
	Joins(fields ...field.RelationField) IMergeRequestORMDo
	Preload(fields ...field.RelationField) IMergeRequestORMDo
	FirstOrInit() (*workspace_servicev1.MergeRequestORM, error)
	FirstOrCreate() (*workspace_servicev1.MergeRequestORM, error)
	FindByPage(offset int, limit int) (result []*workspace_servicev1.MergeRequestORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMergeRequestORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result workspace_servicev1.MergeRequestORM, err error)
	GetRecordByIDs(ids []uint64) (result []workspace_servicev1.MergeRequestORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.MergeRequestORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result workspace_servicev1.MergeRequestORM, err error)
	GetByIDs(ids []uint64) (result []workspace_servicev1.MergeRequestORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.MergeRequestORM, err error)
	GetDeleted() (result []workspace_servicev1.MergeRequestORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	CreateInBatch(items []workspace_servicev1.MergeRequestORM, batchSize int) (err error)
	DeleteInBatch(ids []uint64) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.MergeRequestORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.MergeRequestORM, err error)
	FindByPattern(columnName string, pattern string) (result []workspace_servicev1.MergeRequestORM, err error)
	GetDistinct(columnName string) (result []workspace_servicev1.MergeRequestORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.MergeRequestORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.MergeRequestORM, err error)
	ExistsAndGet(column string, value interface{}) (result workspace_servicev1.MergeRequestORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.MergeRequestORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeRequestORMDo) GetRecordByID(id uint64) (result workspace_servicev1.MergeRequestORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_requests ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m mergeRequestORMDo) GetRecordByIDs(ids []uint64) (result []workspace_servicev1.MergeRequestORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_requests ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeRequestORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM merge_requests ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (m mergeRequestORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.MergeRequestORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM merge_requests ORDER BY " + m.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (m mergeRequestORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM merge_requests ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeRequestORMDo) GetByID(id uint64) (result workspace_servicev1.MergeRequestORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_requests ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m mergeRequestORMDo) GetByIDs(ids []uint64) (result []workspace_servicev1.MergeRequestORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_requests ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (m mergeRequestORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.MergeRequestORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_requests ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + m.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (m mergeRequestORMDo) GetDeleted() (result []workspace_servicev1.MergeRequestORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_requests ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeRequestORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE merge_requests SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeRequestORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE merge_requests SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values...)
func (m mergeRequestORMDo) CreateInBatch(items []workspace_servicev1.MergeRequestORM, batchSize int) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO merge_requests (columns) VALUES (values...) ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m mergeRequestORMDo) DeleteInBatch(ids []uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM merge_requests ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (m mergeRequestORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.MergeRequestORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_requests ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (m mergeRequestORMDo) FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.MergeRequestORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_requests ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (m mergeRequestORMDo) FindByPattern(columnName string, pattern string) (result []workspace_servicev1.MergeRequestORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_requests ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (m mergeRequestORMDo) GetDistinct(columnName string) (result []workspace_servicev1.MergeRequestORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM merge_requests ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (m mergeRequestORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.MergeRequestORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_requests ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeRequestORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE merge_requests SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (m mergeRequestORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM merge_requests ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (m mergeRequestORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM merge_requests ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (m mergeRequestORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.MergeRequestORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_requests ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (m mergeRequestORMDo) ExistsAndGet(column string, value interface{}) (result workspace_servicev1.MergeRequestORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM merge_requests ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM merge_requests ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (m mergeRequestORMDo) ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.MergeRequestORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM merge_requests ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM merge_requests ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m mergeRequestORMDo) Debug() IMergeRequestORMDo {
	return m.withDO(m.DO.Debug())
}

func (m mergeRequestORMDo) WithContext(ctx context.Context) IMergeRequestORMDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mergeRequestORMDo) ReadDB() IMergeRequestORMDo {
	return m.Clauses(dbresolver.Read)
}

func (m mergeRequestORMDo) WriteDB() IMergeRequestORMDo {
	return m.Clauses(dbresolver.Write)
}

func (m mergeRequestORMDo) Session(config *gorm.Session) IMergeRequestORMDo {
	return m.withDO(m.DO.Session(config))
}

func (m mergeRequestORMDo) Clauses(conds ...clause.Expression) IMergeRequestORMDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mergeRequestORMDo) Returning(value interface{}, columns ...string) IMergeRequestORMDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mergeRequestORMDo) Not(conds ...gen.Condition) IMergeRequestORMDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mergeRequestORMDo) Or(conds ...gen.Condition) IMergeRequestORMDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mergeRequestORMDo) Select(conds ...field.Expr) IMergeRequestORMDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mergeRequestORMDo) Where(conds ...gen.Condition) IMergeRequestORMDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mergeRequestORMDo) Order(conds ...field.Expr) IMergeRequestORMDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mergeRequestORMDo) Distinct(cols ...field.Expr) IMergeRequestORMDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mergeRequestORMDo) Omit(cols ...field.Expr) IMergeRequestORMDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mergeRequestORMDo) Join(table schema.Tabler, on ...field.Expr) IMergeRequestORMDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mergeRequestORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMergeRequestORMDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mergeRequestORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IMergeRequestORMDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mergeRequestORMDo) Group(cols ...field.Expr) IMergeRequestORMDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mergeRequestORMDo) Having(conds ...gen.Condition) IMergeRequestORMDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mergeRequestORMDo) Limit(limit int) IMergeRequestORMDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mergeRequestORMDo) Offset(offset int) IMergeRequestORMDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mergeRequestORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMergeRequestORMDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mergeRequestORMDo) Unscoped() IMergeRequestORMDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mergeRequestORMDo) Create(values ...*workspace_servicev1.MergeRequestORM) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mergeRequestORMDo) CreateInBatches(values []*workspace_servicev1.MergeRequestORM, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mergeRequestORMDo) Save(values ...*workspace_servicev1.MergeRequestORM) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mergeRequestORMDo) First() (*workspace_servicev1.MergeRequestORM, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.MergeRequestORM), nil
	}
}

func (m mergeRequestORMDo) Take() (*workspace_servicev1.MergeRequestORM, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.MergeRequestORM), nil
	}
}

func (m mergeRequestORMDo) Last() (*workspace_servicev1.MergeRequestORM, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.MergeRequestORM), nil
	}
}

func (m mergeRequestORMDo) Find() ([]*workspace_servicev1.MergeRequestORM, error) {
	result, err := m.DO.Find()
	return result.([]*workspace_servicev1.MergeRequestORM), err
}

func (m mergeRequestORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.MergeRequestORM, err error) {
	buf := make([]*workspace_servicev1.MergeRequestORM, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mergeRequestORMDo) FindInBatches(result *[]*workspace_servicev1.MergeRequestORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mergeRequestORMDo) Attrs(attrs ...field.AssignExpr) IMergeRequestORMDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mergeRequestORMDo) Assign(attrs ...field.AssignExpr) IMergeRequestORMDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mergeRequestORMDo) Joins(fields ...field.RelationField) IMergeRequestORMDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mergeRequestORMDo) Preload(fields ...field.RelationField) IMergeRequestORMDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mergeRequestORMDo) FirstOrInit() (*workspace_servicev1.MergeRequestORM, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.MergeRequestORM), nil
	}
}

func (m mergeRequestORMDo) FirstOrCreate() (*workspace_servicev1.MergeRequestORM, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.MergeRequestORM), nil
	}
}

func (m mergeRequestORMDo) FindByPage(offset int, limit int) (result []*workspace_servicev1.MergeRequestORM, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mergeRequestORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mergeRequestORMDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mergeRequestORMDo) Delete(models ...*workspace_servicev1.MergeRequestORM) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mergeRequestORMDo) withDO(do gen.Dao) *mergeRequestORMDo {
	m.DO = *do.(*gen.DO)
	return m
}
