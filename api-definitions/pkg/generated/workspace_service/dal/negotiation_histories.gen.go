// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	workspace_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/workspace_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newNegotiationHistoryORM(db *gorm.DB, opts ...gen.DOOption) negotiationHistoryORM {
	_negotiationHistoryORM := negotiationHistoryORM{}

	_negotiationHistoryORM.negotiationHistoryORMDo.UseDB(db, opts...)
	_negotiationHistoryORM.negotiationHistoryORMDo.UseModel(&workspace_servicev1.NegotiationHistoryORM{})

	tableName := _negotiationHistoryORM.negotiationHistoryORMDo.TableName()
	_negotiationHistoryORM.ALL = field.NewAsterisk(tableName)
	_negotiationHistoryORM.CurrentStatus = field.NewString(tableName, "current_status")
	_negotiationHistoryORM.DocumentId = field.NewUint64(tableName, "document_id")
	_negotiationHistoryORM.DocumentInstanceId = field.NewUint64(tableName, "document_instance_id")
	_negotiationHistoryORM.Id = field.NewUint64(tableName, "id")
	_negotiationHistoryORM.LastUpdated = field.NewTime(tableName, "last_updated")
	_negotiationHistoryORM.StartedAt = field.NewTime(tableName, "started_at")
	_negotiationHistoryORM.Rounds = negotiationHistoryORMHasManyRounds{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Rounds", "workspace_servicev1.NegotiationRoundORM"),
	}

	_negotiationHistoryORM.fillFieldMap()

	return _negotiationHistoryORM
}

type negotiationHistoryORM struct {
	negotiationHistoryORMDo

	ALL                field.Asterisk
	CurrentStatus      field.String
	DocumentId         field.Uint64
	DocumentInstanceId field.Uint64
	Id                 field.Uint64
	LastUpdated        field.Time
	StartedAt          field.Time
	Rounds             negotiationHistoryORMHasManyRounds

	fieldMap map[string]field.Expr
}

func (n negotiationHistoryORM) Table(newTableName string) *negotiationHistoryORM {
	n.negotiationHistoryORMDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n negotiationHistoryORM) As(alias string) *negotiationHistoryORM {
	n.negotiationHistoryORMDo.DO = *(n.negotiationHistoryORMDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *negotiationHistoryORM) updateTableName(table string) *negotiationHistoryORM {
	n.ALL = field.NewAsterisk(table)
	n.CurrentStatus = field.NewString(table, "current_status")
	n.DocumentId = field.NewUint64(table, "document_id")
	n.DocumentInstanceId = field.NewUint64(table, "document_instance_id")
	n.Id = field.NewUint64(table, "id")
	n.LastUpdated = field.NewTime(table, "last_updated")
	n.StartedAt = field.NewTime(table, "started_at")

	n.fillFieldMap()

	return n
}

func (n *negotiationHistoryORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *negotiationHistoryORM) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 7)
	n.fieldMap["current_status"] = n.CurrentStatus
	n.fieldMap["document_id"] = n.DocumentId
	n.fieldMap["document_instance_id"] = n.DocumentInstanceId
	n.fieldMap["id"] = n.Id
	n.fieldMap["last_updated"] = n.LastUpdated
	n.fieldMap["started_at"] = n.StartedAt

}

func (n negotiationHistoryORM) clone(db *gorm.DB) negotiationHistoryORM {
	n.negotiationHistoryORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n negotiationHistoryORM) replaceDB(db *gorm.DB) negotiationHistoryORM {
	n.negotiationHistoryORMDo.ReplaceDB(db)
	return n
}

type negotiationHistoryORMHasManyRounds struct {
	db *gorm.DB

	field.RelationField
}

func (a negotiationHistoryORMHasManyRounds) Where(conds ...field.Expr) *negotiationHistoryORMHasManyRounds {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a negotiationHistoryORMHasManyRounds) WithContext(ctx context.Context) *negotiationHistoryORMHasManyRounds {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a negotiationHistoryORMHasManyRounds) Session(session *gorm.Session) *negotiationHistoryORMHasManyRounds {
	a.db = a.db.Session(session)
	return &a
}

func (a negotiationHistoryORMHasManyRounds) Model(m *workspace_servicev1.NegotiationHistoryORM) *negotiationHistoryORMHasManyRoundsTx {
	return &negotiationHistoryORMHasManyRoundsTx{a.db.Model(m).Association(a.Name())}
}

type negotiationHistoryORMHasManyRoundsTx struct{ tx *gorm.Association }

func (a negotiationHistoryORMHasManyRoundsTx) Find() (result []*workspace_servicev1.NegotiationRoundORM, err error) {
	return result, a.tx.Find(&result)
}

func (a negotiationHistoryORMHasManyRoundsTx) Append(values ...*workspace_servicev1.NegotiationRoundORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a negotiationHistoryORMHasManyRoundsTx) Replace(values ...*workspace_servicev1.NegotiationRoundORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a negotiationHistoryORMHasManyRoundsTx) Delete(values ...*workspace_servicev1.NegotiationRoundORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a negotiationHistoryORMHasManyRoundsTx) Clear() error {
	return a.tx.Clear()
}

func (a negotiationHistoryORMHasManyRoundsTx) Count() int64 {
	return a.tx.Count()
}

type negotiationHistoryORMDo struct{ gen.DO }

type INegotiationHistoryORMDo interface {
	gen.SubQuery
	Debug() INegotiationHistoryORMDo
	WithContext(ctx context.Context) INegotiationHistoryORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INegotiationHistoryORMDo
	WriteDB() INegotiationHistoryORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INegotiationHistoryORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INegotiationHistoryORMDo
	Not(conds ...gen.Condition) INegotiationHistoryORMDo
	Or(conds ...gen.Condition) INegotiationHistoryORMDo
	Select(conds ...field.Expr) INegotiationHistoryORMDo
	Where(conds ...gen.Condition) INegotiationHistoryORMDo
	Order(conds ...field.Expr) INegotiationHistoryORMDo
	Distinct(cols ...field.Expr) INegotiationHistoryORMDo
	Omit(cols ...field.Expr) INegotiationHistoryORMDo
	Join(table schema.Tabler, on ...field.Expr) INegotiationHistoryORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INegotiationHistoryORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) INegotiationHistoryORMDo
	Group(cols ...field.Expr) INegotiationHistoryORMDo
	Having(conds ...gen.Condition) INegotiationHistoryORMDo
	Limit(limit int) INegotiationHistoryORMDo
	Offset(offset int) INegotiationHistoryORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INegotiationHistoryORMDo
	Unscoped() INegotiationHistoryORMDo
	Create(values ...*workspace_servicev1.NegotiationHistoryORM) error
	CreateInBatches(values []*workspace_servicev1.NegotiationHistoryORM, batchSize int) error
	Save(values ...*workspace_servicev1.NegotiationHistoryORM) error
	First() (*workspace_servicev1.NegotiationHistoryORM, error)
	Take() (*workspace_servicev1.NegotiationHistoryORM, error)
	Last() (*workspace_servicev1.NegotiationHistoryORM, error)
	Find() ([]*workspace_servicev1.NegotiationHistoryORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.NegotiationHistoryORM, err error)
	FindInBatches(result *[]*workspace_servicev1.NegotiationHistoryORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*workspace_servicev1.NegotiationHistoryORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INegotiationHistoryORMDo
	Assign(attrs ...field.AssignExpr) INegotiationHistoryORMDo
	Joins(fields ...field.RelationField) INegotiationHistoryORMDo
	Preload(fields ...field.RelationField) INegotiationHistoryORMDo
	FirstOrInit() (*workspace_servicev1.NegotiationHistoryORM, error)
	FirstOrCreate() (*workspace_servicev1.NegotiationHistoryORM, error)
	FindByPage(offset int, limit int) (result []*workspace_servicev1.NegotiationHistoryORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INegotiationHistoryORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result workspace_servicev1.NegotiationHistoryORM, err error)
	GetRecordByIDs(ids []uint64) (result []workspace_servicev1.NegotiationHistoryORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.NegotiationHistoryORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result workspace_servicev1.NegotiationHistoryORM, err error)
	GetByIDs(ids []uint64) (result []workspace_servicev1.NegotiationHistoryORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.NegotiationHistoryORM, err error)
	GetDeleted() (result []workspace_servicev1.NegotiationHistoryORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	CreateInBatch(items []workspace_servicev1.NegotiationHistoryORM, batchSize int) (err error)
	DeleteInBatch(ids []uint64) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.NegotiationHistoryORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.NegotiationHistoryORM, err error)
	FindByPattern(columnName string, pattern string) (result []workspace_servicev1.NegotiationHistoryORM, err error)
	GetDistinct(columnName string) (result []workspace_servicev1.NegotiationHistoryORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.NegotiationHistoryORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.NegotiationHistoryORM, err error)
	ExistsAndGet(column string, value interface{}) (result workspace_servicev1.NegotiationHistoryORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.NegotiationHistoryORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (n negotiationHistoryORMDo) GetRecordByID(id uint64) (result workspace_servicev1.NegotiationHistoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (n negotiationHistoryORMDo) GetRecordByIDs(ids []uint64) (result []workspace_servicev1.NegotiationHistoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (n negotiationHistoryORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (n negotiationHistoryORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.NegotiationHistoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM negotiation_histories ORDER BY " + n.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (n negotiationHistoryORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM negotiation_histories ")

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (n negotiationHistoryORMDo) GetByID(id uint64) (result workspace_servicev1.NegotiationHistoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (n negotiationHistoryORMDo) GetByIDs(ids []uint64) (result []workspace_servicev1.NegotiationHistoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (n negotiationHistoryORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.NegotiationHistoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + n.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (n negotiationHistoryORMDo) GetDeleted() (result []workspace_servicev1.NegotiationHistoryORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (n negotiationHistoryORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE negotiation_histories SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (n negotiationHistoryORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE negotiation_histories SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values...)
func (n negotiationHistoryORMDo) CreateInBatch(items []workspace_servicev1.NegotiationHistoryORM, batchSize int) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO negotiation_histories (columns) VALUES (values...) ")

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (n negotiationHistoryORMDo) DeleteInBatch(ids []uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (n negotiationHistoryORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.NegotiationHistoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (n negotiationHistoryORMDo) FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.NegotiationHistoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (n negotiationHistoryORMDo) FindByPattern(columnName string, pattern string) (result []workspace_servicev1.NegotiationHistoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (n negotiationHistoryORMDo) GetDistinct(columnName string) (result []workspace_servicev1.NegotiationHistoryORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM negotiation_histories ")

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (n negotiationHistoryORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.NegotiationHistoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (n negotiationHistoryORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE negotiation_histories SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (n negotiationHistoryORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (n negotiationHistoryORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (n negotiationHistoryORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.NegotiationHistoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (n negotiationHistoryORMDo) ExistsAndGet(column string, value interface{}) (result workspace_servicev1.NegotiationHistoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM negotiation_histories ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (n negotiationHistoryORMDo) ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.NegotiationHistoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM negotiation_histories ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM negotiation_histories ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (n negotiationHistoryORMDo) Debug() INegotiationHistoryORMDo {
	return n.withDO(n.DO.Debug())
}

func (n negotiationHistoryORMDo) WithContext(ctx context.Context) INegotiationHistoryORMDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n negotiationHistoryORMDo) ReadDB() INegotiationHistoryORMDo {
	return n.Clauses(dbresolver.Read)
}

func (n negotiationHistoryORMDo) WriteDB() INegotiationHistoryORMDo {
	return n.Clauses(dbresolver.Write)
}

func (n negotiationHistoryORMDo) Session(config *gorm.Session) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Session(config))
}

func (n negotiationHistoryORMDo) Clauses(conds ...clause.Expression) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n negotiationHistoryORMDo) Returning(value interface{}, columns ...string) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n negotiationHistoryORMDo) Not(conds ...gen.Condition) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n negotiationHistoryORMDo) Or(conds ...gen.Condition) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n negotiationHistoryORMDo) Select(conds ...field.Expr) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n negotiationHistoryORMDo) Where(conds ...gen.Condition) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n negotiationHistoryORMDo) Order(conds ...field.Expr) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n negotiationHistoryORMDo) Distinct(cols ...field.Expr) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n negotiationHistoryORMDo) Omit(cols ...field.Expr) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n negotiationHistoryORMDo) Join(table schema.Tabler, on ...field.Expr) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n negotiationHistoryORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) INegotiationHistoryORMDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n negotiationHistoryORMDo) RightJoin(table schema.Tabler, on ...field.Expr) INegotiationHistoryORMDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n negotiationHistoryORMDo) Group(cols ...field.Expr) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n negotiationHistoryORMDo) Having(conds ...gen.Condition) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n negotiationHistoryORMDo) Limit(limit int) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n negotiationHistoryORMDo) Offset(offset int) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n negotiationHistoryORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n negotiationHistoryORMDo) Unscoped() INegotiationHistoryORMDo {
	return n.withDO(n.DO.Unscoped())
}

func (n negotiationHistoryORMDo) Create(values ...*workspace_servicev1.NegotiationHistoryORM) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n negotiationHistoryORMDo) CreateInBatches(values []*workspace_servicev1.NegotiationHistoryORM, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n negotiationHistoryORMDo) Save(values ...*workspace_servicev1.NegotiationHistoryORM) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n negotiationHistoryORMDo) First() (*workspace_servicev1.NegotiationHistoryORM, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.NegotiationHistoryORM), nil
	}
}

func (n negotiationHistoryORMDo) Take() (*workspace_servicev1.NegotiationHistoryORM, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.NegotiationHistoryORM), nil
	}
}

func (n negotiationHistoryORMDo) Last() (*workspace_servicev1.NegotiationHistoryORM, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.NegotiationHistoryORM), nil
	}
}

func (n negotiationHistoryORMDo) Find() ([]*workspace_servicev1.NegotiationHistoryORM, error) {
	result, err := n.DO.Find()
	return result.([]*workspace_servicev1.NegotiationHistoryORM), err
}

func (n negotiationHistoryORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.NegotiationHistoryORM, err error) {
	buf := make([]*workspace_servicev1.NegotiationHistoryORM, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n negotiationHistoryORMDo) FindInBatches(result *[]*workspace_servicev1.NegotiationHistoryORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n negotiationHistoryORMDo) Attrs(attrs ...field.AssignExpr) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n negotiationHistoryORMDo) Assign(attrs ...field.AssignExpr) INegotiationHistoryORMDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n negotiationHistoryORMDo) Joins(fields ...field.RelationField) INegotiationHistoryORMDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n negotiationHistoryORMDo) Preload(fields ...field.RelationField) INegotiationHistoryORMDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n negotiationHistoryORMDo) FirstOrInit() (*workspace_servicev1.NegotiationHistoryORM, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.NegotiationHistoryORM), nil
	}
}

func (n negotiationHistoryORMDo) FirstOrCreate() (*workspace_servicev1.NegotiationHistoryORM, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.NegotiationHistoryORM), nil
	}
}

func (n negotiationHistoryORMDo) FindByPage(offset int, limit int) (result []*workspace_servicev1.NegotiationHistoryORM, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n negotiationHistoryORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n negotiationHistoryORMDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n negotiationHistoryORMDo) Delete(models ...*workspace_servicev1.NegotiationHistoryORM) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *negotiationHistoryORMDo) withDO(do gen.Dao) *negotiationHistoryORMDo {
	n.DO = *do.(*gen.DO)
	return n
}
