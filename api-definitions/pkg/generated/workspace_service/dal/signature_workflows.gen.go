// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	workspace_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/workspace_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newSignatureWorkflowORM(db *gorm.DB, opts ...gen.DOOption) signatureWorkflowORM {
	_signatureWorkflowORM := signatureWorkflowORM{}

	_signatureWorkflowORM.signatureWorkflowORMDo.UseDB(db, opts...)
	_signatureWorkflowORM.signatureWorkflowORMDo.UseModel(&workspace_servicev1.SignatureWorkflowORM{})

	tableName := _signatureWorkflowORM.signatureWorkflowORMDo.TableName()
	_signatureWorkflowORM.ALL = field.NewAsterisk(tableName)
	_signatureWorkflowORM.CreatedAt = field.NewTime(tableName, "created_at")
	_signatureWorkflowORM.CurrentSigner = field.NewString(tableName, "current_signer")
	_signatureWorkflowORM.Deadline = field.NewTime(tableName, "deadline")
	_signatureWorkflowORM.Id = field.NewUint64(tableName, "id")
	_signatureWorkflowORM.ParallelSigning = field.NewBool(tableName, "parallel_signing")
	_signatureWorkflowORM.RequestId = field.NewUint64(tableName, "request_id")
	_signatureWorkflowORM.RequireAllSignatures = field.NewBool(tableName, "require_all_signatures")
	_signatureWorkflowORM.SignatureRequestId = field.NewUint64(tableName, "signature_request_id")
	_signatureWorkflowORM.SigningOrder = field.NewField(tableName, "signing_order")
	_signatureWorkflowORM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_signatureWorkflowORM.WorkflowStatus = field.NewString(tableName, "workflow_status")

	_signatureWorkflowORM.fillFieldMap()

	return _signatureWorkflowORM
}

type signatureWorkflowORM struct {
	signatureWorkflowORMDo

	ALL                  field.Asterisk
	CreatedAt            field.Time
	CurrentSigner        field.String
	Deadline             field.Time
	Id                   field.Uint64
	ParallelSigning      field.Bool
	RequestId            field.Uint64
	RequireAllSignatures field.Bool
	SignatureRequestId   field.Uint64
	SigningOrder         field.Field
	UpdatedAt            field.Time
	WorkflowStatus       field.String

	fieldMap map[string]field.Expr
}

func (s signatureWorkflowORM) Table(newTableName string) *signatureWorkflowORM {
	s.signatureWorkflowORMDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s signatureWorkflowORM) As(alias string) *signatureWorkflowORM {
	s.signatureWorkflowORMDo.DO = *(s.signatureWorkflowORMDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *signatureWorkflowORM) updateTableName(table string) *signatureWorkflowORM {
	s.ALL = field.NewAsterisk(table)
	s.CreatedAt = field.NewTime(table, "created_at")
	s.CurrentSigner = field.NewString(table, "current_signer")
	s.Deadline = field.NewTime(table, "deadline")
	s.Id = field.NewUint64(table, "id")
	s.ParallelSigning = field.NewBool(table, "parallel_signing")
	s.RequestId = field.NewUint64(table, "request_id")
	s.RequireAllSignatures = field.NewBool(table, "require_all_signatures")
	s.SignatureRequestId = field.NewUint64(table, "signature_request_id")
	s.SigningOrder = field.NewField(table, "signing_order")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.WorkflowStatus = field.NewString(table, "workflow_status")

	s.fillFieldMap()

	return s
}

func (s *signatureWorkflowORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *signatureWorkflowORM) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["current_signer"] = s.CurrentSigner
	s.fieldMap["deadline"] = s.Deadline
	s.fieldMap["id"] = s.Id
	s.fieldMap["parallel_signing"] = s.ParallelSigning
	s.fieldMap["request_id"] = s.RequestId
	s.fieldMap["require_all_signatures"] = s.RequireAllSignatures
	s.fieldMap["signature_request_id"] = s.SignatureRequestId
	s.fieldMap["signing_order"] = s.SigningOrder
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["workflow_status"] = s.WorkflowStatus
}

func (s signatureWorkflowORM) clone(db *gorm.DB) signatureWorkflowORM {
	s.signatureWorkflowORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s signatureWorkflowORM) replaceDB(db *gorm.DB) signatureWorkflowORM {
	s.signatureWorkflowORMDo.ReplaceDB(db)
	return s
}

type signatureWorkflowORMDo struct{ gen.DO }

type ISignatureWorkflowORMDo interface {
	gen.SubQuery
	Debug() ISignatureWorkflowORMDo
	WithContext(ctx context.Context) ISignatureWorkflowORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISignatureWorkflowORMDo
	WriteDB() ISignatureWorkflowORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISignatureWorkflowORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISignatureWorkflowORMDo
	Not(conds ...gen.Condition) ISignatureWorkflowORMDo
	Or(conds ...gen.Condition) ISignatureWorkflowORMDo
	Select(conds ...field.Expr) ISignatureWorkflowORMDo
	Where(conds ...gen.Condition) ISignatureWorkflowORMDo
	Order(conds ...field.Expr) ISignatureWorkflowORMDo
	Distinct(cols ...field.Expr) ISignatureWorkflowORMDo
	Omit(cols ...field.Expr) ISignatureWorkflowORMDo
	Join(table schema.Tabler, on ...field.Expr) ISignatureWorkflowORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISignatureWorkflowORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISignatureWorkflowORMDo
	Group(cols ...field.Expr) ISignatureWorkflowORMDo
	Having(conds ...gen.Condition) ISignatureWorkflowORMDo
	Limit(limit int) ISignatureWorkflowORMDo
	Offset(offset int) ISignatureWorkflowORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISignatureWorkflowORMDo
	Unscoped() ISignatureWorkflowORMDo
	Create(values ...*workspace_servicev1.SignatureWorkflowORM) error
	CreateInBatches(values []*workspace_servicev1.SignatureWorkflowORM, batchSize int) error
	Save(values ...*workspace_servicev1.SignatureWorkflowORM) error
	First() (*workspace_servicev1.SignatureWorkflowORM, error)
	Take() (*workspace_servicev1.SignatureWorkflowORM, error)
	Last() (*workspace_servicev1.SignatureWorkflowORM, error)
	Find() ([]*workspace_servicev1.SignatureWorkflowORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.SignatureWorkflowORM, err error)
	FindInBatches(result *[]*workspace_servicev1.SignatureWorkflowORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*workspace_servicev1.SignatureWorkflowORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISignatureWorkflowORMDo
	Assign(attrs ...field.AssignExpr) ISignatureWorkflowORMDo
	Joins(fields ...field.RelationField) ISignatureWorkflowORMDo
	Preload(fields ...field.RelationField) ISignatureWorkflowORMDo
	FirstOrInit() (*workspace_servicev1.SignatureWorkflowORM, error)
	FirstOrCreate() (*workspace_servicev1.SignatureWorkflowORM, error)
	FindByPage(offset int, limit int) (result []*workspace_servicev1.SignatureWorkflowORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISignatureWorkflowORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result workspace_servicev1.SignatureWorkflowORM, err error)
	GetRecordByIDs(ids []uint64) (result []workspace_servicev1.SignatureWorkflowORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.SignatureWorkflowORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result workspace_servicev1.SignatureWorkflowORM, err error)
	GetByIDs(ids []uint64) (result []workspace_servicev1.SignatureWorkflowORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.SignatureWorkflowORM, err error)
	GetDeleted() (result []workspace_servicev1.SignatureWorkflowORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	DeleteInBatch(ids []uint64, batchSize int) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.SignatureWorkflowORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.SignatureWorkflowORM, err error)
	FindByPattern(columnName string, pattern string) (result []workspace_servicev1.SignatureWorkflowORM, err error)
	GetDistinct(columnName string) (result []workspace_servicev1.SignatureWorkflowORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.SignatureWorkflowORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.SignatureWorkflowORM, err error)
	ExistsAndGet(column string, value interface{}) (result workspace_servicev1.SignatureWorkflowORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.SignatureWorkflowORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (s signatureWorkflowORMDo) GetRecordByID(id uint64) (result workspace_servicev1.SignatureWorkflowORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM signature_workflows ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (s signatureWorkflowORMDo) GetRecordByIDs(ids []uint64) (result []workspace_servicev1.SignatureWorkflowORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM signature_workflows ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (s signatureWorkflowORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM signature_workflows ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (s signatureWorkflowORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.SignatureWorkflowORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM signature_workflows ORDER BY " + s.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (s signatureWorkflowORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM signature_workflows ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (s signatureWorkflowORMDo) GetByID(id uint64) (result workspace_servicev1.SignatureWorkflowORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM signature_workflows ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (s signatureWorkflowORMDo) GetByIDs(ids []uint64) (result []workspace_servicev1.SignatureWorkflowORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM signature_workflows ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (s signatureWorkflowORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.SignatureWorkflowORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM signature_workflows ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + s.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (s signatureWorkflowORMDo) GetDeleted() (result []workspace_servicev1.SignatureWorkflowORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM signature_workflows ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (s signatureWorkflowORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE signature_workflows SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (s signatureWorkflowORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE signature_workflows SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
// LIMIT @batchSize
func (s signatureWorkflowORMDo) DeleteInBatch(ids []uint64, batchSize int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM signature_workflows ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, batchSize)
	generateSQL.WriteString("LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (s signatureWorkflowORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.SignatureWorkflowORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM signature_workflows ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (s signatureWorkflowORMDo) FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.SignatureWorkflowORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM signature_workflows ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (s signatureWorkflowORMDo) FindByPattern(columnName string, pattern string) (result []workspace_servicev1.SignatureWorkflowORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM signature_workflows ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (s signatureWorkflowORMDo) GetDistinct(columnName string) (result []workspace_servicev1.SignatureWorkflowORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM signature_workflows ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (s signatureWorkflowORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.SignatureWorkflowORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM signature_workflows ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (s signatureWorkflowORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE signature_workflows SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (s signatureWorkflowORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM signature_workflows ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (s signatureWorkflowORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM signature_workflows ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (s signatureWorkflowORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.SignatureWorkflowORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM signature_workflows ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (s signatureWorkflowORMDo) ExistsAndGet(column string, value interface{}) (result workspace_servicev1.SignatureWorkflowORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM signature_workflows ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM signature_workflows ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (s signatureWorkflowORMDo) ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.SignatureWorkflowORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM signature_workflows ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM signature_workflows ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s signatureWorkflowORMDo) Debug() ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Debug())
}

func (s signatureWorkflowORMDo) WithContext(ctx context.Context) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s signatureWorkflowORMDo) ReadDB() ISignatureWorkflowORMDo {
	return s.Clauses(dbresolver.Read)
}

func (s signatureWorkflowORMDo) WriteDB() ISignatureWorkflowORMDo {
	return s.Clauses(dbresolver.Write)
}

func (s signatureWorkflowORMDo) Session(config *gorm.Session) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Session(config))
}

func (s signatureWorkflowORMDo) Clauses(conds ...clause.Expression) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s signatureWorkflowORMDo) Returning(value interface{}, columns ...string) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s signatureWorkflowORMDo) Not(conds ...gen.Condition) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s signatureWorkflowORMDo) Or(conds ...gen.Condition) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s signatureWorkflowORMDo) Select(conds ...field.Expr) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s signatureWorkflowORMDo) Where(conds ...gen.Condition) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s signatureWorkflowORMDo) Order(conds ...field.Expr) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s signatureWorkflowORMDo) Distinct(cols ...field.Expr) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s signatureWorkflowORMDo) Omit(cols ...field.Expr) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s signatureWorkflowORMDo) Join(table schema.Tabler, on ...field.Expr) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s signatureWorkflowORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s signatureWorkflowORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s signatureWorkflowORMDo) Group(cols ...field.Expr) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s signatureWorkflowORMDo) Having(conds ...gen.Condition) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s signatureWorkflowORMDo) Limit(limit int) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s signatureWorkflowORMDo) Offset(offset int) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s signatureWorkflowORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s signatureWorkflowORMDo) Unscoped() ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Unscoped())
}

func (s signatureWorkflowORMDo) Create(values ...*workspace_servicev1.SignatureWorkflowORM) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s signatureWorkflowORMDo) CreateInBatches(values []*workspace_servicev1.SignatureWorkflowORM, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s signatureWorkflowORMDo) Save(values ...*workspace_servicev1.SignatureWorkflowORM) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s signatureWorkflowORMDo) First() (*workspace_servicev1.SignatureWorkflowORM, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.SignatureWorkflowORM), nil
	}
}

func (s signatureWorkflowORMDo) Take() (*workspace_servicev1.SignatureWorkflowORM, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.SignatureWorkflowORM), nil
	}
}

func (s signatureWorkflowORMDo) Last() (*workspace_servicev1.SignatureWorkflowORM, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.SignatureWorkflowORM), nil
	}
}

func (s signatureWorkflowORMDo) Find() ([]*workspace_servicev1.SignatureWorkflowORM, error) {
	result, err := s.DO.Find()
	return result.([]*workspace_servicev1.SignatureWorkflowORM), err
}

func (s signatureWorkflowORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.SignatureWorkflowORM, err error) {
	buf := make([]*workspace_servicev1.SignatureWorkflowORM, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s signatureWorkflowORMDo) FindInBatches(result *[]*workspace_servicev1.SignatureWorkflowORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s signatureWorkflowORMDo) Attrs(attrs ...field.AssignExpr) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s signatureWorkflowORMDo) Assign(attrs ...field.AssignExpr) ISignatureWorkflowORMDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s signatureWorkflowORMDo) Joins(fields ...field.RelationField) ISignatureWorkflowORMDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s signatureWorkflowORMDo) Preload(fields ...field.RelationField) ISignatureWorkflowORMDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s signatureWorkflowORMDo) FirstOrInit() (*workspace_servicev1.SignatureWorkflowORM, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.SignatureWorkflowORM), nil
	}
}

func (s signatureWorkflowORMDo) FirstOrCreate() (*workspace_servicev1.SignatureWorkflowORM, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.SignatureWorkflowORM), nil
	}
}

func (s signatureWorkflowORMDo) FindByPage(offset int, limit int) (result []*workspace_servicev1.SignatureWorkflowORM, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s signatureWorkflowORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s signatureWorkflowORMDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s signatureWorkflowORMDo) Delete(models ...*workspace_servicev1.SignatureWorkflowORM) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *signatureWorkflowORMDo) withDO(do gen.Dao) *signatureWorkflowORMDo {
	s.DO = *do.(*gen.DO)
	return s
}
