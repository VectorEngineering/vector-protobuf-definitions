// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"fmt"
	"strconv"
	"testing"
	"time"

	workspace_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/workspace_service/v1"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm/clause"
)

func init() {
	InitializeDB()
	err := _gen_test_db.AutoMigrate(&workspace_servicev1.WorkspaceSharingORM{})
	if err != nil {
		fmt.Printf("Error: AutoMigrate(&workspace_servicev1.WorkspaceSharingORM{}) fail: %s", err)
	}
}

func Test_workspaceSharingORMQuery(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	workspaceSharingORM = *workspaceSharingORM.As(workspaceSharingORM.TableName())
	_do := workspaceSharingORM.WithContext(context.Background()).Debug()

	primaryKey := field.NewString(workspaceSharingORM.TableName(), clause.PrimaryKey)
	_, err := _do.Unscoped().Where(primaryKey.IsNotNull()).Delete()
	if err != nil {
		t.Error("clean table <workspace_sharings> fail:", err)
		return
	}

	_, ok := workspaceSharingORM.GetFieldByName("")
	if ok {
		t.Error("GetFieldByName(\"\") from workspaceSharingORM success")
	}

	err = _do.Create(&workspace_servicev1.WorkspaceSharingORM{})
	if err != nil {
		t.Error("create item in table <workspace_sharings> fail:", err)
	}

	err = _do.Save(&workspace_servicev1.WorkspaceSharingORM{})
	if err != nil {
		t.Error("create item in table <workspace_sharings> fail:", err)
	}

	err = _do.CreateInBatches([]*workspace_servicev1.WorkspaceSharingORM{{}, {}}, 10)
	if err != nil {
		t.Error("create item in table <workspace_sharings> fail:", err)
	}

	_, err = _do.Select(workspaceSharingORM.ALL).Take()
	if err != nil {
		t.Error("Take() on table <workspace_sharings> fail:", err)
	}

	_, err = _do.First()
	if err != nil {
		t.Error("First() on table <workspace_sharings> fail:", err)
	}

	_, err = _do.Last()
	if err != nil {
		t.Error("First() on table <workspace_sharings> fail:", err)
	}

	_, err = _do.Where(primaryKey.IsNotNull()).FindInBatch(10, func(tx gen.Dao, batch int) error { return nil })
	if err != nil {
		t.Error("FindInBatch() on table <workspace_sharings> fail:", err)
	}

	err = _do.Where(primaryKey.IsNotNull()).FindInBatches(&[]*workspace_servicev1.WorkspaceSharingORM{}, 10, func(tx gen.Dao, batch int) error { return nil })
	if err != nil {
		t.Error("FindInBatches() on table <workspace_sharings> fail:", err)
	}

	_, err = _do.Select(workspaceSharingORM.ALL).Where(primaryKey.IsNotNull()).Order(primaryKey.Desc()).Find()
	if err != nil {
		t.Error("Find() on table <workspace_sharings> fail:", err)
	}

	_, err = _do.Distinct(primaryKey).Take()
	if err != nil {
		t.Error("select Distinct() on table <workspace_sharings> fail:", err)
	}

	_, err = _do.Select(workspaceSharingORM.ALL).Omit(primaryKey).Take()
	if err != nil {
		t.Error("Omit() on table <workspace_sharings> fail:", err)
	}

	_, err = _do.Group(primaryKey).Find()
	if err != nil {
		t.Error("Group() on table <workspace_sharings> fail:", err)
	}

	_, err = _do.Scopes(func(dao gen.Dao) gen.Dao { return dao.Where(primaryKey.IsNotNull()) }).Find()
	if err != nil {
		t.Error("Scopes() on table <workspace_sharings> fail:", err)
	}

	_, _, err = _do.FindByPage(0, 1)
	if err != nil {
		t.Error("FindByPage() on table <workspace_sharings> fail:", err)
	}

	_, err = _do.ScanByPage(&workspace_servicev1.WorkspaceSharingORM{}, 0, 1)
	if err != nil {
		t.Error("ScanByPage() on table <workspace_sharings> fail:", err)
	}

	_, err = _do.Attrs(primaryKey).Assign(primaryKey).FirstOrInit()
	if err != nil {
		t.Error("FirstOrInit() on table <workspace_sharings> fail:", err)
	}

	_, err = _do.Attrs(primaryKey).Assign(primaryKey).FirstOrCreate()
	if err != nil {
		t.Error("FirstOrCreate() on table <workspace_sharings> fail:", err)
	}

	var _a _another
	var _aPK = field.NewString(_a.TableName(), "id")

	err = _do.Join(&_a, primaryKey.EqCol(_aPK)).Scan(map[string]interface{}{})
	if err != nil {
		t.Error("Join() on table <workspace_sharings> fail:", err)
	}

	err = _do.LeftJoin(&_a, primaryKey.EqCol(_aPK)).Scan(map[string]interface{}{})
	if err != nil {
		t.Error("LeftJoin() on table <workspace_sharings> fail:", err)
	}

	_, err = _do.Not().Or().Clauses().Take()
	if err != nil {
		t.Error("Not/Or/Clauses on table <workspace_sharings> fail:", err)
	}
}

var WorkspaceSharingORMGetRecordByIDTestCase = []TestCase{}

func Test_workspaceSharingORM_GetRecordByID(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMGetRecordByIDTestCase {
		t.Run("GetRecordByID_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetRecordByID(tt.Input.Args[0].(uint64))
			assert(t, "GetRecordByID", res1, tt.Expectation.Ret[0])
			assert(t, "GetRecordByID", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMGetRecordByIDsTestCase = []TestCase{}

func Test_workspaceSharingORM_GetRecordByIDs(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMGetRecordByIDsTestCase {
		t.Run("GetRecordByIDs_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetRecordByIDs(tt.Input.Args[0].([]uint64))
			assert(t, "GetRecordByIDs", res1, tt.Expectation.Ret[0])
			assert(t, "GetRecordByIDs", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMDeleteRecordByIDTestCase = []TestCase{}

func Test_workspaceSharingORM_DeleteRecordByID(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMDeleteRecordByIDTestCase {
		t.Run("DeleteRecordByID_"+strconv.Itoa(i), func(t *testing.T) {
			res1 := do.DeleteRecordByID(tt.Input.Args[0].(uint64))
			assert(t, "DeleteRecordByID", res1, tt.Expectation.Ret[0])
		})
	}
}

var WorkspaceSharingORMGetAllRecordsTestCase = []TestCase{}

func Test_workspaceSharingORM_GetAllRecords(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMGetAllRecordsTestCase {
		t.Run("GetAllRecords_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetAllRecords(tt.Input.Args[0].(string), tt.Input.Args[1].(int), tt.Input.Args[2].(int))
			assert(t, "GetAllRecords", res1, tt.Expectation.Ret[0])
			assert(t, "GetAllRecords", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMCountAllTestCase = []TestCase{}

func Test_workspaceSharingORM_CountAll(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMCountAllTestCase {
		t.Run("CountAll_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.CountAll()
			assert(t, "CountAll", res1, tt.Expectation.Ret[0])
			assert(t, "CountAll", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMGetByIDTestCase = []TestCase{}

func Test_workspaceSharingORM_GetByID(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMGetByIDTestCase {
		t.Run("GetByID_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetByID(tt.Input.Args[0].(uint64))
			assert(t, "GetByID", res1, tt.Expectation.Ret[0])
			assert(t, "GetByID", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMGetByIDsTestCase = []TestCase{}

func Test_workspaceSharingORM_GetByIDs(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMGetByIDsTestCase {
		t.Run("GetByIDs_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetByIDs(tt.Input.Args[0].([]uint64))
			assert(t, "GetByIDs", res1, tt.Expectation.Ret[0])
			assert(t, "GetByIDs", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMGetActivePaginatedTestCase = []TestCase{}

func Test_workspaceSharingORM_GetActivePaginated(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMGetActivePaginatedTestCase {
		t.Run("GetActivePaginated_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetActivePaginated(tt.Input.Args[0].(string), tt.Input.Args[1].(int), tt.Input.Args[2].(int))
			assert(t, "GetActivePaginated", res1, tt.Expectation.Ret[0])
			assert(t, "GetActivePaginated", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMGetDeletedTestCase = []TestCase{}

func Test_workspaceSharingORM_GetDeleted(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMGetDeletedTestCase {
		t.Run("GetDeleted_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetDeleted()
			assert(t, "GetDeleted", res1, tt.Expectation.Ret[0])
			assert(t, "GetDeleted", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMSoftDeleteTestCase = []TestCase{}

func Test_workspaceSharingORM_SoftDelete(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMSoftDeleteTestCase {
		t.Run("SoftDelete_"+strconv.Itoa(i), func(t *testing.T) {
			res1 := do.SoftDelete(tt.Input.Args[0].(uint64))
			assert(t, "SoftDelete", res1, tt.Expectation.Ret[0])
		})
	}
}

var WorkspaceSharingORMRestoreTestCase = []TestCase{}

func Test_workspaceSharingORM_Restore(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMRestoreTestCase {
		t.Run("Restore_"+strconv.Itoa(i), func(t *testing.T) {
			res1 := do.Restore(tt.Input.Args[0].(uint64))
			assert(t, "Restore", res1, tt.Expectation.Ret[0])
		})
	}
}

var WorkspaceSharingORMDeleteInBatchTestCase = []TestCase{}

func Test_workspaceSharingORM_DeleteInBatch(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMDeleteInBatchTestCase {
		t.Run("DeleteInBatch_"+strconv.Itoa(i), func(t *testing.T) {
			res1 := do.DeleteInBatch(tt.Input.Args[0].([]uint64), tt.Input.Args[1].(int))
			assert(t, "DeleteInBatch", res1, tt.Expectation.Ret[0])
		})
	}
}

var WorkspaceSharingORMGetByTimeRangeTestCase = []TestCase{}

func Test_workspaceSharingORM_GetByTimeRange(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMGetByTimeRangeTestCase {
		t.Run("GetByTimeRange_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetByTimeRange(tt.Input.Args[0].(time.Time), tt.Input.Args[1].(time.Time))
			assert(t, "GetByTimeRange", res1, tt.Expectation.Ret[0])
			assert(t, "GetByTimeRange", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMFindByTestCase = []TestCase{}

func Test_workspaceSharingORM_FindBy(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMFindByTestCase {
		t.Run("FindBy_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.FindBy(tt.Input.Args[0].(string), tt.Input.Args[1].(string), tt.Input.Args[2].(interface{}))
			assert(t, "FindBy", res1, tt.Expectation.Ret[0])
			assert(t, "FindBy", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMFindByPatternTestCase = []TestCase{}

func Test_workspaceSharingORM_FindByPattern(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMFindByPatternTestCase {
		t.Run("FindByPattern_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.FindByPattern(tt.Input.Args[0].(string), tt.Input.Args[1].(string))
			assert(t, "FindByPattern", res1, tt.Expectation.Ret[0])
			assert(t, "FindByPattern", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMGetDistinctTestCase = []TestCase{}

func Test_workspaceSharingORM_GetDistinct(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMGetDistinctTestCase {
		t.Run("GetDistinct_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetDistinct(tt.Input.Args[0].(string))
			assert(t, "GetDistinct", res1, tt.Expectation.Ret[0])
			assert(t, "GetDistinct", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMFindWithFiltersTestCase = []TestCase{}

func Test_workspaceSharingORM_FindWithFilters(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMFindWithFiltersTestCase {
		t.Run("FindWithFilters_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.FindWithFilters(tt.Input.Args[0].(map[string]interface{}), tt.Input.Args[1].(string), tt.Input.Args[2].(int), tt.Input.Args[3].(int))
			assert(t, "FindWithFilters", res1, tt.Expectation.Ret[0])
			assert(t, "FindWithFilters", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMTouchTestCase = []TestCase{}

func Test_workspaceSharingORM_Touch(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMTouchTestCase {
		t.Run("Touch_"+strconv.Itoa(i), func(t *testing.T) {
			res1 := do.Touch(tt.Input.Args[0].(uint64))
			assert(t, "Touch", res1, tt.Expectation.Ret[0])
		})
	}
}

var WorkspaceSharingORMExistsTestCase = []TestCase{}

func Test_workspaceSharingORM_Exists(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMExistsTestCase {
		t.Run("Exists_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.Exists(tt.Input.Args[0].(string), tt.Input.Args[1].(interface{}))
			assert(t, "Exists", res1, tt.Expectation.Ret[0])
			assert(t, "Exists", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMExistsByIdTestCase = []TestCase{}

func Test_workspaceSharingORM_ExistsById(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMExistsByIdTestCase {
		t.Run("ExistsById_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.ExistsById(tt.Input.Args[0].(uint64))
			assert(t, "ExistsById", res1, tt.Expectation.Ret[0])
			assert(t, "ExistsById", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMFindBySubqueryTestCase = []TestCase{}

func Test_workspaceSharingORM_FindBySubquery(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMFindBySubqueryTestCase {
		t.Run("FindBySubquery_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.FindBySubquery(tt.Input.Args[0].(string), tt.Input.Args[1].(string), tt.Input.Args[2].(string))
			assert(t, "FindBySubquery", res1, tt.Expectation.Ret[0])
			assert(t, "FindBySubquery", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMExistsAndGetTestCase = []TestCase{}

func Test_workspaceSharingORM_ExistsAndGet(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMExistsAndGetTestCase {
		t.Run("ExistsAndGet_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.ExistsAndGet(tt.Input.Args[0].(string), tt.Input.Args[1].(interface{}))
			assert(t, "ExistsAndGet", res1, tt.Expectation.Ret[0])
			assert(t, "ExistsAndGet", res2, tt.Expectation.Ret[1])
		})
	}
}

var WorkspaceSharingORMExistsAndGetActiveTestCase = []TestCase{}

func Test_workspaceSharingORM_ExistsAndGetActive(t *testing.T) {
	workspaceSharingORM := newWorkspaceSharingORM(_gen_test_db)
	do := workspaceSharingORM.WithContext(context.Background()).Debug()

	for i, tt := range WorkspaceSharingORMExistsAndGetActiveTestCase {
		t.Run("ExistsAndGetActive_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.ExistsAndGetActive(tt.Input.Args[0].(string), tt.Input.Args[1].(interface{}))
			assert(t, "ExistsAndGetActive", res1, tt.Expectation.Ret[0])
			assert(t, "ExistsAndGetActive", res2, tt.Expectation.Ret[1])
		})
	}
}
