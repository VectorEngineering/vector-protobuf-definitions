// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	workspace_servicev1 "github.com/VectorEngineering/vector-protobuf-definitions/api-definitions/pkg/generated/workspace_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"time"
)

func newWorkspaceORM(db *gorm.DB, opts ...gen.DOOption) workspaceORM {
	_workspaceORM := workspaceORM{}

	_workspaceORM.workspaceORMDo.UseDB(db, opts...)
	_workspaceORM.workspaceORMDo.UseModel(&workspace_servicev1.WorkspaceORM{})

	tableName := _workspaceORM.workspaceORMDo.TableName()
	_workspaceORM.ALL = field.NewAsterisk(tableName)
	_workspaceORM.AccountId = field.NewUint64(tableName, "account_id")
	_workspaceORM.AllowPublicSharing = field.NewBool(tableName, "allow_public_sharing")
	_workspaceORM.CreatedAt = field.NewTime(tableName, "created_at")
	_workspaceORM.DeletedAt = field.NewTime(tableName, "deleted_at")
	_workspaceORM.GdprCompliant = field.NewBool(tableName, "gdpr_compliant")
	_workspaceORM.HipaaCompliant = field.NewBool(tableName, "hipaa_compliant")
	_workspaceORM.Id = field.NewUint64(tableName, "id")
	_workspaceORM.Name = field.NewString(tableName, "name")
	_workspaceORM.RequireApproval = field.NewBool(tableName, "require_approval")
	_workspaceORM.S3BucketName = field.NewString(tableName, "s3_bucket_name")
	_workspaceORM.S3FolderPath = field.NewString(tableName, "s3_folder_path")
	_workspaceORM.StorageQuota = field.NewInt64(tableName, "storage_quota")
	_workspaceORM.UniqueIdentifier = field.NewString(tableName, "unique_identifier")
	_workspaceORM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_workspaceORM.UsedStorage = field.NewInt64(tableName, "used_storage")
	_workspaceORM.Activities = workspaceORMHasManyActivities{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Activities", "workspace_servicev1.WorkspaceActivityORM"),
	}

	_workspaceORM.Compliance = workspaceORMHasManyCompliance{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Compliance", "workspace_servicev1.WorkspaceComplianceORM"),
	}

	_workspaceORM.Folders = workspaceORMHasManyFolders{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Folders", "workspace_servicev1.FolderMetadataORM"),
		ChildFolders: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Folders.ChildFolders", "workspace_servicev1.FolderMetadataORM"),
		},
	}

	_workspaceORM.InstalledApps = workspaceORMHasManyInstalledApps{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("InstalledApps", "workspace_servicev1.MarketplaceAppORM"),
		Info: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("InstalledApps.Info", "workspace_servicev1.AppDevelopmentInfoORM"),
		},
		Analytics: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("InstalledApps.Analytics", "workspace_servicev1.AppAnalyticsORM"),
		},
		Installations: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("InstalledApps.Installations", "workspace_servicev1.AppInstallationORM"),
		},
		Permissions: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("InstalledApps.Permissions", "workspace_servicev1.AppPermissionORM"),
		},
		Reviews: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("InstalledApps.Reviews", "workspace_servicev1.AppReviewORM"),
		},
		Versions: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("InstalledApps.Versions", "workspace_servicev1.AppVersionORM"),
		},
		Webhooks: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("InstalledApps.Webhooks", "workspace_servicev1.AppWebhookORM"),
		},
	}

	_workspaceORM.Sharing = workspaceORMHasManySharing{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Sharing", "workspace_servicev1.WorkspaceSharingORM"),
	}

	_workspaceORM.Templates = workspaceORMHasManyTemplates{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Templates", "workspace_servicev1.DocumentTemplateORM"),
		Explanations: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Templates.Explanations", "workspace_servicev1.ExplanationBlockORM"),
		},
		Instances: struct {
			field.RelationField
			Negotiation struct {
				field.RelationField
				Rounds struct {
					field.RelationField
				}
			}
			AiAssistance struct {
				field.RelationField
			}
			SignatureRequests struct {
				field.RelationField
				Workflow struct {
					field.RelationField
				}
				SignatureBlocks struct {
					field.RelationField
				}
			}
			Versions struct {
				field.RelationField
				Branches struct {
					field.RelationField
					Policy struct {
						field.RelationField
					}
					MergeRequests struct {
						field.RelationField
					}
					Merges struct {
						field.RelationField
					}
				}
				Changes struct {
					field.RelationField
				}
				Summaries struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Templates.Instances", "workspace_servicev1.DocumentInstanceORM"),
			Negotiation: struct {
				field.RelationField
				Rounds struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Templates.Instances.Negotiation", "workspace_servicev1.NegotiationHistoryORM"),
				Rounds: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Templates.Instances.Negotiation.Rounds", "workspace_servicev1.NegotiationRoundORM"),
				},
			},
			AiAssistance: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Templates.Instances.AiAssistance", "workspace_servicev1.AIAssistanceLogORM"),
			},
			SignatureRequests: struct {
				field.RelationField
				Workflow struct {
					field.RelationField
				}
				SignatureBlocks struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Templates.Instances.SignatureRequests", "workspace_servicev1.SignatureRequestORM"),
				Workflow: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Templates.Instances.SignatureRequests.Workflow", "workspace_servicev1.SignatureWorkflowORM"),
				},
				SignatureBlocks: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Templates.Instances.SignatureRequests.SignatureBlocks", "workspace_servicev1.SignatureBlockORM"),
				},
			},
			Versions: struct {
				field.RelationField
				Branches struct {
					field.RelationField
					Policy struct {
						field.RelationField
					}
					MergeRequests struct {
						field.RelationField
					}
					Merges struct {
						field.RelationField
					}
				}
				Changes struct {
					field.RelationField
				}
				Summaries struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Templates.Instances.Versions", "workspace_servicev1.DocumentVersionORM"),
				Branches: struct {
					field.RelationField
					Policy struct {
						field.RelationField
					}
					MergeRequests struct {
						field.RelationField
					}
					Merges struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Templates.Instances.Versions.Branches", "workspace_servicev1.DocumentBranchORM"),
					Policy: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Templates.Instances.Versions.Branches.Policy", "workspace_servicev1.BranchPolicyORM"),
					},
					MergeRequests: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Templates.Instances.Versions.Branches.MergeRequests", "workspace_servicev1.MergeRequestORM"),
					},
					Merges: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Templates.Instances.Versions.Branches.Merges", "workspace_servicev1.BranchMergeORM"),
					},
				},
				Changes: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Templates.Instances.Versions.Changes", "workspace_servicev1.ChangeSetORM"),
				},
				Summaries: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Templates.Instances.Versions.Summaries", "workspace_servicev1.ContextualSummaryORM"),
				},
			},
		},
		Intelligence: struct {
			field.RelationField
			ComplianceChecks struct {
				field.RelationField
			}
			RiskAssessments struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Templates.Intelligence", "workspace_servicev1.ContractIntelligenceORM"),
			ComplianceChecks: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Templates.Intelligence.ComplianceChecks", "workspace_servicev1.ComplianceCheckORM"),
			},
			RiskAssessments: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Templates.Intelligence.RiskAssessments", "workspace_servicev1.RiskAssessmentORM"),
			},
		},
		Variables: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Templates.Variables", "workspace_servicev1.TemplateVariableORM"),
		},
		Versions: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Templates.Versions", "workspace_servicev1.TemplateVersionORM"),
		},
	}

	_workspaceORM.fillFieldMap()

	return _workspaceORM
}

type workspaceORM struct {
	workspaceORMDo

	ALL                field.Asterisk
	AccountId          field.Uint64
	AllowPublicSharing field.Bool
	CreatedAt          field.Time
	DeletedAt          field.Time
	GdprCompliant      field.Bool
	HipaaCompliant     field.Bool
	Id                 field.Uint64
	Name               field.String
	RequireApproval    field.Bool
	S3BucketName       field.String
	S3FolderPath       field.String
	StorageQuota       field.Int64
	UniqueIdentifier   field.String
	UpdatedAt          field.Time
	UsedStorage        field.Int64
	Activities         workspaceORMHasManyActivities

	Compliance workspaceORMHasManyCompliance

	Folders workspaceORMHasManyFolders

	InstalledApps workspaceORMHasManyInstalledApps

	Sharing workspaceORMHasManySharing

	Templates workspaceORMHasManyTemplates

	fieldMap map[string]field.Expr
}

func (w workspaceORM) Table(newTableName string) *workspaceORM {
	w.workspaceORMDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w workspaceORM) As(alias string) *workspaceORM {
	w.workspaceORMDo.DO = *(w.workspaceORMDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *workspaceORM) updateTableName(table string) *workspaceORM {
	w.ALL = field.NewAsterisk(table)
	w.AccountId = field.NewUint64(table, "account_id")
	w.AllowPublicSharing = field.NewBool(table, "allow_public_sharing")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.DeletedAt = field.NewTime(table, "deleted_at")
	w.GdprCompliant = field.NewBool(table, "gdpr_compliant")
	w.HipaaCompliant = field.NewBool(table, "hipaa_compliant")
	w.Id = field.NewUint64(table, "id")
	w.Name = field.NewString(table, "name")
	w.RequireApproval = field.NewBool(table, "require_approval")
	w.S3BucketName = field.NewString(table, "s3_bucket_name")
	w.S3FolderPath = field.NewString(table, "s3_folder_path")
	w.StorageQuota = field.NewInt64(table, "storage_quota")
	w.UniqueIdentifier = field.NewString(table, "unique_identifier")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.UsedStorage = field.NewInt64(table, "used_storage")

	w.fillFieldMap()

	return w
}

func (w *workspaceORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *workspaceORM) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 21)
	w.fieldMap["account_id"] = w.AccountId
	w.fieldMap["allow_public_sharing"] = w.AllowPublicSharing
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["deleted_at"] = w.DeletedAt
	w.fieldMap["gdpr_compliant"] = w.GdprCompliant
	w.fieldMap["hipaa_compliant"] = w.HipaaCompliant
	w.fieldMap["id"] = w.Id
	w.fieldMap["name"] = w.Name
	w.fieldMap["require_approval"] = w.RequireApproval
	w.fieldMap["s3_bucket_name"] = w.S3BucketName
	w.fieldMap["s3_folder_path"] = w.S3FolderPath
	w.fieldMap["storage_quota"] = w.StorageQuota
	w.fieldMap["unique_identifier"] = w.UniqueIdentifier
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["used_storage"] = w.UsedStorage

}

func (w workspaceORM) clone(db *gorm.DB) workspaceORM {
	w.workspaceORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w workspaceORM) replaceDB(db *gorm.DB) workspaceORM {
	w.workspaceORMDo.ReplaceDB(db)
	return w
}

type workspaceORMHasManyActivities struct {
	db *gorm.DB

	field.RelationField
}

func (a workspaceORMHasManyActivities) Where(conds ...field.Expr) *workspaceORMHasManyActivities {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workspaceORMHasManyActivities) WithContext(ctx context.Context) *workspaceORMHasManyActivities {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workspaceORMHasManyActivities) Session(session *gorm.Session) *workspaceORMHasManyActivities {
	a.db = a.db.Session(session)
	return &a
}

func (a workspaceORMHasManyActivities) Model(m *workspace_servicev1.WorkspaceORM) *workspaceORMHasManyActivitiesTx {
	return &workspaceORMHasManyActivitiesTx{a.db.Model(m).Association(a.Name())}
}

type workspaceORMHasManyActivitiesTx struct{ tx *gorm.Association }

func (a workspaceORMHasManyActivitiesTx) Find() (result []*workspace_servicev1.WorkspaceActivityORM, err error) {
	return result, a.tx.Find(&result)
}

func (a workspaceORMHasManyActivitiesTx) Append(values ...*workspace_servicev1.WorkspaceActivityORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workspaceORMHasManyActivitiesTx) Replace(values ...*workspace_servicev1.WorkspaceActivityORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workspaceORMHasManyActivitiesTx) Delete(values ...*workspace_servicev1.WorkspaceActivityORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workspaceORMHasManyActivitiesTx) Clear() error {
	return a.tx.Clear()
}

func (a workspaceORMHasManyActivitiesTx) Count() int64 {
	return a.tx.Count()
}

type workspaceORMHasManyCompliance struct {
	db *gorm.DB

	field.RelationField
}

func (a workspaceORMHasManyCompliance) Where(conds ...field.Expr) *workspaceORMHasManyCompliance {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workspaceORMHasManyCompliance) WithContext(ctx context.Context) *workspaceORMHasManyCompliance {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workspaceORMHasManyCompliance) Session(session *gorm.Session) *workspaceORMHasManyCompliance {
	a.db = a.db.Session(session)
	return &a
}

func (a workspaceORMHasManyCompliance) Model(m *workspace_servicev1.WorkspaceORM) *workspaceORMHasManyComplianceTx {
	return &workspaceORMHasManyComplianceTx{a.db.Model(m).Association(a.Name())}
}

type workspaceORMHasManyComplianceTx struct{ tx *gorm.Association }

func (a workspaceORMHasManyComplianceTx) Find() (result []*workspace_servicev1.WorkspaceComplianceORM, err error) {
	return result, a.tx.Find(&result)
}

func (a workspaceORMHasManyComplianceTx) Append(values ...*workspace_servicev1.WorkspaceComplianceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workspaceORMHasManyComplianceTx) Replace(values ...*workspace_servicev1.WorkspaceComplianceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workspaceORMHasManyComplianceTx) Delete(values ...*workspace_servicev1.WorkspaceComplianceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workspaceORMHasManyComplianceTx) Clear() error {
	return a.tx.Clear()
}

func (a workspaceORMHasManyComplianceTx) Count() int64 {
	return a.tx.Count()
}

type workspaceORMHasManyFolders struct {
	db *gorm.DB

	field.RelationField

	ChildFolders struct {
		field.RelationField
	}
}

func (a workspaceORMHasManyFolders) Where(conds ...field.Expr) *workspaceORMHasManyFolders {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workspaceORMHasManyFolders) WithContext(ctx context.Context) *workspaceORMHasManyFolders {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workspaceORMHasManyFolders) Session(session *gorm.Session) *workspaceORMHasManyFolders {
	a.db = a.db.Session(session)
	return &a
}

func (a workspaceORMHasManyFolders) Model(m *workspace_servicev1.WorkspaceORM) *workspaceORMHasManyFoldersTx {
	return &workspaceORMHasManyFoldersTx{a.db.Model(m).Association(a.Name())}
}

type workspaceORMHasManyFoldersTx struct{ tx *gorm.Association }

func (a workspaceORMHasManyFoldersTx) Find() (result []*workspace_servicev1.FolderMetadataORM, err error) {
	return result, a.tx.Find(&result)
}

func (a workspaceORMHasManyFoldersTx) Append(values ...*workspace_servicev1.FolderMetadataORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workspaceORMHasManyFoldersTx) Replace(values ...*workspace_servicev1.FolderMetadataORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workspaceORMHasManyFoldersTx) Delete(values ...*workspace_servicev1.FolderMetadataORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workspaceORMHasManyFoldersTx) Clear() error {
	return a.tx.Clear()
}

func (a workspaceORMHasManyFoldersTx) Count() int64 {
	return a.tx.Count()
}

type workspaceORMHasManyInstalledApps struct {
	db *gorm.DB

	field.RelationField

	Info struct {
		field.RelationField
	}
	Analytics struct {
		field.RelationField
	}
	Installations struct {
		field.RelationField
	}
	Permissions struct {
		field.RelationField
	}
	Reviews struct {
		field.RelationField
	}
	Versions struct {
		field.RelationField
	}
	Webhooks struct {
		field.RelationField
	}
}

func (a workspaceORMHasManyInstalledApps) Where(conds ...field.Expr) *workspaceORMHasManyInstalledApps {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workspaceORMHasManyInstalledApps) WithContext(ctx context.Context) *workspaceORMHasManyInstalledApps {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workspaceORMHasManyInstalledApps) Session(session *gorm.Session) *workspaceORMHasManyInstalledApps {
	a.db = a.db.Session(session)
	return &a
}

func (a workspaceORMHasManyInstalledApps) Model(m *workspace_servicev1.WorkspaceORM) *workspaceORMHasManyInstalledAppsTx {
	return &workspaceORMHasManyInstalledAppsTx{a.db.Model(m).Association(a.Name())}
}

type workspaceORMHasManyInstalledAppsTx struct{ tx *gorm.Association }

func (a workspaceORMHasManyInstalledAppsTx) Find() (result []*workspace_servicev1.MarketplaceAppORM, err error) {
	return result, a.tx.Find(&result)
}

func (a workspaceORMHasManyInstalledAppsTx) Append(values ...*workspace_servicev1.MarketplaceAppORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workspaceORMHasManyInstalledAppsTx) Replace(values ...*workspace_servicev1.MarketplaceAppORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workspaceORMHasManyInstalledAppsTx) Delete(values ...*workspace_servicev1.MarketplaceAppORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workspaceORMHasManyInstalledAppsTx) Clear() error {
	return a.tx.Clear()
}

func (a workspaceORMHasManyInstalledAppsTx) Count() int64 {
	return a.tx.Count()
}

type workspaceORMHasManySharing struct {
	db *gorm.DB

	field.RelationField
}

func (a workspaceORMHasManySharing) Where(conds ...field.Expr) *workspaceORMHasManySharing {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workspaceORMHasManySharing) WithContext(ctx context.Context) *workspaceORMHasManySharing {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workspaceORMHasManySharing) Session(session *gorm.Session) *workspaceORMHasManySharing {
	a.db = a.db.Session(session)
	return &a
}

func (a workspaceORMHasManySharing) Model(m *workspace_servicev1.WorkspaceORM) *workspaceORMHasManySharingTx {
	return &workspaceORMHasManySharingTx{a.db.Model(m).Association(a.Name())}
}

type workspaceORMHasManySharingTx struct{ tx *gorm.Association }

func (a workspaceORMHasManySharingTx) Find() (result []*workspace_servicev1.WorkspaceSharingORM, err error) {
	return result, a.tx.Find(&result)
}

func (a workspaceORMHasManySharingTx) Append(values ...*workspace_servicev1.WorkspaceSharingORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workspaceORMHasManySharingTx) Replace(values ...*workspace_servicev1.WorkspaceSharingORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workspaceORMHasManySharingTx) Delete(values ...*workspace_servicev1.WorkspaceSharingORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workspaceORMHasManySharingTx) Clear() error {
	return a.tx.Clear()
}

func (a workspaceORMHasManySharingTx) Count() int64 {
	return a.tx.Count()
}

type workspaceORMHasManyTemplates struct {
	db *gorm.DB

	field.RelationField

	Explanations struct {
		field.RelationField
	}
	Instances struct {
		field.RelationField
		Negotiation struct {
			field.RelationField
			Rounds struct {
				field.RelationField
			}
		}
		AiAssistance struct {
			field.RelationField
		}
		SignatureRequests struct {
			field.RelationField
			Workflow struct {
				field.RelationField
			}
			SignatureBlocks struct {
				field.RelationField
			}
		}
		Versions struct {
			field.RelationField
			Branches struct {
				field.RelationField
				Policy struct {
					field.RelationField
				}
				MergeRequests struct {
					field.RelationField
				}
				Merges struct {
					field.RelationField
				}
			}
			Changes struct {
				field.RelationField
			}
			Summaries struct {
				field.RelationField
			}
		}
	}
	Intelligence struct {
		field.RelationField
		ComplianceChecks struct {
			field.RelationField
		}
		RiskAssessments struct {
			field.RelationField
		}
	}
	Variables struct {
		field.RelationField
	}
	Versions struct {
		field.RelationField
	}
}

func (a workspaceORMHasManyTemplates) Where(conds ...field.Expr) *workspaceORMHasManyTemplates {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workspaceORMHasManyTemplates) WithContext(ctx context.Context) *workspaceORMHasManyTemplates {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workspaceORMHasManyTemplates) Session(session *gorm.Session) *workspaceORMHasManyTemplates {
	a.db = a.db.Session(session)
	return &a
}

func (a workspaceORMHasManyTemplates) Model(m *workspace_servicev1.WorkspaceORM) *workspaceORMHasManyTemplatesTx {
	return &workspaceORMHasManyTemplatesTx{a.db.Model(m).Association(a.Name())}
}

type workspaceORMHasManyTemplatesTx struct{ tx *gorm.Association }

func (a workspaceORMHasManyTemplatesTx) Find() (result []*workspace_servicev1.DocumentTemplateORM, err error) {
	return result, a.tx.Find(&result)
}

func (a workspaceORMHasManyTemplatesTx) Append(values ...*workspace_servicev1.DocumentTemplateORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workspaceORMHasManyTemplatesTx) Replace(values ...*workspace_servicev1.DocumentTemplateORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workspaceORMHasManyTemplatesTx) Delete(values ...*workspace_servicev1.DocumentTemplateORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workspaceORMHasManyTemplatesTx) Clear() error {
	return a.tx.Clear()
}

func (a workspaceORMHasManyTemplatesTx) Count() int64 {
	return a.tx.Count()
}

type workspaceORMDo struct{ gen.DO }

type IWorkspaceORMDo interface {
	gen.SubQuery
	Debug() IWorkspaceORMDo
	WithContext(ctx context.Context) IWorkspaceORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWorkspaceORMDo
	WriteDB() IWorkspaceORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWorkspaceORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWorkspaceORMDo
	Not(conds ...gen.Condition) IWorkspaceORMDo
	Or(conds ...gen.Condition) IWorkspaceORMDo
	Select(conds ...field.Expr) IWorkspaceORMDo
	Where(conds ...gen.Condition) IWorkspaceORMDo
	Order(conds ...field.Expr) IWorkspaceORMDo
	Distinct(cols ...field.Expr) IWorkspaceORMDo
	Omit(cols ...field.Expr) IWorkspaceORMDo
	Join(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo
	Group(cols ...field.Expr) IWorkspaceORMDo
	Having(conds ...gen.Condition) IWorkspaceORMDo
	Limit(limit int) IWorkspaceORMDo
	Offset(offset int) IWorkspaceORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkspaceORMDo
	Unscoped() IWorkspaceORMDo
	Create(values ...*workspace_servicev1.WorkspaceORM) error
	CreateInBatches(values []*workspace_servicev1.WorkspaceORM, batchSize int) error
	Save(values ...*workspace_servicev1.WorkspaceORM) error
	First() (*workspace_servicev1.WorkspaceORM, error)
	Take() (*workspace_servicev1.WorkspaceORM, error)
	Last() (*workspace_servicev1.WorkspaceORM, error)
	Find() ([]*workspace_servicev1.WorkspaceORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.WorkspaceORM, err error)
	FindInBatches(result *[]*workspace_servicev1.WorkspaceORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*workspace_servicev1.WorkspaceORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWorkspaceORMDo
	Assign(attrs ...field.AssignExpr) IWorkspaceORMDo
	Joins(fields ...field.RelationField) IWorkspaceORMDo
	Preload(fields ...field.RelationField) IWorkspaceORMDo
	FirstOrInit() (*workspace_servicev1.WorkspaceORM, error)
	FirstOrCreate() (*workspace_servicev1.WorkspaceORM, error)
	FindByPage(offset int, limit int) (result []*workspace_servicev1.WorkspaceORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWorkspaceORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id uint64) (result workspace_servicev1.WorkspaceORM, err error)
	GetRecordByIDs(ids []uint64) (result []workspace_servicev1.WorkspaceORM, err error)
	DeleteRecordByID(id uint64) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.WorkspaceORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result workspace_servicev1.WorkspaceORM, err error)
	GetByIDs(ids []uint64) (result []workspace_servicev1.WorkspaceORM, err error)
	GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.WorkspaceORM, err error)
	GetDeleted() (result []workspace_servicev1.WorkspaceORM, err error)
	SoftDelete(id uint64) (err error)
	Restore(id uint64) (err error)
	DeleteInBatch(ids []uint64, batchSize int) (err error)
	GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.WorkspaceORM, err error)
	FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.WorkspaceORM, err error)
	FindByPattern(columnName string, pattern string) (result []workspace_servicev1.WorkspaceORM, err error)
	GetDistinct(columnName string) (result []workspace_servicev1.WorkspaceORM, err error)
	FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.WorkspaceORM, err error)
	Touch(id uint64) (err error)
	Exists(column string, value interface{}) (result bool, err error)
	ExistsById(id uint64) (result bool, err error)
	FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.WorkspaceORM, err error)
	ExistsAndGet(column string, value interface{}) (result workspace_servicev1.WorkspaceORM, err error)
	ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.WorkspaceORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) GetRecordByID(id uint64) (result workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (w workspaceORMDo) GetRecordByIDs(ids []uint64) (result []workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) DeleteRecordByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
// LIMIT @limit
// OFFSET @offset
func (w workspaceORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM workspaces ORDER BY " + w.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (w workspaceORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM workspaces ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) GetByID(id uint64) (result workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (w workspaceORMDo) GetByIDs(ids []uint64) (result []workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NULL
//
// {{end}}
// ORDER BY @@orderColumn
// LIMIT @limit OFFSET @offset
func (w workspaceORMDo) GetActivePaginated(orderColumn string, limit int, offset int) (result []workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY " + w.Quote(orderColumn) + " LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	deleted_at IS NOT NULL
//
// {{end}}
func (w workspaceORMDo) GetDeleted() (result []workspace_servicev1.WorkspaceORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	whereSQL0.WriteString("deleted_at IS NOT NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) SoftDelete(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE workspaces SET deleted_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET deleted_at=NULL
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) Restore(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE workspaces SET deleted_at=NULL ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
// LIMIT @batchSize
func (w workspaceORMDo) DeleteInBatch(ids []uint64, batchSize int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, batchSize)
	generateSQL.WriteString("LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	created_at BETWEEN @startTime AND @endTime
//
// {{end}}
func (w workspaceORMDo) GetByTimeRange(startTime time.Time, endTime time.Time) (result []workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, startTime)
	params = append(params, endTime)
	whereSQL0.WriteString("created_at BETWEEN ? AND ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name @operator @value
//
// {{end}}
func (w workspaceORMDo) FindBy(columnName string, operator string, value interface{}) (result []workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, operator)
	params = append(params, value)
	whereSQL0.WriteString("column_name ?? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	column_name LIKE @pattern
//
// {{end}}
func (w workspaceORMDo) FindByPattern(columnName string, pattern string) (result []workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, pattern)
	whereSQL0.WriteString("column_name LIKE ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT DISTINCT column_name FROM @@table
func (w workspaceORMDo) GetDistinct(columnName string) (result []workspace_servicev1.WorkspaceORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT DISTINCT column_name FROM workspaces ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@conditions
//
// {{end}}
// ORDER BY @orderBy
// LIMIT @limit OFFSET @offset
func (w workspaceORMDo) FindWithFilters(conditions map[string]interface{}, orderBy string, limit int, offset int) (result []workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, conditions)
	whereSQL0.WriteString("? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, orderBy)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY ? LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET updated_at=CURRENT_TIMESTAMP
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) Touch(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE workspaces SET updated_at=CURRENT_TIMESTAMP ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// )
func (w workspaceORMDo) Exists(column string, value interface{}) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     id = @id
//	 {{end}}
//
// )
func (w workspaceORMDo) ExistsById(id uint64) (result bool, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString(") ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	@column IN (SELECT @foreignKey FROM @foreignTable)
//
// {{end}}
func (w workspaceORMDo) FindBySubquery(column string, foreignTable string, foreignKey string) (result []workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, foreignKey)
	params = append(params, foreignTable)
	whereSQL0.WriteString("? IN (SELECT ? FROM ?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (w workspaceORMDo) ExistsAndGet(column string, value interface{}) (result workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM workspaces ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT EXISTS(
//
//	SELECT 1 FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//
// ), COALESCE((
//
//	SELECT @column FROM @@table
//	 {{where}}
//	     @column = @value AND deleted_at IS NULL
//	 {{end}}
//	LIMIT 1
//
// ), NULL)
func (w workspaceORMDo) ExistsAndGetActive(column string, value interface{}) (result workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT EXISTS( SELECT 1 FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL0.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, column)
	generateSQL.WriteString("), COALESCE(( SELECT ? FROM workspaces ")
	var whereSQL1 strings.Builder
	params = append(params, column)
	params = append(params, value)
	whereSQL1.WriteString("? = ? AND deleted_at IS NULL ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL1)
	generateSQL.WriteString("LIMIT 1 ), NULL) ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (w workspaceORMDo) Debug() IWorkspaceORMDo {
	return w.withDO(w.DO.Debug())
}

func (w workspaceORMDo) WithContext(ctx context.Context) IWorkspaceORMDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w workspaceORMDo) ReadDB() IWorkspaceORMDo {
	return w.Clauses(dbresolver.Read)
}

func (w workspaceORMDo) WriteDB() IWorkspaceORMDo {
	return w.Clauses(dbresolver.Write)
}

func (w workspaceORMDo) Session(config *gorm.Session) IWorkspaceORMDo {
	return w.withDO(w.DO.Session(config))
}

func (w workspaceORMDo) Clauses(conds ...clause.Expression) IWorkspaceORMDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w workspaceORMDo) Returning(value interface{}, columns ...string) IWorkspaceORMDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w workspaceORMDo) Not(conds ...gen.Condition) IWorkspaceORMDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w workspaceORMDo) Or(conds ...gen.Condition) IWorkspaceORMDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w workspaceORMDo) Select(conds ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w workspaceORMDo) Where(conds ...gen.Condition) IWorkspaceORMDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w workspaceORMDo) Order(conds ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w workspaceORMDo) Distinct(cols ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w workspaceORMDo) Omit(cols ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w workspaceORMDo) Join(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w workspaceORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w workspaceORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w workspaceORMDo) Group(cols ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w workspaceORMDo) Having(conds ...gen.Condition) IWorkspaceORMDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w workspaceORMDo) Limit(limit int) IWorkspaceORMDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w workspaceORMDo) Offset(offset int) IWorkspaceORMDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w workspaceORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkspaceORMDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w workspaceORMDo) Unscoped() IWorkspaceORMDo {
	return w.withDO(w.DO.Unscoped())
}

func (w workspaceORMDo) Create(values ...*workspace_servicev1.WorkspaceORM) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w workspaceORMDo) CreateInBatches(values []*workspace_servicev1.WorkspaceORM, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w workspaceORMDo) Save(values ...*workspace_servicev1.WorkspaceORM) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w workspaceORMDo) First() (*workspace_servicev1.WorkspaceORM, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.WorkspaceORM), nil
	}
}

func (w workspaceORMDo) Take() (*workspace_servicev1.WorkspaceORM, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.WorkspaceORM), nil
	}
}

func (w workspaceORMDo) Last() (*workspace_servicev1.WorkspaceORM, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.WorkspaceORM), nil
	}
}

func (w workspaceORMDo) Find() ([]*workspace_servicev1.WorkspaceORM, error) {
	result, err := w.DO.Find()
	return result.([]*workspace_servicev1.WorkspaceORM), err
}

func (w workspaceORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.WorkspaceORM, err error) {
	buf := make([]*workspace_servicev1.WorkspaceORM, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w workspaceORMDo) FindInBatches(result *[]*workspace_servicev1.WorkspaceORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w workspaceORMDo) Attrs(attrs ...field.AssignExpr) IWorkspaceORMDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w workspaceORMDo) Assign(attrs ...field.AssignExpr) IWorkspaceORMDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w workspaceORMDo) Joins(fields ...field.RelationField) IWorkspaceORMDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w workspaceORMDo) Preload(fields ...field.RelationField) IWorkspaceORMDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w workspaceORMDo) FirstOrInit() (*workspace_servicev1.WorkspaceORM, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.WorkspaceORM), nil
	}
}

func (w workspaceORMDo) FirstOrCreate() (*workspace_servicev1.WorkspaceORM, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.WorkspaceORM), nil
	}
}

func (w workspaceORMDo) FindByPage(offset int, limit int) (result []*workspace_servicev1.WorkspaceORM, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w workspaceORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w workspaceORMDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w workspaceORMDo) Delete(models ...*workspace_servicev1.WorkspaceORM) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *workspaceORMDo) withDO(do gen.Dao) *workspaceORMDo {
	w.DO = *do.(*gen.DO)
	return w
}
