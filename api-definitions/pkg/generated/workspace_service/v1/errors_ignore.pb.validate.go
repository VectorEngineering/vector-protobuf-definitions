// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: workspace_service/v1/errors_ignore.proto

package workspace_servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ErrorResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorResponseMultiError, or
// nil if none found.
func (m *ErrorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ErrorResponseMultiError(errors)
	}

	return nil
}

// ErrorResponseMultiError is an error wrapping multiple validation errors
// returned by ErrorResponse.ValidateAll() if the designated constraints
// aren't met.
type ErrorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorResponseMultiError) AllErrors() []error { return m }

// ErrorResponseValidationError is the validation error returned by
// ErrorResponse.Validate if the designated constraints aren't met.
type ErrorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorResponseValidationError) ErrorName() string { return "ErrorResponseValidationError" }

// Error satisfies the builtin error interface
func (e ErrorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorResponseValidationError{}

// Validate checks the field values on AuthenticationErrorMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AuthenticationErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticationErrorMessageResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AuthenticationErrorMessageResponseMultiError, or nil if none found.
func (m *AuthenticationErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticationErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetTokenInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticationErrorMessageResponseValidationError{
					field:  "TokenInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticationErrorMessageResponseValidationError{
					field:  "TokenInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokenInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticationErrorMessageResponseValidationError{
				field:  "TokenInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuthContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticationErrorMessageResponseValidationError{
					field:  "AuthContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticationErrorMessageResponseValidationError{
					field:  "AuthContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticationErrorMessageResponseValidationError{
				field:  "AuthContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSessionInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticationErrorMessageResponseValidationError{
					field:  "SessionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticationErrorMessageResponseValidationError{
					field:  "SessionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSessionInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticationErrorMessageResponseValidationError{
				field:  "SessionInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMfaInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticationErrorMessageResponseValidationError{
					field:  "MfaInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticationErrorMessageResponseValidationError{
					field:  "MfaInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMfaInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticationErrorMessageResponseValidationError{
				field:  "MfaInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticationErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticationErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticationErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthenticationErrorMessageResponseMultiError(errors)
	}

	return nil
}

// AuthenticationErrorMessageResponseMultiError is an error wrapping multiple
// validation errors returned by
// AuthenticationErrorMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthenticationErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticationErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticationErrorMessageResponseMultiError) AllErrors() []error { return m }

// AuthenticationErrorMessageResponseValidationError is the validation error
// returned by AuthenticationErrorMessageResponse.Validate if the designated
// constraints aren't met.
type AuthenticationErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticationErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticationErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticationErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticationErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticationErrorMessageResponseValidationError) ErrorName() string {
	return "AuthenticationErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticationErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticationErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticationErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticationErrorMessageResponseValidationError{}

// Validate checks the field values on ValidationErrorMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidationErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidationErrorMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ValidationErrorMessageResponseMultiError, or nil if none found.
func (m *ValidationErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidationErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetFieldViolations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidationErrorMessageResponseValidationError{
						field:  fmt.Sprintf("FieldViolations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidationErrorMessageResponseValidationError{
						field:  fmt.Sprintf("FieldViolations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidationErrorMessageResponseValidationError{
					field:  fmt.Sprintf("FieldViolations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSchemaValidation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidationErrorMessageResponseValidationError{
					field:  "SchemaValidation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidationErrorMessageResponseValidationError{
					field:  "SchemaValidation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchemaValidation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidationErrorMessageResponseValidationError{
				field:  "SchemaValidation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResourceValidation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidationErrorMessageResponseValidationError{
					field:  "ResourceValidation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidationErrorMessageResponseValidationError{
					field:  "ResourceValidation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceValidation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidationErrorMessageResponseValidationError{
				field:  "ResourceValidation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidationErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidationErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidationErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ValidationErrorMessageResponseMultiError(errors)
	}

	return nil
}

// ValidationErrorMessageResponseMultiError is an error wrapping multiple
// validation errors returned by ValidationErrorMessageResponse.ValidateAll()
// if the designated constraints aren't met.
type ValidationErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidationErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidationErrorMessageResponseMultiError) AllErrors() []error { return m }

// ValidationErrorMessageResponseValidationError is the validation error
// returned by ValidationErrorMessageResponse.Validate if the designated
// constraints aren't met.
type ValidationErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidationErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidationErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidationErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidationErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidationErrorMessageResponseValidationError) ErrorName() string {
	return "ValidationErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidationErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidationErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidationErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidationErrorMessageResponseValidationError{}

// Validate checks the field values on InternalErrorMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InternalErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InternalErrorMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InternalErrorMessageResponseMultiError, or nil if none found.
func (m *InternalErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InternalErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for IncidentId

	if all {
		switch v := interface{}(m.GetServiceStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InternalErrorMessageResponseValidationError{
					field:  "ServiceStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InternalErrorMessageResponseValidationError{
					field:  "ServiceStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InternalErrorMessageResponseValidationError{
				field:  "ServiceStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResourceUtilization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InternalErrorMessageResponseValidationError{
					field:  "ResourceUtilization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InternalErrorMessageResponseValidationError{
					field:  "ResourceUtilization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceUtilization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InternalErrorMessageResponseValidationError{
				field:  "ResourceUtilization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperationDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InternalErrorMessageResponseValidationError{
					field:  "OperationDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InternalErrorMessageResponseValidationError{
					field:  "OperationDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperationDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InternalErrorMessageResponseValidationError{
				field:  "OperationDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InternalErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InternalErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InternalErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InternalErrorMessageResponseMultiError(errors)
	}

	return nil
}

// InternalErrorMessageResponseMultiError is an error wrapping multiple
// validation errors returned by InternalErrorMessageResponse.ValidateAll() if
// the designated constraints aren't met.
type InternalErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InternalErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InternalErrorMessageResponseMultiError) AllErrors() []error { return m }

// InternalErrorMessageResponseValidationError is the validation error returned
// by InternalErrorMessageResponse.Validate if the designated constraints
// aren't met.
type InternalErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InternalErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InternalErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InternalErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InternalErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InternalErrorMessageResponseValidationError) ErrorName() string {
	return "InternalErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InternalErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInternalErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InternalErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InternalErrorMessageResponseValidationError{}

// Validate checks the field values on NotFoundErrorMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotFoundErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotFoundErrorMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotFoundErrorMessageResponseMultiError, or nil if none found.
func (m *NotFoundErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NotFoundErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetResourceInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotFoundErrorMessageResponseValidationError{
					field:  "ResourceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotFoundErrorMessageResponseValidationError{
					field:  "ResourceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotFoundErrorMessageResponseValidationError{
				field:  "ResourceInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSuggestions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotFoundErrorMessageResponseValidationError{
					field:  "Suggestions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotFoundErrorMessageResponseValidationError{
					field:  "Suggestions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuggestions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotFoundErrorMessageResponseValidationError{
				field:  "Suggestions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApiInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotFoundErrorMessageResponseValidationError{
					field:  "ApiInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotFoundErrorMessageResponseValidationError{
					field:  "ApiInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApiInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotFoundErrorMessageResponseValidationError{
				field:  "ApiInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotFoundErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotFoundErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotFoundErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotFoundErrorMessageResponseMultiError(errors)
	}

	return nil
}

// NotFoundErrorMessageResponseMultiError is an error wrapping multiple
// validation errors returned by NotFoundErrorMessageResponse.ValidateAll() if
// the designated constraints aren't met.
type NotFoundErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotFoundErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotFoundErrorMessageResponseMultiError) AllErrors() []error { return m }

// NotFoundErrorMessageResponseValidationError is the validation error returned
// by NotFoundErrorMessageResponse.Validate if the designated constraints
// aren't met.
type NotFoundErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotFoundErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotFoundErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotFoundErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotFoundErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotFoundErrorMessageResponseValidationError) ErrorName() string {
	return "NotFoundErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NotFoundErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotFoundErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotFoundErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotFoundErrorMessageResponseValidationError{}

// Validate checks the field values on RateLimitErrorMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RateLimitErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RateLimitErrorMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RateLimitErrorMessageResponseMultiError, or nil if none found.
func (m *RateLimitErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RateLimitErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetLimitInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RateLimitErrorMessageResponseValidationError{
					field:  "LimitInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RateLimitErrorMessageResponseValidationError{
					field:  "LimitInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLimitInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RateLimitErrorMessageResponseValidationError{
				field:  "LimitInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuotaInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RateLimitErrorMessageResponseValidationError{
					field:  "QuotaInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RateLimitErrorMessageResponseValidationError{
					field:  "QuotaInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotaInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RateLimitErrorMessageResponseValidationError{
				field:  "QuotaInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RateLimitErrorMessageResponseValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RateLimitErrorMessageResponseValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RateLimitErrorMessageResponseValidationError{
				field:  "Context",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RateLimitErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RateLimitErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RateLimitErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RateLimitErrorMessageResponseMultiError(errors)
	}

	return nil
}

// RateLimitErrorMessageResponseMultiError is an error wrapping multiple
// validation errors returned by RateLimitErrorMessageResponse.ValidateAll()
// if the designated constraints aren't met.
type RateLimitErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RateLimitErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RateLimitErrorMessageResponseMultiError) AllErrors() []error { return m }

// RateLimitErrorMessageResponseValidationError is the validation error
// returned by RateLimitErrorMessageResponse.Validate if the designated
// constraints aren't met.
type RateLimitErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RateLimitErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RateLimitErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RateLimitErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RateLimitErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RateLimitErrorMessageResponseValidationError) ErrorName() string {
	return "RateLimitErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RateLimitErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRateLimitErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RateLimitErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RateLimitErrorMessageResponseValidationError{}

// Validate checks the field values on ConflictErrorMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConflictErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConflictErrorMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConflictErrorMessageResponseMultiError, or nil if none found.
func (m *ConflictErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConflictErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetConflictInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConflictErrorMessageResponseValidationError{
					field:  "ConflictInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConflictErrorMessageResponseValidationError{
					field:  "ConflictInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConflictInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConflictErrorMessageResponseValidationError{
				field:  "ConflictInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConflictErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConflictErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConflictErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConflictErrorMessageResponseMultiError(errors)
	}

	return nil
}

// ConflictErrorMessageResponseMultiError is an error wrapping multiple
// validation errors returned by ConflictErrorMessageResponse.ValidateAll() if
// the designated constraints aren't met.
type ConflictErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConflictErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConflictErrorMessageResponseMultiError) AllErrors() []error { return m }

// ConflictErrorMessageResponseValidationError is the validation error returned
// by ConflictErrorMessageResponse.Validate if the designated constraints
// aren't met.
type ConflictErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConflictErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConflictErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConflictErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConflictErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConflictErrorMessageResponseValidationError) ErrorName() string {
	return "ConflictErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConflictErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConflictErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConflictErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConflictErrorMessageResponseValidationError{}

// Validate checks the field values on ServiceUnavailableErrorMessageResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ServiceUnavailableErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ServiceUnavailableErrorMessageResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ServiceUnavailableErrorMessageResponseMultiError, or nil if none found.
func (m *ServiceUnavailableErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceUnavailableErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetAvailabilityInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceUnavailableErrorMessageResponseValidationError{
					field:  "AvailabilityInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceUnavailableErrorMessageResponseValidationError{
					field:  "AvailabilityInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailabilityInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceUnavailableErrorMessageResponseValidationError{
				field:  "AvailabilityInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceUnavailableErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceUnavailableErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceUnavailableErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServiceUnavailableErrorMessageResponseMultiError(errors)
	}

	return nil
}

// ServiceUnavailableErrorMessageResponseMultiError is an error wrapping
// multiple validation errors returned by
// ServiceUnavailableErrorMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type ServiceUnavailableErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceUnavailableErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceUnavailableErrorMessageResponseMultiError) AllErrors() []error { return m }

// ServiceUnavailableErrorMessageResponseValidationError is the validation
// error returned by ServiceUnavailableErrorMessageResponse.Validate if the
// designated constraints aren't met.
type ServiceUnavailableErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceUnavailableErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceUnavailableErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceUnavailableErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceUnavailableErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceUnavailableErrorMessageResponseValidationError) ErrorName() string {
	return "ServiceUnavailableErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceUnavailableErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceUnavailableErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceUnavailableErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceUnavailableErrorMessageResponseValidationError{}

// Validate checks the field values on ErrorMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ErrorMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ErrorMessageRequestMultiError, or nil if none found.
func (m *ErrorMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ErrorMessageRequestMultiError(errors)
	}

	return nil
}

// ErrorMessageRequestMultiError is an error wrapping multiple validation
// errors returned by ErrorMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type ErrorMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorMessageRequestMultiError) AllErrors() []error { return m }

// ErrorMessageRequestValidationError is the validation error returned by
// ErrorMessageRequest.Validate if the designated constraints aren't met.
type ErrorMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorMessageRequestValidationError) ErrorName() string {
	return "ErrorMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorMessageRequestValidationError{}

// Validate checks the field values on MethodNotAllowedErrorMessageResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MethodNotAllowedErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MethodNotAllowedErrorMessageResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MethodNotAllowedErrorMessageResponseMultiError, or nil if none found.
func (m *MethodNotAllowedErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MethodNotAllowedErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MethodNotAllowedErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MethodNotAllowedErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MethodNotAllowedErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MethodNotAllowedErrorMessageResponseMultiError(errors)
	}

	return nil
}

// MethodNotAllowedErrorMessageResponseMultiError is an error wrapping multiple
// validation errors returned by
// MethodNotAllowedErrorMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type MethodNotAllowedErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MethodNotAllowedErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MethodNotAllowedErrorMessageResponseMultiError) AllErrors() []error { return m }

// MethodNotAllowedErrorMessageResponseValidationError is the validation error
// returned by MethodNotAllowedErrorMessageResponse.Validate if the designated
// constraints aren't met.
type MethodNotAllowedErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MethodNotAllowedErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MethodNotAllowedErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MethodNotAllowedErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MethodNotAllowedErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MethodNotAllowedErrorMessageResponseValidationError) ErrorName() string {
	return "MethodNotAllowedErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MethodNotAllowedErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMethodNotAllowedErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MethodNotAllowedErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MethodNotAllowedErrorMessageResponseValidationError{}

// Validate checks the field values on UnprocessableEntityErrorMessageResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UnprocessableEntityErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UnprocessableEntityErrorMessageResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UnprocessableEntityErrorMessageResponseMultiError, or nil if none found.
func (m *UnprocessableEntityErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnprocessableEntityErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnprocessableEntityErrorMessageResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnprocessableEntityErrorMessageResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnprocessableEntityErrorMessageResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnprocessableEntityErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnprocessableEntityErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnprocessableEntityErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnprocessableEntityErrorMessageResponseMultiError(errors)
	}

	return nil
}

// UnprocessableEntityErrorMessageResponseMultiError is an error wrapping
// multiple validation errors returned by
// UnprocessableEntityErrorMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type UnprocessableEntityErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnprocessableEntityErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnprocessableEntityErrorMessageResponseMultiError) AllErrors() []error { return m }

// UnprocessableEntityErrorMessageResponseValidationError is the validation
// error returned by UnprocessableEntityErrorMessageResponse.Validate if the
// designated constraints aren't met.
type UnprocessableEntityErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnprocessableEntityErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnprocessableEntityErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnprocessableEntityErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnprocessableEntityErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnprocessableEntityErrorMessageResponseValidationError) ErrorName() string {
	return "UnprocessableEntityErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnprocessableEntityErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnprocessableEntityErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnprocessableEntityErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnprocessableEntityErrorMessageResponseValidationError{}

// Validate checks the field values on NotImplementedErrorMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *NotImplementedErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotImplementedErrorMessageResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NotImplementedErrorMessageResponseMultiError, or nil if none found.
func (m *NotImplementedErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NotImplementedErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Feature

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotImplementedErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotImplementedErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotImplementedErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotImplementedErrorMessageResponseMultiError(errors)
	}

	return nil
}

// NotImplementedErrorMessageResponseMultiError is an error wrapping multiple
// validation errors returned by
// NotImplementedErrorMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type NotImplementedErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotImplementedErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotImplementedErrorMessageResponseMultiError) AllErrors() []error { return m }

// NotImplementedErrorMessageResponseValidationError is the validation error
// returned by NotImplementedErrorMessageResponse.Validate if the designated
// constraints aren't met.
type NotImplementedErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotImplementedErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotImplementedErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotImplementedErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotImplementedErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotImplementedErrorMessageResponseValidationError) ErrorName() string {
	return "NotImplementedErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NotImplementedErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotImplementedErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotImplementedErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotImplementedErrorMessageResponseValidationError{}

// Validate checks the field values on BadGatewayErrorMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BadGatewayErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BadGatewayErrorMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BadGatewayErrorMessageResponseMultiError, or nil if none found.
func (m *BadGatewayErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BadGatewayErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for UpstreamService

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BadGatewayErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BadGatewayErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BadGatewayErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BadGatewayErrorMessageResponseMultiError(errors)
	}

	return nil
}

// BadGatewayErrorMessageResponseMultiError is an error wrapping multiple
// validation errors returned by BadGatewayErrorMessageResponse.ValidateAll()
// if the designated constraints aren't met.
type BadGatewayErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BadGatewayErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BadGatewayErrorMessageResponseMultiError) AllErrors() []error { return m }

// BadGatewayErrorMessageResponseValidationError is the validation error
// returned by BadGatewayErrorMessageResponse.Validate if the designated
// constraints aren't met.
type BadGatewayErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BadGatewayErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BadGatewayErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BadGatewayErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BadGatewayErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BadGatewayErrorMessageResponseValidationError) ErrorName() string {
	return "BadGatewayErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BadGatewayErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBadGatewayErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BadGatewayErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BadGatewayErrorMessageResponseValidationError{}

// Validate checks the field values on GatewayTimeoutErrorMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GatewayTimeoutErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GatewayTimeoutErrorMessageResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GatewayTimeoutErrorMessageResponseMultiError, or nil if none found.
func (m *GatewayTimeoutErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GatewayTimeoutErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for UpstreamService

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GatewayTimeoutErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GatewayTimeoutErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayTimeoutErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GatewayTimeoutErrorMessageResponseMultiError(errors)
	}

	return nil
}

// GatewayTimeoutErrorMessageResponseMultiError is an error wrapping multiple
// validation errors returned by
// GatewayTimeoutErrorMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type GatewayTimeoutErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GatewayTimeoutErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GatewayTimeoutErrorMessageResponseMultiError) AllErrors() []error { return m }

// GatewayTimeoutErrorMessageResponseValidationError is the validation error
// returned by GatewayTimeoutErrorMessageResponse.Validate if the designated
// constraints aren't met.
type GatewayTimeoutErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayTimeoutErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayTimeoutErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayTimeoutErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayTimeoutErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayTimeoutErrorMessageResponseValidationError) ErrorName() string {
	return "GatewayTimeoutErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GatewayTimeoutErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayTimeoutErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayTimeoutErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayTimeoutErrorMessageResponseValidationError{}

// Validate checks the field values on PreconditionFailedErrorMessageResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PreconditionFailedErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PreconditionFailedErrorMessageResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// PreconditionFailedErrorMessageResponseMultiError, or nil if none found.
func (m *PreconditionFailedErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PreconditionFailedErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PreconditionFailedErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PreconditionFailedErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PreconditionFailedErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PreconditionFailedErrorMessageResponseMultiError(errors)
	}

	return nil
}

// PreconditionFailedErrorMessageResponseMultiError is an error wrapping
// multiple validation errors returned by
// PreconditionFailedErrorMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type PreconditionFailedErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreconditionFailedErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreconditionFailedErrorMessageResponseMultiError) AllErrors() []error { return m }

// PreconditionFailedErrorMessageResponseValidationError is the validation
// error returned by PreconditionFailedErrorMessageResponse.Validate if the
// designated constraints aren't met.
type PreconditionFailedErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreconditionFailedErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreconditionFailedErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreconditionFailedErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreconditionFailedErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreconditionFailedErrorMessageResponseValidationError) ErrorName() string {
	return "PreconditionFailedErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PreconditionFailedErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreconditionFailedErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreconditionFailedErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreconditionFailedErrorMessageResponseValidationError{}

// Validate checks the field values on TooEarlyErrorMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TooEarlyErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TooEarlyErrorMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TooEarlyErrorMessageResponseMultiError, or nil if none found.
func (m *TooEarlyErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TooEarlyErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TooEarlyErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TooEarlyErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TooEarlyErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TooEarlyErrorMessageResponseMultiError(errors)
	}

	return nil
}

// TooEarlyErrorMessageResponseMultiError is an error wrapping multiple
// validation errors returned by TooEarlyErrorMessageResponse.ValidateAll() if
// the designated constraints aren't met.
type TooEarlyErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TooEarlyErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TooEarlyErrorMessageResponseMultiError) AllErrors() []error { return m }

// TooEarlyErrorMessageResponseValidationError is the validation error returned
// by TooEarlyErrorMessageResponse.Validate if the designated constraints
// aren't met.
type TooEarlyErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TooEarlyErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TooEarlyErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TooEarlyErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TooEarlyErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TooEarlyErrorMessageResponseValidationError) ErrorName() string {
	return "TooEarlyErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TooEarlyErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTooEarlyErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TooEarlyErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TooEarlyErrorMessageResponseValidationError{}

// Validate checks the field values on PaymentRequiredErrorMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PaymentRequiredErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentRequiredErrorMessageResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PaymentRequiredErrorMessageResponseMultiError, or nil if none found.
func (m *PaymentRequiredErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentRequiredErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetPaymentInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentRequiredErrorMessageResponseValidationError{
					field:  "PaymentInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentRequiredErrorMessageResponseValidationError{
					field:  "PaymentInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentRequiredErrorMessageResponseValidationError{
				field:  "PaymentInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentRequiredErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentRequiredErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentRequiredErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PaymentRequiredErrorMessageResponseMultiError(errors)
	}

	return nil
}

// PaymentRequiredErrorMessageResponseMultiError is an error wrapping multiple
// validation errors returned by
// PaymentRequiredErrorMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type PaymentRequiredErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentRequiredErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentRequiredErrorMessageResponseMultiError) AllErrors() []error { return m }

// PaymentRequiredErrorMessageResponseValidationError is the validation error
// returned by PaymentRequiredErrorMessageResponse.Validate if the designated
// constraints aren't met.
type PaymentRequiredErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentRequiredErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentRequiredErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentRequiredErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentRequiredErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentRequiredErrorMessageResponseValidationError) ErrorName() string {
	return "PaymentRequiredErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentRequiredErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentRequiredErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentRequiredErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentRequiredErrorMessageResponseValidationError{}

// Validate checks the field values on ForbiddenErrorMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForbiddenErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForbiddenErrorMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ForbiddenErrorMessageResponseMultiError, or nil if none found.
func (m *ForbiddenErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ForbiddenErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Reason

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForbiddenErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForbiddenErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForbiddenErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ForbiddenErrorMessageResponseMultiError(errors)
	}

	return nil
}

// ForbiddenErrorMessageResponseMultiError is an error wrapping multiple
// validation errors returned by ForbiddenErrorMessageResponse.ValidateAll()
// if the designated constraints aren't met.
type ForbiddenErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForbiddenErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForbiddenErrorMessageResponseMultiError) AllErrors() []error { return m }

// ForbiddenErrorMessageResponseValidationError is the validation error
// returned by ForbiddenErrorMessageResponse.Validate if the designated
// constraints aren't met.
type ForbiddenErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForbiddenErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForbiddenErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForbiddenErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForbiddenErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForbiddenErrorMessageResponseValidationError) ErrorName() string {
	return "ForbiddenErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ForbiddenErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForbiddenErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForbiddenErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForbiddenErrorMessageResponseValidationError{}

// Validate checks the field values on GoneErrorMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GoneErrorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoneErrorMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GoneErrorMessageResponseMultiError, or nil if none found.
func (m *GoneErrorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GoneErrorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Resource

	if all {
		switch v := interface{}(m.GetErrorResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GoneErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GoneErrorMessageResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GoneErrorMessageResponseValidationError{
				field:  "ErrorResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GoneErrorMessageResponseMultiError(errors)
	}

	return nil
}

// GoneErrorMessageResponseMultiError is an error wrapping multiple validation
// errors returned by GoneErrorMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type GoneErrorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoneErrorMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoneErrorMessageResponseMultiError) AllErrors() []error { return m }

// GoneErrorMessageResponseValidationError is the validation error returned by
// GoneErrorMessageResponse.Validate if the designated constraints aren't met.
type GoneErrorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoneErrorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoneErrorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoneErrorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoneErrorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoneErrorMessageResponseValidationError) ErrorName() string {
	return "GoneErrorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GoneErrorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoneErrorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoneErrorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoneErrorMessageResponseValidationError{}

// Validate checks the field values on
// AuthenticationErrorMessageResponse_TokenInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthenticationErrorMessageResponse_TokenInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AuthenticationErrorMessageResponse_TokenInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AuthenticationErrorMessageResponse_TokenInfoMultiError, or nil if none found.
func (m *AuthenticationErrorMessageResponse_TokenInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticationErrorMessageResponse_TokenInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokenId

	// no validation rules for TokenType

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticationErrorMessageResponse_TokenInfoValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticationErrorMessageResponse_TokenInfoValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticationErrorMessageResponse_TokenInfoValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Issuer

	if len(errors) > 0 {
		return AuthenticationErrorMessageResponse_TokenInfoMultiError(errors)
	}

	return nil
}

// AuthenticationErrorMessageResponse_TokenInfoMultiError is an error wrapping
// multiple validation errors returned by
// AuthenticationErrorMessageResponse_TokenInfo.ValidateAll() if the
// designated constraints aren't met.
type AuthenticationErrorMessageResponse_TokenInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticationErrorMessageResponse_TokenInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticationErrorMessageResponse_TokenInfoMultiError) AllErrors() []error { return m }

// AuthenticationErrorMessageResponse_TokenInfoValidationError is the
// validation error returned by
// AuthenticationErrorMessageResponse_TokenInfo.Validate if the designated
// constraints aren't met.
type AuthenticationErrorMessageResponse_TokenInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticationErrorMessageResponse_TokenInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticationErrorMessageResponse_TokenInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticationErrorMessageResponse_TokenInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticationErrorMessageResponse_TokenInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticationErrorMessageResponse_TokenInfoValidationError) ErrorName() string {
	return "AuthenticationErrorMessageResponse_TokenInfoValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticationErrorMessageResponse_TokenInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticationErrorMessageResponse_TokenInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticationErrorMessageResponse_TokenInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticationErrorMessageResponse_TokenInfoValidationError{}

// Validate checks the field values on
// AuthenticationErrorMessageResponse_AuthContext with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthenticationErrorMessageResponse_AuthContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AuthenticationErrorMessageResponse_AuthContext with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// AuthenticationErrorMessageResponse_AuthContextMultiError, or nil if none found.
func (m *AuthenticationErrorMessageResponse_AuthContext) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticationErrorMessageResponse_AuthContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	if len(errors) > 0 {
		return AuthenticationErrorMessageResponse_AuthContextMultiError(errors)
	}

	return nil
}

// AuthenticationErrorMessageResponse_AuthContextMultiError is an error
// wrapping multiple validation errors returned by
// AuthenticationErrorMessageResponse_AuthContext.ValidateAll() if the
// designated constraints aren't met.
type AuthenticationErrorMessageResponse_AuthContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticationErrorMessageResponse_AuthContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticationErrorMessageResponse_AuthContextMultiError) AllErrors() []error { return m }

// AuthenticationErrorMessageResponse_AuthContextValidationError is the
// validation error returned by
// AuthenticationErrorMessageResponse_AuthContext.Validate if the designated
// constraints aren't met.
type AuthenticationErrorMessageResponse_AuthContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticationErrorMessageResponse_AuthContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticationErrorMessageResponse_AuthContextValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e AuthenticationErrorMessageResponse_AuthContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticationErrorMessageResponse_AuthContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticationErrorMessageResponse_AuthContextValidationError) ErrorName() string {
	return "AuthenticationErrorMessageResponse_AuthContextValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticationErrorMessageResponse_AuthContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticationErrorMessageResponse_AuthContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticationErrorMessageResponse_AuthContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticationErrorMessageResponse_AuthContextValidationError{}

// Validate checks the field values on
// AuthenticationErrorMessageResponse_SessionInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthenticationErrorMessageResponse_SessionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AuthenticationErrorMessageResponse_SessionInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// AuthenticationErrorMessageResponse_SessionInfoMultiError, or nil if none found.
func (m *AuthenticationErrorMessageResponse_SessionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticationErrorMessageResponse_SessionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	if all {
		switch v := interface{}(m.GetLastActive()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticationErrorMessageResponse_SessionInfoValidationError{
					field:  "LastActive",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticationErrorMessageResponse_SessionInfoValidationError{
					field:  "LastActive",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastActive()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticationErrorMessageResponse_SessionInfoValidationError{
				field:  "LastActive",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeviceId

	// no validation rules for IpAddress

	if len(errors) > 0 {
		return AuthenticationErrorMessageResponse_SessionInfoMultiError(errors)
	}

	return nil
}

// AuthenticationErrorMessageResponse_SessionInfoMultiError is an error
// wrapping multiple validation errors returned by
// AuthenticationErrorMessageResponse_SessionInfo.ValidateAll() if the
// designated constraints aren't met.
type AuthenticationErrorMessageResponse_SessionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticationErrorMessageResponse_SessionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticationErrorMessageResponse_SessionInfoMultiError) AllErrors() []error { return m }

// AuthenticationErrorMessageResponse_SessionInfoValidationError is the
// validation error returned by
// AuthenticationErrorMessageResponse_SessionInfo.Validate if the designated
// constraints aren't met.
type AuthenticationErrorMessageResponse_SessionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticationErrorMessageResponse_SessionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticationErrorMessageResponse_SessionInfoValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e AuthenticationErrorMessageResponse_SessionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticationErrorMessageResponse_SessionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticationErrorMessageResponse_SessionInfoValidationError) ErrorName() string {
	return "AuthenticationErrorMessageResponse_SessionInfoValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticationErrorMessageResponse_SessionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticationErrorMessageResponse_SessionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticationErrorMessageResponse_SessionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticationErrorMessageResponse_SessionInfoValidationError{}

// Validate checks the field values on
// AuthenticationErrorMessageResponse_MFAInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthenticationErrorMessageResponse_MFAInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AuthenticationErrorMessageResponse_MFAInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AuthenticationErrorMessageResponse_MFAInfoMultiError, or nil if none found.
func (m *AuthenticationErrorMessageResponse_MFAInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticationErrorMessageResponse_MFAInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MfaRequired

	// no validation rules for FailedReason

	if len(errors) > 0 {
		return AuthenticationErrorMessageResponse_MFAInfoMultiError(errors)
	}

	return nil
}

// AuthenticationErrorMessageResponse_MFAInfoMultiError is an error wrapping
// multiple validation errors returned by
// AuthenticationErrorMessageResponse_MFAInfo.ValidateAll() if the designated
// constraints aren't met.
type AuthenticationErrorMessageResponse_MFAInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticationErrorMessageResponse_MFAInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticationErrorMessageResponse_MFAInfoMultiError) AllErrors() []error { return m }

// AuthenticationErrorMessageResponse_MFAInfoValidationError is the validation
// error returned by AuthenticationErrorMessageResponse_MFAInfo.Validate if
// the designated constraints aren't met.
type AuthenticationErrorMessageResponse_MFAInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticationErrorMessageResponse_MFAInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticationErrorMessageResponse_MFAInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticationErrorMessageResponse_MFAInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticationErrorMessageResponse_MFAInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticationErrorMessageResponse_MFAInfoValidationError) ErrorName() string {
	return "AuthenticationErrorMessageResponse_MFAInfoValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticationErrorMessageResponse_MFAInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticationErrorMessageResponse_MFAInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticationErrorMessageResponse_MFAInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticationErrorMessageResponse_MFAInfoValidationError{}

// Validate checks the field values on
// ValidationErrorMessageResponse_FieldViolation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ValidationErrorMessageResponse_FieldViolation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ValidationErrorMessageResponse_FieldViolation with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ValidationErrorMessageResponse_FieldViolationMultiError, or nil if none found.
func (m *ValidationErrorMessageResponse_FieldViolation) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidationErrorMessageResponse_FieldViolation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Validation

	// no validation rules for Message

	// no validation rules for Expected

	// no validation rules for Actual

	if len(errors) > 0 {
		return ValidationErrorMessageResponse_FieldViolationMultiError(errors)
	}

	return nil
}

// ValidationErrorMessageResponse_FieldViolationMultiError is an error wrapping
// multiple validation errors returned by
// ValidationErrorMessageResponse_FieldViolation.ValidateAll() if the
// designated constraints aren't met.
type ValidationErrorMessageResponse_FieldViolationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidationErrorMessageResponse_FieldViolationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidationErrorMessageResponse_FieldViolationMultiError) AllErrors() []error { return m }

// ValidationErrorMessageResponse_FieldViolationValidationError is the
// validation error returned by
// ValidationErrorMessageResponse_FieldViolation.Validate if the designated
// constraints aren't met.
type ValidationErrorMessageResponse_FieldViolationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidationErrorMessageResponse_FieldViolationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidationErrorMessageResponse_FieldViolationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ValidationErrorMessageResponse_FieldViolationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidationErrorMessageResponse_FieldViolationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidationErrorMessageResponse_FieldViolationValidationError) ErrorName() string {
	return "ValidationErrorMessageResponse_FieldViolationValidationError"
}

// Error satisfies the builtin error interface
func (e ValidationErrorMessageResponse_FieldViolationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidationErrorMessageResponse_FieldViolation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidationErrorMessageResponse_FieldViolationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidationErrorMessageResponse_FieldViolationValidationError{}

// Validate checks the field values on
// ValidationErrorMessageResponse_SchemaValidation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ValidationErrorMessageResponse_SchemaValidation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ValidationErrorMessageResponse_SchemaValidation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ValidationErrorMessageResponse_SchemaValidationMultiError, or nil if none found.
func (m *ValidationErrorMessageResponse_SchemaValidation) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidationErrorMessageResponse_SchemaValidation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SchemaVersion

	if len(errors) > 0 {
		return ValidationErrorMessageResponse_SchemaValidationMultiError(errors)
	}

	return nil
}

// ValidationErrorMessageResponse_SchemaValidationMultiError is an error
// wrapping multiple validation errors returned by
// ValidationErrorMessageResponse_SchemaValidation.ValidateAll() if the
// designated constraints aren't met.
type ValidationErrorMessageResponse_SchemaValidationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidationErrorMessageResponse_SchemaValidationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidationErrorMessageResponse_SchemaValidationMultiError) AllErrors() []error { return m }

// ValidationErrorMessageResponse_SchemaValidationValidationError is the
// validation error returned by
// ValidationErrorMessageResponse_SchemaValidation.Validate if the designated
// constraints aren't met.
type ValidationErrorMessageResponse_SchemaValidationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidationErrorMessageResponse_SchemaValidationValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ValidationErrorMessageResponse_SchemaValidationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ValidationErrorMessageResponse_SchemaValidationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidationErrorMessageResponse_SchemaValidationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidationErrorMessageResponse_SchemaValidationValidationError) ErrorName() string {
	return "ValidationErrorMessageResponse_SchemaValidationValidationError"
}

// Error satisfies the builtin error interface
func (e ValidationErrorMessageResponse_SchemaValidationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidationErrorMessageResponse_SchemaValidation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidationErrorMessageResponse_SchemaValidationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidationErrorMessageResponse_SchemaValidationValidationError{}

// Validate checks the field values on
// ValidationErrorMessageResponse_ResourceValidation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ValidationErrorMessageResponse_ResourceValidation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ValidationErrorMessageResponse_ResourceValidation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ValidationErrorMessageResponse_ResourceValidationMultiError, or nil if none found.
func (m *ValidationErrorMessageResponse_ResourceValidation) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidationErrorMessageResponse_ResourceValidation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdViolations

	if len(errors) > 0 {
		return ValidationErrorMessageResponse_ResourceValidationMultiError(errors)
	}

	return nil
}

// ValidationErrorMessageResponse_ResourceValidationMultiError is an error
// wrapping multiple validation errors returned by
// ValidationErrorMessageResponse_ResourceValidation.ValidateAll() if the
// designated constraints aren't met.
type ValidationErrorMessageResponse_ResourceValidationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidationErrorMessageResponse_ResourceValidationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidationErrorMessageResponse_ResourceValidationMultiError) AllErrors() []error { return m }

// ValidationErrorMessageResponse_ResourceValidationValidationError is the
// validation error returned by
// ValidationErrorMessageResponse_ResourceValidation.Validate if the
// designated constraints aren't met.
type ValidationErrorMessageResponse_ResourceValidationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidationErrorMessageResponse_ResourceValidationValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ValidationErrorMessageResponse_ResourceValidationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ValidationErrorMessageResponse_ResourceValidationValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ValidationErrorMessageResponse_ResourceValidationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidationErrorMessageResponse_ResourceValidationValidationError) ErrorName() string {
	return "ValidationErrorMessageResponse_ResourceValidationValidationError"
}

// Error satisfies the builtin error interface
func (e ValidationErrorMessageResponse_ResourceValidationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidationErrorMessageResponse_ResourceValidation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidationErrorMessageResponse_ResourceValidationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidationErrorMessageResponse_ResourceValidationValidationError{}

// Validate checks the field values on
// InternalErrorMessageResponse_ServiceStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InternalErrorMessageResponse_ServiceStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// InternalErrorMessageResponse_ServiceStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// InternalErrorMessageResponse_ServiceStatusMultiError, or nil if none found.
func (m *InternalErrorMessageResponse_ServiceStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *InternalErrorMessageResponse_ServiceStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for Metrics

	for idx, item := range m.GetDependencies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InternalErrorMessageResponse_ServiceStatusValidationError{
						field:  fmt.Sprintf("Dependencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InternalErrorMessageResponse_ServiceStatusValidationError{
						field:  fmt.Sprintf("Dependencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InternalErrorMessageResponse_ServiceStatusValidationError{
					field:  fmt.Sprintf("Dependencies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InternalErrorMessageResponse_ServiceStatusMultiError(errors)
	}

	return nil
}

// InternalErrorMessageResponse_ServiceStatusMultiError is an error wrapping
// multiple validation errors returned by
// InternalErrorMessageResponse_ServiceStatus.ValidateAll() if the designated
// constraints aren't met.
type InternalErrorMessageResponse_ServiceStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InternalErrorMessageResponse_ServiceStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InternalErrorMessageResponse_ServiceStatusMultiError) AllErrors() []error { return m }

// InternalErrorMessageResponse_ServiceStatusValidationError is the validation
// error returned by InternalErrorMessageResponse_ServiceStatus.Validate if
// the designated constraints aren't met.
type InternalErrorMessageResponse_ServiceStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InternalErrorMessageResponse_ServiceStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InternalErrorMessageResponse_ServiceStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InternalErrorMessageResponse_ServiceStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InternalErrorMessageResponse_ServiceStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InternalErrorMessageResponse_ServiceStatusValidationError) ErrorName() string {
	return "InternalErrorMessageResponse_ServiceStatusValidationError"
}

// Error satisfies the builtin error interface
func (e InternalErrorMessageResponse_ServiceStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInternalErrorMessageResponse_ServiceStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InternalErrorMessageResponse_ServiceStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InternalErrorMessageResponse_ServiceStatusValidationError{}

// Validate checks the field values on
// InternalErrorMessageResponse_ResourceUtilization with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InternalErrorMessageResponse_ResourceUtilization) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// InternalErrorMessageResponse_ResourceUtilization with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// InternalErrorMessageResponse_ResourceUtilizationMultiError, or nil if none found.
func (m *InternalErrorMessageResponse_ResourceUtilization) ValidateAll() error {
	return m.validate(true)
}

func (m *InternalErrorMessageResponse_ResourceUtilization) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CpuUsage

	// no validation rules for MemoryUsage

	// no validation rules for ActiveConnections

	// no validation rules for Quotas

	if len(errors) > 0 {
		return InternalErrorMessageResponse_ResourceUtilizationMultiError(errors)
	}

	return nil
}

// InternalErrorMessageResponse_ResourceUtilizationMultiError is an error
// wrapping multiple validation errors returned by
// InternalErrorMessageResponse_ResourceUtilization.ValidateAll() if the
// designated constraints aren't met.
type InternalErrorMessageResponse_ResourceUtilizationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InternalErrorMessageResponse_ResourceUtilizationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InternalErrorMessageResponse_ResourceUtilizationMultiError) AllErrors() []error { return m }

// InternalErrorMessageResponse_ResourceUtilizationValidationError is the
// validation error returned by
// InternalErrorMessageResponse_ResourceUtilization.Validate if the designated
// constraints aren't met.
type InternalErrorMessageResponse_ResourceUtilizationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InternalErrorMessageResponse_ResourceUtilizationValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e InternalErrorMessageResponse_ResourceUtilizationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e InternalErrorMessageResponse_ResourceUtilizationValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e InternalErrorMessageResponse_ResourceUtilizationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InternalErrorMessageResponse_ResourceUtilizationValidationError) ErrorName() string {
	return "InternalErrorMessageResponse_ResourceUtilizationValidationError"
}

// Error satisfies the builtin error interface
func (e InternalErrorMessageResponse_ResourceUtilizationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInternalErrorMessageResponse_ResourceUtilization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InternalErrorMessageResponse_ResourceUtilizationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InternalErrorMessageResponse_ResourceUtilizationValidationError{}

// Validate checks the field values on
// InternalErrorMessageResponse_OperationDetails with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InternalErrorMessageResponse_OperationDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// InternalErrorMessageResponse_OperationDetails with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// InternalErrorMessageResponse_OperationDetailsMultiError, or nil if none found.
func (m *InternalErrorMessageResponse_OperationDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *InternalErrorMessageResponse_OperationDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperationId

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InternalErrorMessageResponse_OperationDetailsValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InternalErrorMessageResponse_OperationDetailsValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InternalErrorMessageResponse_OperationDetailsValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InternalErrorMessageResponse_OperationDetailsValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InternalErrorMessageResponse_OperationDetailsValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InternalErrorMessageResponse_OperationDetailsValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Parameters

	if len(errors) > 0 {
		return InternalErrorMessageResponse_OperationDetailsMultiError(errors)
	}

	return nil
}

// InternalErrorMessageResponse_OperationDetailsMultiError is an error wrapping
// multiple validation errors returned by
// InternalErrorMessageResponse_OperationDetails.ValidateAll() if the
// designated constraints aren't met.
type InternalErrorMessageResponse_OperationDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InternalErrorMessageResponse_OperationDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InternalErrorMessageResponse_OperationDetailsMultiError) AllErrors() []error { return m }

// InternalErrorMessageResponse_OperationDetailsValidationError is the
// validation error returned by
// InternalErrorMessageResponse_OperationDetails.Validate if the designated
// constraints aren't met.
type InternalErrorMessageResponse_OperationDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InternalErrorMessageResponse_OperationDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InternalErrorMessageResponse_OperationDetailsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e InternalErrorMessageResponse_OperationDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InternalErrorMessageResponse_OperationDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InternalErrorMessageResponse_OperationDetailsValidationError) ErrorName() string {
	return "InternalErrorMessageResponse_OperationDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e InternalErrorMessageResponse_OperationDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInternalErrorMessageResponse_OperationDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InternalErrorMessageResponse_OperationDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InternalErrorMessageResponse_OperationDetailsValidationError{}

// Validate checks the field values on
// InternalErrorMessageResponse_ServiceStatus_Dependency with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InternalErrorMessageResponse_ServiceStatus_Dependency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// InternalErrorMessageResponse_ServiceStatus_Dependency with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InternalErrorMessageResponse_ServiceStatus_DependencyMultiError, or nil if
// none found.
func (m *InternalErrorMessageResponse_ServiceStatus_Dependency) ValidateAll() error {
	return m.validate(true)
}

func (m *InternalErrorMessageResponse_ServiceStatus_Dependency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for Error

	// no validation rules for Latency

	if len(errors) > 0 {
		return InternalErrorMessageResponse_ServiceStatus_DependencyMultiError(errors)
	}

	return nil
}

// InternalErrorMessageResponse_ServiceStatus_DependencyMultiError is an error
// wrapping multiple validation errors returned by
// InternalErrorMessageResponse_ServiceStatus_Dependency.ValidateAll() if the
// designated constraints aren't met.
type InternalErrorMessageResponse_ServiceStatus_DependencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InternalErrorMessageResponse_ServiceStatus_DependencyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InternalErrorMessageResponse_ServiceStatus_DependencyMultiError) AllErrors() []error {
	return m
}

// InternalErrorMessageResponse_ServiceStatus_DependencyValidationError is the
// validation error returned by
// InternalErrorMessageResponse_ServiceStatus_Dependency.Validate if the
// designated constraints aren't met.
type InternalErrorMessageResponse_ServiceStatus_DependencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InternalErrorMessageResponse_ServiceStatus_DependencyValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e InternalErrorMessageResponse_ServiceStatus_DependencyValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e InternalErrorMessageResponse_ServiceStatus_DependencyValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e InternalErrorMessageResponse_ServiceStatus_DependencyValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e InternalErrorMessageResponse_ServiceStatus_DependencyValidationError) ErrorName() string {
	return "InternalErrorMessageResponse_ServiceStatus_DependencyValidationError"
}

// Error satisfies the builtin error interface
func (e InternalErrorMessageResponse_ServiceStatus_DependencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInternalErrorMessageResponse_ServiceStatus_Dependency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InternalErrorMessageResponse_ServiceStatus_DependencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InternalErrorMessageResponse_ServiceStatus_DependencyValidationError{}

// Validate checks the field values on
// NotFoundErrorMessageResponse_ResourceInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotFoundErrorMessageResponse_ResourceInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NotFoundErrorMessageResponse_ResourceInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// NotFoundErrorMessageResponse_ResourceInfoMultiError, or nil if none found.
func (m *NotFoundErrorMessageResponse_ResourceInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *NotFoundErrorMessageResponse_ResourceInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Id

	// no validation rules for Path

	// no validation rules for TenantId

	if len(errors) > 0 {
		return NotFoundErrorMessageResponse_ResourceInfoMultiError(errors)
	}

	return nil
}

// NotFoundErrorMessageResponse_ResourceInfoMultiError is an error wrapping
// multiple validation errors returned by
// NotFoundErrorMessageResponse_ResourceInfo.ValidateAll() if the designated
// constraints aren't met.
type NotFoundErrorMessageResponse_ResourceInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotFoundErrorMessageResponse_ResourceInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotFoundErrorMessageResponse_ResourceInfoMultiError) AllErrors() []error { return m }

// NotFoundErrorMessageResponse_ResourceInfoValidationError is the validation
// error returned by NotFoundErrorMessageResponse_ResourceInfo.Validate if the
// designated constraints aren't met.
type NotFoundErrorMessageResponse_ResourceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotFoundErrorMessageResponse_ResourceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotFoundErrorMessageResponse_ResourceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotFoundErrorMessageResponse_ResourceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotFoundErrorMessageResponse_ResourceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotFoundErrorMessageResponse_ResourceInfoValidationError) ErrorName() string {
	return "NotFoundErrorMessageResponse_ResourceInfoValidationError"
}

// Error satisfies the builtin error interface
func (e NotFoundErrorMessageResponse_ResourceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotFoundErrorMessageResponse_ResourceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotFoundErrorMessageResponse_ResourceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotFoundErrorMessageResponse_ResourceInfoValidationError{}

// Validate checks the field values on NotFoundErrorMessageResponse_Suggestions
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NotFoundErrorMessageResponse_Suggestions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NotFoundErrorMessageResponse_Suggestions with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// NotFoundErrorMessageResponse_SuggestionsMultiError, or nil if none found.
func (m *NotFoundErrorMessageResponse_Suggestions) ValidateAll() error {
	return m.validate(true)
}

func (m *NotFoundErrorMessageResponse_Suggestions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentationUrl

	// no validation rules for Hints

	if len(errors) > 0 {
		return NotFoundErrorMessageResponse_SuggestionsMultiError(errors)
	}

	return nil
}

// NotFoundErrorMessageResponse_SuggestionsMultiError is an error wrapping
// multiple validation errors returned by
// NotFoundErrorMessageResponse_Suggestions.ValidateAll() if the designated
// constraints aren't met.
type NotFoundErrorMessageResponse_SuggestionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotFoundErrorMessageResponse_SuggestionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotFoundErrorMessageResponse_SuggestionsMultiError) AllErrors() []error { return m }

// NotFoundErrorMessageResponse_SuggestionsValidationError is the validation
// error returned by NotFoundErrorMessageResponse_Suggestions.Validate if the
// designated constraints aren't met.
type NotFoundErrorMessageResponse_SuggestionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotFoundErrorMessageResponse_SuggestionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotFoundErrorMessageResponse_SuggestionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotFoundErrorMessageResponse_SuggestionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotFoundErrorMessageResponse_SuggestionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotFoundErrorMessageResponse_SuggestionsValidationError) ErrorName() string {
	return "NotFoundErrorMessageResponse_SuggestionsValidationError"
}

// Error satisfies the builtin error interface
func (e NotFoundErrorMessageResponse_SuggestionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotFoundErrorMessageResponse_Suggestions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotFoundErrorMessageResponse_SuggestionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotFoundErrorMessageResponse_SuggestionsValidationError{}

// Validate checks the field values on NotFoundErrorMessageResponse_APIInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NotFoundErrorMessageResponse_APIInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotFoundErrorMessageResponse_APIInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NotFoundErrorMessageResponse_APIInfoMultiError, or nil if none found.
func (m *NotFoundErrorMessageResponse_APIInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *NotFoundErrorMessageResponse_APIInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for IsDeprecated

	if all {
		switch v := interface{}(m.GetSunsetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotFoundErrorMessageResponse_APIInfoValidationError{
					field:  "SunsetDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotFoundErrorMessageResponse_APIInfoValidationError{
					field:  "SunsetDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSunsetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotFoundErrorMessageResponse_APIInfoValidationError{
				field:  "SunsetDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotFoundErrorMessageResponse_APIInfoMultiError(errors)
	}

	return nil
}

// NotFoundErrorMessageResponse_APIInfoMultiError is an error wrapping multiple
// validation errors returned by
// NotFoundErrorMessageResponse_APIInfo.ValidateAll() if the designated
// constraints aren't met.
type NotFoundErrorMessageResponse_APIInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotFoundErrorMessageResponse_APIInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotFoundErrorMessageResponse_APIInfoMultiError) AllErrors() []error { return m }

// NotFoundErrorMessageResponse_APIInfoValidationError is the validation error
// returned by NotFoundErrorMessageResponse_APIInfo.Validate if the designated
// constraints aren't met.
type NotFoundErrorMessageResponse_APIInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotFoundErrorMessageResponse_APIInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotFoundErrorMessageResponse_APIInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotFoundErrorMessageResponse_APIInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotFoundErrorMessageResponse_APIInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotFoundErrorMessageResponse_APIInfoValidationError) ErrorName() string {
	return "NotFoundErrorMessageResponse_APIInfoValidationError"
}

// Error satisfies the builtin error interface
func (e NotFoundErrorMessageResponse_APIInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotFoundErrorMessageResponse_APIInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotFoundErrorMessageResponse_APIInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotFoundErrorMessageResponse_APIInfoValidationError{}

// Validate checks the field values on RateLimitErrorMessageResponse_LimitInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RateLimitErrorMessageResponse_LimitInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RateLimitErrorMessageResponse_LimitInfo with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RateLimitErrorMessageResponse_LimitInfoMultiError, or nil if none found.
func (m *RateLimitErrorMessageResponse_LimitInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *RateLimitErrorMessageResponse_LimitInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Current

	// no validation rules for Limit

	if all {
		switch v := interface{}(m.GetResetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RateLimitErrorMessageResponse_LimitInfoValidationError{
					field:  "ResetTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RateLimitErrorMessageResponse_LimitInfoValidationError{
					field:  "ResetTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RateLimitErrorMessageResponse_LimitInfoValidationError{
				field:  "ResetTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WindowSize

	if len(errors) > 0 {
		return RateLimitErrorMessageResponse_LimitInfoMultiError(errors)
	}

	return nil
}

// RateLimitErrorMessageResponse_LimitInfoMultiError is an error wrapping
// multiple validation errors returned by
// RateLimitErrorMessageResponse_LimitInfo.ValidateAll() if the designated
// constraints aren't met.
type RateLimitErrorMessageResponse_LimitInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RateLimitErrorMessageResponse_LimitInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RateLimitErrorMessageResponse_LimitInfoMultiError) AllErrors() []error { return m }

// RateLimitErrorMessageResponse_LimitInfoValidationError is the validation
// error returned by RateLimitErrorMessageResponse_LimitInfo.Validate if the
// designated constraints aren't met.
type RateLimitErrorMessageResponse_LimitInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RateLimitErrorMessageResponse_LimitInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RateLimitErrorMessageResponse_LimitInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RateLimitErrorMessageResponse_LimitInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RateLimitErrorMessageResponse_LimitInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RateLimitErrorMessageResponse_LimitInfoValidationError) ErrorName() string {
	return "RateLimitErrorMessageResponse_LimitInfoValidationError"
}

// Error satisfies the builtin error interface
func (e RateLimitErrorMessageResponse_LimitInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRateLimitErrorMessageResponse_LimitInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RateLimitErrorMessageResponse_LimitInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RateLimitErrorMessageResponse_LimitInfoValidationError{}

// Validate checks the field values on RateLimitErrorMessageResponse_QuotaInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RateLimitErrorMessageResponse_QuotaInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RateLimitErrorMessageResponse_QuotaInfo with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RateLimitErrorMessageResponse_QuotaInfoMultiError, or nil if none found.
func (m *RateLimitErrorMessageResponse_QuotaInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *RateLimitErrorMessageResponse_QuotaInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Resource

	// no validation rules for Used

	// no validation rules for Limit

	if all {
		switch v := interface{}(m.GetResetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RateLimitErrorMessageResponse_QuotaInfoValidationError{
					field:  "ResetTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RateLimitErrorMessageResponse_QuotaInfoValidationError{
					field:  "ResetTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RateLimitErrorMessageResponse_QuotaInfoValidationError{
				field:  "ResetTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ResourceUsage

	if len(errors) > 0 {
		return RateLimitErrorMessageResponse_QuotaInfoMultiError(errors)
	}

	return nil
}

// RateLimitErrorMessageResponse_QuotaInfoMultiError is an error wrapping
// multiple validation errors returned by
// RateLimitErrorMessageResponse_QuotaInfo.ValidateAll() if the designated
// constraints aren't met.
type RateLimitErrorMessageResponse_QuotaInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RateLimitErrorMessageResponse_QuotaInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RateLimitErrorMessageResponse_QuotaInfoMultiError) AllErrors() []error { return m }

// RateLimitErrorMessageResponse_QuotaInfoValidationError is the validation
// error returned by RateLimitErrorMessageResponse_QuotaInfo.Validate if the
// designated constraints aren't met.
type RateLimitErrorMessageResponse_QuotaInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RateLimitErrorMessageResponse_QuotaInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RateLimitErrorMessageResponse_QuotaInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RateLimitErrorMessageResponse_QuotaInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RateLimitErrorMessageResponse_QuotaInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RateLimitErrorMessageResponse_QuotaInfoValidationError) ErrorName() string {
	return "RateLimitErrorMessageResponse_QuotaInfoValidationError"
}

// Error satisfies the builtin error interface
func (e RateLimitErrorMessageResponse_QuotaInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRateLimitErrorMessageResponse_QuotaInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RateLimitErrorMessageResponse_QuotaInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RateLimitErrorMessageResponse_QuotaInfoValidationError{}

// Validate checks the field values on
// RateLimitErrorMessageResponse_RateLimitContext with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RateLimitErrorMessageResponse_RateLimitContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RateLimitErrorMessageResponse_RateLimitContext with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RateLimitErrorMessageResponse_RateLimitContextMultiError, or nil if none found.
func (m *RateLimitErrorMessageResponse_RateLimitContext) ValidateAll() error {
	return m.validate(true)
}

func (m *RateLimitErrorMessageResponse_RateLimitContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for IpAddress

	// no validation rules for Headers

	if len(errors) > 0 {
		return RateLimitErrorMessageResponse_RateLimitContextMultiError(errors)
	}

	return nil
}

// RateLimitErrorMessageResponse_RateLimitContextMultiError is an error
// wrapping multiple validation errors returned by
// RateLimitErrorMessageResponse_RateLimitContext.ValidateAll() if the
// designated constraints aren't met.
type RateLimitErrorMessageResponse_RateLimitContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RateLimitErrorMessageResponse_RateLimitContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RateLimitErrorMessageResponse_RateLimitContextMultiError) AllErrors() []error { return m }

// RateLimitErrorMessageResponse_RateLimitContextValidationError is the
// validation error returned by
// RateLimitErrorMessageResponse_RateLimitContext.Validate if the designated
// constraints aren't met.
type RateLimitErrorMessageResponse_RateLimitContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RateLimitErrorMessageResponse_RateLimitContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RateLimitErrorMessageResponse_RateLimitContextValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RateLimitErrorMessageResponse_RateLimitContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RateLimitErrorMessageResponse_RateLimitContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RateLimitErrorMessageResponse_RateLimitContextValidationError) ErrorName() string {
	return "RateLimitErrorMessageResponse_RateLimitContextValidationError"
}

// Error satisfies the builtin error interface
func (e RateLimitErrorMessageResponse_RateLimitContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRateLimitErrorMessageResponse_RateLimitContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RateLimitErrorMessageResponse_RateLimitContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RateLimitErrorMessageResponse_RateLimitContextValidationError{}

// Validate checks the field values on
// ConflictErrorMessageResponse_ConflictInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConflictErrorMessageResponse_ConflictInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ConflictErrorMessageResponse_ConflictInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ConflictErrorMessageResponse_ConflictInfoMultiError, or nil if none found.
func (m *ConflictErrorMessageResponse_ConflictInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ConflictErrorMessageResponse_ConflictInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceType

	// no validation rules for Identifier

	// no validation rules for ConflictReason

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConflictErrorMessageResponse_ConflictInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConflictErrorMessageResponse_ConflictInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConflictErrorMessageResponse_ConflictInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedBy

	if len(errors) > 0 {
		return ConflictErrorMessageResponse_ConflictInfoMultiError(errors)
	}

	return nil
}

// ConflictErrorMessageResponse_ConflictInfoMultiError is an error wrapping
// multiple validation errors returned by
// ConflictErrorMessageResponse_ConflictInfo.ValidateAll() if the designated
// constraints aren't met.
type ConflictErrorMessageResponse_ConflictInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConflictErrorMessageResponse_ConflictInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConflictErrorMessageResponse_ConflictInfoMultiError) AllErrors() []error { return m }

// ConflictErrorMessageResponse_ConflictInfoValidationError is the validation
// error returned by ConflictErrorMessageResponse_ConflictInfo.Validate if the
// designated constraints aren't met.
type ConflictErrorMessageResponse_ConflictInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConflictErrorMessageResponse_ConflictInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConflictErrorMessageResponse_ConflictInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConflictErrorMessageResponse_ConflictInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConflictErrorMessageResponse_ConflictInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConflictErrorMessageResponse_ConflictInfoValidationError) ErrorName() string {
	return "ConflictErrorMessageResponse_ConflictInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ConflictErrorMessageResponse_ConflictInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConflictErrorMessageResponse_ConflictInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConflictErrorMessageResponse_ConflictInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConflictErrorMessageResponse_ConflictInfoValidationError{}

// Validate checks the field values on
// ServiceUnavailableErrorMessageResponse_AvailabilityInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceUnavailableErrorMessageResponse_AvailabilityInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ServiceUnavailableErrorMessageResponse_AvailabilityInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceUnavailableErrorMessageResponse_AvailabilityInfoMultiError, or nil
// if none found.
func (m *ServiceUnavailableErrorMessageResponse_AvailabilityInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceUnavailableErrorMessageResponse_AvailabilityInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RetryAfter

	// no validation rules for MaintenanceWindow

	// no validation rules for StatusPageUrl

	if len(errors) > 0 {
		return ServiceUnavailableErrorMessageResponse_AvailabilityInfoMultiError(errors)
	}

	return nil
}

// ServiceUnavailableErrorMessageResponse_AvailabilityInfoMultiError is an
// error wrapping multiple validation errors returned by
// ServiceUnavailableErrorMessageResponse_AvailabilityInfo.ValidateAll() if
// the designated constraints aren't met.
type ServiceUnavailableErrorMessageResponse_AvailabilityInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceUnavailableErrorMessageResponse_AvailabilityInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceUnavailableErrorMessageResponse_AvailabilityInfoMultiError) AllErrors() []error {
	return m
}

// ServiceUnavailableErrorMessageResponse_AvailabilityInfoValidationError is
// the validation error returned by
// ServiceUnavailableErrorMessageResponse_AvailabilityInfo.Validate if the
// designated constraints aren't met.
type ServiceUnavailableErrorMessageResponse_AvailabilityInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceUnavailableErrorMessageResponse_AvailabilityInfoValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ServiceUnavailableErrorMessageResponse_AvailabilityInfoValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ServiceUnavailableErrorMessageResponse_AvailabilityInfoValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ServiceUnavailableErrorMessageResponse_AvailabilityInfoValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ServiceUnavailableErrorMessageResponse_AvailabilityInfoValidationError) ErrorName() string {
	return "ServiceUnavailableErrorMessageResponse_AvailabilityInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceUnavailableErrorMessageResponse_AvailabilityInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceUnavailableErrorMessageResponse_AvailabilityInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceUnavailableErrorMessageResponse_AvailabilityInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceUnavailableErrorMessageResponse_AvailabilityInfoValidationError{}

// Validate checks the field values on
// UnprocessableEntityErrorMessageResponse_FieldError with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UnprocessableEntityErrorMessageResponse_FieldError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UnprocessableEntityErrorMessageResponse_FieldError with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UnprocessableEntityErrorMessageResponse_FieldErrorMultiError, or nil if
// none found.
func (m *UnprocessableEntityErrorMessageResponse_FieldError) ValidateAll() error {
	return m.validate(true)
}

func (m *UnprocessableEntityErrorMessageResponse_FieldError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Error

	if len(errors) > 0 {
		return UnprocessableEntityErrorMessageResponse_FieldErrorMultiError(errors)
	}

	return nil
}

// UnprocessableEntityErrorMessageResponse_FieldErrorMultiError is an error
// wrapping multiple validation errors returned by
// UnprocessableEntityErrorMessageResponse_FieldError.ValidateAll() if the
// designated constraints aren't met.
type UnprocessableEntityErrorMessageResponse_FieldErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnprocessableEntityErrorMessageResponse_FieldErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnprocessableEntityErrorMessageResponse_FieldErrorMultiError) AllErrors() []error { return m }

// UnprocessableEntityErrorMessageResponse_FieldErrorValidationError is the
// validation error returned by
// UnprocessableEntityErrorMessageResponse_FieldError.Validate if the
// designated constraints aren't met.
type UnprocessableEntityErrorMessageResponse_FieldErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnprocessableEntityErrorMessageResponse_FieldErrorValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UnprocessableEntityErrorMessageResponse_FieldErrorValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UnprocessableEntityErrorMessageResponse_FieldErrorValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UnprocessableEntityErrorMessageResponse_FieldErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnprocessableEntityErrorMessageResponse_FieldErrorValidationError) ErrorName() string {
	return "UnprocessableEntityErrorMessageResponse_FieldErrorValidationError"
}

// Error satisfies the builtin error interface
func (e UnprocessableEntityErrorMessageResponse_FieldErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnprocessableEntityErrorMessageResponse_FieldError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnprocessableEntityErrorMessageResponse_FieldErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnprocessableEntityErrorMessageResponse_FieldErrorValidationError{}

// Validate checks the field values on
// PaymentRequiredErrorMessageResponse_PaymentInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentRequiredErrorMessageResponse_PaymentInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PaymentRequiredErrorMessageResponse_PaymentInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// PaymentRequiredErrorMessageResponse_PaymentInfoMultiError, or nil if none found.
func (m *PaymentRequiredErrorMessageResponse_PaymentInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentRequiredErrorMessageResponse_PaymentInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AmountDue

	// no validation rules for Currency

	if all {
		switch v := interface{}(m.GetDueDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentRequiredErrorMessageResponse_PaymentInfoValidationError{
					field:  "DueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentRequiredErrorMessageResponse_PaymentInfoValidationError{
					field:  "DueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentRequiredErrorMessageResponse_PaymentInfoValidationError{
				field:  "DueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PaymentUrl

	if len(errors) > 0 {
		return PaymentRequiredErrorMessageResponse_PaymentInfoMultiError(errors)
	}

	return nil
}

// PaymentRequiredErrorMessageResponse_PaymentInfoMultiError is an error
// wrapping multiple validation errors returned by
// PaymentRequiredErrorMessageResponse_PaymentInfo.ValidateAll() if the
// designated constraints aren't met.
type PaymentRequiredErrorMessageResponse_PaymentInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentRequiredErrorMessageResponse_PaymentInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentRequiredErrorMessageResponse_PaymentInfoMultiError) AllErrors() []error { return m }

// PaymentRequiredErrorMessageResponse_PaymentInfoValidationError is the
// validation error returned by
// PaymentRequiredErrorMessageResponse_PaymentInfo.Validate if the designated
// constraints aren't met.
type PaymentRequiredErrorMessageResponse_PaymentInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentRequiredErrorMessageResponse_PaymentInfoValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e PaymentRequiredErrorMessageResponse_PaymentInfoValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e PaymentRequiredErrorMessageResponse_PaymentInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentRequiredErrorMessageResponse_PaymentInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentRequiredErrorMessageResponse_PaymentInfoValidationError) ErrorName() string {
	return "PaymentRequiredErrorMessageResponse_PaymentInfoValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentRequiredErrorMessageResponse_PaymentInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentRequiredErrorMessageResponse_PaymentInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentRequiredErrorMessageResponse_PaymentInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentRequiredErrorMessageResponse_PaymentInfoValidationError{}
