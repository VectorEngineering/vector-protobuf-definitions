// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: workspace_service/v1/request_response.proto

package workspace_servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountRequestMultiError, or nil if none found.
func (m *CreateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAuth0UserId()) < 1 {
		err := CreateAccountRequestValidationError{
			field:  "Auth0UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateAccountRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BaseDirectory

	if utf8.RuneCountInString(m.GetRegion()) < 2 {
		err := CreateAccountRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrgId() <= 0 {
		err := CreateAccountRequestValidationError{
			field:  "OrgId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTenantId() <= 0 {
		err := CreateAccountRequestValidationError{
			field:  "TenantId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MfaEnabled

	// no validation rules for ComplianceLevel

	// no validation rules for Preferences

	if len(errors) > 0 {
		return CreateAccountRequestMultiError(errors)
	}

	return nil
}

func (m *CreateAccountRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateAccountRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountRequestMultiError) AllErrors() []error { return m }

// CreateAccountRequestValidationError is the validation error returned by
// CreateAccountRequest.Validate if the designated constraints aren't met.
type CreateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountRequestValidationError) ErrorName() string {
	return "CreateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountRequestValidationError{}

// Validate checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountResponseMultiError, or nil if none found.
func (m *CreateAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccountResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitialWorkspaceName

	if len(errors) > 0 {
		return CreateAccountResponseMultiError(errors)
	}

	return nil
}

// CreateAccountResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountResponseMultiError) AllErrors() []error { return m }

// CreateAccountResponseValidationError is the validation error returned by
// CreateAccountResponse.Validate if the designated constraints aren't met.
type CreateAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountResponseValidationError) ErrorName() string {
	return "CreateAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountResponseValidationError{}

// Validate checks the field values on GetAccountRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountRequestMultiError, or nil if none found.
func (m *GetAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetAccountRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountRequestMultiError(errors)
	}

	return nil
}

// GetAccountRequestMultiError is an error wrapping multiple validation errors
// returned by GetAccountRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountRequestMultiError) AllErrors() []error { return m }

// GetAccountRequestValidationError is the validation error returned by
// GetAccountRequest.Validate if the designated constraints aren't met.
type GetAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountRequestValidationError) ErrorName() string {
	return "GetAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountRequestValidationError{}

// Validate checks the field values on GetAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountResponseMultiError, or nil if none found.
func (m *GetAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountResponseMultiError(errors)
	}

	return nil
}

// GetAccountResponseMultiError is an error wrapping multiple validation errors
// returned by GetAccountResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountResponseMultiError) AllErrors() []error { return m }

// GetAccountResponseValidationError is the validation error returned by
// GetAccountResponse.Validate if the designated constraints aren't met.
type GetAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountResponseValidationError) ErrorName() string {
	return "GetAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountResponseValidationError{}

// Validate checks the field values on UpdateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountRequestMultiError, or nil if none found.
func (m *UpdateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountRequestValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountRequestValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountRequestValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAccountRequestMultiError(errors)
	}

	return nil
}

// UpdateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountRequestMultiError) AllErrors() []error { return m }

// UpdateAccountRequestValidationError is the validation error returned by
// UpdateAccountRequest.Validate if the designated constraints aren't met.
type UpdateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountRequestValidationError) ErrorName() string {
	return "UpdateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountRequestValidationError{}

// Validate checks the field values on UpdateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountResponseMultiError, or nil if none found.
func (m *UpdateAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAccountResponseMultiError(errors)
	}

	return nil
}

// UpdateAccountResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountResponseMultiError) AllErrors() []error { return m }

// UpdateAccountResponseValidationError is the validation error returned by
// UpdateAccountResponse.Validate if the designated constraints aren't met.
type UpdateAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountResponseValidationError) ErrorName() string {
	return "UpdateAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountResponseValidationError{}

// Validate checks the field values on DeleteAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccountRequestMultiError, or nil if none found.
func (m *DeleteAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAccountRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAccountRequestMultiError(errors)
	}

	return nil
}

// DeleteAccountRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountRequestMultiError) AllErrors() []error { return m }

// DeleteAccountRequestValidationError is the validation error returned by
// DeleteAccountRequest.Validate if the designated constraints aren't met.
type DeleteAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountRequestValidationError) ErrorName() string {
	return "DeleteAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountRequestValidationError{}

// Validate checks the field values on DeleteAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccountResponseMultiError, or nil if none found.
func (m *DeleteAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteAccountResponseMultiError(errors)
	}

	return nil
}

// DeleteAccountResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountResponseMultiError) AllErrors() []error { return m }

// DeleteAccountResponseValidationError is the validation error returned by
// DeleteAccountResponse.Validate if the designated constraints aren't met.
type DeleteAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountResponseValidationError) ErrorName() string {
	return "DeleteAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountResponseValidationError{}

// Validate checks the field values on ListAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccountsRequestMultiError, or nil if none found.
func (m *ListAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for TenantId

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListAccountsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	// no validation rules for Filter

	if len(errors) > 0 {
		return ListAccountsRequestMultiError(errors)
	}

	return nil
}

// ListAccountsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAccountsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountsRequestMultiError) AllErrors() []error { return m }

// ListAccountsRequestValidationError is the validation error returned by
// ListAccountsRequest.Validate if the designated constraints aren't met.
type ListAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountsRequestValidationError) ErrorName() string {
	return "ListAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountsRequestValidationError{}

// Validate checks the field values on ListAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccountsResponseMultiError, or nil if none found.
func (m *ListAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccountsResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListAccountsResponseMultiError(errors)
	}

	return nil
}

// ListAccountsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAccountsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountsResponseMultiError) AllErrors() []error { return m }

// ListAccountsResponseValidationError is the validation error returned by
// ListAccountsResponse.Validate if the designated constraints aren't met.
type ListAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountsResponseValidationError) ErrorName() string {
	return "ListAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountsResponseValidationError{}

// Validate checks the field values on CreateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkspaceRequestMultiError, or nil if none found.
func (m *CreateWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccountId() <= 0 {
		err := CreateWorkspaceRequestValidationError{
			field:  "AccountId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := CreateWorkspaceRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateWorkspaceRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateWorkspaceRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9-_ ]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StorageQuota

	// no validation rules for AllowPublicSharing

	// no validation rules for RequireApproval

	// no validation rules for GdprCompliant

	// no validation rules for HipaaCompliant

	if len(errors) > 0 {
		return CreateWorkspaceRequestMultiError(errors)
	}

	return nil
}

// CreateWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkspaceRequestMultiError) AllErrors() []error { return m }

// CreateWorkspaceRequestValidationError is the validation error returned by
// CreateWorkspaceRequest.Validate if the designated constraints aren't met.
type CreateWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkspaceRequestValidationError) ErrorName() string {
	return "CreateWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkspaceRequestValidationError{}

var _CreateWorkspaceRequest_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9-_ ]+$")

// Validate checks the field values on CreateWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkspaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkspaceResponseMultiError, or nil if none found.
func (m *CreateWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkspaceResponseValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWorkspaceResponseMultiError(errors)
	}

	return nil
}

// CreateWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkspaceResponseMultiError) AllErrors() []error { return m }

// CreateWorkspaceResponseValidationError is the validation error returned by
// CreateWorkspaceResponse.Validate if the designated constraints aren't met.
type CreateWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkspaceResponseValidationError) ErrorName() string {
	return "CreateWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkspaceResponseValidationError{}

// Validate checks the field values on GetWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkspaceRequestMultiError, or nil if none found.
func (m *GetWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetWorkspaceRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWorkspaceRequestMultiError(errors)
	}

	return nil
}

// GetWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by GetWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceRequestMultiError) AllErrors() []error { return m }

// GetWorkspaceRequestValidationError is the validation error returned by
// GetWorkspaceRequest.Validate if the designated constraints aren't met.
type GetWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceRequestValidationError) ErrorName() string {
	return "GetWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceRequestValidationError{}

// Validate checks the field values on GetWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkspaceResponseMultiError, or nil if none found.
func (m *GetWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkspaceResponseValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWorkspaceResponseMultiError(errors)
	}

	return nil
}

// GetWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by GetWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceResponseMultiError) AllErrors() []error { return m }

// GetWorkspaceResponseValidationError is the validation error returned by
// GetWorkspaceResponse.Validate if the designated constraints aren't met.
type GetWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceResponseValidationError) ErrorName() string {
	return "GetWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceResponseValidationError{}

// Validate checks the field values on UpdateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkspaceRequestMultiError, or nil if none found.
func (m *UpdateWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkspaceRequestValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkspaceRequestValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkspaceRequestValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkspaceRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkspaceRequestMultiError) AllErrors() []error { return m }

// UpdateWorkspaceRequestValidationError is the validation error returned by
// UpdateWorkspaceRequest.Validate if the designated constraints aren't met.
type UpdateWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkspaceRequestValidationError) ErrorName() string {
	return "UpdateWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkspaceRequestValidationError{}

// Validate checks the field values on UpdateWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkspaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkspaceResponseMultiError, or nil if none found.
func (m *UpdateWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkspaceResponseValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkspaceResponseMultiError(errors)
	}

	return nil
}

// UpdateWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkspaceResponseMultiError) AllErrors() []error { return m }

// UpdateWorkspaceResponseValidationError is the validation error returned by
// UpdateWorkspaceResponse.Validate if the designated constraints aren't met.
type UpdateWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkspaceResponseValidationError) ErrorName() string {
	return "UpdateWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkspaceResponseValidationError{}

// Validate checks the field values on DeleteWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkspaceRequestMultiError, or nil if none found.
func (m *DeleteWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteWorkspaceRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteWorkspaceRequestMultiError(errors)
	}

	return nil
}

// DeleteWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkspaceRequestMultiError) AllErrors() []error { return m }

// DeleteWorkspaceRequestValidationError is the validation error returned by
// DeleteWorkspaceRequest.Validate if the designated constraints aren't met.
type DeleteWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkspaceRequestValidationError) ErrorName() string {
	return "DeleteWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkspaceRequestValidationError{}

// Validate checks the field values on DeleteWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkspaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkspaceResponseMultiError, or nil if none found.
func (m *DeleteWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteWorkspaceResponseMultiError(errors)
	}

	return nil
}

// DeleteWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkspaceResponseMultiError) AllErrors() []error { return m }

// DeleteWorkspaceResponseValidationError is the validation error returned by
// DeleteWorkspaceResponse.Validate if the designated constraints aren't met.
type DeleteWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkspaceResponseValidationError) ErrorName() string {
	return "DeleteWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkspaceResponseValidationError{}

// Validate checks the field values on ListWorkspacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkspacesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkspacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkspacesRequestMultiError, or nil if none found.
func (m *ListWorkspacesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkspacesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccountId() <= 0 {
		err := ListWorkspacesRequestValidationError{
			field:  "AccountId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListWorkspacesRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	// no validation rules for Filter

	if len(errors) > 0 {
		return ListWorkspacesRequestMultiError(errors)
	}

	return nil
}

// ListWorkspacesRequestMultiError is an error wrapping multiple validation
// errors returned by ListWorkspacesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWorkspacesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkspacesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkspacesRequestMultiError) AllErrors() []error { return m }

// ListWorkspacesRequestValidationError is the validation error returned by
// ListWorkspacesRequest.Validate if the designated constraints aren't met.
type ListWorkspacesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkspacesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkspacesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkspacesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkspacesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkspacesRequestValidationError) ErrorName() string {
	return "ListWorkspacesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkspacesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkspacesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkspacesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkspacesRequestValidationError{}

// Validate checks the field values on ListWorkspacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkspacesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkspacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkspacesResponseMultiError, or nil if none found.
func (m *ListWorkspacesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkspacesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWorkspaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkspacesResponseValidationError{
						field:  fmt.Sprintf("Workspaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkspacesResponseValidationError{
						field:  fmt.Sprintf("Workspaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkspacesResponseValidationError{
					field:  fmt.Sprintf("Workspaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListWorkspacesResponseMultiError(errors)
	}

	return nil
}

// ListWorkspacesResponseMultiError is an error wrapping multiple validation
// errors returned by ListWorkspacesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWorkspacesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkspacesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkspacesResponseMultiError) AllErrors() []error { return m }

// ListWorkspacesResponseValidationError is the validation error returned by
// ListWorkspacesResponse.Validate if the designated constraints aren't met.
type ListWorkspacesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkspacesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkspacesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkspacesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkspacesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkspacesResponseValidationError) ErrorName() string {
	return "ListWorkspacesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkspacesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkspacesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkspacesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkspacesResponseValidationError{}

// Validate checks the field values on ShareWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShareWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareWorkspaceRequestMultiError, or nil if none found.
func (m *ShareWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWorkspaceId() <= 0 {
		err := ShareWorkspaceRequestValidationError{
			field:  "WorkspaceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetSharedWithEmail()); err != nil {
		err = ShareWorkspaceRequestValidationError{
			field:  "SharedWithEmail",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ShareWorkspaceRequest_PermissionLevel_InLookup[m.GetPermissionLevel()]; !ok {
		err := ShareWorkspaceRequestValidationError{
			field:  "PermissionLevel",
			reason: "value must be in list [viewer editor admin]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareWorkspaceRequestValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareWorkspaceRequestValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareWorkspaceRequestValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShareWorkspaceRequestMultiError(errors)
	}

	return nil
}

func (m *ShareWorkspaceRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *ShareWorkspaceRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// ShareWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by ShareWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type ShareWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareWorkspaceRequestMultiError) AllErrors() []error { return m }

// ShareWorkspaceRequestValidationError is the validation error returned by
// ShareWorkspaceRequest.Validate if the designated constraints aren't met.
type ShareWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareWorkspaceRequestValidationError) ErrorName() string {
	return "ShareWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShareWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareWorkspaceRequestValidationError{}

var _ShareWorkspaceRequest_PermissionLevel_InLookup = map[string]struct{}{
	"viewer": {},
	"editor": {},
	"admin":  {},
}

// Validate checks the field values on ShareWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShareWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareWorkspaceResponseMultiError, or nil if none found.
func (m *ShareWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSharing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareWorkspaceResponseValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareWorkspaceResponseValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareWorkspaceResponseValidationError{
				field:  "Sharing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShareWorkspaceResponseMultiError(errors)
	}

	return nil
}

// ShareWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by ShareWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type ShareWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareWorkspaceResponseMultiError) AllErrors() []error { return m }

// ShareWorkspaceResponseValidationError is the validation error returned by
// ShareWorkspaceResponse.Validate if the designated constraints aren't met.
type ShareWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareWorkspaceResponseValidationError) ErrorName() string {
	return "ShareWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ShareWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareWorkspaceResponseValidationError{}

// Validate checks the field values on UpdateWorkspaceSharingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkspaceSharingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkspaceSharingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateWorkspaceSharingRequestMultiError, or nil if none found.
func (m *UpdateWorkspaceSharingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkspaceSharingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSharing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkspaceSharingRequestValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkspaceSharingRequestValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkspaceSharingRequestValidationError{
				field:  "Sharing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkspaceSharingRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkspaceSharingRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateWorkspaceSharingRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateWorkspaceSharingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkspaceSharingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkspaceSharingRequestMultiError) AllErrors() []error { return m }

// UpdateWorkspaceSharingRequestValidationError is the validation error
// returned by UpdateWorkspaceSharingRequest.Validate if the designated
// constraints aren't met.
type UpdateWorkspaceSharingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkspaceSharingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkspaceSharingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkspaceSharingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkspaceSharingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkspaceSharingRequestValidationError) ErrorName() string {
	return "UpdateWorkspaceSharingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkspaceSharingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkspaceSharingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkspaceSharingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkspaceSharingRequestValidationError{}

// Validate checks the field values on UpdateWorkspaceSharingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkspaceSharingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkspaceSharingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateWorkspaceSharingResponseMultiError, or nil if none found.
func (m *UpdateWorkspaceSharingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkspaceSharingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSharing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkspaceSharingResponseValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkspaceSharingResponseValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkspaceSharingResponseValidationError{
				field:  "Sharing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkspaceSharingResponseMultiError(errors)
	}

	return nil
}

// UpdateWorkspaceSharingResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateWorkspaceSharingResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateWorkspaceSharingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkspaceSharingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkspaceSharingResponseMultiError) AllErrors() []error { return m }

// UpdateWorkspaceSharingResponseValidationError is the validation error
// returned by UpdateWorkspaceSharingResponse.Validate if the designated
// constraints aren't met.
type UpdateWorkspaceSharingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkspaceSharingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkspaceSharingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkspaceSharingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkspaceSharingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkspaceSharingResponseValidationError) ErrorName() string {
	return "UpdateWorkspaceSharingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkspaceSharingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkspaceSharingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkspaceSharingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkspaceSharingResponseValidationError{}

// Validate checks the field values on RemoveWorkspaceSharingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveWorkspaceSharingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveWorkspaceSharingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveWorkspaceSharingRequestMultiError, or nil if none found.
func (m *RemoveWorkspaceSharingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveWorkspaceSharingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSharingId() <= 0 {
		err := RemoveWorkspaceSharingRequestValidationError{
			field:  "SharingId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveWorkspaceSharingRequestMultiError(errors)
	}

	return nil
}

// RemoveWorkspaceSharingRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveWorkspaceSharingRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveWorkspaceSharingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveWorkspaceSharingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveWorkspaceSharingRequestMultiError) AllErrors() []error { return m }

// RemoveWorkspaceSharingRequestValidationError is the validation error
// returned by RemoveWorkspaceSharingRequest.Validate if the designated
// constraints aren't met.
type RemoveWorkspaceSharingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveWorkspaceSharingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveWorkspaceSharingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveWorkspaceSharingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveWorkspaceSharingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveWorkspaceSharingRequestValidationError) ErrorName() string {
	return "RemoveWorkspaceSharingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveWorkspaceSharingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveWorkspaceSharingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveWorkspaceSharingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveWorkspaceSharingRequestValidationError{}

// Validate checks the field values on RemoveWorkspaceSharingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveWorkspaceSharingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveWorkspaceSharingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveWorkspaceSharingResponseMultiError, or nil if none found.
func (m *RemoveWorkspaceSharingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveWorkspaceSharingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RemoveWorkspaceSharingResponseMultiError(errors)
	}

	return nil
}

// RemoveWorkspaceSharingResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveWorkspaceSharingResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveWorkspaceSharingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveWorkspaceSharingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveWorkspaceSharingResponseMultiError) AllErrors() []error { return m }

// RemoveWorkspaceSharingResponseValidationError is the validation error
// returned by RemoveWorkspaceSharingResponse.Validate if the designated
// constraints aren't met.
type RemoveWorkspaceSharingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveWorkspaceSharingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveWorkspaceSharingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveWorkspaceSharingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveWorkspaceSharingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveWorkspaceSharingResponseValidationError) ErrorName() string {
	return "RemoveWorkspaceSharingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveWorkspaceSharingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveWorkspaceSharingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveWorkspaceSharingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveWorkspaceSharingResponseValidationError{}

// Validate checks the field values on ListWorkspaceSharingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkspaceSharingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkspaceSharingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkspaceSharingsRequestMultiError, or nil if none found.
func (m *ListWorkspaceSharingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkspaceSharingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWorkspaceId() <= 0 {
		err := ListWorkspaceSharingsRequestValidationError{
			field:  "WorkspaceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListWorkspaceSharingsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListWorkspaceSharingsRequestMultiError(errors)
	}

	return nil
}

// ListWorkspaceSharingsRequestMultiError is an error wrapping multiple
// validation errors returned by ListWorkspaceSharingsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListWorkspaceSharingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkspaceSharingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkspaceSharingsRequestMultiError) AllErrors() []error { return m }

// ListWorkspaceSharingsRequestValidationError is the validation error returned
// by ListWorkspaceSharingsRequest.Validate if the designated constraints
// aren't met.
type ListWorkspaceSharingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkspaceSharingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkspaceSharingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkspaceSharingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkspaceSharingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkspaceSharingsRequestValidationError) ErrorName() string {
	return "ListWorkspaceSharingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkspaceSharingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkspaceSharingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkspaceSharingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkspaceSharingsRequestValidationError{}

// Validate checks the field values on ListWorkspaceSharingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkspaceSharingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkspaceSharingsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWorkspaceSharingsResponseMultiError, or nil if none found.
func (m *ListWorkspaceSharingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkspaceSharingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSharings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkspaceSharingsResponseValidationError{
						field:  fmt.Sprintf("Sharings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkspaceSharingsResponseValidationError{
						field:  fmt.Sprintf("Sharings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkspaceSharingsResponseValidationError{
					field:  fmt.Sprintf("Sharings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListWorkspaceSharingsResponseMultiError(errors)
	}

	return nil
}

// ListWorkspaceSharingsResponseMultiError is an error wrapping multiple
// validation errors returned by ListWorkspaceSharingsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListWorkspaceSharingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkspaceSharingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkspaceSharingsResponseMultiError) AllErrors() []error { return m }

// ListWorkspaceSharingsResponseValidationError is the validation error
// returned by ListWorkspaceSharingsResponse.Validate if the designated
// constraints aren't met.
type ListWorkspaceSharingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkspaceSharingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkspaceSharingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkspaceSharingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkspaceSharingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkspaceSharingsResponseValidationError) ErrorName() string {
	return "ListWorkspaceSharingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkspaceSharingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkspaceSharingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkspaceSharingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkspaceSharingsResponseValidationError{}

// Validate checks the field values on GetWorkspaceAnalyticsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceAnalyticsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspaceAnalyticsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkspaceAnalyticsRequestMultiError, or nil if none found.
func (m *GetWorkspaceAnalyticsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceAnalyticsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWorkspaceId() <= 0 {
		err := GetWorkspaceAnalyticsRequestValidationError{
			field:  "WorkspaceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkspaceAnalyticsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkspaceAnalyticsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkspaceAnalyticsRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkspaceAnalyticsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkspaceAnalyticsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkspaceAnalyticsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWorkspaceAnalyticsRequestMultiError(errors)
	}

	return nil
}

// GetWorkspaceAnalyticsRequestMultiError is an error wrapping multiple
// validation errors returned by GetWorkspaceAnalyticsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetWorkspaceAnalyticsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceAnalyticsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceAnalyticsRequestMultiError) AllErrors() []error { return m }

// GetWorkspaceAnalyticsRequestValidationError is the validation error returned
// by GetWorkspaceAnalyticsRequest.Validate if the designated constraints
// aren't met.
type GetWorkspaceAnalyticsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceAnalyticsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceAnalyticsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceAnalyticsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceAnalyticsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceAnalyticsRequestValidationError) ErrorName() string {
	return "GetWorkspaceAnalyticsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceAnalyticsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceAnalyticsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceAnalyticsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceAnalyticsRequestValidationError{}

// Validate checks the field values on GetWorkspaceAnalyticsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceAnalyticsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspaceAnalyticsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetWorkspaceAnalyticsResponseMultiError, or nil if none found.
func (m *GetWorkspaceAnalyticsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceAnalyticsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkspaceAnalyticsResponseValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkspaceAnalyticsResponseValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkspaceAnalyticsResponseValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetUserActivities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWorkspaceAnalyticsResponseValidationError{
						field:  fmt.Sprintf("UserActivities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWorkspaceAnalyticsResponseValidationError{
						field:  fmt.Sprintf("UserActivities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWorkspaceAnalyticsResponseValidationError{
					field:  fmt.Sprintf("UserActivities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCompliance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkspaceAnalyticsResponseValidationError{
					field:  "Compliance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkspaceAnalyticsResponseValidationError{
					field:  "Compliance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompliance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkspaceAnalyticsResponseValidationError{
				field:  "Compliance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRecentActivities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWorkspaceAnalyticsResponseValidationError{
						field:  fmt.Sprintf("RecentActivities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWorkspaceAnalyticsResponseValidationError{
						field:  fmt.Sprintf("RecentActivities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWorkspaceAnalyticsResponseValidationError{
					field:  fmt.Sprintf("RecentActivities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWorkspaceAnalyticsResponseMultiError(errors)
	}

	return nil
}

// GetWorkspaceAnalyticsResponseMultiError is an error wrapping multiple
// validation errors returned by GetWorkspaceAnalyticsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetWorkspaceAnalyticsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceAnalyticsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceAnalyticsResponseMultiError) AllErrors() []error { return m }

// GetWorkspaceAnalyticsResponseValidationError is the validation error
// returned by GetWorkspaceAnalyticsResponse.Validate if the designated
// constraints aren't met.
type GetWorkspaceAnalyticsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceAnalyticsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceAnalyticsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceAnalyticsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceAnalyticsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceAnalyticsResponseValidationError) ErrorName() string {
	return "GetWorkspaceAnalyticsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceAnalyticsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceAnalyticsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceAnalyticsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceAnalyticsResponseValidationError{}

// Validate checks the field values on GetWorkspaceComplianceReportRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWorkspaceComplianceReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspaceComplianceReportRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetWorkspaceComplianceReportRequestMultiError, or nil if none found.
func (m *GetWorkspaceComplianceReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceComplianceReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWorkspaceId() <= 0 {
		err := GetWorkspaceComplianceReportRequestValidationError{
			field:  "WorkspaceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetWorkspaceComplianceReportRequest_ComplianceType_InLookup[m.GetComplianceType()]; !ok {
		err := GetWorkspaceComplianceReportRequestValidationError{
			field:  "ComplianceType",
			reason: "value must be in list [gdpr hipaa sox pci]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWorkspaceComplianceReportRequestMultiError(errors)
	}

	return nil
}

// GetWorkspaceComplianceReportRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetWorkspaceComplianceReportRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWorkspaceComplianceReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceComplianceReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceComplianceReportRequestMultiError) AllErrors() []error { return m }

// GetWorkspaceComplianceReportRequestValidationError is the validation error
// returned by GetWorkspaceComplianceReportRequest.Validate if the designated
// constraints aren't met.
type GetWorkspaceComplianceReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceComplianceReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceComplianceReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceComplianceReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceComplianceReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceComplianceReportRequestValidationError) ErrorName() string {
	return "GetWorkspaceComplianceReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceComplianceReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceComplianceReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceComplianceReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceComplianceReportRequestValidationError{}

var _GetWorkspaceComplianceReportRequest_ComplianceType_InLookup = map[string]struct{}{
	"gdpr":  {},
	"hipaa": {},
	"sox":   {},
	"pci":   {},
}

// Validate checks the field values on GetWorkspaceComplianceReportResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetWorkspaceComplianceReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspaceComplianceReportResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetWorkspaceComplianceReportResponseMultiError, or nil if none found.
func (m *GetWorkspaceComplianceReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceComplianceReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OverallScore

	// no validation rules for ComplianceStatus

	for idx, item := range m.GetViolations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWorkspaceComplianceReportResponseValidationError{
						field:  fmt.Sprintf("Violations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWorkspaceComplianceReportResponseValidationError{
						field:  fmt.Sprintf("Violations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWorkspaceComplianceReportResponseValidationError{
					field:  fmt.Sprintf("Violations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCategoryScores() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWorkspaceComplianceReportResponseValidationError{
						field:  fmt.Sprintf("CategoryScores[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWorkspaceComplianceReportResponseValidationError{
						field:  fmt.Sprintf("CategoryScores[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWorkspaceComplianceReportResponseValidationError{
					field:  fmt.Sprintf("CategoryScores[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetReportGeneratedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkspaceComplianceReportResponseValidationError{
					field:  "ReportGeneratedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkspaceComplianceReportResponseValidationError{
					field:  "ReportGeneratedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReportGeneratedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkspaceComplianceReportResponseValidationError{
				field:  "ReportGeneratedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CertificationId

	if len(errors) > 0 {
		return GetWorkspaceComplianceReportResponseMultiError(errors)
	}

	return nil
}

// GetWorkspaceComplianceReportResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetWorkspaceComplianceReportResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWorkspaceComplianceReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceComplianceReportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceComplianceReportResponseMultiError) AllErrors() []error { return m }

// GetWorkspaceComplianceReportResponseValidationError is the validation error
// returned by GetWorkspaceComplianceReportResponse.Validate if the designated
// constraints aren't met.
type GetWorkspaceComplianceReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceComplianceReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceComplianceReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceComplianceReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceComplianceReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceComplianceReportResponseValidationError) ErrorName() string {
	return "GetWorkspaceComplianceReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceComplianceReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceComplianceReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceComplianceReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceComplianceReportResponseValidationError{}

// Validate checks the field values on GetWorkspaceStorageStatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceStorageStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspaceStorageStatsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetWorkspaceStorageStatsRequestMultiError, or nil if none found.
func (m *GetWorkspaceStorageStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceStorageStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWorkspaceId() <= 0 {
		err := GetWorkspaceStorageStatsRequestValidationError{
			field:  "WorkspaceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWorkspaceStorageStatsRequestMultiError(errors)
	}

	return nil
}

// GetWorkspaceStorageStatsRequestMultiError is an error wrapping multiple
// validation errors returned by GetWorkspaceStorageStatsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetWorkspaceStorageStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceStorageStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceStorageStatsRequestMultiError) AllErrors() []error { return m }

// GetWorkspaceStorageStatsRequestValidationError is the validation error
// returned by GetWorkspaceStorageStatsRequest.Validate if the designated
// constraints aren't met.
type GetWorkspaceStorageStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceStorageStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceStorageStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceStorageStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceStorageStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceStorageStatsRequestValidationError) ErrorName() string {
	return "GetWorkspaceStorageStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceStorageStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceStorageStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceStorageStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceStorageStatsRequestValidationError{}

// Validate checks the field values on GetWorkspaceStorageStatsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWorkspaceStorageStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspaceStorageStatsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetWorkspaceStorageStatsResponseMultiError, or nil if none found.
func (m *GetWorkspaceStorageStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceStorageStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalStorageUsed

	// no validation rules for StorageQuota

	// no validation rules for UsagePercentage

	for idx, item := range m.GetStorageByType() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWorkspaceStorageStatsResponseValidationError{
						field:  fmt.Sprintf("StorageByType[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWorkspaceStorageStatsResponseValidationError{
						field:  fmt.Sprintf("StorageByType[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWorkspaceStorageStatsResponseValidationError{
					field:  fmt.Sprintf("StorageByType[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalFiles

	// no validation rules for TotalFolders

	if all {
		switch v := interface{}(m.GetLastUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkspaceStorageStatsResponseValidationError{
					field:  "LastUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkspaceStorageStatsResponseValidationError{
					field:  "LastUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkspaceStorageStatsResponseValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWorkspaceStorageStatsResponseMultiError(errors)
	}

	return nil
}

// GetWorkspaceStorageStatsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetWorkspaceStorageStatsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWorkspaceStorageStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceStorageStatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceStorageStatsResponseMultiError) AllErrors() []error { return m }

// GetWorkspaceStorageStatsResponseValidationError is the validation error
// returned by GetWorkspaceStorageStatsResponse.Validate if the designated
// constraints aren't met.
type GetWorkspaceStorageStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceStorageStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceStorageStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceStorageStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceStorageStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceStorageStatsResponseValidationError) ErrorName() string {
	return "GetWorkspaceStorageStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceStorageStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceStorageStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceStorageStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceStorageStatsResponseValidationError{}

// Validate checks the field values on
// GetWorkspaceAnalyticsResponse_ActivityMetrics with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceAnalyticsResponse_ActivityMetrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetWorkspaceAnalyticsResponse_ActivityMetrics with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetWorkspaceAnalyticsResponse_ActivityMetricsMultiError, or nil if none found.
func (m *GetWorkspaceAnalyticsResponse_ActivityMetrics) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceAnalyticsResponse_ActivityMetrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalFiles

	// no validation rules for TotalFolders

	// no validation rules for ActiveUsers

	// no validation rules for StorageUsed

	// no validation rules for StorageUsagePercentage

	if len(errors) > 0 {
		return GetWorkspaceAnalyticsResponse_ActivityMetricsMultiError(errors)
	}

	return nil
}

// GetWorkspaceAnalyticsResponse_ActivityMetricsMultiError is an error wrapping
// multiple validation errors returned by
// GetWorkspaceAnalyticsResponse_ActivityMetrics.ValidateAll() if the
// designated constraints aren't met.
type GetWorkspaceAnalyticsResponse_ActivityMetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceAnalyticsResponse_ActivityMetricsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceAnalyticsResponse_ActivityMetricsMultiError) AllErrors() []error { return m }

// GetWorkspaceAnalyticsResponse_ActivityMetricsValidationError is the
// validation error returned by
// GetWorkspaceAnalyticsResponse_ActivityMetrics.Validate if the designated
// constraints aren't met.
type GetWorkspaceAnalyticsResponse_ActivityMetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceAnalyticsResponse_ActivityMetricsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceAnalyticsResponse_ActivityMetricsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetWorkspaceAnalyticsResponse_ActivityMetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceAnalyticsResponse_ActivityMetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceAnalyticsResponse_ActivityMetricsValidationError) ErrorName() string {
	return "GetWorkspaceAnalyticsResponse_ActivityMetricsValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceAnalyticsResponse_ActivityMetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceAnalyticsResponse_ActivityMetrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceAnalyticsResponse_ActivityMetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceAnalyticsResponse_ActivityMetricsValidationError{}

// Validate checks the field values on
// GetWorkspaceAnalyticsResponse_UserActivity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceAnalyticsResponse_UserActivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetWorkspaceAnalyticsResponse_UserActivity with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetWorkspaceAnalyticsResponse_UserActivityMultiError, or nil if none found.
func (m *GetWorkspaceAnalyticsResponse_UserActivity) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceAnalyticsResponse_UserActivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Email

	// no validation rules for FileOperations

	// no validation rules for CommentsMade

	// no validation rules for DocumentsProcessed

	if len(errors) > 0 {
		return GetWorkspaceAnalyticsResponse_UserActivityMultiError(errors)
	}

	return nil
}

// GetWorkspaceAnalyticsResponse_UserActivityMultiError is an error wrapping
// multiple validation errors returned by
// GetWorkspaceAnalyticsResponse_UserActivity.ValidateAll() if the designated
// constraints aren't met.
type GetWorkspaceAnalyticsResponse_UserActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceAnalyticsResponse_UserActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceAnalyticsResponse_UserActivityMultiError) AllErrors() []error { return m }

// GetWorkspaceAnalyticsResponse_UserActivityValidationError is the validation
// error returned by GetWorkspaceAnalyticsResponse_UserActivity.Validate if
// the designated constraints aren't met.
type GetWorkspaceAnalyticsResponse_UserActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceAnalyticsResponse_UserActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceAnalyticsResponse_UserActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceAnalyticsResponse_UserActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceAnalyticsResponse_UserActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceAnalyticsResponse_UserActivityValidationError) ErrorName() string {
	return "GetWorkspaceAnalyticsResponse_UserActivityValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceAnalyticsResponse_UserActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceAnalyticsResponse_UserActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceAnalyticsResponse_UserActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceAnalyticsResponse_UserActivityValidationError{}

// Validate checks the field values on
// GetWorkspaceAnalyticsResponse_ComplianceMetrics with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceAnalyticsResponse_ComplianceMetrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetWorkspaceAnalyticsResponse_ComplianceMetrics with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetWorkspaceAnalyticsResponse_ComplianceMetricsMultiError, or nil if none found.
func (m *GetWorkspaceAnalyticsResponse_ComplianceMetrics) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceAnalyticsResponse_ComplianceMetrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GdprComplianceScore

	// no validation rules for HipaaComplianceScore

	// no validation rules for PendingApprovals

	// no validation rules for ComplianceViolations

	if len(errors) > 0 {
		return GetWorkspaceAnalyticsResponse_ComplianceMetricsMultiError(errors)
	}

	return nil
}

// GetWorkspaceAnalyticsResponse_ComplianceMetricsMultiError is an error
// wrapping multiple validation errors returned by
// GetWorkspaceAnalyticsResponse_ComplianceMetrics.ValidateAll() if the
// designated constraints aren't met.
type GetWorkspaceAnalyticsResponse_ComplianceMetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceAnalyticsResponse_ComplianceMetricsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceAnalyticsResponse_ComplianceMetricsMultiError) AllErrors() []error { return m }

// GetWorkspaceAnalyticsResponse_ComplianceMetricsValidationError is the
// validation error returned by
// GetWorkspaceAnalyticsResponse_ComplianceMetrics.Validate if the designated
// constraints aren't met.
type GetWorkspaceAnalyticsResponse_ComplianceMetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceAnalyticsResponse_ComplianceMetricsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetWorkspaceAnalyticsResponse_ComplianceMetricsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetWorkspaceAnalyticsResponse_ComplianceMetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceAnalyticsResponse_ComplianceMetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceAnalyticsResponse_ComplianceMetricsValidationError) ErrorName() string {
	return "GetWorkspaceAnalyticsResponse_ComplianceMetricsValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceAnalyticsResponse_ComplianceMetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceAnalyticsResponse_ComplianceMetrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceAnalyticsResponse_ComplianceMetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceAnalyticsResponse_ComplianceMetricsValidationError{}

// Validate checks the field values on
// GetWorkspaceComplianceReportResponse_ComplianceViolation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceComplianceReportResponse_ComplianceViolation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetWorkspaceComplianceReportResponse_ComplianceViolation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkspaceComplianceReportResponse_ComplianceViolationMultiError, or nil
// if none found.
func (m *GetWorkspaceComplianceReportResponse_ComplianceViolation) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceComplianceReportResponse_ComplianceViolation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuleId

	// no validation rules for Severity

	// no validation rules for Description

	// no validation rules for RemediationSteps

	if len(errors) > 0 {
		return GetWorkspaceComplianceReportResponse_ComplianceViolationMultiError(errors)
	}

	return nil
}

// GetWorkspaceComplianceReportResponse_ComplianceViolationMultiError is an
// error wrapping multiple validation errors returned by
// GetWorkspaceComplianceReportResponse_ComplianceViolation.ValidateAll() if
// the designated constraints aren't met.
type GetWorkspaceComplianceReportResponse_ComplianceViolationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceComplianceReportResponse_ComplianceViolationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceComplianceReportResponse_ComplianceViolationMultiError) AllErrors() []error {
	return m
}

// GetWorkspaceComplianceReportResponse_ComplianceViolationValidationError is
// the validation error returned by
// GetWorkspaceComplianceReportResponse_ComplianceViolation.Validate if the
// designated constraints aren't met.
type GetWorkspaceComplianceReportResponse_ComplianceViolationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceComplianceReportResponse_ComplianceViolationValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetWorkspaceComplianceReportResponse_ComplianceViolationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetWorkspaceComplianceReportResponse_ComplianceViolationValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetWorkspaceComplianceReportResponse_ComplianceViolationValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetWorkspaceComplianceReportResponse_ComplianceViolationValidationError) ErrorName() string {
	return "GetWorkspaceComplianceReportResponse_ComplianceViolationValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceComplianceReportResponse_ComplianceViolationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceComplianceReportResponse_ComplianceViolation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceComplianceReportResponse_ComplianceViolationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceComplianceReportResponse_ComplianceViolationValidationError{}

// Validate checks the field values on
// GetWorkspaceComplianceReportResponse_ComplianceScore with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceComplianceReportResponse_ComplianceScore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetWorkspaceComplianceReportResponse_ComplianceScore with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetWorkspaceComplianceReportResponse_ComplianceScoreMultiError, or nil if
// none found.
func (m *GetWorkspaceComplianceReportResponse_ComplianceScore) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceComplianceReportResponse_ComplianceScore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Category

	// no validation rules for Score

	// no validation rules for Status

	if len(errors) > 0 {
		return GetWorkspaceComplianceReportResponse_ComplianceScoreMultiError(errors)
	}

	return nil
}

// GetWorkspaceComplianceReportResponse_ComplianceScoreMultiError is an error
// wrapping multiple validation errors returned by
// GetWorkspaceComplianceReportResponse_ComplianceScore.ValidateAll() if the
// designated constraints aren't met.
type GetWorkspaceComplianceReportResponse_ComplianceScoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceComplianceReportResponse_ComplianceScoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceComplianceReportResponse_ComplianceScoreMultiError) AllErrors() []error { return m }

// GetWorkspaceComplianceReportResponse_ComplianceScoreValidationError is the
// validation error returned by
// GetWorkspaceComplianceReportResponse_ComplianceScore.Validate if the
// designated constraints aren't met.
type GetWorkspaceComplianceReportResponse_ComplianceScoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceComplianceReportResponse_ComplianceScoreValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetWorkspaceComplianceReportResponse_ComplianceScoreValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetWorkspaceComplianceReportResponse_ComplianceScoreValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetWorkspaceComplianceReportResponse_ComplianceScoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceComplianceReportResponse_ComplianceScoreValidationError) ErrorName() string {
	return "GetWorkspaceComplianceReportResponse_ComplianceScoreValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceComplianceReportResponse_ComplianceScoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceComplianceReportResponse_ComplianceScore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceComplianceReportResponse_ComplianceScoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceComplianceReportResponse_ComplianceScoreValidationError{}

// Validate checks the field values on
// GetWorkspaceStorageStatsResponse_StorageBreakdown with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceStorageStatsResponse_StorageBreakdown) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetWorkspaceStorageStatsResponse_StorageBreakdown with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetWorkspaceStorageStatsResponse_StorageBreakdownMultiError, or nil if none found.
func (m *GetWorkspaceStorageStatsResponse_StorageBreakdown) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceStorageStatsResponse_StorageBreakdown) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileType

	// no validation rules for Size

	// no validation rules for FileCount

	if len(errors) > 0 {
		return GetWorkspaceStorageStatsResponse_StorageBreakdownMultiError(errors)
	}

	return nil
}

// GetWorkspaceStorageStatsResponse_StorageBreakdownMultiError is an error
// wrapping multiple validation errors returned by
// GetWorkspaceStorageStatsResponse_StorageBreakdown.ValidateAll() if the
// designated constraints aren't met.
type GetWorkspaceStorageStatsResponse_StorageBreakdownMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceStorageStatsResponse_StorageBreakdownMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceStorageStatsResponse_StorageBreakdownMultiError) AllErrors() []error { return m }

// GetWorkspaceStorageStatsResponse_StorageBreakdownValidationError is the
// validation error returned by
// GetWorkspaceStorageStatsResponse_StorageBreakdown.Validate if the
// designated constraints aren't met.
type GetWorkspaceStorageStatsResponse_StorageBreakdownValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceStorageStatsResponse_StorageBreakdownValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetWorkspaceStorageStatsResponse_StorageBreakdownValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetWorkspaceStorageStatsResponse_StorageBreakdownValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetWorkspaceStorageStatsResponse_StorageBreakdownValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceStorageStatsResponse_StorageBreakdownValidationError) ErrorName() string {
	return "GetWorkspaceStorageStatsResponse_StorageBreakdownValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceStorageStatsResponse_StorageBreakdownValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceStorageStatsResponse_StorageBreakdown.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceStorageStatsResponse_StorageBreakdownValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceStorageStatsResponse_StorageBreakdownValidationError{}
