export declare const getRandomString: (length?: number, characters?: string) => string;
export declare function getRandomFloatIn(minOrMax: number, maxOptional?: number, decimals?: number): number;
export declare const getRandomIntIn: (minOrMax: number, maxOptional?: number) => number;
export declare const getRandomPercent: (decimals?: number) => number;
/**
 * Randomly pick N unique element in array while excluding some if needed
 * @see https://stackoverflow.com/questions/19269545/how-to-get-a-number-of-random-elements-from-an-array
 */
export declare function pickMultipleUnique<T = any>(arr: T[], n: number, excluded?: T[]): T[];
/** Returns a random element in given array */
export declare const pickOne: <T = any>(arr: T[]) => T;
/** Returns a random element in given array but not of the excluded */
export declare const pickOneBut: <T = any>(arr: T[], excluded: T | T[]) => T;
/** Like pickOne but for typescript enums */
export declare function pickOneInEnum<T>(anEnum: T, excluded?: T[keyof T][]): T[keyof T];
/** Make an array of [min, max] empty elements */
export declare const makeArrayOfRandIn: (x?: number, y?: number) => any[];
//# sourceMappingURL=random.d.ts.map