// Generated TypeScript API Client
// Note: All imports are handled by the generator
{{!-- Remove duplicate imports since they're already included in the generated code --}}

import type { ZodiosInstance } from "@zodios/core";

// Generated schemas and endpoints
{{{zodSchemas}}}

export class ApiClient {
  private readonly client: ZodiosInstance<typeof endpoints>;

  constructor(baseUrl: string, options?: ZodiosOptions) {
    this.client = new Zodios(baseUrl, endpoints, options);
  }

  {{#each openApiSpec.paths}}
  {{#with this}}
  {{#if get}}
    async get{{capitalize (basename @key)}}({{#if get.parameters}}params: { 
      {{#each get.parameters}}
        {{this.name}}: {{#if (eq this.schema.type "integer")}}number{{else}}string{{/if}}{{#unless this.required}} | undefined{{/unless}};
      {{/each}}
    }{{/if}}) {
      return this.client.get<any, any>(
        "{{replacePathParams @key}}", 
        {
        {{#if get.parameters}}
          params: {
            {{#each get.parameters}}
              {{#if (eq this.in "path")}}
                {{this.name}}: params.{{this.name}},
              {{/if}}
            {{/each}}
          },
          {{#if (hasQueryParams get.parameters)}}
          queries: {
            {{#each get.parameters}}
              {{#if (eq this.in "query")}}
                {{this.name}}: {{#if (eq this.schema.type "integer")}}
                          (params.{{this.name}} ? Number(params.{{this.name}}) : undefined)
                        {{else}}
                          params.{{this.name}}
                        {{/if}}{{#unless @last}},{{/unless}}
              {{/if}}
            {{/each}}
          }
          {{/if}}
        {{/if}}
      });
    }
  {{/if}}

  {{#if post}}
    async create{{capitalize (basename @key)}}({{#if post.requestBody}}data: z.infer<typeof {{lookup post.requestBody.content.[application/json].schema.$ref "#/components/schemas/"}}>, {{/if}}{{#if post.parameters}}params: { 
      {{#each post.parameters}}
        {{this.name}}: {{#if (eq this.schema.type "integer")}}number{{else}}string{{/if}}{{#unless this.required}} | undefined{{/unless}};
      {{/each}}
    }{{/if}}) {
      return this.client.post<any, any>(
        "{{replacePathParams @key}}", 
        {{#if post.requestBody}}data{{else}}undefined{{/if}}, 
        {
        {{#if post.parameters}}
          params: {
            {{#each post.parameters}}
              {{#if (eq this.in "path")}}
                {{this.name}}: params.{{this.name}},
              {{/if}}
            {{/each}}
          },
          {{#if (hasQueryParams post.parameters)}}
          queries: {
            {{#each post.parameters}}
              {{#if (eq this.in "query")}}
                {{this.name}}: {{#if (eq this.schema.type "integer")}}
                          (params.{{this.name}} ? Number(params.{{this.name}}) : undefined)
                        {{else}}
                          params.{{this.name}}
                        {{/if}}{{#unless @last}},{{/unless}}
              {{/if}}
            {{/each}}
          }
          {{/if}}
        {{/if}}
      });
    }
  {{/if}}

  {{#if put}}
    async update{{capitalize (basename @key)}}({{#if put.requestBody}}data: z.infer<typeof {{lookup put.requestBody.content.[application/json].schema.$ref "#/components/schemas/"}}>, {{/if}}{{#if put.parameters}}params: { 
      {{#each put.parameters}}
        {{this.name}}: {{#if (eq this.schema.type "integer")}}number{{else}}string{{/if}}{{#unless this.required}} | undefined{{/unless}};
      {{/each}}
    }{{/if}}) {
      return this.client.put<any, any>(
        "{{replacePathParams @key}}", 
        {{#if put.requestBody}}data{{else}}undefined{{/if}}, 
        {
        {{#if put.parameters}}
          params: {
            {{#each put.parameters}}
              {{#if (eq this.in "path")}}
                {{this.name}}: params.{{this.name}},
              {{/if}}
            {{/each}}
          },
          {{#if (hasQueryParams put.parameters)}}
          queries: {
            {{#each put.parameters}}
              {{#if (eq this.in "query")}}
                {{this.name}}: {{#if (eq this.schema.type "integer")}}
                          (params.{{this.name}} ? Number(params.{{this.name}}) : undefined)
                        {{else}}
                          params.{{this.name}}
                        {{/if}}{{#unless @last}},{{/unless}}
              {{/if}}
            {{/each}}
          }
          {{/if}}
        {{/if}}
      });
    }
  {{/if}}

  {{#if delete}}
    async delete{{capitalize (basename @key)}}({{#if delete.parameters}}params: { 
      {{#each delete.parameters}}
        {{this.name}}: {{#if (eq this.schema.type "integer")}}number{{else}}string{{/if}}{{#unless this.required}} | undefined{{/unless}};
      {{/each}}
    }{{/if}}) {
      return this.client.delete<any, any>(
        "{{replacePathParams @key}}", 
        undefined, 
        {
        {{#if delete.parameters}}
          params: {
            {{#each delete.parameters}}
              {{#if (eq this.in "path")}}
                {{this.name}}: params.{{this.name}},
              {{/if}}
            {{/each}}
          },
          {{#if (hasQueryParams delete.parameters)}}
          queries: {
            {{#each delete.parameters}}
              {{#if (eq this.in "query")}}
                {{this.name}}: {{#if (eq this.schema.type "integer")}}
                          (params.{{this.name}} ? Number(params.{{this.name}}) : undefined)
                        {{else}}
                          params.{{this.name}}
                        {{/if}}{{#unless @last}},{{/unless}}
              {{/if}}
            {{/each}}
          }
          {{/if}}
        {{/if}}
      });
    }
  {{/if}}
  {{/with}}
  {{/each}}
}