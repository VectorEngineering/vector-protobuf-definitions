import { ApiClient } from '../client';
import type { Env } from '../types';
import { HTTPException } from 'hono/http-exception';
import { z } from "@hono/zod-openapi";
import { OpenAPIHono as Hono, createRoute } from "@hono/zod-openapi";
import { env } from "hono/adapter";
import { schemas } from '../client';

// Error response schema
const ErrorResponseSchema = z.object({
  error: z.string(),
  code: z.string().optional(),
  details: z.any().optional()
}).openapi({
  title: "Error Response",
  description: "Standard error response object"
});

// Route handler for {{path}}
const router = new Hono<{ Bindings: Env }>();

{{#if pathItem.get}}
const getRoute = createRoute({
  method: "get",
  path: "/",
  tags: ["{{@key}}"],
  summary: "{{pathItem.get.summary}}",
  description: "{{pathItem.get.description}}",
  {{#if pathItem.get.parameters}}
  request: {
    {{#if (hasPathParams pathItem.get.parameters)}}
    params: z.object({
      {{#each pathItem.get.parameters}}
      {{#if (eq this.in "path")}}
      {{this.name}}: {{#if (eq this.schema.type "integer")}}z.number(){{else}}z.string(){{/if}}{{#unless this.required}}.optional(){{/unless}},
      {{/if}}
      {{/each}}
    }),
    {{/if}}
    {{#if (hasQueryParams pathItem.get.parameters)}}
    query: z.object({
      {{#each pathItem.get.parameters}}
      {{#if (eq this.in "query")}}
      {{this.name}}: {{#if (eq this.schema.type "integer")}}z.number(){{else}}z.string(){{/if}}{{#unless this.required}}.optional(){{/unless}}.openapi({
        param: {
          name: "{{this.name}}",
          in: "query",
          required: {{#if this.required}}true{{else}}false{{/if}},
          description: "{{this.description}}"
        }
      }),
      {{/if}}
      {{/each}}
    }),
    {{/if}}
  },
  {{/if}}
  responses: {
    200: {
      content: {
        "application/json": {
          schema: z.object({
            data: {{#if pathItem.get.responses.[200].content.[application/json].schema.$ref}}
              schemas.{{lookup pathItem.get.responses.[200].content.[application/json].schema.$ref "#/components/schemas/"}}
            {{else}}
              z.object({}).openapi({
                type: "object",
                title: "EmptyResponse",
                description: "Empty response object"
              })
            {{/if}}
          })
        },
      },
      description: "{{pathItem.get.description}}",
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorResponseSchema,
        },
      },
      description: "Returns an error",
    },
  },
});

router.openapi(getRoute, async (c) => {
  const client = new ApiClient(c.env.API_BASE_URL);
  try {
    {{#if pathItem.get.parameters}}
    const params = {
      {{#each pathItem.get.parameters}}
      {{#if (eq this.in "query")}}
      {{this.name}}: c.req.valid("query").{{this.name}},
      {{/if}}
      {{#if (eq this.in "path")}}
      {{this.name}}: c.req.param("{{this.name}}") || (() => { throw new HTTPException(400, { message: "Missing required path parameter: {{this.name}}" }) })(),
      {{/if}}
      {{/each}}
    };
    const response = await client.get{{capitalize (basename path)}}(params);
    {{else}}
    const response = await client.get{{capitalize (basename path)}}();
    {{/if}}
    return c.json({ data: response }, 200);
  } catch (error) {
    if (error instanceof HTTPException) {
      throw error;
    }
    return c.json({ 
      error: error.message || "Internal Server Error",
      code: "INTERNAL_ERROR"
    }, 400);
  }
});
{{/if}}

{{#if pathItem.post}}
const postRoute = createRoute({
  method: "post",
  path: "/",
  tags: ["{{@key}}"],
  summary: "{{pathItem.post.summary}}",
  description: "{{pathItem.post.description}}",
  request: {
    {{#if (hasPathParams pathItem.post.parameters)}}
    params: z.object({
      {{#each pathItem.post.parameters}}
      {{#if (eq this.in "path")}}
      {{this.name}}: {{#if (eq this.schema.type "integer")}}z.number(){{else}}z.string(){{/if}}{{#unless this.required}}.optional(){{/unless}},
      {{/if}}
      {{/each}}
    }),
    {{/if}}
    body: {
      content: {
        "application/json": {
          schema: {{#if pathItem.post.requestBody.content.[application/json].schema.$ref}}
            schemas.{{lookup pathItem.post.requestBody.content.[application/json].schema.$ref "#/components/schemas/"}}
          {{else}}
            z.object({}).openapi({
              type: "object",
              title: "EmptyRequest",
              description: "Empty request object"
            })
          {{/if}}
        }
      }
    }
  },
  responses: {
    200: {
      content: {
        "application/json": {
          schema: {{#if pathItem.post.responses.[200].content.[application/json].schema.$ref}}
            schemas.{{lookup pathItem.post.responses.[200].content.[application/json].schema.$ref "#/components/schemas/"}}
          {{else}}
            z.object({}).openapi({
              type: "object",
              title: "EmptyResponse",
              description: "Empty response object"
            })
          {{/if}}
        },
      },
      description: "{{pathItem.post.description}}",
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorResponseSchema,
        },
      },
      description: "Returns an error",
    },
  },
});

router.openapi(postRoute, async (c) => {
  const client = new ApiClient(c.env.API_BASE_URL);
  try {
    const data = await c.req.json();
    {{#if pathItem.post.parameters}}
    const params = {
      {{#each pathItem.post.parameters}}
      {{#if (eq this.in "path")}}
      {{this.name}}: c.req.param("{{this.name}}") || (() => { throw new HTTPException(400, { message: "Missing required path parameter: {{this.name}}" }) })(),
      {{/if}}
      {{/each}}
    };
    const response = await client.create{{capitalize (basename path)}}(data, params);
    {{else}}
    const response = await client.create{{capitalize (basename path)}}(data);
    {{/if}}
    return c.json({ data: response }, 200);
  } catch (error) {
    if (error instanceof HTTPException) {
      throw error;
    }
    return c.json({ 
      error: error.message || "Internal Server Error",
      code: "INTERNAL_ERROR"
    }, 400);
  }
});
{{/if}}


{{#if pathItem.put}}
const putRoute = createRoute({
  method: "put",
  path: "/",
  tags: ["{{@key}}"],
  summary: "{{pathItem.put.summary}}",
  description: "{{pathItem.put.description}}",
  request: {
    {{#if (hasPathParams pathItem.put.parameters)}}
    params: z.object({
      {{#each pathItem.put.parameters}}
      {{#if (eq this.in "path")}}
      {{this.name}}: {{#if (eq this.schema.type "integer")}}z.number(){{else}}z.string(){{/if}}{{#unless this.required}}.optional(){{/unless}},
      {{/if}}
      {{/each}}
    }),
    {{/if}}
    body: {
      content: {
        "application/json": {
          schema: {{#if pathItem.put.requestBody.content.[application/json].schema.$ref}}
            schemas.{{lookup pathItem.put.requestBody.content.[application/json].schema.$ref "#/components/schemas/"}}
          {{else}}
            z.object({}).openapi({
              type: "object",
              title: "EmptyRequest",
              description: "Empty request object"
            })
          {{/if}}
        }
      }
    }
  },
  responses: {
    200: {
      content: {
        "application/json": {
          schema: {{#if pathItem.put.responses.[200].content.[application/json].schema.$ref}}
            schemas.{{lookup pathItem.put.responses.[200].content.[application/json].schema.$ref "#/components/schemas/"}}
          {{else}}
            z.object({}).openapi({
              type: "object",
              title: "EmptyResponse",
              description: "Empty response object"
            })
          {{/if}}
        },
      },
      description: "{{pathItem.put.description}}",
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorResponseSchema,
        },
      },
      description: "Returns an error",
    },
  },
});

router.openapi(putRoute, async (c) => {
  const client = new ApiClient(c.env.API_BASE_URL);
  try {
    const data = await c.req.json();
    {{#if pathItem.put.parameters}}
    const params = {
      {{#each pathItem.put.parameters}}
      {{#if (eq this.in "path")}}
      {{this.name}}: c.req.param("{{this.name}}") || (() => { throw new HTTPException(400, { message: "Missing required path parameter: {{this.name}}" }) })(),
      {{/if}}
      {{/each}}
    };
    const response = await client.update{{capitalize (basename path)}}(data, params);
    {{else}}
    const response = await client.update{{capitalize (basename path)}}(data);
    {{/if}}
    return c.json({ data: response }, 200);
  } catch (error) {
    if (error instanceof HTTPException) {
      throw error;
    }
    return c.json({ 
      error: error.message || "Internal Server Error",
      code: "INTERNAL_ERROR"
    }, 400);
  }
});
{{/if}}

{{#if pathItem.delete}}
const deleteRoute = createRoute({
  method: "delete",
  path: "/",
  tags: ["{{@key}}"],
  summary: "{{pathItem.delete.summary}}",
  description: "{{pathItem.delete.description}}",
  {{#if pathItem.delete.parameters}}
  request: {
    {{#if (hasPathParams pathItem.delete.parameters)}}
    params: z.object({
      {{#each pathItem.delete.parameters}}
      {{#if (eq this.in "path")}}
      {{this.name}}: {{#if (eq this.schema.type "integer")}}z.number(){{else}}z.string(){{/if}}{{#unless this.required}}.optional(){{/unless}},
      {{/if}}
      {{/each}}
    }),
    {{/if}}
    {{#if (hasQueryParams pathItem.delete.parameters)}}
    query: z.object({
      {{#each pathItem.delete.parameters}}
      {{#if (eq this.in "query")}}
      {{this.name}}: {{#if (eq this.schema.type "integer")}}z.number(){{else}}z.string(){{/if}}{{#unless this.required}}.optional(){{/unless}}.openapi({
        param: {
          name: "{{this.name}}",
          in: "query",
          required: {{#if this.required}}true{{else}}false{{/if}},
          description: "{{this.description}}"
        }
      }),
      {{/if}}
      {{/each}}
    }),
    {{/if}}
  },
  {{/if}}
  responses: {
    200: {
      content: {
        "application/json": {
          schema: {{#if pathItem.delete.responses.[200].content.[application/json].schema.$ref}}
            schemas.{{lookup pathItem.delete.responses.[200].content.[application/json].schema.$ref "#/components/schemas/"}}
          {{else}}
            z.object({
              success: z.boolean()
            }).openapi({
              type: "object",
              title: "DeleteResponse",
              description: "Delete operation response"
            })
          {{/if}}
        },
      },
      description: "{{pathItem.delete.description}}",
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorResponseSchema,
        },
      },
      description: "Returns an error",
    },
  },
});

router.openapi(deleteRoute, async (c) => {
  const client = new ApiClient(c.env.API_BASE_URL);
  try {
    {{#if pathItem.delete.parameters}}
    const params = {
      {{#each pathItem.delete.parameters}}
      {{#if (eq this.in "query")}}
      {{this.name}}: c.req.valid("query").{{this.name}},
      {{/if}}
      {{#if (eq this.in "path")}}
      {{this.name}}: c.req.param("{{this.name}}") || (() => { throw new HTTPException(400, { message: "Missing required path parameter: {{this.name}}" }) })(),
      {{/if}}
      {{/each}}
    };
    const response = await client.delete{{capitalize (basename path)}}(params);
    {{else}}
    const response = await client.delete{{capitalize (basename path)}}();
    {{/if}}
    return c.json({ success: true }, 200);
  } catch (error) {
    if (error instanceof HTTPException) {
      throw error;
    }
    return c.json({ 
      error: error.message || "Internal Server Error",
      code: "INTERNAL_ERROR"
    }, 400);
  }
});
{{/if}}

export const {{routeFilename path}}Router = router; 