import { ApiClient } from '../client';
import type { Env } from '../types';
import { HTTPException } from 'hono/http-exception';
import { Hono } from "hono";

// Route handler for {{path}}
const router = new Hono<{ Bindings: Env }>();

{{#if pathItem.get}}
router.get("/", async (c) => {
  const client = new ApiClient(c.env.API_BASE_URL);
  {{#if pathItem.get.parameters}}
  const params = {
    {{#each pathItem.get.parameters}}
    {{#if (eq this.in "query")}}
    {{this.name}}: {{#if (eq this.schema.type "integer")}}c.req.query("{{this.name}}") ? Number(c.req.query("{{this.name}}")) : undefined{{else}}c.req.query("{{this.name}}"){{/if}}{{#if this.required}} || ''{{/if}},
    {{/if}}
    {{#if (eq this.in "path")}}
    {{this.name}}: c.req.param("{{this.name}}") || (() => { throw new HTTPException(400, { message: "Missing required path parameter: {{this.name}}" }) })(),
    {{/if}}
    {{/each}}
  };
  const response = await client.get{{capitalize (basename path)}}(params);
  {{else}}
  const response = await client.get{{capitalize (basename path)}}();
  {{/if}}
  return c.json(response);
});
{{/if}}

{{#if pathItem.post}}
router.post("/", async (c) => {
  const client = new ApiClient(c.env.API_BASE_URL);
  const data = await c.req.json();
  {{#if pathItem.post.parameters}}
  const params = {
    {{#each pathItem.post.parameters}}
    {{#if (eq this.in "path")}}
    {{this.name}}: c.req.param("{{this.name}}") || (() => { throw new HTTPException(400, { message: "Missing required path parameter: {{this.name}}" }) })(),
    {{/if}}
    {{/each}}
  };
  const response = await client.create{{capitalize (basename path)}}(data, params);
  {{else}}
  const response = await client.create{{capitalize (basename path)}}(data);
  {{/if}}
  return c.json(response, 201);
});
{{/if}}

{{#if pathItem.put}}
router.put("/", async (c) => {
  const client = new ApiClient(c.env.API_BASE_URL);
  const data = await c.req.json();
  {{#if pathItem.put.parameters}}
  const params = {
    {{#each pathItem.put.parameters}}
    {{#if (eq this.in "path")}}
    {{this.name}}: c.req.param("{{this.name}}") || (() => { throw new HTTPException(400, { message: "Missing required path parameter: {{this.name}}" }) })(),
    {{/if}}
    {{/each}}
  };
  const response = await client.update{{capitalize (basename path)}}(data, params);
  {{else}}
  const response = await client.update{{capitalize (basename path)}}(data);
  {{/if}}
  return c.json(response);
});
{{/if}}

{{#if pathItem.delete}}
router.delete("/", async (c) => {
  const client = new ApiClient(c.env.API_BASE_URL);
  {{#if pathItem.delete.parameters}}
  const params = {
    {{#each pathItem.delete.parameters}}
    {{#if (eq this.in "query")}}
    {{this.name}}: c.req.query("{{this.name}}"){{#if this.required}} || ''{{/if}},
    {{/if}}
    {{#if (eq this.in "path")}}
    {{this.name}}: c.req.param("{{this.name}}") || (() => { throw new HTTPException(400, { message: "Missing required path parameter: {{this.name}}" }) })(),
    {{/if}}
    {{/each}}
  };
  const response = await client.delete{{capitalize (basename path)}}(params);
  {{else}}
  const response = await client.delete{{capitalize (basename path)}}();
  {{/if}}
  return c.json(response);
});
{{/if}}

export const {{routeFilename path}}Router = router; 