import { ApiClient } from './client';
import type { ExecutionContext } from '@cloudflare/workers-types';

export interface Env {
  // Environment variables
  API_BASE_URL: string;
}

export default {
  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
    const client = new ApiClient(env.API_BASE_URL);

    try {
      // Handle CORS
      if (request.method === 'OPTIONS') {
        return new Response(null, {
          headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type, Authorization',
          },
        });
      }

      const url = new URL(request.url);
      const path = url.pathname;

      {{#each openApiSpec.paths}}
      if (path === '{{@key}}') {
        {{#with this}}
        {{#if get}}
        if (request.method === 'GET') {
          {{#if get.parameters}}
          const params = {
            {{#each get.parameters}}
            {{#if (eq this.in "query")}}
            {{this.name}}: url.searchParams.get('{{this.name}}'){{#if this.required}} || ''{{/if}},
            {{/if}}
            {{#if (eq this.in "path")}}
            {{this.name}}: path.split('/')[{{add @index 1}}],
            {{/if}}
            {{/each}}
          };
          const response = await client.get{{capitalize (basename @key)}}(params);
          {{else}}
          const response = await client.get{{capitalize (basename @key)}}();
          {{/if}}
          return new Response(JSON.stringify(response), {
            headers: { 'Content-Type': 'application/json' },
          });
        }
        {{/if}}

        {{#if post}}
        if (request.method === 'POST') {
          const data = await request.json();
          const response = await client.create{{capitalize (basename @key)}}(data);
          return new Response(JSON.stringify(response), {
            status: 201,
            headers: { 'Content-Type': 'application/json' },
          });
        }
        {{/if}}

        {{#if put}}
        if (request.method === 'PUT') {
          const data = await request.json();
          {{#if put.parameters}}
          const params = {
            {{#each put.parameters}}
            {{#if (eq this.in "query")}}
            {{this.name}}: url.searchParams.get('{{this.name}}'){{#if this.required}} || ''{{/if}},
            {{/if}}
            {{#if (eq this.in "path")}}
            {{this.name}}: path.split('/')[{{add @index 1}}],
            {{/if}}
            {{/each}}
          };
          const response = await client.update{{capitalize (basename @key)}}(params, data);
          {{else}}
          const response = await client.update{{capitalize (basename @key)}}(data);
          {{/if}}
          return new Response(JSON.stringify(response), {
            headers: { 'Content-Type': 'application/json' },
          });
        }
        {{/if}}

        {{#if delete}}
        if (request.method === 'DELETE') {
          {{#if delete.parameters}}
          const params = {
            {{#each delete.parameters}}
            {{#if (eq this.in "query")}}
            {{this.name}}: url.searchParams.get('{{this.name}}'){{#if this.required}} || ''{{/if}},
            {{/if}}
            {{#if (eq this.in "path")}}
            {{this.name}}: path.split('/')[{{add @index 1}}],
            {{/if}}
            {{/each}}
          };
          const response = await client.delete{{capitalize (basename @key)}}(params);
          {{else}}
          const response = await client.delete{{capitalize (basename @key)}}();
          {{/if}}
          return new Response(JSON.stringify(response), {
            headers: { 'Content-Type': 'application/json' },
          });
        }
        {{/if}}
        {{/with}}
      }
      {{/each}}

      return new Response('Not Found', { status: 404 });
    } catch (error) {
      console.error('Error:', error);
      return new Response(
        JSON.stringify({ 
          error: error instanceof Error ? error.message : 'Internal Server Error' 
        }), {
          status: 500,
          headers: { 'Content-Type': 'application/json' },
        }
      );
    }
  },
}; 