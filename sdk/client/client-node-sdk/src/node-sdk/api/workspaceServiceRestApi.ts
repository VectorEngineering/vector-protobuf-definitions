/**
 * User Service API
 * Solomon AI User Service API - Manages user profiles and authentication
 *
 * The version of the OpenAPI document: 1.0
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { WorkspaceservicehttpErrorResponse } from '../model/workspaceservicehttpErrorResponse';
import { WorkspaceservicehttpFileUploadResponse } from '../model/workspaceservicehttpFileUploadResponse';
import { WorkspaceservicehttpTusResponse } from '../model/workspaceservicehttpTusResponse';

import {
  ObjectSerializer,
  Authentication,
  VoidAuth,
  Interceptor,
} from '../model/models';
import {
  HttpBasicAuth,
  HttpBearerAuth,
  ApiKeyAuth,
  OAuth,
} from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://user-service.platform.svc.cluster.local:9896';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum WorkspaceServiceRestApiApiKeys {
  ApiKeyAuth,
  Bearer,
}

export class WorkspaceServiceRestApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    ApiKeyAuth: new ApiKeyAuth('header', 'X-API-Key'),
    Bearer: new ApiKeyAuth('header', 'Authorization'),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: WorkspaceServiceRestApiApiKeys, value: string) {
    (this.authentications as any)[WorkspaceServiceRestApiApiKeys[key]].apiKey =
      value;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @summary Delete an incomplete or completed file upload
   * @param tusResumable TUS protocol version (must be 1.0.0)
   * @param grpcMetadataXOrganizationID Unique identifier for the organization making the request
   * @param grpcMetadataXTenantID Unique identifier for the tenant within the organization
   * @param grpcMetadataXUserID Unique identifier for the user performing the upload
   * @param grpcMetadataXWorkspaceID Unique identifier for the workspace where the file will be stored
   * @param grpcMetadataXFolderID Unique identifier for the folder within the workspace
   * @param uploadMetadata Base64 encoded metadata (e.g., workspaceId,folderId,filename,userId)
   * @param id Upload ID
   */
  public async workspaceMicroserviceRestApiV1FileResumableIdDelete(
    tusResumable: string,
    grpcMetadataXOrganizationID: string,
    grpcMetadataXTenantID: string,
    grpcMetadataXUserID: string,
    grpcMetadataXWorkspaceID: string,
    grpcMetadataXFolderID: string,
    uploadMetadata: string,
    id: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: WorkspaceservicehttpTusResponse;
  }> {
    const localVarPath =
      this.basePath +
      '/workspace-microservice/rest-api/v1/file/resumable/{id}'.replace(
        '{' + 'id' + '}',
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'tusResumable' is not null or undefined
    if (tusResumable === null || tusResumable === undefined) {
      throw new Error(
        'Required parameter tusResumable was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdDelete.'
      );
    }

    // verify required parameter 'grpcMetadataXOrganizationID' is not null or undefined
    if (
      grpcMetadataXOrganizationID === null ||
      grpcMetadataXOrganizationID === undefined
    ) {
      throw new Error(
        'Required parameter grpcMetadataXOrganizationID was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdDelete.'
      );
    }

    // verify required parameter 'grpcMetadataXTenantID' is not null or undefined
    if (grpcMetadataXTenantID === null || grpcMetadataXTenantID === undefined) {
      throw new Error(
        'Required parameter grpcMetadataXTenantID was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdDelete.'
      );
    }

    // verify required parameter 'grpcMetadataXUserID' is not null or undefined
    if (grpcMetadataXUserID === null || grpcMetadataXUserID === undefined) {
      throw new Error(
        'Required parameter grpcMetadataXUserID was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdDelete.'
      );
    }

    // verify required parameter 'grpcMetadataXWorkspaceID' is not null or undefined
    if (
      grpcMetadataXWorkspaceID === null ||
      grpcMetadataXWorkspaceID === undefined
    ) {
      throw new Error(
        'Required parameter grpcMetadataXWorkspaceID was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdDelete.'
      );
    }

    // verify required parameter 'grpcMetadataXFolderID' is not null or undefined
    if (grpcMetadataXFolderID === null || grpcMetadataXFolderID === undefined) {
      throw new Error(
        'Required parameter grpcMetadataXFolderID was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdDelete.'
      );
    }

    // verify required parameter 'uploadMetadata' is not null or undefined
    if (uploadMetadata === null || uploadMetadata === undefined) {
      throw new Error(
        'Required parameter uploadMetadata was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdDelete.'
      );
    }

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdDelete.'
      );
    }

    localVarHeaderParams['Tus-Resumable'] = ObjectSerializer.serialize(
      tusResumable,
      'string'
    );
    localVarHeaderParams['Grpc-Metadata-X-Organization-ID'] =
      ObjectSerializer.serialize(grpcMetadataXOrganizationID, 'string');
    localVarHeaderParams['Grpc-Metadata-X-Tenant-ID'] =
      ObjectSerializer.serialize(grpcMetadataXTenantID, 'string');
    localVarHeaderParams['Grpc-Metadata-X-User-ID'] =
      ObjectSerializer.serialize(grpcMetadataXUserID, 'string');
    localVarHeaderParams['Grpc-Metadata-X-Workspace-ID'] =
      ObjectSerializer.serialize(grpcMetadataXWorkspaceID, 'string');
    localVarHeaderParams['Grpc-Metadata-X-Folder-ID'] =
      ObjectSerializer.serialize(grpcMetadataXFolderID, 'string');
    localVarHeaderParams['Upload-Metadata'] = ObjectSerializer.serialize(
      uploadMetadata,
      'string'
    );
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'DELETE',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: WorkspaceservicehttpTusResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'WorkspaceservicehttpTusResponse'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Upload chunks to an existing file upload using the TUS protocol
   * @param tusResumable TUS protocol version (must be 1.0.0)
   * @param grpcMetadataXOrganizationID Unique identifier for the organization making the request
   * @param grpcMetadataXTenantID Unique identifier for the tenant within the organization
   * @param grpcMetadataXUserID Unique identifier for the user performing the upload
   * @param grpcMetadataXWorkspaceID Unique identifier for the workspace where the file will be stored
   * @param grpcMetadataXFolderID Unique identifier for the folder within the workspace
   * @param uploadOffset Current byte offset for the upload
   * @param contentLength Length of the chunk being uploaded
   * @param uploadMetadata Base64 encoded metadata (e.g., workspaceId,folderId,filename,userId)
   * @param id Upload ID
   * @param uploadChecksum Checksum of the current chunk
   */
  public async workspaceMicroserviceRestApiV1FileResumableIdPatch(
    tusResumable: string,
    grpcMetadataXOrganizationID: string,
    grpcMetadataXTenantID: string,
    grpcMetadataXUserID: string,
    grpcMetadataXWorkspaceID: string,
    grpcMetadataXFolderID: string,
    uploadOffset: number,
    contentLength: number,
    uploadMetadata: string,
    id: string,
    uploadChecksum?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: WorkspaceservicehttpTusResponse;
  }> {
    const localVarPath =
      this.basePath +
      '/workspace-microservice/rest-api/v1/file/resumable/{id}'.replace(
        '{' + 'id' + '}',
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'tusResumable' is not null or undefined
    if (tusResumable === null || tusResumable === undefined) {
      throw new Error(
        'Required parameter tusResumable was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdPatch.'
      );
    }

    // verify required parameter 'grpcMetadataXOrganizationID' is not null or undefined
    if (
      grpcMetadataXOrganizationID === null ||
      grpcMetadataXOrganizationID === undefined
    ) {
      throw new Error(
        'Required parameter grpcMetadataXOrganizationID was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdPatch.'
      );
    }

    // verify required parameter 'grpcMetadataXTenantID' is not null or undefined
    if (grpcMetadataXTenantID === null || grpcMetadataXTenantID === undefined) {
      throw new Error(
        'Required parameter grpcMetadataXTenantID was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdPatch.'
      );
    }

    // verify required parameter 'grpcMetadataXUserID' is not null or undefined
    if (grpcMetadataXUserID === null || grpcMetadataXUserID === undefined) {
      throw new Error(
        'Required parameter grpcMetadataXUserID was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdPatch.'
      );
    }

    // verify required parameter 'grpcMetadataXWorkspaceID' is not null or undefined
    if (
      grpcMetadataXWorkspaceID === null ||
      grpcMetadataXWorkspaceID === undefined
    ) {
      throw new Error(
        'Required parameter grpcMetadataXWorkspaceID was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdPatch.'
      );
    }

    // verify required parameter 'grpcMetadataXFolderID' is not null or undefined
    if (grpcMetadataXFolderID === null || grpcMetadataXFolderID === undefined) {
      throw new Error(
        'Required parameter grpcMetadataXFolderID was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdPatch.'
      );
    }

    // verify required parameter 'uploadOffset' is not null or undefined
    if (uploadOffset === null || uploadOffset === undefined) {
      throw new Error(
        'Required parameter uploadOffset was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdPatch.'
      );
    }

    // verify required parameter 'contentLength' is not null or undefined
    if (contentLength === null || contentLength === undefined) {
      throw new Error(
        'Required parameter contentLength was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdPatch.'
      );
    }

    // verify required parameter 'uploadMetadata' is not null or undefined
    if (uploadMetadata === null || uploadMetadata === undefined) {
      throw new Error(
        'Required parameter uploadMetadata was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdPatch.'
      );
    }

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling workspaceMicroserviceRestApiV1FileResumableIdPatch.'
      );
    }

    localVarHeaderParams['Tus-Resumable'] = ObjectSerializer.serialize(
      tusResumable,
      'string'
    );
    localVarHeaderParams['Grpc-Metadata-X-Organization-ID'] =
      ObjectSerializer.serialize(grpcMetadataXOrganizationID, 'string');
    localVarHeaderParams['Grpc-Metadata-X-Tenant-ID'] =
      ObjectSerializer.serialize(grpcMetadataXTenantID, 'string');
    localVarHeaderParams['Grpc-Metadata-X-User-ID'] =
      ObjectSerializer.serialize(grpcMetadataXUserID, 'string');
    localVarHeaderParams['Grpc-Metadata-X-Workspace-ID'] =
      ObjectSerializer.serialize(grpcMetadataXWorkspaceID, 'string');
    localVarHeaderParams['Grpc-Metadata-X-Folder-ID'] =
      ObjectSerializer.serialize(grpcMetadataXFolderID, 'string');
    localVarHeaderParams['Upload-Offset'] = ObjectSerializer.serialize(
      uploadOffset,
      'number'
    );
    localVarHeaderParams['Content-Length'] = ObjectSerializer.serialize(
      contentLength,
      'number'
    );
    localVarHeaderParams['Upload-Metadata'] = ObjectSerializer.serialize(
      uploadMetadata,
      'string'
    );
    localVarHeaderParams['Upload-Checksum'] = ObjectSerializer.serialize(
      uploadChecksum,
      'string'
    );
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'PATCH',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: WorkspaceservicehttpTusResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'WorkspaceservicehttpTusResponse'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Upload a file to the workspace using the TUS protocol
   * @param tusResumable TUS protocol version (must be 1.0.0)
   * @param grpcMetadataXOrganizationID Unique identifier for the organization making the request
   * @param grpcMetadataXTenantID Unique identifier for the tenant within the organization
   * @param grpcMetadataXUserID Unique identifier for the user performing the upload
   * @param grpcMetadataXWorkspaceID Unique identifier for the workspace where the file will be stored
   * @param grpcMetadataXFolderID Unique identifier for the folder within the workspace
   * @param uploadMetadata Base64 encoded metadata (e.g., workspaceId,folderId,filename,userId)
   * @param contentLength Length of the body in bytes (must be 0 for creation; required for &#x60;Creation With Upload&#x60;)
   * @param uploadLength Total size of the file in bytes (required for POST requests)
   * @param uploadDeferLength Set to 1 if Upload-Length is not known at creation
   * @param uploadOffset Current byte offset for resuming upload (required for PATCH requests)
   * @param uploadContentType Must be application/offset+octet-stream for PATCH requests
   * @param uploadChecksum Checksum of the current chunk in specified algorithm
   * @param uploadConcat Indicates concatenation mode for multiple uploads (partial or final)
   */
  public async workspaceMicroserviceRestApiV1FileResumablePost(
    tusResumable: string,
    grpcMetadataXOrganizationID: string,
    grpcMetadataXTenantID: string,
    grpcMetadataXUserID: string,
    grpcMetadataXWorkspaceID: string,
    grpcMetadataXFolderID: string,
    uploadMetadata: string,
    contentLength?: number,
    uploadLength?: number,
    uploadDeferLength?: 1,
    uploadOffset?: number,
    uploadContentType?: string,
    uploadChecksum?: string,
    uploadConcat?: 'final' | 'partial',
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: WorkspaceservicehttpTusResponse;
  }> {
    const localVarPath =
      this.basePath + '/workspace-microservice/rest-api/v1/file/resumable';
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'tusResumable' is not null or undefined
    if (tusResumable === null || tusResumable === undefined) {
      throw new Error(
        'Required parameter tusResumable was null or undefined when calling workspaceMicroserviceRestApiV1FileResumablePost.'
      );
    }

    // verify required parameter 'grpcMetadataXOrganizationID' is not null or undefined
    if (
      grpcMetadataXOrganizationID === null ||
      grpcMetadataXOrganizationID === undefined
    ) {
      throw new Error(
        'Required parameter grpcMetadataXOrganizationID was null or undefined when calling workspaceMicroserviceRestApiV1FileResumablePost.'
      );
    }

    // verify required parameter 'grpcMetadataXTenantID' is not null or undefined
    if (grpcMetadataXTenantID === null || grpcMetadataXTenantID === undefined) {
      throw new Error(
        'Required parameter grpcMetadataXTenantID was null or undefined when calling workspaceMicroserviceRestApiV1FileResumablePost.'
      );
    }

    // verify required parameter 'grpcMetadataXUserID' is not null or undefined
    if (grpcMetadataXUserID === null || grpcMetadataXUserID === undefined) {
      throw new Error(
        'Required parameter grpcMetadataXUserID was null or undefined when calling workspaceMicroserviceRestApiV1FileResumablePost.'
      );
    }

    // verify required parameter 'grpcMetadataXWorkspaceID' is not null or undefined
    if (
      grpcMetadataXWorkspaceID === null ||
      grpcMetadataXWorkspaceID === undefined
    ) {
      throw new Error(
        'Required parameter grpcMetadataXWorkspaceID was null or undefined when calling workspaceMicroserviceRestApiV1FileResumablePost.'
      );
    }

    // verify required parameter 'grpcMetadataXFolderID' is not null or undefined
    if (grpcMetadataXFolderID === null || grpcMetadataXFolderID === undefined) {
      throw new Error(
        'Required parameter grpcMetadataXFolderID was null or undefined when calling workspaceMicroserviceRestApiV1FileResumablePost.'
      );
    }

    // verify required parameter 'uploadMetadata' is not null or undefined
    if (uploadMetadata === null || uploadMetadata === undefined) {
      throw new Error(
        'Required parameter uploadMetadata was null or undefined when calling workspaceMicroserviceRestApiV1FileResumablePost.'
      );
    }

    localVarHeaderParams['Tus-Resumable'] = ObjectSerializer.serialize(
      tusResumable,
      'string'
    );
    localVarHeaderParams['Grpc-Metadata-X-Organization-ID'] =
      ObjectSerializer.serialize(grpcMetadataXOrganizationID, 'string');
    localVarHeaderParams['Grpc-Metadata-X-Tenant-ID'] =
      ObjectSerializer.serialize(grpcMetadataXTenantID, 'string');
    localVarHeaderParams['Grpc-Metadata-X-User-ID'] =
      ObjectSerializer.serialize(grpcMetadataXUserID, 'string');
    localVarHeaderParams['Grpc-Metadata-X-Workspace-ID'] =
      ObjectSerializer.serialize(grpcMetadataXWorkspaceID, 'string');
    localVarHeaderParams['Grpc-Metadata-X-Folder-ID'] =
      ObjectSerializer.serialize(grpcMetadataXFolderID, 'string');
    localVarHeaderParams['Upload-Metadata'] = ObjectSerializer.serialize(
      uploadMetadata,
      'string'
    );
    localVarHeaderParams['Content-Length'] = ObjectSerializer.serialize(
      contentLength,
      'number'
    );
    localVarHeaderParams['Upload-Length'] = ObjectSerializer.serialize(
      uploadLength,
      'number'
    );
    localVarHeaderParams['Upload-Defer-Length'] = ObjectSerializer.serialize(
      uploadDeferLength,
      '1'
    );
    localVarHeaderParams['Upload-Offset'] = ObjectSerializer.serialize(
      uploadOffset,
      'number'
    );
    localVarHeaderParams['Upload-Content-Type'] = ObjectSerializer.serialize(
      uploadContentType,
      'string'
    );
    localVarHeaderParams['Upload-Checksum'] = ObjectSerializer.serialize(
      uploadChecksum,
      'string'
    );
    localVarHeaderParams['Upload-Concat'] = ObjectSerializer.serialize(
      uploadConcat,
      "'final' | 'partial'"
    );
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: WorkspaceservicehttpTusResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'WorkspaceservicehttpTusResponse'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   * This endpoint allows for the uploading of a file to the server. Upon successful upload,
   * @summary Uploads a file to the server
   * @param workspaceId Identifier of the workspace where the file will be uploaded
   * @param folderId Identifier of the folder within the workspace where the file will be stored
   * @param userId Identifier of the user uploading the file
   * @param attachment The file to be uploaded
   * @param filename The name of the file to be saved (optional)
   */
  public async workspaceMicroserviceRestApiV1FileUploadPost(
    workspaceId: string,
    folderId: string,
    userId: string,
    attachment: RequestFile,
    filename?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: WorkspaceservicehttpFileUploadResponse;
  }> {
    const localVarPath =
      this.basePath + '/workspace-microservice/rest-api/v1/file/upload';
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'workspaceId' is not null or undefined
    if (workspaceId === null || workspaceId === undefined) {
      throw new Error(
        'Required parameter workspaceId was null or undefined when calling workspaceMicroserviceRestApiV1FileUploadPost.'
      );
    }

    // verify required parameter 'folderId' is not null or undefined
    if (folderId === null || folderId === undefined) {
      throw new Error(
        'Required parameter folderId was null or undefined when calling workspaceMicroserviceRestApiV1FileUploadPost.'
      );
    }

    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        'Required parameter userId was null or undefined when calling workspaceMicroserviceRestApiV1FileUploadPost.'
      );
    }

    // verify required parameter 'attachment' is not null or undefined
    if (attachment === null || attachment === undefined) {
      throw new Error(
        'Required parameter attachment was null or undefined when calling workspaceMicroserviceRestApiV1FileUploadPost.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    if (workspaceId !== undefined) {
      localVarFormParams['workspaceId'] = ObjectSerializer.serialize(
        workspaceId,
        'string'
      );
    }

    if (folderId !== undefined) {
      localVarFormParams['folderId'] = ObjectSerializer.serialize(
        folderId,
        'string'
      );
    }

    if (filename !== undefined) {
      localVarFormParams['filename'] = ObjectSerializer.serialize(
        filename,
        'string'
      );
    }

    if (userId !== undefined) {
      localVarFormParams['userId'] = ObjectSerializer.serialize(
        userId,
        'string'
      );
    }

    if (attachment !== undefined) {
      localVarFormParams['attachment'] = attachment;
    }
    localVarUseFormData = true;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: WorkspaceservicehttpFileUploadResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'WorkspaceservicehttpFileUploadResponse'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
}
