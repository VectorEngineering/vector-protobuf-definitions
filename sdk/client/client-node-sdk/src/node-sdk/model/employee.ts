/**
 * User Service API
 * Solomon AI User Service API - Manages user profiles and authentication
 *
 * The version of the OpenAPI document: 1.0
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { BankInfo } from './bankInfo';
import { Dependents } from './dependents';
import { EmployeTimeOffBalance } from './employeTimeOffBalance';
import { EmployeeBenefits } from './employeeBenefits';
import { EmployeeJobPositionAtCompany } from './employeeJobPositionAtCompany';
import { EmployeePayrollRun } from './employeePayrollRun';
import { EmploymentStatus } from './employmentStatus';
import { Ethnicity } from './ethnicity';
import { Gender } from './gender';
import { Group } from './group';
import { LocationAddress } from './locationAddress';
import { MaritalStatus } from './maritalStatus';

/**
 * The Employee object is used to represent any person who has been employed by a company.
 */
export class Employee {
  'id'?: string;
  /**
   * The third-party API ID of the matching object.
   */
  'remoteId'?: string;
  'employeeNumber'?: string;
  /**
   * The ID of the employee\'s company.
   */
  'companyId'?: string;
  /**
   * The employee\'s first name.
   */
  'firstName'?: string;
  /**
   * The employee\'s last name.
   */
  'lastName'?: string;
  /**
   * The employee\'s preferred name.
   */
  'employeesPreferredName'?: string;
  'displayFullName'?: string;
  /**
   * The employee\'s username that appears in the remote UI.
   */
  'employeeUserNameAsSeenInRemoteUi'?: string;
  /**
   * The employee\'s work email.
   */
  'workEmail'?: string;
  'personalEmail'?: string;
  /**
   * The employee\'s mobile phone number.
   */
  'mobilePhoneNumber'?: string;
  'employments'?: Array<EmployeeJobPositionAtCompany>;
  /**
   * UUID fields
   */
  'employmentType'?: string;
  'homeLocation'?: LocationAddress;
  'workLocation'?: LocationAddress;
  'manager'?: Employee;
  'group'?: Group;
  'ssn'?: string;
  'gender'?: Gender;
  'ethnicity'?: Ethnicity;
  'maritalStatus'?: MaritalStatus;
  /**
   * The employee\'s date of birth.  Use string for ISO 8601 datetime
   */
  'dateOfBirth'?: string;
  /**
   * The date that the employee started working. If an employee was rehired, the most recent start date will be returned.
   */
  'startDate'?: Date;
  /**
   * When the third party\'s employee was created.
   */
  'remoteCreatedAt'?: Date;
  'employmentStatus'?: EmploymentStatus;
  /**
   * The employee\'s termination date.
   */
  'terminationDate'?: Date;
  /**
   * The URL of the employee\'s avatar image.
   */
  'avatar'?: string;
  'bankAccounts'?: Array<BankInfo>;
  'dependents'?: Array<Dependents>;
  /**
   * Represent an employee\'s pay statement for a specific payroll run.
   */
  'payrollRuns'?: Array<EmployeePayrollRun>;
  'payTimeOffBalance'?: EmployeTimeOffBalance;
  /**
   * the benefits associated with the employee.
   */
  'benefits'?: Array<EmployeeBenefits>;
  'mergeAccountId'?: string;
  'createdAt'?: Date;
  'modifiedAt'?: Date;
  'remoteWasDeleted'?: boolean;
  'deletedAt'?: Date;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{
    name: string;
    baseName: string;
    type: string;
  }> = [
    {
      name: 'id',
      baseName: 'id',
      type: 'string',
    },
    {
      name: 'remoteId',
      baseName: 'remoteId',
      type: 'string',
    },
    {
      name: 'employeeNumber',
      baseName: 'employeeNumber',
      type: 'string',
    },
    {
      name: 'companyId',
      baseName: 'companyId',
      type: 'string',
    },
    {
      name: 'firstName',
      baseName: 'firstName',
      type: 'string',
    },
    {
      name: 'lastName',
      baseName: 'lastName',
      type: 'string',
    },
    {
      name: 'employeesPreferredName',
      baseName: 'employeesPreferredName',
      type: 'string',
    },
    {
      name: 'displayFullName',
      baseName: 'displayFullName',
      type: 'string',
    },
    {
      name: 'employeeUserNameAsSeenInRemoteUi',
      baseName: 'employeeUserNameAsSeenInRemoteUi',
      type: 'string',
    },
    {
      name: 'workEmail',
      baseName: 'workEmail',
      type: 'string',
    },
    {
      name: 'personalEmail',
      baseName: 'personalEmail',
      type: 'string',
    },
    {
      name: 'mobilePhoneNumber',
      baseName: 'mobilePhoneNumber',
      type: 'string',
    },
    {
      name: 'employments',
      baseName: 'employments',
      type: 'Array<EmployeeJobPositionAtCompany>',
    },
    {
      name: 'employmentType',
      baseName: 'employmentType',
      type: 'string',
    },
    {
      name: 'homeLocation',
      baseName: 'homeLocation',
      type: 'LocationAddress',
    },
    {
      name: 'workLocation',
      baseName: 'workLocation',
      type: 'LocationAddress',
    },
    {
      name: 'manager',
      baseName: 'manager',
      type: 'Employee',
    },
    {
      name: 'group',
      baseName: 'group',
      type: 'Group',
    },
    {
      name: 'ssn',
      baseName: 'ssn',
      type: 'string',
    },
    {
      name: 'gender',
      baseName: 'gender',
      type: 'Gender',
    },
    {
      name: 'ethnicity',
      baseName: 'ethnicity',
      type: 'Ethnicity',
    },
    {
      name: 'maritalStatus',
      baseName: 'maritalStatus',
      type: 'MaritalStatus',
    },
    {
      name: 'dateOfBirth',
      baseName: 'dateOfBirth',
      type: 'string',
    },
    {
      name: 'startDate',
      baseName: 'startDate',
      type: 'Date',
    },
    {
      name: 'remoteCreatedAt',
      baseName: 'remoteCreatedAt',
      type: 'Date',
    },
    {
      name: 'employmentStatus',
      baseName: 'employmentStatus',
      type: 'EmploymentStatus',
    },
    {
      name: 'terminationDate',
      baseName: 'terminationDate',
      type: 'Date',
    },
    {
      name: 'avatar',
      baseName: 'avatar',
      type: 'string',
    },
    {
      name: 'bankAccounts',
      baseName: 'bankAccounts',
      type: 'Array<BankInfo>',
    },
    {
      name: 'dependents',
      baseName: 'dependents',
      type: 'Array<Dependents>',
    },
    {
      name: 'payrollRuns',
      baseName: 'payrollRuns',
      type: 'Array<EmployeePayrollRun>',
    },
    {
      name: 'payTimeOffBalance',
      baseName: 'payTimeOffBalance',
      type: 'EmployeTimeOffBalance',
    },
    {
      name: 'benefits',
      baseName: 'benefits',
      type: 'Array<EmployeeBenefits>',
    },
    {
      name: 'mergeAccountId',
      baseName: 'mergeAccountId',
      type: 'string',
    },
    {
      name: 'createdAt',
      baseName: 'createdAt',
      type: 'Date',
    },
    {
      name: 'modifiedAt',
      baseName: 'modifiedAt',
      type: 'Date',
    },
    {
      name: 'remoteWasDeleted',
      baseName: 'remoteWasDeleted',
      type: 'boolean',
    },
    {
      name: 'deletedAt',
      baseName: 'deletedAt',
      type: 'Date',
    },
  ];

  static getAttributeTypeMap() {
    return Employee.attributeTypeMap;
  }
}

export namespace Employee {}
