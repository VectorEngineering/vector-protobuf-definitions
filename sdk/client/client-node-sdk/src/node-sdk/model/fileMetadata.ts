/**
 * User Service API
 * Solomon AI User Service API - Manages user profiles and authentication
 *
 * The version of the OpenAPI document: 1.0
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CommentThread } from './commentThread';
import { DocumentSnapshot } from './documentSnapshot';
import { FileEmbeddings } from './fileEmbeddings';
import { FileSharing } from './fileSharing';
import { FileVersions } from './fileVersions';

/**
 * FileMetadata represents detailed information about a stored file. Tracks both basic file attributes and S3-specific metadata.  Key features: - Comprehensive S3 integration - Version control support - Content type handling - Access tracking - Preview generation  Storage considerations: - Files are stored in S3 with the specified key structure - Versioning is enabled when configured - Metadata is stored both in database and S3  Security features: - ACL controls - Server-side encryption - Tenant isolation
 */
export class FileMetadata {
  'id'?: string;
  'name'?: string;
  'createdAt'?: Date;
  'updatedAt'?: Date;
  'size'?: string;
  'fileType'?: string;
  'tags'?: Array<string>;
  'isDeleted'?: boolean;
  'version'?: number;
  /**
   * Full path within bucket
   */
  's3Key'?: string;
  's3BucketName'?: string;
  's3Region'?: string;
  's3VersionId'?: string;
  's3Etag'?: string;
  's3ContentType'?: string;
  's3ContentLength'?: string;
  's3ContentEncoding'?: string;
  's3ContentDisposition'?: string;
  's3LastModified'?: Date;
  's3StorageClass'?: string;
  's3ServerSideEncryption'?: string;
  's3Acl'?: string;
  's3Metadata'?: { [key: string]: string | undefined };
  /**
   * Internal version ID
   */
  'versionId'?: string;
  'uploadId'?: string;
  /**
   * File location/path
   */
  'location'?: string;
  'markdownContent'?: string;
  'mimeType'?: string;
  'checksum'?: string;
  /**
   * Preview status
   */
  'previewAvailable'?: boolean;
  'previewStatus'?: string;
  'thumbnailUrl'?: string;
  'lastAccessed'?: Date;
  'accessCount'?: number;
  'embeddings'?: FileEmbeddings;
  'versions'?: Array<FileVersions>;
  'commentThreads'?: Array<CommentThread>;
  'sharedLinks'?: Array<FileSharing>;
  'snapshots'?: Array<DocumentSnapshot>;
  'deletedAt'?: Date;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{
    name: string;
    baseName: string;
    type: string;
  }> = [
    {
      name: 'id',
      baseName: 'id',
      type: 'string',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'createdAt',
      baseName: 'createdAt',
      type: 'Date',
    },
    {
      name: 'updatedAt',
      baseName: 'updatedAt',
      type: 'Date',
    },
    {
      name: 'size',
      baseName: 'size',
      type: 'string',
    },
    {
      name: 'fileType',
      baseName: 'fileType',
      type: 'string',
    },
    {
      name: 'tags',
      baseName: 'tags',
      type: 'Array<string>',
    },
    {
      name: 'isDeleted',
      baseName: 'isDeleted',
      type: 'boolean',
    },
    {
      name: 'version',
      baseName: 'version',
      type: 'number',
    },
    {
      name: 's3Key',
      baseName: 's3Key',
      type: 'string',
    },
    {
      name: 's3BucketName',
      baseName: 's3BucketName',
      type: 'string',
    },
    {
      name: 's3Region',
      baseName: 's3Region',
      type: 'string',
    },
    {
      name: 's3VersionId',
      baseName: 's3VersionId',
      type: 'string',
    },
    {
      name: 's3Etag',
      baseName: 's3Etag',
      type: 'string',
    },
    {
      name: 's3ContentType',
      baseName: 's3ContentType',
      type: 'string',
    },
    {
      name: 's3ContentLength',
      baseName: 's3ContentLength',
      type: 'string',
    },
    {
      name: 's3ContentEncoding',
      baseName: 's3ContentEncoding',
      type: 'string',
    },
    {
      name: 's3ContentDisposition',
      baseName: 's3ContentDisposition',
      type: 'string',
    },
    {
      name: 's3LastModified',
      baseName: 's3LastModified',
      type: 'Date',
    },
    {
      name: 's3StorageClass',
      baseName: 's3StorageClass',
      type: 'string',
    },
    {
      name: 's3ServerSideEncryption',
      baseName: 's3ServerSideEncryption',
      type: 'string',
    },
    {
      name: 's3Acl',
      baseName: 's3Acl',
      type: 'string',
    },
    {
      name: 's3Metadata',
      baseName: 's3Metadata',
      type: '{ [key: string]: string | undefined; }',
    },
    {
      name: 'versionId',
      baseName: 'versionId',
      type: 'string',
    },
    {
      name: 'uploadId',
      baseName: 'uploadId',
      type: 'string',
    },
    {
      name: 'location',
      baseName: 'location',
      type: 'string',
    },
    {
      name: 'markdownContent',
      baseName: 'markdownContent',
      type: 'string',
    },
    {
      name: 'mimeType',
      baseName: 'mimeType',
      type: 'string',
    },
    {
      name: 'checksum',
      baseName: 'checksum',
      type: 'string',
    },
    {
      name: 'previewAvailable',
      baseName: 'previewAvailable',
      type: 'boolean',
    },
    {
      name: 'previewStatus',
      baseName: 'previewStatus',
      type: 'string',
    },
    {
      name: 'thumbnailUrl',
      baseName: 'thumbnailUrl',
      type: 'string',
    },
    {
      name: 'lastAccessed',
      baseName: 'lastAccessed',
      type: 'Date',
    },
    {
      name: 'accessCount',
      baseName: 'accessCount',
      type: 'number',
    },
    {
      name: 'embeddings',
      baseName: 'embeddings',
      type: 'FileEmbeddings',
    },
    {
      name: 'versions',
      baseName: 'versions',
      type: 'Array<FileVersions>',
    },
    {
      name: 'commentThreads',
      baseName: 'commentThreads',
      type: 'Array<CommentThread>',
    },
    {
      name: 'sharedLinks',
      baseName: 'sharedLinks',
      type: 'Array<FileSharing>',
    },
    {
      name: 'snapshots',
      baseName: 'snapshots',
      type: 'Array<DocumentSnapshot>',
    },
    {
      name: 'deletedAt',
      baseName: 'deletedAt',
      type: 'Date',
    },
  ];

  static getAttributeTypeMap() {
    return FileMetadata.attributeTypeMap;
  }
}
