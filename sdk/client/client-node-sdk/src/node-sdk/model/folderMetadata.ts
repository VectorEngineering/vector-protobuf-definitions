/**
 * User Service API
 * Solomon AI User Service API - Manages user profiles and authentication
 *
 * The version of the OpenAPI document: 1.0
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { FileMetadata } from './fileMetadata';

/**
 * FolderMetadata represents a directory structure within a workspace. Supports hierarchical organization of files and nested folders.  Key features: - Hierarchical structure - S3 path mapping - File collection management - Version control - Soft deletion  Usage example: ```go folder := &FolderMetadata{   Name: \"Documents\",   S3FolderPath: \"/user-123/documents/\",   IsDeleted: false } ```
 */
export class FolderMetadata {
  'id'?: string;
  'name'?: string;
  'childFolder'?: Array<FolderMetadata>;
  'createdAt'?: Date;
  'updatedAt'?: Date;
  'files'?: Array<FileMetadata>;
  'isDeleted'?: boolean;
  /**
   * The S3 bucket name where the folder is located.
   */
  's3BucketName'?: string;
  /**
   * The prefix path representing the folder in the S3 bucket.
   */
  's3FolderPath'?: string;
  /**
   * AWS region where the S3 bucket containing the folder is located.
   */
  's3Region'?: string;
  /**
   * Custom metadata for the folder, represented as key-value pairs.
   */
  's3Metadata'?: { [key: string]: string | undefined };
  /**
   * Access control list (ACL) permissions for the folder in S3.
   */
  's3Acl'?: string;
  /**
   * The date and time when the folder was last modified in S3. This might represent the last time a file was added, removed, or changed in the folder.
   */
  's3LastModified'?: Date;
  'versionId'?: string;
  /**
   * Folder description
   */
  'description'?: string;
  'metadataJson'?: string;
  'deletedAt'?: Date;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{
    name: string;
    baseName: string;
    type: string;
  }> = [
    {
      name: 'id',
      baseName: 'id',
      type: 'string',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'childFolder',
      baseName: 'childFolder',
      type: 'Array<FolderMetadata>',
    },
    {
      name: 'createdAt',
      baseName: 'createdAt',
      type: 'Date',
    },
    {
      name: 'updatedAt',
      baseName: 'updatedAt',
      type: 'Date',
    },
    {
      name: 'files',
      baseName: 'files',
      type: 'Array<FileMetadata>',
    },
    {
      name: 'isDeleted',
      baseName: 'isDeleted',
      type: 'boolean',
    },
    {
      name: 's3BucketName',
      baseName: 's3BucketName',
      type: 'string',
    },
    {
      name: 's3FolderPath',
      baseName: 's3FolderPath',
      type: 'string',
    },
    {
      name: 's3Region',
      baseName: 's3Region',
      type: 'string',
    },
    {
      name: 's3Metadata',
      baseName: 's3Metadata',
      type: '{ [key: string]: string | undefined; }',
    },
    {
      name: 's3Acl',
      baseName: 's3Acl',
      type: 'string',
    },
    {
      name: 's3LastModified',
      baseName: 's3LastModified',
      type: 'Date',
    },
    {
      name: 'versionId',
      baseName: 'versionId',
      type: 'string',
    },
    {
      name: 'description',
      baseName: 'description',
      type: 'string',
    },
    {
      name: 'metadataJson',
      baseName: 'metadataJson',
      type: 'string',
    },
    {
      name: 'deletedAt',
      baseName: 'deletedAt',
      type: 'Date',
    },
  ];

  static getAttributeTypeMap() {
    return FolderMetadata.attributeTypeMap;
  }
}
