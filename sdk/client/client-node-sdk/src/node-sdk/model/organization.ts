/**
 * User Service API
 * Solomon AI User Service API - Manages user profiles and authentication
 *
 * The version of the OpenAPI document: 1.0
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Address } from './address';
import { AuditLog } from './auditLog';
import { ComplianceTier } from './complianceTier';
import { IndustryType } from './industryType';
import { OrgAPIKey } from './orgAPIKey';
import { OrgMember } from './orgMember';
import { OrgUsageLog } from './orgUsageLog';
import { RegulatoryStatus } from './regulatoryStatus';
import { SubscriptionStatus } from './subscriptionStatus';
import { SubscriptionTier } from './subscriptionTier';
import { Tenant } from './tenant';

export class Organization {
  /**
   * Unique identifier for the organization (UUID format).
   */
  'id'?: string;
  /**
   * Legal name of the organization.
   */
  'name'?: string;
  /**
   * Display name of the organization for UI purposes.
   */
  'displayName'?: string;
  /**
   * Official domain associated with the organization (e.g., \"example.com\").
   */
  'domain'?: string;
  'subscriptionTier'?: SubscriptionTier;
  'subscriptionStatus'?: SubscriptionStatus;
  /**
   * Primary contact email for the organization.
   */
  'email'?: string;
  /**
   * Timestamp for when the organization was created.
   */
  'createdAt'?: Date;
  /**
   * Timestamp for when the organization was last updated.
   */
  'updatedAt'?: Date;
  /**
   * Indicates if the organization is active.
   */
  'isActive'?: boolean;
  /**
   * Flexible metadata in structured format for additional data storage.
   */
  'metadata'?: object;
  /**
   * Maximum number of users allowed for the organization.
   */
  'maxUsers'?: string;
  /**
   * Technical contact email for support or administrative purposes.
   */
  'technicalContact'?: string;
  /**
   * User ID of the owner or administrator associated with the organization.
   */
  'ownerSupabaseAuthUserId'?: string;
  /**
   * Storage quota for the organization in bytes.
   */
  'storageQuota'?: string;
  /**
   * Amount of storage currently used by the organization in bytes.
   */
  'usedStorage'?: string;
  /**
   * Maximum number of workspaces allowed for the organization.
   */
  'maxWorkspaces'?: number;
  /**
   * Maximum number of members allowed in the organization.
   */
  'maxMembers'?: number;
  /**
   * Prefix for API keys issued by the organization, used for key identification.
   */
  'apiKeyPrefix'?: string;
  /**
   * Security settings in structured format, providing flexibility for custom security configurations.
   */
  'securitySettings'?: object;
  /**
   * Feature flags in structured format, enabling or disabling specific features.
   */
  'featureFlags'?: object;
  'industry'?: IndustryType;
  /**
   * Phone number for the organization (international format).
   */
  'phoneNumber'?: string;
  /**
   * Website URL of the organization.
   */
  'websiteUrl'?: string;
  'address'?: Address;
  /**
   * Compliance requirements for the organization, stored as a list of strings.
   */
  'complianceRequirements'?: Array<string>;
  /**
   * Timestamp for when the organization was soft-deleted.
   */
  'deletedAt'?: Date;
  'tenants'?: Array<Tenant>;
  /**
   * List of members within the organization.
   */
  'orgMembers'?: Array<OrgMember>;
  /**
   * API keys issued by the organization.
   */
  'orgApiKeys'?: Array<OrgAPIKey>;
  /**
   * Usage logs related to the organization, for tracking resource consumption.
   */
  'orgUsageLogs'?: Array<OrgUsageLog>;
  /**
   * Audit logs for tracking organizational events, changes, and security.
   */
  'auditLogs'?: Array<AuditLog>;
  'recordIdReference'?: string;
  'regulatoryStatus'?: RegulatoryStatus;
  'licenseNumbers'?: Array<string>;
  'complianceTier'?: ComplianceTier;
  'kycProvider'?: string;
  'paymentProvider'?: string;
  'transactionLimit'?: string;
  'riskScore'?: number;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{
    name: string;
    baseName: string;
    type: string;
  }> = [
    {
      name: 'id',
      baseName: 'id',
      type: 'string',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'displayName',
      baseName: 'displayName',
      type: 'string',
    },
    {
      name: 'domain',
      baseName: 'domain',
      type: 'string',
    },
    {
      name: 'subscriptionTier',
      baseName: 'subscriptionTier',
      type: 'SubscriptionTier',
    },
    {
      name: 'subscriptionStatus',
      baseName: 'subscriptionStatus',
      type: 'SubscriptionStatus',
    },
    {
      name: 'email',
      baseName: 'email',
      type: 'string',
    },
    {
      name: 'createdAt',
      baseName: 'createdAt',
      type: 'Date',
    },
    {
      name: 'updatedAt',
      baseName: 'updatedAt',
      type: 'Date',
    },
    {
      name: 'isActive',
      baseName: 'isActive',
      type: 'boolean',
    },
    {
      name: 'metadata',
      baseName: 'metadata',
      type: 'object',
    },
    {
      name: 'maxUsers',
      baseName: 'maxUsers',
      type: 'string',
    },
    {
      name: 'technicalContact',
      baseName: 'technicalContact',
      type: 'string',
    },
    {
      name: 'ownerSupabaseAuthUserId',
      baseName: 'ownerSupabaseAuthUserId',
      type: 'string',
    },
    {
      name: 'storageQuota',
      baseName: 'storageQuota',
      type: 'string',
    },
    {
      name: 'usedStorage',
      baseName: 'usedStorage',
      type: 'string',
    },
    {
      name: 'maxWorkspaces',
      baseName: 'maxWorkspaces',
      type: 'number',
    },
    {
      name: 'maxMembers',
      baseName: 'maxMembers',
      type: 'number',
    },
    {
      name: 'apiKeyPrefix',
      baseName: 'apiKeyPrefix',
      type: 'string',
    },
    {
      name: 'securitySettings',
      baseName: 'securitySettings',
      type: 'object',
    },
    {
      name: 'featureFlags',
      baseName: 'featureFlags',
      type: 'object',
    },
    {
      name: 'industry',
      baseName: 'industry',
      type: 'IndustryType',
    },
    {
      name: 'phoneNumber',
      baseName: 'phoneNumber',
      type: 'string',
    },
    {
      name: 'websiteUrl',
      baseName: 'websiteUrl',
      type: 'string',
    },
    {
      name: 'address',
      baseName: 'address',
      type: 'Address',
    },
    {
      name: 'complianceRequirements',
      baseName: 'complianceRequirements',
      type: 'Array<string>',
    },
    {
      name: 'deletedAt',
      baseName: 'deletedAt',
      type: 'Date',
    },
    {
      name: 'tenants',
      baseName: 'tenants',
      type: 'Array<Tenant>',
    },
    {
      name: 'orgMembers',
      baseName: 'orgMembers',
      type: 'Array<OrgMember>',
    },
    {
      name: 'orgApiKeys',
      baseName: 'orgApiKeys',
      type: 'Array<OrgAPIKey>',
    },
    {
      name: 'orgUsageLogs',
      baseName: 'orgUsageLogs',
      type: 'Array<OrgUsageLog>',
    },
    {
      name: 'auditLogs',
      baseName: 'auditLogs',
      type: 'Array<AuditLog>',
    },
    {
      name: 'recordIdReference',
      baseName: 'recordIdReference',
      type: 'string',
    },
    {
      name: 'regulatoryStatus',
      baseName: 'regulatoryStatus',
      type: 'RegulatoryStatus',
    },
    {
      name: 'licenseNumbers',
      baseName: 'licenseNumbers',
      type: 'Array<string>',
    },
    {
      name: 'complianceTier',
      baseName: 'complianceTier',
      type: 'ComplianceTier',
    },
    {
      name: 'kycProvider',
      baseName: 'kycProvider',
      type: 'string',
    },
    {
      name: 'paymentProvider',
      baseName: 'paymentProvider',
      type: 'string',
    },
    {
      name: 'transactionLimit',
      baseName: 'transactionLimit',
      type: 'string',
    },
    {
      name: 'riskScore',
      baseName: 'riskScore',
      type: 'number',
    },
  ];

  static getAttributeTypeMap() {
    return Organization.attributeTypeMap;
  }
}

export namespace Organization {}
