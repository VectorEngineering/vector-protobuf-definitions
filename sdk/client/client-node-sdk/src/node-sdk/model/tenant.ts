/**
 * User Service API
 * Solomon AI User Service API - Manages user profiles and authentication
 *
 * The version of the OpenAPI document: 1.0
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Address } from './address';
import { AuditLog } from './auditLog';
import { BusinessAccount } from './businessAccount';
import { Settings } from './settings';
import { TenantAPIKey } from './tenantAPIKey';
import { TenantStatus } from './tenantStatus';
import { TenantType } from './tenantType';
import { TenantUsageLog } from './tenantUsageLog';
import { UserAccount } from './userAccount';

export class Tenant {
  /**
   * Unique identifier for the tenant (UUID format).
   */
  'id'?: string;
  /**
   * Display name of the tenant, used for UI display purposes.
   */
  'displayName'?: string;
  /**
   * External ID for the tenant, e.g., ID from an external or third-party system.
   */
  'externalId'?: string;
  'tenantType'?: TenantType;
  'status'?: TenantStatus;
  /**
   * Timestamp indicating when the tenant was created.
   */
  'createdAt'?: Date;
  /**
   * Timestamp indicating the last update time for the tenant.
   */
  'updatedAt'?: Date;
  /**
   * Storage quota for the tenant, specified in bytes.
   */
  'storageQuota'?: string;
  /**
   * Storage used by the tenant, specified in bytes.
   */
  'usedStorage'?: string;
  /**
   * Metadata in structured format for flexible storage of additional details.
   */
  'metadata'?: object;
  /**
   * Custom domain associated with the tenant, if applicable.
   */
  'customDomain'?: string;
  /**
   * Primary contact email for the tenant.
   */
  'email': string;
  /**
   * Indicates if the tenant is soft-deleted.
   */
  'isSoftDeleted'?: boolean;
  /**
   * Indicates if the tenant is currently active.
   */
  'isActive'?: boolean;
  'address'?: Address;
  /**
   * Phone number for contacting the tenant.
   */
  'phoneNumber'?: string;
  /**
   * Timezone setting for the tenant.
   */
  'timezone'?: string;
  /**
   * Language preference code for the tenant (e.g., \"en-US\").
   */
  'languageCode'?: string;
  /**
   * Compliance requirements specific to the tenant, stored as a list of strings.
   */
  'complianceRequirements'?: Array<string>;
  /**
   * Feature flags enabled for the tenant, providing feature-level customization.
   */
  'featureFlags'?: object;
  /**
   * Security settings specific to the tenant, allowing flexible security configurations.
   */
  'securitySettings'?: object;
  /**
   * User ID of the tenant\'s owner or primary administrator.
   */
  'ownerUserId'?: string;
  /**
   * Timestamp for when the tenant was soft-deleted.
   */
  'deletedAt'?: Date;
  /**
   * Business accounts associated with the tenant.
   */
  'businessAccounts'?: Array<BusinessAccount>;
  /**
   * User accounts associated with the tenant.
   */
  'userAccounts'?: Array<UserAccount>;
  'settings'?: Settings;
  /**
   * Audit logs for tracking organizational events, changes, and security.
   */
  'auditLogs'?: Array<AuditLog>;
  /**
   * API keys associated with the tenant, for service integrations and API access.
   */
  'tenantApiKeys'?: Array<TenantAPIKey>;
  /**
   * Usage logs for the tenant, tracking resource consumption.
   */
  'tenantUsageLogs'?: Array<TenantUsageLog>;
  'recordIdReference'?: string;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{
    name: string;
    baseName: string;
    type: string;
  }> = [
    {
      name: 'id',
      baseName: 'id',
      type: 'string',
    },
    {
      name: 'displayName',
      baseName: 'displayName',
      type: 'string',
    },
    {
      name: 'externalId',
      baseName: 'externalId',
      type: 'string',
    },
    {
      name: 'tenantType',
      baseName: 'tenantType',
      type: 'TenantType',
    },
    {
      name: 'status',
      baseName: 'status',
      type: 'TenantStatus',
    },
    {
      name: 'createdAt',
      baseName: 'createdAt',
      type: 'Date',
    },
    {
      name: 'updatedAt',
      baseName: 'updatedAt',
      type: 'Date',
    },
    {
      name: 'storageQuota',
      baseName: 'storageQuota',
      type: 'string',
    },
    {
      name: 'usedStorage',
      baseName: 'usedStorage',
      type: 'string',
    },
    {
      name: 'metadata',
      baseName: 'metadata',
      type: 'object',
    },
    {
      name: 'customDomain',
      baseName: 'customDomain',
      type: 'string',
    },
    {
      name: 'email',
      baseName: 'email',
      type: 'string',
    },
    {
      name: 'isSoftDeleted',
      baseName: 'isSoftDeleted',
      type: 'boolean',
    },
    {
      name: 'isActive',
      baseName: 'isActive',
      type: 'boolean',
    },
    {
      name: 'address',
      baseName: 'address',
      type: 'Address',
    },
    {
      name: 'phoneNumber',
      baseName: 'phoneNumber',
      type: 'string',
    },
    {
      name: 'timezone',
      baseName: 'timezone',
      type: 'string',
    },
    {
      name: 'languageCode',
      baseName: 'languageCode',
      type: 'string',
    },
    {
      name: 'complianceRequirements',
      baseName: 'complianceRequirements',
      type: 'Array<string>',
    },
    {
      name: 'featureFlags',
      baseName: 'featureFlags',
      type: 'object',
    },
    {
      name: 'securitySettings',
      baseName: 'securitySettings',
      type: 'object',
    },
    {
      name: 'ownerUserId',
      baseName: 'ownerUserId',
      type: 'string',
    },
    {
      name: 'deletedAt',
      baseName: 'deletedAt',
      type: 'Date',
    },
    {
      name: 'businessAccounts',
      baseName: 'businessAccounts',
      type: 'Array<BusinessAccount>',
    },
    {
      name: 'userAccounts',
      baseName: 'userAccounts',
      type: 'Array<UserAccount>',
    },
    {
      name: 'settings',
      baseName: 'settings',
      type: 'Settings',
    },
    {
      name: 'auditLogs',
      baseName: 'auditLogs',
      type: 'Array<AuditLog>',
    },
    {
      name: 'tenantApiKeys',
      baseName: 'tenantApiKeys',
      type: 'Array<TenantAPIKey>',
    },
    {
      name: 'tenantUsageLogs',
      baseName: 'tenantUsageLogs',
      type: 'Array<TenantUsageLog>',
    },
    {
      name: 'recordIdReference',
      baseName: 'recordIdReference',
      type: 'string',
    },
  ];

  static getAttributeTypeMap() {
    return Tenant.attributeTypeMap;
  }
}

export namespace Tenant {}
