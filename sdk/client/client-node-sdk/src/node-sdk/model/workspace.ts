/**
 * User Service API
 * Solomon AI User Service API - Manages user profiles and authentication
 *
 * The version of the OpenAPI document: 1.0
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { FolderMetadata } from './folderMetadata';
import { WorkspaceActivity } from './workspaceActivity';
import { WorkspaceCompliance } from './workspaceCompliance';
import { WorkspaceSharing } from './workspaceSharing';

/**
 * Workspace represents a collaborative environment for file organization. Provides a container for folders and files with specific sharing and access controls.  Key features: - Resource organization - Access control - Usage tracking - Collaboration settings - Compliance management  Security features: - Public sharing controls - Member limits - Approval workflows - Guest access management  Storage features: - Quota management - Size limits - Version control - Retention policies
 */
export class Workspace {
  'id'?: string;
  'name'?: string;
  'createdAt'?: Date;
  'updatedAt'?: Date;
  'tags'?: Array<string>;
  'folders'?: Array<FolderMetadata>;
  'version'?: number;
  'isDeleted'?: boolean;
  /**
   * The S3 bucket name where the folder is located.
   */
  's3BucketName'?: string;
  /**
   * The prefix path representing the folder in the S3 bucket.
   */
  's3FolderPath'?: string;
  /**
   * AWS region where the S3 bucket containing the folder is located.
   */
  's3Region'?: string;
  /**
   * Custom metadata for the folder, represented as key-value pairs.
   */
  's3Metadata'?: { [key: string]: string | undefined };
  /**
   * Access control list (ACL) permissions for the folder in S3.
   */
  's3Acl'?: string;
  /**
   * The date and time when the folder was last modified in S3. This might represent the last time a file was added, removed, or changed in the folder.
   */
  's3LastModified'?: Date;
  'uniqueIdentifier'?: string;
  'versionId'?: string;
  'description'?: string;
  'metadataJson'?: string;
  'storageQuota'?: string;
  'usedStorage'?: string;
  'tenantId'?: string;
  'organizationId'?: string;
  'workspaceType'?: string;
  'parentWorkspaceId'?: string;
  'workspacePath'?: string;
  'iconUrl'?: string;
  'colorTheme'?: string;
  'isTemplate'?: boolean;
  'templateId'?: string;
  'favoriteCount'?: number;
  'lastActivity'?: Date;
  'retentionDays'?: number;
  'defaultView'?: string;
  'maxFileSize'?: string;
  'maxStoragePerUser'?: string;
  'maxVersions'?: number;
  'allowPublicSharing'?: boolean;
  'requireApproval'?: boolean;
  'memberLimit'?: number;
  'guestAccess'?: boolean;
  'sharing'?: Array<WorkspaceSharing>;
  'activity'?: Array<WorkspaceActivity>;
  'compliance'?: Array<WorkspaceCompliance>;
  'deletedAt'?: Date;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{
    name: string;
    baseName: string;
    type: string;
  }> = [
    {
      name: 'id',
      baseName: 'id',
      type: 'string',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'createdAt',
      baseName: 'createdAt',
      type: 'Date',
    },
    {
      name: 'updatedAt',
      baseName: 'updatedAt',
      type: 'Date',
    },
    {
      name: 'tags',
      baseName: 'tags',
      type: 'Array<string>',
    },
    {
      name: 'folders',
      baseName: 'folders',
      type: 'Array<FolderMetadata>',
    },
    {
      name: 'version',
      baseName: 'version',
      type: 'number',
    },
    {
      name: 'isDeleted',
      baseName: 'isDeleted',
      type: 'boolean',
    },
    {
      name: 's3BucketName',
      baseName: 's3BucketName',
      type: 'string',
    },
    {
      name: 's3FolderPath',
      baseName: 's3FolderPath',
      type: 'string',
    },
    {
      name: 's3Region',
      baseName: 's3Region',
      type: 'string',
    },
    {
      name: 's3Metadata',
      baseName: 's3Metadata',
      type: '{ [key: string]: string | undefined; }',
    },
    {
      name: 's3Acl',
      baseName: 's3Acl',
      type: 'string',
    },
    {
      name: 's3LastModified',
      baseName: 's3LastModified',
      type: 'Date',
    },
    {
      name: 'uniqueIdentifier',
      baseName: 'uniqueIdentifier',
      type: 'string',
    },
    {
      name: 'versionId',
      baseName: 'versionId',
      type: 'string',
    },
    {
      name: 'description',
      baseName: 'description',
      type: 'string',
    },
    {
      name: 'metadataJson',
      baseName: 'metadataJson',
      type: 'string',
    },
    {
      name: 'storageQuota',
      baseName: 'storageQuota',
      type: 'string',
    },
    {
      name: 'usedStorage',
      baseName: 'usedStorage',
      type: 'string',
    },
    {
      name: 'tenantId',
      baseName: 'tenantId',
      type: 'string',
    },
    {
      name: 'organizationId',
      baseName: 'organizationId',
      type: 'string',
    },
    {
      name: 'workspaceType',
      baseName: 'workspaceType',
      type: 'string',
    },
    {
      name: 'parentWorkspaceId',
      baseName: 'parentWorkspaceId',
      type: 'string',
    },
    {
      name: 'workspacePath',
      baseName: 'workspacePath',
      type: 'string',
    },
    {
      name: 'iconUrl',
      baseName: 'iconUrl',
      type: 'string',
    },
    {
      name: 'colorTheme',
      baseName: 'colorTheme',
      type: 'string',
    },
    {
      name: 'isTemplate',
      baseName: 'isTemplate',
      type: 'boolean',
    },
    {
      name: 'templateId',
      baseName: 'templateId',
      type: 'string',
    },
    {
      name: 'favoriteCount',
      baseName: 'favoriteCount',
      type: 'number',
    },
    {
      name: 'lastActivity',
      baseName: 'lastActivity',
      type: 'Date',
    },
    {
      name: 'retentionDays',
      baseName: 'retentionDays',
      type: 'number',
    },
    {
      name: 'defaultView',
      baseName: 'defaultView',
      type: 'string',
    },
    {
      name: 'maxFileSize',
      baseName: 'maxFileSize',
      type: 'string',
    },
    {
      name: 'maxStoragePerUser',
      baseName: 'maxStoragePerUser',
      type: 'string',
    },
    {
      name: 'maxVersions',
      baseName: 'maxVersions',
      type: 'number',
    },
    {
      name: 'allowPublicSharing',
      baseName: 'allowPublicSharing',
      type: 'boolean',
    },
    {
      name: 'requireApproval',
      baseName: 'requireApproval',
      type: 'boolean',
    },
    {
      name: 'memberLimit',
      baseName: 'memberLimit',
      type: 'number',
    },
    {
      name: 'guestAccess',
      baseName: 'guestAccess',
      type: 'boolean',
    },
    {
      name: 'sharing',
      baseName: 'sharing',
      type: 'Array<WorkspaceSharing>',
    },
    {
      name: 'activity',
      baseName: 'activity',
      type: 'Array<WorkspaceActivity>',
    },
    {
      name: 'compliance',
      baseName: 'compliance',
      type: 'Array<WorkspaceCompliance>',
    },
    {
      name: 'deletedAt',
      baseName: 'deletedAt',
      type: 'Date',
    },
  ];

  static getAttributeTypeMap() {
    return Workspace.attributeTypeMap;
  }
}
