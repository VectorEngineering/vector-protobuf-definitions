/* tslint:disable */
/* eslint-disable */
/**
 * Lead Scraping Service API
 * Vector Lead Scraping Service API - Manages Lead Scraping Jobs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: yoanyomba@vector.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * - AUTH_FAILED_INVALID_BEARER_TOKEN: Authentication errors
 *  - SESSION_EXPIRED: Session errors
 *  - UNAUTHENTICATED: Other authentication errors
 *  - ACCOUNT_LOCKED: New authentication error codes
 *
 * Account is locked due to too many failed login attempts
 *  - ACCOUNT_DISABLED: Account has been disabled by admin
 *  - PASSWORD_EXPIRED: Password has expired and must be changed
 *  - PASSWORD_RESET_REQUIRED: Password reset is required
 *  - UNRECOGNIZED_DEVICE: Login attempt from an unrecognized device
 * @export
 */
export const AuthErrorCode = {
  NoAuthError: 'NO_AUTH_ERROR',
  AuthFailedInvalidBearerToken: 'AUTH_FAILED_INVALID_BEARER_TOKEN',
  AuthFailedInvalidSubject: 'AUTH_FAILED_INVALID_SUBJECT',
  AuthFailedInvalidAudience: 'AUTH_FAILED_INVALID_AUDIENCE',
  AuthFailedInvalidIssuer: 'AUTH_FAILED_INVALID_ISSUER',
  BearerTokenMissing: 'BEARER_TOKEN_MISSING',
  TokenExpired: 'TOKEN_EXPIRED',
  TokenNotActive: 'TOKEN_NOT_ACTIVE',
  TokenRevoked: 'TOKEN_REVOKED',
  InvalidClaims: 'INVALID_CLAIMS',
  MissingRequiredClaims: 'MISSING_REQUIRED_CLAIMS',
  InvalidScope: 'INVALID_SCOPE',
  InvalidPermissions: 'INVALID_PERMISSIONS',
  SessionExpired: 'SESSION_EXPIRED',
  SessionInvalid: 'SESSION_INVALID',
  SessionRevoked: 'SESSION_REVOKED',
  Unauthenticated: 'UNAUTHENTICATED',
  MultiFactorRequired: 'MULTI_FACTOR_REQUIRED',
  MultiFactorFailed: 'MULTI_FACTOR_FAILED',
  AccountLocked: 'ACCOUNT_LOCKED',
  AccountDisabled: 'ACCOUNT_DISABLED',
  PasswordExpired: 'PASSWORD_EXPIRED',
  PasswordResetRequired: 'PASSWORD_RESET_REQUIRED',
  UnrecognizedDevice: 'UNRECOGNIZED_DEVICE',
} as const;
export type AuthErrorCode = (typeof AuthErrorCode)[keyof typeof AuthErrorCode];

export function instanceOfAuthErrorCode(value: any): boolean {
  for (const key in AuthErrorCode) {
    if (Object.prototype.hasOwnProperty.call(AuthErrorCode, key)) {
      if ((AuthErrorCode as Record<string, AuthErrorCode>)[key] === value) {
        return true;
      }
    }
  }
  return false;
}

export function AuthErrorCodeFromJSON(json: any): AuthErrorCode {
  return AuthErrorCodeFromJSONTyped(json, false);
}

export function AuthErrorCodeFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): AuthErrorCode {
  return json as AuthErrorCode;
}

export function AuthErrorCodeToJSON(value?: AuthErrorCode | null): any {
  return value as any;
}
