/* tslint:disable */
/* eslint-disable */
/**
 * Lead Scraping Service API
 * Vector Lead Scraping Service API - Manages Lead Scraping Jobs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: yoanyomba@vector.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConflictInfo } from './ConflictInfo';
import {
  ConflictInfoFromJSON,
  ConflictInfoFromJSONTyped,
  ConflictInfoToJSON,
} from './ConflictInfo';
import type { ValidationErrorCode } from './ValidationErrorCode';
import {
  ValidationErrorCodeFromJSON,
  ValidationErrorCodeFromJSONTyped,
  ValidationErrorCodeToJSON,
} from './ValidationErrorCode';
import type { ErrorResponse } from './ErrorResponse';
import {
  ErrorResponseFromJSON,
  ErrorResponseFromJSONTyped,
  ErrorResponseToJSON,
} from './ErrorResponse';

/**
 * Represents resource conflict errors
 * @export
 * @interface ConflictErrorMessageResponse
 */
export interface ConflictErrorMessageResponse {
  /**
   *
   * @type {ValidationErrorCode}
   * @memberof ConflictErrorMessageResponse
   */
  code?: ValidationErrorCode;
  /**
   *
   * @type {string}
   * @memberof ConflictErrorMessageResponse
   */
  message?: string;
  /**
   *
   * @type {ConflictInfo}
   * @memberof ConflictErrorMessageResponse
   */
  conflictInfo?: ConflictInfo;
  /**
   *
   * @type {ErrorResponse}
   * @memberof ConflictErrorMessageResponse
   */
  errorResponse?: ErrorResponse;
}

/**
 * Check if a given object implements the ConflictErrorMessageResponse interface.
 */
export function instanceOfConflictErrorMessageResponse(
  value: object
): value is ConflictErrorMessageResponse {
  return true;
}

export function ConflictErrorMessageResponseFromJSON(
  json: any
): ConflictErrorMessageResponse {
  return ConflictErrorMessageResponseFromJSONTyped(json, false);
}

export function ConflictErrorMessageResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ConflictErrorMessageResponse {
  if (json == null) {
    return json;
  }
  return {
    code:
      json['code'] == null
        ? undefined
        : ValidationErrorCodeFromJSON(json['code']),
    message: json['message'] == null ? undefined : json['message'],
    conflictInfo:
      json['conflictInfo'] == null
        ? undefined
        : ConflictInfoFromJSON(json['conflictInfo']),
    errorResponse:
      json['errorResponse'] == null
        ? undefined
        : ErrorResponseFromJSON(json['errorResponse']),
  };
}

export function ConflictErrorMessageResponseToJSON(
  value?: ConflictErrorMessageResponse | null
): any {
  if (value == null) {
    return value;
  }
  return {
    code: ValidationErrorCodeToJSON(value['code']),
    message: value['message'],
    conflictInfo: ConflictInfoToJSON(value['conflictInfo']),
    errorResponse: ErrorResponseToJSON(value['errorResponse']),
  };
}
