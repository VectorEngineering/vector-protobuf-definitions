/* tslint:disable */
/* eslint-disable */
/**
 * Lead Scraping Service API
 * Vector Lead Scraping Service API - Manages Lead Scraping Jobs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: yoanyomba@vector.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ErrorResponse } from './ErrorResponse';
import {
  ErrorResponseFromJSON,
  ErrorResponseFromJSONTyped,
  ErrorResponseToJSON,
} from './ErrorResponse';

/**
 * Represents errors when HTTP method is not allowed on the endpoint
 * @export
 * @interface MethodNotAllowedErrorMessageResponse
 */
export interface MethodNotAllowedErrorMessageResponse {
  /**
   *
   * @type {number}
   * @memberof MethodNotAllowedErrorMessageResponse
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof MethodNotAllowedErrorMessageResponse
   */
  message?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof MethodNotAllowedErrorMessageResponse
   */
  allowedMethods?: Array<string>;
  /**
   *
   * @type {ErrorResponse}
   * @memberof MethodNotAllowedErrorMessageResponse
   */
  errorResponse?: ErrorResponse;
}

/**
 * Check if a given object implements the MethodNotAllowedErrorMessageResponse interface.
 */
export function instanceOfMethodNotAllowedErrorMessageResponse(
  value: object
): value is MethodNotAllowedErrorMessageResponse {
  return true;
}

export function MethodNotAllowedErrorMessageResponseFromJSON(
  json: any
): MethodNotAllowedErrorMessageResponse {
  return MethodNotAllowedErrorMessageResponseFromJSONTyped(json, false);
}

export function MethodNotAllowedErrorMessageResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): MethodNotAllowedErrorMessageResponse {
  if (json == null) {
    return json;
  }
  return {
    code: json['code'] == null ? undefined : json['code'],
    message: json['message'] == null ? undefined : json['message'],
    allowedMethods:
      json['allowedMethods'] == null ? undefined : json['allowedMethods'],
    errorResponse:
      json['errorResponse'] == null
        ? undefined
        : ErrorResponseFromJSON(json['errorResponse']),
  };
}

export function MethodNotAllowedErrorMessageResponseToJSON(
  value?: MethodNotAllowedErrorMessageResponse | null
): any {
  if (value == null) {
    return value;
  }
  return {
    code: value['code'],
    message: value['message'],
    allowedMethods: value['allowedMethods'],
    errorResponse: ErrorResponseToJSON(value['errorResponse']),
  };
}
