/*
Lead Scraping Service API

Vector Lead Scraping Service API - Manages Lead Scraping Jobs

API version: 1.0
Contact: yoanyomba@vector.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend_client

import (
	"encoding/json"
	"time"
)

// checks if the APIInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &APIInfo{}

// APIInfo struct for APIInfo
type APIInfo struct {
	Version *string `json:"version,omitempty"`
	SupportedVersions []string `json:"supportedVersions,omitempty"`
	IsDeprecated *bool `json:"isDeprecated,omitempty"`
	SunsetDate *time.Time `json:"sunsetDate,omitempty"`
}

// NewAPIInfo instantiates a new APIInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAPIInfo() *APIInfo {
	this := APIInfo{}
	return &this
}

// NewAPIInfoWithDefaults instantiates a new APIInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAPIInfoWithDefaults() *APIInfo {
	this := APIInfo{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *APIInfo) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIInfo) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *APIInfo) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *APIInfo) SetVersion(v string) {
	o.Version = &v
}

// GetSupportedVersions returns the SupportedVersions field value if set, zero value otherwise.
func (o *APIInfo) GetSupportedVersions() []string {
	if o == nil || IsNil(o.SupportedVersions) {
		var ret []string
		return ret
	}
	return o.SupportedVersions
}

// GetSupportedVersionsOk returns a tuple with the SupportedVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIInfo) GetSupportedVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedVersions) {
		return nil, false
	}
	return o.SupportedVersions, true
}

// HasSupportedVersions returns a boolean if a field has been set.
func (o *APIInfo) HasSupportedVersions() bool {
	if o != nil && !IsNil(o.SupportedVersions) {
		return true
	}

	return false
}

// SetSupportedVersions gets a reference to the given []string and assigns it to the SupportedVersions field.
func (o *APIInfo) SetSupportedVersions(v []string) {
	o.SupportedVersions = v
}

// GetIsDeprecated returns the IsDeprecated field value if set, zero value otherwise.
func (o *APIInfo) GetIsDeprecated() bool {
	if o == nil || IsNil(o.IsDeprecated) {
		var ret bool
		return ret
	}
	return *o.IsDeprecated
}

// GetIsDeprecatedOk returns a tuple with the IsDeprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIInfo) GetIsDeprecatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeprecated) {
		return nil, false
	}
	return o.IsDeprecated, true
}

// HasIsDeprecated returns a boolean if a field has been set.
func (o *APIInfo) HasIsDeprecated() bool {
	if o != nil && !IsNil(o.IsDeprecated) {
		return true
	}

	return false
}

// SetIsDeprecated gets a reference to the given bool and assigns it to the IsDeprecated field.
func (o *APIInfo) SetIsDeprecated(v bool) {
	o.IsDeprecated = &v
}

// GetSunsetDate returns the SunsetDate field value if set, zero value otherwise.
func (o *APIInfo) GetSunsetDate() time.Time {
	if o == nil || IsNil(o.SunsetDate) {
		var ret time.Time
		return ret
	}
	return *o.SunsetDate
}

// GetSunsetDateOk returns a tuple with the SunsetDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIInfo) GetSunsetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SunsetDate) {
		return nil, false
	}
	return o.SunsetDate, true
}

// HasSunsetDate returns a boolean if a field has been set.
func (o *APIInfo) HasSunsetDate() bool {
	if o != nil && !IsNil(o.SunsetDate) {
		return true
	}

	return false
}

// SetSunsetDate gets a reference to the given time.Time and assigns it to the SunsetDate field.
func (o *APIInfo) SetSunsetDate(v time.Time) {
	o.SunsetDate = &v
}

func (o APIInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o APIInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.SupportedVersions) {
		toSerialize["supportedVersions"] = o.SupportedVersions
	}
	if !IsNil(o.IsDeprecated) {
		toSerialize["isDeprecated"] = o.IsDeprecated
	}
	if !IsNil(o.SunsetDate) {
		toSerialize["sunsetDate"] = o.SunsetDate
	}
	return toSerialize, nil
}

type NullableAPIInfo struct {
	value *APIInfo
	isSet bool
}

func (v NullableAPIInfo) Get() *APIInfo {
	return v.value
}

func (v *NullableAPIInfo) Set(val *APIInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIInfo(val *APIInfo) *NullableAPIInfo {
	return &NullableAPIInfo{value: val, isSet: true}
}

func (v NullableAPIInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


