/*
Lead Scraping Service API

Vector Lead Scraping Service API - Manages Lead Scraping Jobs

API version: 1.0
Contact: yoanyomba@vector.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend_client

import (
	"encoding/json"
)

// checks if the AuthContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthContext{}

// AuthContext struct for AuthContext
type AuthContext struct {
	RequiredScopes []string `json:"requiredScopes,omitempty"`
	ProvidedScopes []string `json:"providedScopes,omitempty"`
	MissingPermissions []string `json:"missingPermissions,omitempty"`
	TenantId *string `json:"tenantId,omitempty"`
}

// NewAuthContext instantiates a new AuthContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthContext() *AuthContext {
	this := AuthContext{}
	return &this
}

// NewAuthContextWithDefaults instantiates a new AuthContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthContextWithDefaults() *AuthContext {
	this := AuthContext{}
	return &this
}

// GetRequiredScopes returns the RequiredScopes field value if set, zero value otherwise.
func (o *AuthContext) GetRequiredScopes() []string {
	if o == nil || IsNil(o.RequiredScopes) {
		var ret []string
		return ret
	}
	return o.RequiredScopes
}

// GetRequiredScopesOk returns a tuple with the RequiredScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthContext) GetRequiredScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.RequiredScopes) {
		return nil, false
	}
	return o.RequiredScopes, true
}

// HasRequiredScopes returns a boolean if a field has been set.
func (o *AuthContext) HasRequiredScopes() bool {
	if o != nil && !IsNil(o.RequiredScopes) {
		return true
	}

	return false
}

// SetRequiredScopes gets a reference to the given []string and assigns it to the RequiredScopes field.
func (o *AuthContext) SetRequiredScopes(v []string) {
	o.RequiredScopes = v
}

// GetProvidedScopes returns the ProvidedScopes field value if set, zero value otherwise.
func (o *AuthContext) GetProvidedScopes() []string {
	if o == nil || IsNil(o.ProvidedScopes) {
		var ret []string
		return ret
	}
	return o.ProvidedScopes
}

// GetProvidedScopesOk returns a tuple with the ProvidedScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthContext) GetProvidedScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.ProvidedScopes) {
		return nil, false
	}
	return o.ProvidedScopes, true
}

// HasProvidedScopes returns a boolean if a field has been set.
func (o *AuthContext) HasProvidedScopes() bool {
	if o != nil && !IsNil(o.ProvidedScopes) {
		return true
	}

	return false
}

// SetProvidedScopes gets a reference to the given []string and assigns it to the ProvidedScopes field.
func (o *AuthContext) SetProvidedScopes(v []string) {
	o.ProvidedScopes = v
}

// GetMissingPermissions returns the MissingPermissions field value if set, zero value otherwise.
func (o *AuthContext) GetMissingPermissions() []string {
	if o == nil || IsNil(o.MissingPermissions) {
		var ret []string
		return ret
	}
	return o.MissingPermissions
}

// GetMissingPermissionsOk returns a tuple with the MissingPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthContext) GetMissingPermissionsOk() ([]string, bool) {
	if o == nil || IsNil(o.MissingPermissions) {
		return nil, false
	}
	return o.MissingPermissions, true
}

// HasMissingPermissions returns a boolean if a field has been set.
func (o *AuthContext) HasMissingPermissions() bool {
	if o != nil && !IsNil(o.MissingPermissions) {
		return true
	}

	return false
}

// SetMissingPermissions gets a reference to the given []string and assigns it to the MissingPermissions field.
func (o *AuthContext) SetMissingPermissions(v []string) {
	o.MissingPermissions = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *AuthContext) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthContext) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *AuthContext) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *AuthContext) SetTenantId(v string) {
	o.TenantId = &v
}

func (o AuthContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequiredScopes) {
		toSerialize["requiredScopes"] = o.RequiredScopes
	}
	if !IsNil(o.ProvidedScopes) {
		toSerialize["providedScopes"] = o.ProvidedScopes
	}
	if !IsNil(o.MissingPermissions) {
		toSerialize["missingPermissions"] = o.MissingPermissions
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	return toSerialize, nil
}

type NullableAuthContext struct {
	value *AuthContext
	isSet bool
}

func (v NullableAuthContext) Get() *AuthContext {
	return v.value
}

func (v *NullableAuthContext) Set(val *AuthContext) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthContext) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthContext(val *AuthContext) *NullableAuthContext {
	return &NullableAuthContext{value: val, isSet: true}
}

func (v NullableAuthContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


