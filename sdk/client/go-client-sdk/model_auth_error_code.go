/*
Lead Scraping Service API

Vector Lead Scraping Service API - Manages Lead Scraping Jobs

API version: 1.0
Contact: yoanyomba@vector.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend_client

import (
	"encoding/json"
	"fmt"
)

// AuthErrorCode - AUTH_FAILED_INVALID_BEARER_TOKEN: Authentication errors  - SESSION_EXPIRED: Session errors  - UNAUTHENTICATED: Other authentication errors  - ACCOUNT_LOCKED: New authentication error codes  Account is locked due to too many failed login attempts  - ACCOUNT_DISABLED: Account has been disabled by admin  - PASSWORD_EXPIRED: Password has expired and must be changed  - PASSWORD_RESET_REQUIRED: Password reset is required  - UNRECOGNIZED_DEVICE: Login attempt from an unrecognized device
type AuthErrorCode string

// List of AuthErrorCode
const (
	NO_AUTH_ERROR AuthErrorCode = "NO_AUTH_ERROR"
	AUTH_FAILED_INVALID_BEARER_TOKEN AuthErrorCode = "AUTH_FAILED_INVALID_BEARER_TOKEN"
	AUTH_FAILED_INVALID_SUBJECT AuthErrorCode = "AUTH_FAILED_INVALID_SUBJECT"
	AUTH_FAILED_INVALID_AUDIENCE AuthErrorCode = "AUTH_FAILED_INVALID_AUDIENCE"
	AUTH_FAILED_INVALID_ISSUER AuthErrorCode = "AUTH_FAILED_INVALID_ISSUER"
	BEARER_TOKEN_MISSING AuthErrorCode = "BEARER_TOKEN_MISSING"
	TOKEN_EXPIRED AuthErrorCode = "TOKEN_EXPIRED"
	TOKEN_NOT_ACTIVE AuthErrorCode = "TOKEN_NOT_ACTIVE"
	TOKEN_REVOKED AuthErrorCode = "TOKEN_REVOKED"
	INVALID_CLAIMS AuthErrorCode = "INVALID_CLAIMS"
	MISSING_REQUIRED_CLAIMS AuthErrorCode = "MISSING_REQUIRED_CLAIMS"
	INVALID_SCOPE AuthErrorCode = "INVALID_SCOPE"
	INVALID_PERMISSIONS AuthErrorCode = "INVALID_PERMISSIONS"
	SESSION_EXPIRED AuthErrorCode = "SESSION_EXPIRED"
	SESSION_INVALID AuthErrorCode = "SESSION_INVALID"
	SESSION_REVOKED AuthErrorCode = "SESSION_REVOKED"
	UNAUTHENTICATED AuthErrorCode = "UNAUTHENTICATED"
	MULTI_FACTOR_REQUIRED AuthErrorCode = "MULTI_FACTOR_REQUIRED"
	MULTI_FACTOR_FAILED AuthErrorCode = "MULTI_FACTOR_FAILED"
	ACCOUNT_LOCKED AuthErrorCode = "ACCOUNT_LOCKED"
	ACCOUNT_DISABLED AuthErrorCode = "ACCOUNT_DISABLED"
	PASSWORD_EXPIRED AuthErrorCode = "PASSWORD_EXPIRED"
	PASSWORD_RESET_REQUIRED AuthErrorCode = "PASSWORD_RESET_REQUIRED"
	UNRECOGNIZED_DEVICE AuthErrorCode = "UNRECOGNIZED_DEVICE"
)

// All allowed values of AuthErrorCode enum
var AllowedAuthErrorCodeEnumValues = []AuthErrorCode{
	"NO_AUTH_ERROR",
	"AUTH_FAILED_INVALID_BEARER_TOKEN",
	"AUTH_FAILED_INVALID_SUBJECT",
	"AUTH_FAILED_INVALID_AUDIENCE",
	"AUTH_FAILED_INVALID_ISSUER",
	"BEARER_TOKEN_MISSING",
	"TOKEN_EXPIRED",
	"TOKEN_NOT_ACTIVE",
	"TOKEN_REVOKED",
	"INVALID_CLAIMS",
	"MISSING_REQUIRED_CLAIMS",
	"INVALID_SCOPE",
	"INVALID_PERMISSIONS",
	"SESSION_EXPIRED",
	"SESSION_INVALID",
	"SESSION_REVOKED",
	"UNAUTHENTICATED",
	"MULTI_FACTOR_REQUIRED",
	"MULTI_FACTOR_FAILED",
	"ACCOUNT_LOCKED",
	"ACCOUNT_DISABLED",
	"PASSWORD_EXPIRED",
	"PASSWORD_RESET_REQUIRED",
	"UNRECOGNIZED_DEVICE",
}

func (v *AuthErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthErrorCode(value)
	for _, existing := range AllowedAuthErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthErrorCode", value)
}

// NewAuthErrorCodeFromValue returns a pointer to a valid AuthErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthErrorCodeFromValue(v string) (*AuthErrorCode, error) {
	ev := AuthErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthErrorCode: valid values are %v", v, AllowedAuthErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthErrorCode) IsValid() bool {
	for _, existing := range AllowedAuthErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthErrorCode value
func (v AuthErrorCode) Ptr() *AuthErrorCode {
	return &v
}

type NullableAuthErrorCode struct {
	value *AuthErrorCode
	isSet bool
}

func (v NullableAuthErrorCode) Get() *AuthErrorCode {
	return v.value
}

func (v *NullableAuthErrorCode) Set(val *AuthErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthErrorCode(val *AuthErrorCode) *NullableAuthErrorCode {
	return &NullableAuthErrorCode{value: val, isSet: true}
}

func (v NullableAuthErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

