/*
Lead Scraping Service API

Vector Lead Scraping Service API - Manages Lead Scraping Jobs

API version: 1.0
Contact: yoanyomba@vector.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend_client

import (
	"encoding/json"
)

// checks if the ConflictErrorMessageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConflictErrorMessageResponse{}

// ConflictErrorMessageResponse Represents resource conflict errors
type ConflictErrorMessageResponse struct {
	Code *ValidationErrorCode `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	ConflictInfo *ConflictInfo `json:"conflictInfo,omitempty"`
	ErrorResponse *ErrorResponse `json:"errorResponse,omitempty"`
}

// NewConflictErrorMessageResponse instantiates a new ConflictErrorMessageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConflictErrorMessageResponse() *ConflictErrorMessageResponse {
	this := ConflictErrorMessageResponse{}
	var code ValidationErrorCode = NO_ERROR
	this.Code = &code
	return &this
}

// NewConflictErrorMessageResponseWithDefaults instantiates a new ConflictErrorMessageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConflictErrorMessageResponseWithDefaults() *ConflictErrorMessageResponse {
	this := ConflictErrorMessageResponse{}
	var code ValidationErrorCode = NO_ERROR
	this.Code = &code
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ConflictErrorMessageResponse) GetCode() ValidationErrorCode {
	if o == nil || IsNil(o.Code) {
		var ret ValidationErrorCode
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConflictErrorMessageResponse) GetCodeOk() (*ValidationErrorCode, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ConflictErrorMessageResponse) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given ValidationErrorCode and assigns it to the Code field.
func (o *ConflictErrorMessageResponse) SetCode(v ValidationErrorCode) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ConflictErrorMessageResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConflictErrorMessageResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ConflictErrorMessageResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ConflictErrorMessageResponse) SetMessage(v string) {
	o.Message = &v
}

// GetConflictInfo returns the ConflictInfo field value if set, zero value otherwise.
func (o *ConflictErrorMessageResponse) GetConflictInfo() ConflictInfo {
	if o == nil || IsNil(o.ConflictInfo) {
		var ret ConflictInfo
		return ret
	}
	return *o.ConflictInfo
}

// GetConflictInfoOk returns a tuple with the ConflictInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConflictErrorMessageResponse) GetConflictInfoOk() (*ConflictInfo, bool) {
	if o == nil || IsNil(o.ConflictInfo) {
		return nil, false
	}
	return o.ConflictInfo, true
}

// HasConflictInfo returns a boolean if a field has been set.
func (o *ConflictErrorMessageResponse) HasConflictInfo() bool {
	if o != nil && !IsNil(o.ConflictInfo) {
		return true
	}

	return false
}

// SetConflictInfo gets a reference to the given ConflictInfo and assigns it to the ConflictInfo field.
func (o *ConflictErrorMessageResponse) SetConflictInfo(v ConflictInfo) {
	o.ConflictInfo = &v
}

// GetErrorResponse returns the ErrorResponse field value if set, zero value otherwise.
func (o *ConflictErrorMessageResponse) GetErrorResponse() ErrorResponse {
	if o == nil || IsNil(o.ErrorResponse) {
		var ret ErrorResponse
		return ret
	}
	return *o.ErrorResponse
}

// GetErrorResponseOk returns a tuple with the ErrorResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConflictErrorMessageResponse) GetErrorResponseOk() (*ErrorResponse, bool) {
	if o == nil || IsNil(o.ErrorResponse) {
		return nil, false
	}
	return o.ErrorResponse, true
}

// HasErrorResponse returns a boolean if a field has been set.
func (o *ConflictErrorMessageResponse) HasErrorResponse() bool {
	if o != nil && !IsNil(o.ErrorResponse) {
		return true
	}

	return false
}

// SetErrorResponse gets a reference to the given ErrorResponse and assigns it to the ErrorResponse field.
func (o *ConflictErrorMessageResponse) SetErrorResponse(v ErrorResponse) {
	o.ErrorResponse = &v
}

func (o ConflictErrorMessageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConflictErrorMessageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.ConflictInfo) {
		toSerialize["conflictInfo"] = o.ConflictInfo
	}
	if !IsNil(o.ErrorResponse) {
		toSerialize["errorResponse"] = o.ErrorResponse
	}
	return toSerialize, nil
}

type NullableConflictErrorMessageResponse struct {
	value *ConflictErrorMessageResponse
	isSet bool
}

func (v NullableConflictErrorMessageResponse) Get() *ConflictErrorMessageResponse {
	return v.value
}

func (v *NullableConflictErrorMessageResponse) Set(val *ConflictErrorMessageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConflictErrorMessageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConflictErrorMessageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConflictErrorMessageResponse(val *ConflictErrorMessageResponse) *NullableConflictErrorMessageResponse {
	return &NullableConflictErrorMessageResponse{value: val, isSet: true}
}

func (v NullableConflictErrorMessageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConflictErrorMessageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


