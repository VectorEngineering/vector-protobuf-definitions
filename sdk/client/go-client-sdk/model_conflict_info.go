/*
Lead Scraping Service API

Vector Lead Scraping Service API - Manages Lead Scraping Jobs

API version: 1.0
Contact: yoanyomba@vector.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend_client

import (
	"encoding/json"
	"time"
)

// checks if the ConflictInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConflictInfo{}

// ConflictInfo struct for ConflictInfo
type ConflictInfo struct {
	ResourceType *string `json:"resourceType,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	ConflictReason *string `json:"conflictReason,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	CreatedBy *string `json:"createdBy,omitempty"`
}

// NewConflictInfo instantiates a new ConflictInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConflictInfo() *ConflictInfo {
	this := ConflictInfo{}
	return &this
}

// NewConflictInfoWithDefaults instantiates a new ConflictInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConflictInfoWithDefaults() *ConflictInfo {
	this := ConflictInfo{}
	return &this
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *ConflictInfo) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConflictInfo) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *ConflictInfo) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *ConflictInfo) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ConflictInfo) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConflictInfo) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ConflictInfo) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *ConflictInfo) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetConflictReason returns the ConflictReason field value if set, zero value otherwise.
func (o *ConflictInfo) GetConflictReason() string {
	if o == nil || IsNil(o.ConflictReason) {
		var ret string
		return ret
	}
	return *o.ConflictReason
}

// GetConflictReasonOk returns a tuple with the ConflictReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConflictInfo) GetConflictReasonOk() (*string, bool) {
	if o == nil || IsNil(o.ConflictReason) {
		return nil, false
	}
	return o.ConflictReason, true
}

// HasConflictReason returns a boolean if a field has been set.
func (o *ConflictInfo) HasConflictReason() bool {
	if o != nil && !IsNil(o.ConflictReason) {
		return true
	}

	return false
}

// SetConflictReason gets a reference to the given string and assigns it to the ConflictReason field.
func (o *ConflictInfo) SetConflictReason(v string) {
	o.ConflictReason = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ConflictInfo) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConflictInfo) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ConflictInfo) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ConflictInfo) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ConflictInfo) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConflictInfo) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ConflictInfo) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *ConflictInfo) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

func (o ConflictInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConflictInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.ConflictReason) {
		toSerialize["conflictReason"] = o.ConflictReason
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	return toSerialize, nil
}

type NullableConflictInfo struct {
	value *ConflictInfo
	isSet bool
}

func (v NullableConflictInfo) Get() *ConflictInfo {
	return v.value
}

func (v *NullableConflictInfo) Set(val *ConflictInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConflictInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConflictInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConflictInfo(val *ConflictInfo) *NullableConflictInfo {
	return &NullableConflictInfo{value: val, isSet: true}
}

func (v NullableConflictInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConflictInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


