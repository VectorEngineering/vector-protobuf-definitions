/*
Lead Scraping Service API

Vector Lead Scraping Service API - Manages Lead Scraping Jobs

API version: 1.0
Contact: yoanyomba@vector.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend_client

import (
	"encoding/json"
)

// checks if the FieldError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldError{}

// FieldError struct for FieldError
type FieldError struct {
	Field *string `json:"field,omitempty"`
	Error *string `json:"error,omitempty"`
}

// NewFieldError instantiates a new FieldError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldError() *FieldError {
	this := FieldError{}
	return &this
}

// NewFieldErrorWithDefaults instantiates a new FieldError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldErrorWithDefaults() *FieldError {
	this := FieldError{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *FieldError) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldError) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *FieldError) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *FieldError) SetField(v string) {
	o.Field = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *FieldError) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldError) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *FieldError) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *FieldError) SetError(v string) {
	o.Error = &v
}

func (o FieldError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableFieldError struct {
	value *FieldError
	isSet bool
}

func (v NullableFieldError) Get() *FieldError {
	return v.value
}

func (v *NullableFieldError) Set(val *FieldError) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldError) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldError(val *FieldError) *NullableFieldError {
	return &NullableFieldError{value: val, isSet: true}
}

func (v NullableFieldError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


