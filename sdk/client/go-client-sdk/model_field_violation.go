/*
Lead Scraping Service API

Vector Lead Scraping Service API - Manages Lead Scraping Jobs

API version: 1.0
Contact: yoanyomba@vector.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend_client

import (
	"encoding/json"
)

// checks if the FieldViolation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldViolation{}

// FieldViolation struct for FieldViolation
type FieldViolation struct {
	Field *string `json:"field,omitempty"`
	Validation *string `json:"validation,omitempty"`
	Message *string `json:"message,omitempty"`
	Expected *string `json:"expected,omitempty"`
	Actual *string `json:"actual,omitempty"`
}

// NewFieldViolation instantiates a new FieldViolation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldViolation() *FieldViolation {
	this := FieldViolation{}
	return &this
}

// NewFieldViolationWithDefaults instantiates a new FieldViolation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldViolationWithDefaults() *FieldViolation {
	this := FieldViolation{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *FieldViolation) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldViolation) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *FieldViolation) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *FieldViolation) SetField(v string) {
	o.Field = &v
}

// GetValidation returns the Validation field value if set, zero value otherwise.
func (o *FieldViolation) GetValidation() string {
	if o == nil || IsNil(o.Validation) {
		var ret string
		return ret
	}
	return *o.Validation
}

// GetValidationOk returns a tuple with the Validation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldViolation) GetValidationOk() (*string, bool) {
	if o == nil || IsNil(o.Validation) {
		return nil, false
	}
	return o.Validation, true
}

// HasValidation returns a boolean if a field has been set.
func (o *FieldViolation) HasValidation() bool {
	if o != nil && !IsNil(o.Validation) {
		return true
	}

	return false
}

// SetValidation gets a reference to the given string and assigns it to the Validation field.
func (o *FieldViolation) SetValidation(v string) {
	o.Validation = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *FieldViolation) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldViolation) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *FieldViolation) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *FieldViolation) SetMessage(v string) {
	o.Message = &v
}

// GetExpected returns the Expected field value if set, zero value otherwise.
func (o *FieldViolation) GetExpected() string {
	if o == nil || IsNil(o.Expected) {
		var ret string
		return ret
	}
	return *o.Expected
}

// GetExpectedOk returns a tuple with the Expected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldViolation) GetExpectedOk() (*string, bool) {
	if o == nil || IsNil(o.Expected) {
		return nil, false
	}
	return o.Expected, true
}

// HasExpected returns a boolean if a field has been set.
func (o *FieldViolation) HasExpected() bool {
	if o != nil && !IsNil(o.Expected) {
		return true
	}

	return false
}

// SetExpected gets a reference to the given string and assigns it to the Expected field.
func (o *FieldViolation) SetExpected(v string) {
	o.Expected = &v
}

// GetActual returns the Actual field value if set, zero value otherwise.
func (o *FieldViolation) GetActual() string {
	if o == nil || IsNil(o.Actual) {
		var ret string
		return ret
	}
	return *o.Actual
}

// GetActualOk returns a tuple with the Actual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldViolation) GetActualOk() (*string, bool) {
	if o == nil || IsNil(o.Actual) {
		return nil, false
	}
	return o.Actual, true
}

// HasActual returns a boolean if a field has been set.
func (o *FieldViolation) HasActual() bool {
	if o != nil && !IsNil(o.Actual) {
		return true
	}

	return false
}

// SetActual gets a reference to the given string and assigns it to the Actual field.
func (o *FieldViolation) SetActual(v string) {
	o.Actual = &v
}

func (o FieldViolation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldViolation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Validation) {
		toSerialize["validation"] = o.Validation
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Expected) {
		toSerialize["expected"] = o.Expected
	}
	if !IsNil(o.Actual) {
		toSerialize["actual"] = o.Actual
	}
	return toSerialize, nil
}

type NullableFieldViolation struct {
	value *FieldViolation
	isSet bool
}

func (v NullableFieldViolation) Get() *FieldViolation {
	return v.value
}

func (v *NullableFieldViolation) Set(val *FieldViolation) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldViolation) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldViolation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldViolation(val *FieldViolation) *NullableFieldViolation {
	return &NullableFieldViolation{value: val, isSet: true}
}

func (v NullableFieldViolation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldViolation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


