/*
Lead Scraping Service API

Vector Lead Scraping Service API - Manages Lead Scraping Jobs

API version: 1.0
Contact: yoanyomba@vector.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend_client

import (
	"encoding/json"
	"fmt"
)

// InternalErrorCode - INTERNAL_ERROR: General internal errors  - RESOURCE_EXHAUSTED: Resource exhaustion errors  - CANCELLED: Operation errors  - UNAVAILABLE: Availability errors  - DEPENDENCY_FAILURE: New internal error codes  Failure in external dependency  - CONFIGURATION_ERROR: Service configuration error  - SECURITY_BREACH_DETECTED: Potential security breach detected
type InternalErrorCode string

// List of InternalErrorCode
const (
	NO_INTERNAL_ERROR InternalErrorCode = "NO_INTERNAL_ERROR"
	INTERNAL_ERROR InternalErrorCode = "INTERNAL_ERROR"
	DATA_CORRUPTION InternalErrorCode = "DATA_CORRUPTION"
	DATABASE_ERROR InternalErrorCode = "DATABASE_ERROR"
	CACHE_ERROR InternalErrorCode = "CACHE_ERROR"
	RESOURCE_EXHAUSTED InternalErrorCode = "RESOURCE_EXHAUSTED"
	QUOTA_EXCEEDED InternalErrorCode = "QUOTA_EXCEEDED"
	RATE_LIMIT_EXCEEDED InternalErrorCode = "RATE_LIMIT_EXCEEDED"
	CANCELLED InternalErrorCode = "CANCELLED"
	DEADLINE_EXCEEDED InternalErrorCode = "DEADLINE_EXCEEDED"
	ALREADY_EXISTS InternalErrorCode = "ALREADY_EXISTS"
	FAILED_PRECONDITION InternalErrorCode = "FAILED_PRECONDITION"
	ABORTED InternalErrorCode = "ABORTED"
	OUT_OF_RANGE InternalErrorCode = "OUT_OF_RANGE"
	UNAVAILABLE InternalErrorCode = "UNAVAILABLE"
	DATA_LOSS InternalErrorCode = "DATA_LOSS"
	SERVICE_DEGRADED InternalErrorCode = "SERVICE_DEGRADED"
	DEPENDENCY_FAILURE InternalErrorCode = "DEPENDENCY_FAILURE"
	CONFIGURATION_ERROR InternalErrorCode = "CONFIGURATION_ERROR"
	SECURITY_BREACH_DETECTED InternalErrorCode = "SECURITY_BREACH_DETECTED"
)

// All allowed values of InternalErrorCode enum
var AllowedInternalErrorCodeEnumValues = []InternalErrorCode{
	"NO_INTERNAL_ERROR",
	"INTERNAL_ERROR",
	"DATA_CORRUPTION",
	"DATABASE_ERROR",
	"CACHE_ERROR",
	"RESOURCE_EXHAUSTED",
	"QUOTA_EXCEEDED",
	"RATE_LIMIT_EXCEEDED",
	"CANCELLED",
	"DEADLINE_EXCEEDED",
	"ALREADY_EXISTS",
	"FAILED_PRECONDITION",
	"ABORTED",
	"OUT_OF_RANGE",
	"UNAVAILABLE",
	"DATA_LOSS",
	"SERVICE_DEGRADED",
	"DEPENDENCY_FAILURE",
	"CONFIGURATION_ERROR",
	"SECURITY_BREACH_DETECTED",
}

func (v *InternalErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InternalErrorCode(value)
	for _, existing := range AllowedInternalErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InternalErrorCode", value)
}

// NewInternalErrorCodeFromValue returns a pointer to a valid InternalErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInternalErrorCodeFromValue(v string) (*InternalErrorCode, error) {
	ev := InternalErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InternalErrorCode: valid values are %v", v, AllowedInternalErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InternalErrorCode) IsValid() bool {
	for _, existing := range AllowedInternalErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InternalErrorCode value
func (v InternalErrorCode) Ptr() *InternalErrorCode {
	return &v
}

type NullableInternalErrorCode struct {
	value *InternalErrorCode
	isSet bool
}

func (v NullableInternalErrorCode) Get() *InternalErrorCode {
	return v.value
}

func (v *NullableInternalErrorCode) Set(val *InternalErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableInternalErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableInternalErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternalErrorCode(val *InternalErrorCode) *NullableInternalErrorCode {
	return &NullableInternalErrorCode{value: val, isSet: true}
}

func (v NullableInternalErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternalErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

