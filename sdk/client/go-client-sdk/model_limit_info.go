/*
Lead Scraping Service API

Vector Lead Scraping Service API - Manages Lead Scraping Jobs

API version: 1.0
Contact: yoanyomba@vector.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend_client

import (
	"encoding/json"
	"time"
)

// checks if the LimitInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LimitInfo{}

// LimitInfo struct for LimitInfo
type LimitInfo struct {
	Current *int32 `json:"current,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
	ResetTime *time.Time `json:"resetTime,omitempty"`
	WindowSize *string `json:"windowSize,omitempty"`
}

// NewLimitInfo instantiates a new LimitInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLimitInfo() *LimitInfo {
	this := LimitInfo{}
	return &this
}

// NewLimitInfoWithDefaults instantiates a new LimitInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLimitInfoWithDefaults() *LimitInfo {
	this := LimitInfo{}
	return &this
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *LimitInfo) GetCurrent() int32 {
	if o == nil || IsNil(o.Current) {
		var ret int32
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LimitInfo) GetCurrentOk() (*int32, bool) {
	if o == nil || IsNil(o.Current) {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *LimitInfo) HasCurrent() bool {
	if o != nil && !IsNil(o.Current) {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given int32 and assigns it to the Current field.
func (o *LimitInfo) SetCurrent(v int32) {
	o.Current = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *LimitInfo) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LimitInfo) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *LimitInfo) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *LimitInfo) SetLimit(v int32) {
	o.Limit = &v
}

// GetResetTime returns the ResetTime field value if set, zero value otherwise.
func (o *LimitInfo) GetResetTime() time.Time {
	if o == nil || IsNil(o.ResetTime) {
		var ret time.Time
		return ret
	}
	return *o.ResetTime
}

// GetResetTimeOk returns a tuple with the ResetTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LimitInfo) GetResetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ResetTime) {
		return nil, false
	}
	return o.ResetTime, true
}

// HasResetTime returns a boolean if a field has been set.
func (o *LimitInfo) HasResetTime() bool {
	if o != nil && !IsNil(o.ResetTime) {
		return true
	}

	return false
}

// SetResetTime gets a reference to the given time.Time and assigns it to the ResetTime field.
func (o *LimitInfo) SetResetTime(v time.Time) {
	o.ResetTime = &v
}

// GetWindowSize returns the WindowSize field value if set, zero value otherwise.
func (o *LimitInfo) GetWindowSize() string {
	if o == nil || IsNil(o.WindowSize) {
		var ret string
		return ret
	}
	return *o.WindowSize
}

// GetWindowSizeOk returns a tuple with the WindowSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LimitInfo) GetWindowSizeOk() (*string, bool) {
	if o == nil || IsNil(o.WindowSize) {
		return nil, false
	}
	return o.WindowSize, true
}

// HasWindowSize returns a boolean if a field has been set.
func (o *LimitInfo) HasWindowSize() bool {
	if o != nil && !IsNil(o.WindowSize) {
		return true
	}

	return false
}

// SetWindowSize gets a reference to the given string and assigns it to the WindowSize field.
func (o *LimitInfo) SetWindowSize(v string) {
	o.WindowSize = &v
}

func (o LimitInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LimitInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Current) {
		toSerialize["current"] = o.Current
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.ResetTime) {
		toSerialize["resetTime"] = o.ResetTime
	}
	if !IsNil(o.WindowSize) {
		toSerialize["windowSize"] = o.WindowSize
	}
	return toSerialize, nil
}

type NullableLimitInfo struct {
	value *LimitInfo
	isSet bool
}

func (v NullableLimitInfo) Get() *LimitInfo {
	return v.value
}

func (v *NullableLimitInfo) Set(val *LimitInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLimitInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLimitInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLimitInfo(val *LimitInfo) *NullableLimitInfo {
	return &NullableLimitInfo{value: val, isSet: true}
}

func (v NullableLimitInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLimitInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


