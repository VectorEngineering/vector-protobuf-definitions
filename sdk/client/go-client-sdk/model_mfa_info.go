/*
Lead Scraping Service API

Vector Lead Scraping Service API - Manages Lead Scraping Jobs

API version: 1.0
Contact: yoanyomba@vector.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend_client

import (
	"encoding/json"
)

// checks if the MFAInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MFAInfo{}

// MFAInfo struct for MFAInfo
type MFAInfo struct {
	MfaRequired *bool `json:"mfaRequired,omitempty"`
	AllowedMethods []string `json:"allowedMethods,omitempty"`
	FailedReason *string `json:"failedReason,omitempty"`
}

// NewMFAInfo instantiates a new MFAInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMFAInfo() *MFAInfo {
	this := MFAInfo{}
	return &this
}

// NewMFAInfoWithDefaults instantiates a new MFAInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMFAInfoWithDefaults() *MFAInfo {
	this := MFAInfo{}
	return &this
}

// GetMfaRequired returns the MfaRequired field value if set, zero value otherwise.
func (o *MFAInfo) GetMfaRequired() bool {
	if o == nil || IsNil(o.MfaRequired) {
		var ret bool
		return ret
	}
	return *o.MfaRequired
}

// GetMfaRequiredOk returns a tuple with the MfaRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MFAInfo) GetMfaRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.MfaRequired) {
		return nil, false
	}
	return o.MfaRequired, true
}

// HasMfaRequired returns a boolean if a field has been set.
func (o *MFAInfo) HasMfaRequired() bool {
	if o != nil && !IsNil(o.MfaRequired) {
		return true
	}

	return false
}

// SetMfaRequired gets a reference to the given bool and assigns it to the MfaRequired field.
func (o *MFAInfo) SetMfaRequired(v bool) {
	o.MfaRequired = &v
}

// GetAllowedMethods returns the AllowedMethods field value if set, zero value otherwise.
func (o *MFAInfo) GetAllowedMethods() []string {
	if o == nil || IsNil(o.AllowedMethods) {
		var ret []string
		return ret
	}
	return o.AllowedMethods
}

// GetAllowedMethodsOk returns a tuple with the AllowedMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MFAInfo) GetAllowedMethodsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedMethods) {
		return nil, false
	}
	return o.AllowedMethods, true
}

// HasAllowedMethods returns a boolean if a field has been set.
func (o *MFAInfo) HasAllowedMethods() bool {
	if o != nil && !IsNil(o.AllowedMethods) {
		return true
	}

	return false
}

// SetAllowedMethods gets a reference to the given []string and assigns it to the AllowedMethods field.
func (o *MFAInfo) SetAllowedMethods(v []string) {
	o.AllowedMethods = v
}

// GetFailedReason returns the FailedReason field value if set, zero value otherwise.
func (o *MFAInfo) GetFailedReason() string {
	if o == nil || IsNil(o.FailedReason) {
		var ret string
		return ret
	}
	return *o.FailedReason
}

// GetFailedReasonOk returns a tuple with the FailedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MFAInfo) GetFailedReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailedReason) {
		return nil, false
	}
	return o.FailedReason, true
}

// HasFailedReason returns a boolean if a field has been set.
func (o *MFAInfo) HasFailedReason() bool {
	if o != nil && !IsNil(o.FailedReason) {
		return true
	}

	return false
}

// SetFailedReason gets a reference to the given string and assigns it to the FailedReason field.
func (o *MFAInfo) SetFailedReason(v string) {
	o.FailedReason = &v
}

func (o MFAInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MFAInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MfaRequired) {
		toSerialize["mfaRequired"] = o.MfaRequired
	}
	if !IsNil(o.AllowedMethods) {
		toSerialize["allowedMethods"] = o.AllowedMethods
	}
	if !IsNil(o.FailedReason) {
		toSerialize["failedReason"] = o.FailedReason
	}
	return toSerialize, nil
}

type NullableMFAInfo struct {
	value *MFAInfo
	isSet bool
}

func (v NullableMFAInfo) Get() *MFAInfo {
	return v.value
}

func (v *NullableMFAInfo) Set(val *MFAInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMFAInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMFAInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMFAInfo(val *MFAInfo) *NullableMFAInfo {
	return &NullableMFAInfo{value: val, isSet: true}
}

func (v NullableMFAInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMFAInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


