/*
Lead Scraping Service API

Vector Lead Scraping Service API - Manages Lead Scraping Jobs

API version: 1.0
Contact: yoanyomba@vector.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend_client

import (
	"encoding/json"
	"time"
)

// checks if the PaymentInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentInfo{}

// PaymentInfo struct for PaymentInfo
type PaymentInfo struct {
	AmountDue *float64 `json:"amountDue,omitempty"`
	Currency *string `json:"currency,omitempty"`
	DueDate *time.Time `json:"dueDate,omitempty"`
	PaymentUrl *string `json:"paymentUrl,omitempty"`
}

// NewPaymentInfo instantiates a new PaymentInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentInfo() *PaymentInfo {
	this := PaymentInfo{}
	return &this
}

// NewPaymentInfoWithDefaults instantiates a new PaymentInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentInfoWithDefaults() *PaymentInfo {
	this := PaymentInfo{}
	return &this
}

// GetAmountDue returns the AmountDue field value if set, zero value otherwise.
func (o *PaymentInfo) GetAmountDue() float64 {
	if o == nil || IsNil(o.AmountDue) {
		var ret float64
		return ret
	}
	return *o.AmountDue
}

// GetAmountDueOk returns a tuple with the AmountDue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfo) GetAmountDueOk() (*float64, bool) {
	if o == nil || IsNil(o.AmountDue) {
		return nil, false
	}
	return o.AmountDue, true
}

// HasAmountDue returns a boolean if a field has been set.
func (o *PaymentInfo) HasAmountDue() bool {
	if o != nil && !IsNil(o.AmountDue) {
		return true
	}

	return false
}

// SetAmountDue gets a reference to the given float64 and assigns it to the AmountDue field.
func (o *PaymentInfo) SetAmountDue(v float64) {
	o.AmountDue = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PaymentInfo) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfo) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PaymentInfo) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PaymentInfo) SetCurrency(v string) {
	o.Currency = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *PaymentInfo) GetDueDate() time.Time {
	if o == nil || IsNil(o.DueDate) {
		var ret time.Time
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfo) GetDueDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *PaymentInfo) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given time.Time and assigns it to the DueDate field.
func (o *PaymentInfo) SetDueDate(v time.Time) {
	o.DueDate = &v
}

// GetPaymentUrl returns the PaymentUrl field value if set, zero value otherwise.
func (o *PaymentInfo) GetPaymentUrl() string {
	if o == nil || IsNil(o.PaymentUrl) {
		var ret string
		return ret
	}
	return *o.PaymentUrl
}

// GetPaymentUrlOk returns a tuple with the PaymentUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfo) GetPaymentUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentUrl) {
		return nil, false
	}
	return o.PaymentUrl, true
}

// HasPaymentUrl returns a boolean if a field has been set.
func (o *PaymentInfo) HasPaymentUrl() bool {
	if o != nil && !IsNil(o.PaymentUrl) {
		return true
	}

	return false
}

// SetPaymentUrl gets a reference to the given string and assigns it to the PaymentUrl field.
func (o *PaymentInfo) SetPaymentUrl(v string) {
	o.PaymentUrl = &v
}

func (o PaymentInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AmountDue) {
		toSerialize["amountDue"] = o.AmountDue
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !IsNil(o.PaymentUrl) {
		toSerialize["paymentUrl"] = o.PaymentUrl
	}
	return toSerialize, nil
}

type NullablePaymentInfo struct {
	value *PaymentInfo
	isSet bool
}

func (v NullablePaymentInfo) Get() *PaymentInfo {
	return v.value
}

func (v *NullablePaymentInfo) Set(val *PaymentInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentInfo(val *PaymentInfo) *NullablePaymentInfo {
	return &NullablePaymentInfo{value: val, isSet: true}
}

func (v NullablePaymentInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


