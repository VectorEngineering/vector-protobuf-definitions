/*
Lead Scraping Service API

Vector Lead Scraping Service API - Manages Lead Scraping Jobs

API version: 1.0
Contact: yoanyomba@vector.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend_client

import (
	"encoding/json"
)

// checks if the RateLimitContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateLimitContext{}

// RateLimitContext struct for RateLimitContext
type RateLimitContext struct {
	UserId *string `json:"userId,omitempty"`
	IpAddress *string `json:"ipAddress,omitempty"`
	AffectedEndpoints []string `json:"affectedEndpoints,omitempty"`
	Headers *map[string]string `json:"headers,omitempty"`
}

// NewRateLimitContext instantiates a new RateLimitContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateLimitContext() *RateLimitContext {
	this := RateLimitContext{}
	return &this
}

// NewRateLimitContextWithDefaults instantiates a new RateLimitContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateLimitContextWithDefaults() *RateLimitContext {
	this := RateLimitContext{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *RateLimitContext) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimitContext) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *RateLimitContext) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *RateLimitContext) SetUserId(v string) {
	o.UserId = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *RateLimitContext) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimitContext) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *RateLimitContext) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *RateLimitContext) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetAffectedEndpoints returns the AffectedEndpoints field value if set, zero value otherwise.
func (o *RateLimitContext) GetAffectedEndpoints() []string {
	if o == nil || IsNil(o.AffectedEndpoints) {
		var ret []string
		return ret
	}
	return o.AffectedEndpoints
}

// GetAffectedEndpointsOk returns a tuple with the AffectedEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimitContext) GetAffectedEndpointsOk() ([]string, bool) {
	if o == nil || IsNil(o.AffectedEndpoints) {
		return nil, false
	}
	return o.AffectedEndpoints, true
}

// HasAffectedEndpoints returns a boolean if a field has been set.
func (o *RateLimitContext) HasAffectedEndpoints() bool {
	if o != nil && !IsNil(o.AffectedEndpoints) {
		return true
	}

	return false
}

// SetAffectedEndpoints gets a reference to the given []string and assigns it to the AffectedEndpoints field.
func (o *RateLimitContext) SetAffectedEndpoints(v []string) {
	o.AffectedEndpoints = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *RateLimitContext) GetHeaders() map[string]string {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateLimitContext) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *RateLimitContext) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *RateLimitContext) SetHeaders(v map[string]string) {
	o.Headers = &v
}

func (o RateLimitContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateLimitContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !IsNil(o.AffectedEndpoints) {
		toSerialize["affectedEndpoints"] = o.AffectedEndpoints
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	return toSerialize, nil
}

type NullableRateLimitContext struct {
	value *RateLimitContext
	isSet bool
}

func (v NullableRateLimitContext) Get() *RateLimitContext {
	return v.value
}

func (v *NullableRateLimitContext) Set(val *RateLimitContext) {
	v.value = val
	v.isSet = true
}

func (v NullableRateLimitContext) IsSet() bool {
	return v.isSet
}

func (v *NullableRateLimitContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateLimitContext(val *RateLimitContext) *NullableRateLimitContext {
	return &NullableRateLimitContext{value: val, isSet: true}
}

func (v NullableRateLimitContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateLimitContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


