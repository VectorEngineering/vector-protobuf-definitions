/*
Lead Scraping Service API

Vector Lead Scraping Service API - Manages Lead Scraping Jobs

API version: 1.0
Contact: yoanyomba@vector.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend_client

import (
	"encoding/json"
)

// checks if the ResourceValidation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceValidation{}

// ResourceValidation struct for ResourceValidation
type ResourceValidation struct {
	MissingResources []string `json:"missingResources,omitempty"`
	InvalidReferences []string `json:"invalidReferences,omitempty"`
	IdViolations *map[string]string `json:"idViolations,omitempty"`
}

// NewResourceValidation instantiates a new ResourceValidation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceValidation() *ResourceValidation {
	this := ResourceValidation{}
	return &this
}

// NewResourceValidationWithDefaults instantiates a new ResourceValidation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceValidationWithDefaults() *ResourceValidation {
	this := ResourceValidation{}
	return &this
}

// GetMissingResources returns the MissingResources field value if set, zero value otherwise.
func (o *ResourceValidation) GetMissingResources() []string {
	if o == nil || IsNil(o.MissingResources) {
		var ret []string
		return ret
	}
	return o.MissingResources
}

// GetMissingResourcesOk returns a tuple with the MissingResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceValidation) GetMissingResourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.MissingResources) {
		return nil, false
	}
	return o.MissingResources, true
}

// HasMissingResources returns a boolean if a field has been set.
func (o *ResourceValidation) HasMissingResources() bool {
	if o != nil && !IsNil(o.MissingResources) {
		return true
	}

	return false
}

// SetMissingResources gets a reference to the given []string and assigns it to the MissingResources field.
func (o *ResourceValidation) SetMissingResources(v []string) {
	o.MissingResources = v
}

// GetInvalidReferences returns the InvalidReferences field value if set, zero value otherwise.
func (o *ResourceValidation) GetInvalidReferences() []string {
	if o == nil || IsNil(o.InvalidReferences) {
		var ret []string
		return ret
	}
	return o.InvalidReferences
}

// GetInvalidReferencesOk returns a tuple with the InvalidReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceValidation) GetInvalidReferencesOk() ([]string, bool) {
	if o == nil || IsNil(o.InvalidReferences) {
		return nil, false
	}
	return o.InvalidReferences, true
}

// HasInvalidReferences returns a boolean if a field has been set.
func (o *ResourceValidation) HasInvalidReferences() bool {
	if o != nil && !IsNil(o.InvalidReferences) {
		return true
	}

	return false
}

// SetInvalidReferences gets a reference to the given []string and assigns it to the InvalidReferences field.
func (o *ResourceValidation) SetInvalidReferences(v []string) {
	o.InvalidReferences = v
}

// GetIdViolations returns the IdViolations field value if set, zero value otherwise.
func (o *ResourceValidation) GetIdViolations() map[string]string {
	if o == nil || IsNil(o.IdViolations) {
		var ret map[string]string
		return ret
	}
	return *o.IdViolations
}

// GetIdViolationsOk returns a tuple with the IdViolations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceValidation) GetIdViolationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.IdViolations) {
		return nil, false
	}
	return o.IdViolations, true
}

// HasIdViolations returns a boolean if a field has been set.
func (o *ResourceValidation) HasIdViolations() bool {
	if o != nil && !IsNil(o.IdViolations) {
		return true
	}

	return false
}

// SetIdViolations gets a reference to the given map[string]string and assigns it to the IdViolations field.
func (o *ResourceValidation) SetIdViolations(v map[string]string) {
	o.IdViolations = &v
}

func (o ResourceValidation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceValidation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MissingResources) {
		toSerialize["missingResources"] = o.MissingResources
	}
	if !IsNil(o.InvalidReferences) {
		toSerialize["invalidReferences"] = o.InvalidReferences
	}
	if !IsNil(o.IdViolations) {
		toSerialize["idViolations"] = o.IdViolations
	}
	return toSerialize, nil
}

type NullableResourceValidation struct {
	value *ResourceValidation
	isSet bool
}

func (v NullableResourceValidation) Get() *ResourceValidation {
	return v.value
}

func (v *NullableResourceValidation) Set(val *ResourceValidation) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceValidation) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceValidation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceValidation(val *ResourceValidation) *NullableResourceValidation {
	return &NullableResourceValidation{value: val, isSet: true}
}

func (v NullableResourceValidation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceValidation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


