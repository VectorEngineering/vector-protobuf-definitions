/*
Lead Scraping Service API

Vector Lead Scraping Service API - Manages Lead Scraping Jobs

API version: 1.0
Contact: yoanyomba@vector.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend_client

import (
	"encoding/json"
)

// checks if the SchemaValidation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaValidation{}

// SchemaValidation struct for SchemaValidation
type SchemaValidation struct {
	SchemaVersion *string `json:"schemaVersion,omitempty"`
	InvalidPatterns []string `json:"invalidPatterns,omitempty"`
	TypeMismatches []string `json:"typeMismatches,omitempty"`
}

// NewSchemaValidation instantiates a new SchemaValidation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaValidation() *SchemaValidation {
	this := SchemaValidation{}
	return &this
}

// NewSchemaValidationWithDefaults instantiates a new SchemaValidation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaValidationWithDefaults() *SchemaValidation {
	this := SchemaValidation{}
	return &this
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *SchemaValidation) GetSchemaVersion() string {
	if o == nil || IsNil(o.SchemaVersion) {
		var ret string
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaValidation) GetSchemaVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaVersion) {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *SchemaValidation) HasSchemaVersion() bool {
	if o != nil && !IsNil(o.SchemaVersion) {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given string and assigns it to the SchemaVersion field.
func (o *SchemaValidation) SetSchemaVersion(v string) {
	o.SchemaVersion = &v
}

// GetInvalidPatterns returns the InvalidPatterns field value if set, zero value otherwise.
func (o *SchemaValidation) GetInvalidPatterns() []string {
	if o == nil || IsNil(o.InvalidPatterns) {
		var ret []string
		return ret
	}
	return o.InvalidPatterns
}

// GetInvalidPatternsOk returns a tuple with the InvalidPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaValidation) GetInvalidPatternsOk() ([]string, bool) {
	if o == nil || IsNil(o.InvalidPatterns) {
		return nil, false
	}
	return o.InvalidPatterns, true
}

// HasInvalidPatterns returns a boolean if a field has been set.
func (o *SchemaValidation) HasInvalidPatterns() bool {
	if o != nil && !IsNil(o.InvalidPatterns) {
		return true
	}

	return false
}

// SetInvalidPatterns gets a reference to the given []string and assigns it to the InvalidPatterns field.
func (o *SchemaValidation) SetInvalidPatterns(v []string) {
	o.InvalidPatterns = v
}

// GetTypeMismatches returns the TypeMismatches field value if set, zero value otherwise.
func (o *SchemaValidation) GetTypeMismatches() []string {
	if o == nil || IsNil(o.TypeMismatches) {
		var ret []string
		return ret
	}
	return o.TypeMismatches
}

// GetTypeMismatchesOk returns a tuple with the TypeMismatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaValidation) GetTypeMismatchesOk() ([]string, bool) {
	if o == nil || IsNil(o.TypeMismatches) {
		return nil, false
	}
	return o.TypeMismatches, true
}

// HasTypeMismatches returns a boolean if a field has been set.
func (o *SchemaValidation) HasTypeMismatches() bool {
	if o != nil && !IsNil(o.TypeMismatches) {
		return true
	}

	return false
}

// SetTypeMismatches gets a reference to the given []string and assigns it to the TypeMismatches field.
func (o *SchemaValidation) SetTypeMismatches(v []string) {
	o.TypeMismatches = v
}

func (o SchemaValidation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaValidation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SchemaVersion) {
		toSerialize["schemaVersion"] = o.SchemaVersion
	}
	if !IsNil(o.InvalidPatterns) {
		toSerialize["invalidPatterns"] = o.InvalidPatterns
	}
	if !IsNil(o.TypeMismatches) {
		toSerialize["typeMismatches"] = o.TypeMismatches
	}
	return toSerialize, nil
}

type NullableSchemaValidation struct {
	value *SchemaValidation
	isSet bool
}

func (v NullableSchemaValidation) Get() *SchemaValidation {
	return v.value
}

func (v *NullableSchemaValidation) Set(val *SchemaValidation) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaValidation) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaValidation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaValidation(val *SchemaValidation) *NullableSchemaValidation {
	return &NullableSchemaValidation{value: val, isSet: true}
}

func (v NullableSchemaValidation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaValidation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


