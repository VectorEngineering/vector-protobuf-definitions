/*
Lead Scraping Service API

Vector Lead Scraping Service API - Manages Lead Scraping Jobs

API version: 1.0
Contact: yoanyomba@vector.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend_client

import (
	"encoding/json"
	"fmt"
)

// ValidationErrorCode - VALIDATION_ERROR: General validation errors  - AUTHORIZATION_MODEL_NOT_FOUND: Resource not found errors  - INVALID_CONTINUATION_TOKEN: Input errors  - DUPLICATE_ENTRY: Conflict errors  - INVALID_SCHEMA_VERSION: Schema errors  - INVALID_FORMAT: New validation error codes  General invalid format  - INVALID_EMAIL_FORMAT: Email format is invalid  - INVALID_PASSWORD_STRENGTH: Password does not meet strength requirements  - FIELD_TOO_SHORT: Field value is too short  - FIELD_TOO_LONG: Field value is too long  - UNSUPPORTED_MEDIA_TYPE: Media type is not supported
type ValidationErrorCode string

// List of ValidationErrorCode
const (
	NO_ERROR ValidationErrorCode = "NO_ERROR"
	VALIDATION_ERROR ValidationErrorCode = "VALIDATION_ERROR"
	INVALID_WRITE_INPUT ValidationErrorCode = "INVALID_WRITE_INPUT"
	INVALID_CHECK_INPUT ValidationErrorCode = "INVALID_CHECK_INPUT"
	INVALID_EXPAND_INPUT ValidationErrorCode = "INVALID_EXPAND_INPUT"
	INVALID_OBJECT_FORMAT ValidationErrorCode = "INVALID_OBJECT_FORMAT"
	INVALID_USER ValidationErrorCode = "INVALID_USER"
	INVALID_TUPLE ValidationErrorCode = "INVALID_TUPLE"
	AUTHORIZATION_MODEL_NOT_FOUND ValidationErrorCode = "AUTHORIZATION_MODEL_NOT_FOUND"
	TYPE_NOT_FOUND ValidationErrorCode = "TYPE_NOT_FOUND"
	RELATION_NOT_FOUND ValidationErrorCode = "RELATION_NOT_FOUND"
	STORE_ID_INVALID_LENGTH ValidationErrorCode = "STORE_ID_INVALID_LENGTH"
	ID_TOO_LONG ValidationErrorCode = "ID_TOO_LONG"
	INVALID_CONTINUATION_TOKEN ValidationErrorCode = "INVALID_CONTINUATION_TOKEN"
	PAGE_SIZE_INVALID ValidationErrorCode = "PAGE_SIZE_INVALID"
	PARAM_MISSING_VALUE ValidationErrorCode = "PARAM_MISSING_VALUE"
	EXCEEDED_ENTITY_LIMIT ValidationErrorCode = "EXCEEDED_ENTITY_LIMIT"
	DUPLICATE_ENTRY ValidationErrorCode = "DUPLICATE_ENTRY"
	CANNOT_ALLOW_DUPLICATE_TUPLES ValidationErrorCode = "CANNOT_ALLOW_DUPLICATE_TUPLES"
	CANNOT_ALLOW_DUPLICATE_TYPES ValidationErrorCode = "CANNOT_ALLOW_DUPLICATE_TYPES"
	INVALID_SCHEMA_VERSION ValidationErrorCode = "INVALID_SCHEMA_VERSION"
	INVALID_TYPE_PATTERN ValidationErrorCode = "INVALID_TYPE_PATTERN"
	INVALID_RELATION_PATTERN ValidationErrorCode = "INVALID_RELATION_PATTERN"
	INVALID_OBJECT_PATTERN ValidationErrorCode = "INVALID_OBJECT_PATTERN"
	INVALID_FORMAT ValidationErrorCode = "INVALID_FORMAT"
	INVALID_EMAIL_FORMAT ValidationErrorCode = "INVALID_EMAIL_FORMAT"
	INVALID_PASSWORD_STRENGTH ValidationErrorCode = "INVALID_PASSWORD_STRENGTH"
	FIELD_TOO_SHORT ValidationErrorCode = "FIELD_TOO_SHORT"
	FIELD_TOO_LONG ValidationErrorCode = "FIELD_TOO_LONG"
	UNSUPPORTED_MEDIA_TYPE ValidationErrorCode = "UNSUPPORTED_MEDIA_TYPE"
)

// All allowed values of ValidationErrorCode enum
var AllowedValidationErrorCodeEnumValues = []ValidationErrorCode{
	"NO_ERROR",
	"VALIDATION_ERROR",
	"INVALID_WRITE_INPUT",
	"INVALID_CHECK_INPUT",
	"INVALID_EXPAND_INPUT",
	"INVALID_OBJECT_FORMAT",
	"INVALID_USER",
	"INVALID_TUPLE",
	"AUTHORIZATION_MODEL_NOT_FOUND",
	"TYPE_NOT_FOUND",
	"RELATION_NOT_FOUND",
	"STORE_ID_INVALID_LENGTH",
	"ID_TOO_LONG",
	"INVALID_CONTINUATION_TOKEN",
	"PAGE_SIZE_INVALID",
	"PARAM_MISSING_VALUE",
	"EXCEEDED_ENTITY_LIMIT",
	"DUPLICATE_ENTRY",
	"CANNOT_ALLOW_DUPLICATE_TUPLES",
	"CANNOT_ALLOW_DUPLICATE_TYPES",
	"INVALID_SCHEMA_VERSION",
	"INVALID_TYPE_PATTERN",
	"INVALID_RELATION_PATTERN",
	"INVALID_OBJECT_PATTERN",
	"INVALID_FORMAT",
	"INVALID_EMAIL_FORMAT",
	"INVALID_PASSWORD_STRENGTH",
	"FIELD_TOO_SHORT",
	"FIELD_TOO_LONG",
	"UNSUPPORTED_MEDIA_TYPE",
}

func (v *ValidationErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValidationErrorCode(value)
	for _, existing := range AllowedValidationErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValidationErrorCode", value)
}

// NewValidationErrorCodeFromValue returns a pointer to a valid ValidationErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValidationErrorCodeFromValue(v string) (*ValidationErrorCode, error) {
	ev := ValidationErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValidationErrorCode: valid values are %v", v, AllowedValidationErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValidationErrorCode) IsValid() bool {
	for _, existing := range AllowedValidationErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValidationErrorCode value
func (v ValidationErrorCode) Ptr() *ValidationErrorCode {
	return &v
}

type NullableValidationErrorCode struct {
	value *ValidationErrorCode
	isSet bool
}

func (v NullableValidationErrorCode) Get() *ValidationErrorCode {
	return v.value
}

func (v *NullableValidationErrorCode) Set(val *ValidationErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationErrorCode(val *ValidationErrorCode) *NullableValidationErrorCode {
	return &NullableValidationErrorCode{value: val, isSet: true}
}

func (v NullableValidationErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

