// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Lead Scraping Service API
 *
 * Vector Lead Scraping Service API - Manages Lead Scraping Jobs
 *
 * API version: 1.0
 * Contact: yoanyomba@vector.ai
 */

package backend_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// LeadScraperServiceAPIController binds http requests to an api service and writes the service results to the http response
type LeadScraperServiceAPIController struct {
	service LeadScraperServiceAPIServicer
	errorHandler ErrorHandler
}

// LeadScraperServiceAPIOption for how the controller is set up.
type LeadScraperServiceAPIOption func(*LeadScraperServiceAPIController)

// WithLeadScraperServiceAPIErrorHandler inject ErrorHandler into controller
func WithLeadScraperServiceAPIErrorHandler(h ErrorHandler) LeadScraperServiceAPIOption {
	return func(c *LeadScraperServiceAPIController) {
		c.errorHandler = h
	}
}

// NewLeadScraperServiceAPIController creates a default api controller
func NewLeadScraperServiceAPIController(s LeadScraperServiceAPIServicer, opts ...LeadScraperServiceAPIOption) *LeadScraperServiceAPIController {
	controller := &LeadScraperServiceAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LeadScraperServiceAPIController
func (c *LeadScraperServiceAPIController) Routes() Routes {
	return Routes{
		"CreateAccount": Route{
			strings.ToUpper("Post"),
			"/lead-scraper-microservice/api/v1/accounts",
			c.CreateAccount,
		},
		"CreateScrapingJob": Route{
			strings.ToUpper("Post"),
			"/lead-scraper-microservice/api/v1/jobs",
			c.CreateScrapingJob,
		},
		"DeleteAccount": Route{
			strings.ToUpper("Delete"),
			"/lead-scraper-microservice/api/v1/accounts/{accountId}",
			c.DeleteAccount,
		},
		"DeleteScrapingJob": Route{
			strings.ToUpper("Delete"),
			"/lead-scraper-microservice/api/v1/jobs/{jobId}",
			c.DeleteScrapingJob,
		},
		"DownloadScrapingResults": Route{
			strings.ToUpper("Get"),
			"/lead-scraper-microservice/api/v1/jobs/{jobId}/download",
			c.DownloadScrapingResults,
		},
		"GetAccount": Route{
			strings.ToUpper("Get"),
			"/lead-scraper-microservice/api/v1/accounts/{accountId}",
			c.GetAccount,
		},
		"GetScrapingJob": Route{
			strings.ToUpper("Get"),
			"/lead-scraper-microservice/api/v1/jobs/{jobId}",
			c.GetScrapingJob,
		},
		"ListAccounts": Route{
			strings.ToUpper("Get"),
			"/lead-scraper-microservice/api/v1/accounts",
			c.ListAccounts,
		},
		"ListScrapingJobs": Route{
			strings.ToUpper("Get"),
			"/lead-scraper-microservice/api/v1/jobs",
			c.ListScrapingJobs,
		},
		"UpdateAccount": Route{
			strings.ToUpper("Patch"),
			"/lead-scraper-microservice/api/v1/accounts",
			c.UpdateAccount,
		},
	}
}

// CreateAccount - Create a new account
func (c *LeadScraperServiceAPIController) CreateAccount(w http.ResponseWriter, r *http.Request) {
	createAccountRequestParam := CreateAccountRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createAccountRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateAccountRequestRequired(createAccountRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateAccountRequestConstraints(createAccountRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateAccount(r.Context(), createAccountRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateScrapingJob - Create a new job scraping task
func (c *LeadScraperServiceAPIController) CreateScrapingJob(w http.ResponseWriter, r *http.Request) {
	createScrapingJobRequestParam := CreateScrapingJobRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createScrapingJobRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateScrapingJobRequestRequired(createScrapingJobRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateScrapingJobRequestConstraints(createScrapingJobRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateScrapingJob(r.Context(), createScrapingJobRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteAccount - Delete account
func (c *LeadScraperServiceAPIController) DeleteAccount(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accountIdParam := params["accountId"]
	if accountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"accountId"}, nil)
		return
	}
	var orgIdParam string
	if query.Has("orgId") {
		param := query.Get("orgId")

		orgIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "orgId"}, nil)
		return
	}
	var tenantIdParam string
	if query.Has("tenantId") {
		param := query.Get("tenantId")

		tenantIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "tenantId"}, nil)
		return
	}
	result, err := c.service.DeleteAccount(r.Context(), accountIdParam, orgIdParam, tenantIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteScrapingJob - Delete a specific job
func (c *LeadScraperServiceAPIController) DeleteScrapingJob(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	jobIdParam := params["jobId"]
	if jobIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"jobId"}, nil)
		return
	}
	var userIdParam string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "userId"}, nil)
		return
	}
	var orgIdParam string
	if query.Has("orgId") {
		param := query.Get("orgId")

		orgIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "orgId"}, nil)
		return
	}
	var tenantIdParam string
	if query.Has("tenantId") {
		param := query.Get("tenantId")

		tenantIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "tenantId"}, nil)
		return
	}
	result, err := c.service.DeleteScrapingJob(r.Context(), jobIdParam, userIdParam, orgIdParam, tenantIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DownloadScrapingResults - Download job results as CSV
func (c *LeadScraperServiceAPIController) DownloadScrapingResults(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	jobIdParam := params["jobId"]
	if jobIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"jobId"}, nil)
		return
	}
	var userIdParam string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "userId"}, nil)
		return
	}
	var orgIdParam string
	if query.Has("orgId") {
		param := query.Get("orgId")

		orgIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "orgId"}, nil)
		return
	}
	var tenantIdParam string
	if query.Has("tenantId") {
		param := query.Get("tenantId")

		tenantIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "tenantId"}, nil)
		return
	}
	result, err := c.service.DownloadScrapingResults(r.Context(), jobIdParam, userIdParam, orgIdParam, tenantIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAccount - Get account details
func (c *LeadScraperServiceAPIController) GetAccount(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accountIdParam := params["accountId"]
	if accountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"accountId"}, nil)
		return
	}
	var orgIdParam string
	if query.Has("orgId") {
		param := query.Get("orgId")

		orgIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "orgId"}, nil)
		return
	}
	var tenantIdParam string
	if query.Has("tenantId") {
		param := query.Get("tenantId")

		tenantIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "tenantId"}, nil)
		return
	}
	result, err := c.service.GetAccount(r.Context(), accountIdParam, orgIdParam, tenantIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetScrapingJob - Get a specific job
func (c *LeadScraperServiceAPIController) GetScrapingJob(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	jobIdParam := params["jobId"]
	if jobIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"jobId"}, nil)
		return
	}
	var userIdParam string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "userId"}, nil)
		return
	}
	var orgIdParam string
	if query.Has("orgId") {
		param := query.Get("orgId")

		orgIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "orgId"}, nil)
		return
	}
	var tenantIdParam string
	if query.Has("tenantId") {
		param := query.Get("tenantId")

		tenantIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "tenantId"}, nil)
		return
	}
	result, err := c.service.GetScrapingJob(r.Context(), jobIdParam, userIdParam, orgIdParam, tenantIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListAccounts - List accounts
func (c *LeadScraperServiceAPIController) ListAccounts(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var orgIdParam string
	if query.Has("orgId") {
		param := query.Get("orgId")

		orgIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "orgId"}, nil)
		return
	}
	var tenantIdParam string
	if query.Has("tenantId") {
		param := query.Get("tenantId")

		tenantIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "tenantId"}, nil)
		return
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "offset", Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.ListAccounts(r.Context(), orgIdParam, tenantIdParam, offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListScrapingJobs - Get all jobs
func (c *LeadScraperServiceAPIController) ListScrapingJobs(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var userIdParam string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "userId"}, nil)
		return
	}
	var orgIdParam string
	if query.Has("orgId") {
		param := query.Get("orgId")

		orgIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "orgId"}, nil)
		return
	}
	var tenantIdParam string
	if query.Has("tenantId") {
		param := query.Get("tenantId")

		tenantIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "tenantId"}, nil)
		return
	}
	result, err := c.service.ListScrapingJobs(r.Context(), userIdParam, orgIdParam, tenantIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateAccount - Update account details
func (c *LeadScraperServiceAPIController) UpdateAccount(w http.ResponseWriter, r *http.Request) {
	updateAccountRequestParam := UpdateAccountRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateAccountRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateAccountRequestRequired(updateAccountRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateAccountRequestConstraints(updateAccountRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAccount(r.Context(), updateAccountRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
