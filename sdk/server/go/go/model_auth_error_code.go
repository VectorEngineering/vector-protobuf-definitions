// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Lead Scraping Service API
 *
 * Vector Lead Scraping Service API - Manages Lead Scraping Jobs
 *
 * API version: 1.0
 * Contact: yoanyomba@vector.ai
 */

package backend_server


import (
	"fmt"
)


// AuthErrorCode : - AUTH_FAILED_INVALID_BEARER_TOKEN: Authentication errors  - SESSION_EXPIRED: Session errors  - UNAUTHENTICATED: Other authentication errors  - ACCOUNT_LOCKED: New authentication error codes  Account is locked due to too many failed login attempts  - ACCOUNT_DISABLED: Account has been disabled by admin  - PASSWORD_EXPIRED: Password has expired and must be changed  - PASSWORD_RESET_REQUIRED: Password reset is required  - UNRECOGNIZED_DEVICE: Login attempt from an unrecognized device
type AuthErrorCode string

// List of AuthErrorCode
const (
	NO_AUTH_ERROR AuthErrorCode = "NO_AUTH_ERROR"
	AUTH_FAILED_INVALID_BEARER_TOKEN AuthErrorCode = "AUTH_FAILED_INVALID_BEARER_TOKEN"
	AUTH_FAILED_INVALID_SUBJECT AuthErrorCode = "AUTH_FAILED_INVALID_SUBJECT"
	AUTH_FAILED_INVALID_AUDIENCE AuthErrorCode = "AUTH_FAILED_INVALID_AUDIENCE"
	AUTH_FAILED_INVALID_ISSUER AuthErrorCode = "AUTH_FAILED_INVALID_ISSUER"
	BEARER_TOKEN_MISSING AuthErrorCode = "BEARER_TOKEN_MISSING"
	TOKEN_EXPIRED AuthErrorCode = "TOKEN_EXPIRED"
	TOKEN_NOT_ACTIVE AuthErrorCode = "TOKEN_NOT_ACTIVE"
	TOKEN_REVOKED AuthErrorCode = "TOKEN_REVOKED"
	INVALID_CLAIMS AuthErrorCode = "INVALID_CLAIMS"
	MISSING_REQUIRED_CLAIMS AuthErrorCode = "MISSING_REQUIRED_CLAIMS"
	INVALID_SCOPE AuthErrorCode = "INVALID_SCOPE"
	INVALID_PERMISSIONS AuthErrorCode = "INVALID_PERMISSIONS"
	SESSION_EXPIRED AuthErrorCode = "SESSION_EXPIRED"
	SESSION_INVALID AuthErrorCode = "SESSION_INVALID"
	SESSION_REVOKED AuthErrorCode = "SESSION_REVOKED"
	UNAUTHENTICATED AuthErrorCode = "UNAUTHENTICATED"
	MULTI_FACTOR_REQUIRED AuthErrorCode = "MULTI_FACTOR_REQUIRED"
	MULTI_FACTOR_FAILED AuthErrorCode = "MULTI_FACTOR_FAILED"
	ACCOUNT_LOCKED AuthErrorCode = "ACCOUNT_LOCKED"
	ACCOUNT_DISABLED AuthErrorCode = "ACCOUNT_DISABLED"
	PASSWORD_EXPIRED AuthErrorCode = "PASSWORD_EXPIRED"
	PASSWORD_RESET_REQUIRED AuthErrorCode = "PASSWORD_RESET_REQUIRED"
	UNRECOGNIZED_DEVICE AuthErrorCode = "UNRECOGNIZED_DEVICE"
)

// AllowedAuthErrorCodeEnumValues is all the allowed values of AuthErrorCode enum
var AllowedAuthErrorCodeEnumValues = []AuthErrorCode{
	"NO_AUTH_ERROR",
	"AUTH_FAILED_INVALID_BEARER_TOKEN",
	"AUTH_FAILED_INVALID_SUBJECT",
	"AUTH_FAILED_INVALID_AUDIENCE",
	"AUTH_FAILED_INVALID_ISSUER",
	"BEARER_TOKEN_MISSING",
	"TOKEN_EXPIRED",
	"TOKEN_NOT_ACTIVE",
	"TOKEN_REVOKED",
	"INVALID_CLAIMS",
	"MISSING_REQUIRED_CLAIMS",
	"INVALID_SCOPE",
	"INVALID_PERMISSIONS",
	"SESSION_EXPIRED",
	"SESSION_INVALID",
	"SESSION_REVOKED",
	"UNAUTHENTICATED",
	"MULTI_FACTOR_REQUIRED",
	"MULTI_FACTOR_FAILED",
	"ACCOUNT_LOCKED",
	"ACCOUNT_DISABLED",
	"PASSWORD_EXPIRED",
	"PASSWORD_RESET_REQUIRED",
	"UNRECOGNIZED_DEVICE",
}

// validAuthErrorCodeEnumValue provides a map of AuthErrorCodes for fast verification of use input
var validAuthErrorCodeEnumValues = map[AuthErrorCode]struct{}{
	"NO_AUTH_ERROR": {},
	"AUTH_FAILED_INVALID_BEARER_TOKEN": {},
	"AUTH_FAILED_INVALID_SUBJECT": {},
	"AUTH_FAILED_INVALID_AUDIENCE": {},
	"AUTH_FAILED_INVALID_ISSUER": {},
	"BEARER_TOKEN_MISSING": {},
	"TOKEN_EXPIRED": {},
	"TOKEN_NOT_ACTIVE": {},
	"TOKEN_REVOKED": {},
	"INVALID_CLAIMS": {},
	"MISSING_REQUIRED_CLAIMS": {},
	"INVALID_SCOPE": {},
	"INVALID_PERMISSIONS": {},
	"SESSION_EXPIRED": {},
	"SESSION_INVALID": {},
	"SESSION_REVOKED": {},
	"UNAUTHENTICATED": {},
	"MULTI_FACTOR_REQUIRED": {},
	"MULTI_FACTOR_FAILED": {},
	"ACCOUNT_LOCKED": {},
	"ACCOUNT_DISABLED": {},
	"PASSWORD_EXPIRED": {},
	"PASSWORD_RESET_REQUIRED": {},
	"UNRECOGNIZED_DEVICE": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthErrorCode) IsValid() bool {
	_, ok := validAuthErrorCodeEnumValues[v]
	return ok
}

// NewAuthErrorCodeFromValue returns a pointer to a valid AuthErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthErrorCodeFromValue(v string) (AuthErrorCode, error) {
	ev := AuthErrorCode(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for AuthErrorCode: valid values are %v", v, AllowedAuthErrorCodeEnumValues)
}



// AssertAuthErrorCodeRequired checks if the required fields are not zero-ed
func AssertAuthErrorCodeRequired(obj AuthErrorCode) error {
	return nil
}

// AssertAuthErrorCodeConstraints checks if the values respects the defined constraints
func AssertAuthErrorCodeConstraints(obj AuthErrorCode) error {
	return nil
}
