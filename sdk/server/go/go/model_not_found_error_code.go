// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Lead Scraping Service API
 *
 * Vector Lead Scraping Service API - Manages Lead Scraping Jobs
 *
 * API version: 1.0
 * Contact: yoanyomba@vector.ai
 */

package backend_server


import (
	"fmt"
)


// NotFoundErrorCode : - NO_NOT_FOUND_ERROR: Default value as per proto3 convention  - UNDEFINED_ENDPOINT: Endpoint errors  Requested endpoint doesn't exist  - UNIMPLEMENTED: Endpoint not implemented  - STORE_ID_NOT_FOUND: Resource errors  Requested store ID doesn't exist  - USER_NOT_FOUND: Requested user doesn't exist  - RESOURCE_NOT_FOUND: Generic resource not found  - TENANT_NOT_FOUND: Requested tenant doesn't exist
type NotFoundErrorCode string

// List of NotFoundErrorCode
const (
	NO_NOT_FOUND_ERROR NotFoundErrorCode = "NO_NOT_FOUND_ERROR"
	UNDEFINED_ENDPOINT NotFoundErrorCode = "UNDEFINED_ENDPOINT"
	UNIMPLEMENTED NotFoundErrorCode = "UNIMPLEMENTED"
	STORE_ID_NOT_FOUND NotFoundErrorCode = "STORE_ID_NOT_FOUND"
	USER_NOT_FOUND NotFoundErrorCode = "USER_NOT_FOUND"
	RESOURCE_NOT_FOUND NotFoundErrorCode = "RESOURCE_NOT_FOUND"
	TENANT_NOT_FOUND NotFoundErrorCode = "TENANT_NOT_FOUND"
)

// AllowedNotFoundErrorCodeEnumValues is all the allowed values of NotFoundErrorCode enum
var AllowedNotFoundErrorCodeEnumValues = []NotFoundErrorCode{
	"NO_NOT_FOUND_ERROR",
	"UNDEFINED_ENDPOINT",
	"UNIMPLEMENTED",
	"STORE_ID_NOT_FOUND",
	"USER_NOT_FOUND",
	"RESOURCE_NOT_FOUND",
	"TENANT_NOT_FOUND",
}

// validNotFoundErrorCodeEnumValue provides a map of NotFoundErrorCodes for fast verification of use input
var validNotFoundErrorCodeEnumValues = map[NotFoundErrorCode]struct{}{
	"NO_NOT_FOUND_ERROR": {},
	"UNDEFINED_ENDPOINT": {},
	"UNIMPLEMENTED": {},
	"STORE_ID_NOT_FOUND": {},
	"USER_NOT_FOUND": {},
	"RESOURCE_NOT_FOUND": {},
	"TENANT_NOT_FOUND": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotFoundErrorCode) IsValid() bool {
	_, ok := validNotFoundErrorCodeEnumValues[v]
	return ok
}

// NewNotFoundErrorCodeFromValue returns a pointer to a valid NotFoundErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotFoundErrorCodeFromValue(v string) (NotFoundErrorCode, error) {
	ev := NotFoundErrorCode(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for NotFoundErrorCode: valid values are %v", v, AllowedNotFoundErrorCodeEnumValues)
}



// AssertNotFoundErrorCodeRequired checks if the required fields are not zero-ed
func AssertNotFoundErrorCodeRequired(obj NotFoundErrorCode) error {
	return nil
}

// AssertNotFoundErrorCodeConstraints checks if the values respects the defined constraints
func AssertNotFoundErrorCodeConstraints(obj NotFoundErrorCode) error {
	return nil
}
