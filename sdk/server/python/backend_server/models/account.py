from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend_server.models.base_model import Model
from backend_server.models.scraping_job import ScrapingJob
from backend_server import util

from backend_server.models.scraping_job import ScrapingJob  # noqa: E501

class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, auth_platform_user_id=None, org_id=None, tenant_id=None, email=None, last_modified_at=None, deleted_at=None, created_at=None, scraping_jobs=None):  # noqa: E501
        """Account - a model defined in OpenAPI

        :param id: The id of this Account.  # noqa: E501
        :type id: str
        :param auth_platform_user_id: The auth_platform_user_id of this Account.  # noqa: E501
        :type auth_platform_user_id: str
        :param org_id: The org_id of this Account.  # noqa: E501
        :type org_id: str
        :param tenant_id: The tenant_id of this Account.  # noqa: E501
        :type tenant_id: str
        :param email: The email of this Account.  # noqa: E501
        :type email: str
        :param last_modified_at: The last_modified_at of this Account.  # noqa: E501
        :type last_modified_at: datetime
        :param deleted_at: The deleted_at of this Account.  # noqa: E501
        :type deleted_at: datetime
        :param created_at: The created_at of this Account.  # noqa: E501
        :type created_at: datetime
        :param scraping_jobs: The scraping_jobs of this Account.  # noqa: E501
        :type scraping_jobs: List[ScrapingJob]
        """
        self.openapi_types = {
            'id': str,
            'auth_platform_user_id': str,
            'org_id': str,
            'tenant_id': str,
            'email': str,
            'last_modified_at': datetime,
            'deleted_at': datetime,
            'created_at': datetime,
            'scraping_jobs': List[ScrapingJob]
        }

        self.attribute_map = {
            'id': 'id',
            'auth_platform_user_id': 'authPlatformUserId',
            'org_id': 'orgId',
            'tenant_id': 'tenantId',
            'email': 'email',
            'last_modified_at': 'lastModifiedAt',
            'deleted_at': 'deletedAt',
            'created_at': 'createdAt',
            'scraping_jobs': 'scrapingJobs'
        }

        self._id = id
        self._auth_platform_user_id = auth_platform_user_id
        self._org_id = org_id
        self._tenant_id = tenant_id
        self._email = email
        self._last_modified_at = last_modified_at
        self._deleted_at = deleted_at
        self._created_at = created_at
        self._scraping_jobs = scraping_jobs

    @classmethod
    def from_dict(cls, dikt) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Account of this Account.  # noqa: E501
        :rtype: Account
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Account.


        :return: The id of this Account.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Account.


        :param id: The id of this Account.
        :type id: str
        """

        self._id = id

    @property
    def auth_platform_user_id(self) -> str:
        """Gets the auth_platform_user_id of this Account.


        :return: The auth_platform_user_id of this Account.
        :rtype: str
        """
        return self._auth_platform_user_id

    @auth_platform_user_id.setter
    def auth_platform_user_id(self, auth_platform_user_id: str):
        """Sets the auth_platform_user_id of this Account.


        :param auth_platform_user_id: The auth_platform_user_id of this Account.
        :type auth_platform_user_id: str
        """

        self._auth_platform_user_id = auth_platform_user_id

    @property
    def org_id(self) -> str:
        """Gets the org_id of this Account.


        :return: The org_id of this Account.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: str):
        """Sets the org_id of this Account.


        :param org_id: The org_id of this Account.
        :type org_id: str
        """

        self._org_id = org_id

    @property
    def tenant_id(self) -> str:
        """Gets the tenant_id of this Account.


        :return: The tenant_id of this Account.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id: str):
        """Sets the tenant_id of this Account.


        :param tenant_id: The tenant_id of this Account.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def email(self) -> str:
        """Gets the email of this Account.


        :return: The email of this Account.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Account.


        :param email: The email of this Account.
        :type email: str
        """

        self._email = email

    @property
    def last_modified_at(self) -> datetime:
        """Gets the last_modified_at of this Account.


        :return: The last_modified_at of this Account.
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at: datetime):
        """Sets the last_modified_at of this Account.


        :param last_modified_at: The last_modified_at of this Account.
        :type last_modified_at: datetime
        """

        self._last_modified_at = last_modified_at

    @property
    def deleted_at(self) -> datetime:
        """Gets the deleted_at of this Account.


        :return: The deleted_at of this Account.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: datetime):
        """Sets the deleted_at of this Account.


        :param deleted_at: The deleted_at of this Account.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Account.


        :return: The created_at of this Account.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Account.


        :param created_at: The created_at of this Account.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def scraping_jobs(self) -> List[ScrapingJob]:
        """Gets the scraping_jobs of this Account.


        :return: The scraping_jobs of this Account.
        :rtype: List[ScrapingJob]
        """
        return self._scraping_jobs

    @scraping_jobs.setter
    def scraping_jobs(self, scraping_jobs: List[ScrapingJob]):
        """Sets the scraping_jobs of this Account.


        :param scraping_jobs: The scraping_jobs of this Account.
        :type scraping_jobs: List[ScrapingJob]
        """

        self._scraping_jobs = scraping_jobs
