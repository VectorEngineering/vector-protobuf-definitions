from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend_server.models.base_model import Model
from backend_server import util


class APIInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version=None, supported_versions=None, is_deprecated=None, sunset_date=None):  # noqa: E501
        """APIInfo - a model defined in OpenAPI

        :param version: The version of this APIInfo.  # noqa: E501
        :type version: str
        :param supported_versions: The supported_versions of this APIInfo.  # noqa: E501
        :type supported_versions: List[str]
        :param is_deprecated: The is_deprecated of this APIInfo.  # noqa: E501
        :type is_deprecated: bool
        :param sunset_date: The sunset_date of this APIInfo.  # noqa: E501
        :type sunset_date: datetime
        """
        self.openapi_types = {
            'version': str,
            'supported_versions': List[str],
            'is_deprecated': bool,
            'sunset_date': datetime
        }

        self.attribute_map = {
            'version': 'version',
            'supported_versions': 'supportedVersions',
            'is_deprecated': 'isDeprecated',
            'sunset_date': 'sunsetDate'
        }

        self._version = version
        self._supported_versions = supported_versions
        self._is_deprecated = is_deprecated
        self._sunset_date = sunset_date

    @classmethod
    def from_dict(cls, dikt) -> 'APIInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The APIInfo of this APIInfo.  # noqa: E501
        :rtype: APIInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self) -> str:
        """Gets the version of this APIInfo.


        :return: The version of this APIInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this APIInfo.


        :param version: The version of this APIInfo.
        :type version: str
        """

        self._version = version

    @property
    def supported_versions(self) -> List[str]:
        """Gets the supported_versions of this APIInfo.


        :return: The supported_versions of this APIInfo.
        :rtype: List[str]
        """
        return self._supported_versions

    @supported_versions.setter
    def supported_versions(self, supported_versions: List[str]):
        """Sets the supported_versions of this APIInfo.


        :param supported_versions: The supported_versions of this APIInfo.
        :type supported_versions: List[str]
        """

        self._supported_versions = supported_versions

    @property
    def is_deprecated(self) -> bool:
        """Gets the is_deprecated of this APIInfo.


        :return: The is_deprecated of this APIInfo.
        :rtype: bool
        """
        return self._is_deprecated

    @is_deprecated.setter
    def is_deprecated(self, is_deprecated: bool):
        """Sets the is_deprecated of this APIInfo.


        :param is_deprecated: The is_deprecated of this APIInfo.
        :type is_deprecated: bool
        """

        self._is_deprecated = is_deprecated

    @property
    def sunset_date(self) -> datetime:
        """Gets the sunset_date of this APIInfo.


        :return: The sunset_date of this APIInfo.
        :rtype: datetime
        """
        return self._sunset_date

    @sunset_date.setter
    def sunset_date(self, sunset_date: datetime):
        """Sets the sunset_date of this APIInfo.


        :param sunset_date: The sunset_date of this APIInfo.
        :type sunset_date: datetime
        """

        self._sunset_date = sunset_date
