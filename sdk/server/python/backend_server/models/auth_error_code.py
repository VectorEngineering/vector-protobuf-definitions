from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend_server.models.base_model import Model
from backend_server import util


class AuthErrorCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    NO_AUTH_ERROR = 'NO_AUTH_ERROR'
    AUTH_FAILED_INVALID_BEARER_TOKEN = 'AUTH_FAILED_INVALID_BEARER_TOKEN'
    AUTH_FAILED_INVALID_SUBJECT = 'AUTH_FAILED_INVALID_SUBJECT'
    AUTH_FAILED_INVALID_AUDIENCE = 'AUTH_FAILED_INVALID_AUDIENCE'
    AUTH_FAILED_INVALID_ISSUER = 'AUTH_FAILED_INVALID_ISSUER'
    BEARER_TOKEN_MISSING = 'BEARER_TOKEN_MISSING'
    TOKEN_EXPIRED = 'TOKEN_EXPIRED'
    TOKEN_NOT_ACTIVE = 'TOKEN_NOT_ACTIVE'
    TOKEN_REVOKED = 'TOKEN_REVOKED'
    INVALID_CLAIMS = 'INVALID_CLAIMS'
    MISSING_REQUIRED_CLAIMS = 'MISSING_REQUIRED_CLAIMS'
    INVALID_SCOPE = 'INVALID_SCOPE'
    INVALID_PERMISSIONS = 'INVALID_PERMISSIONS'
    SESSION_EXPIRED = 'SESSION_EXPIRED'
    SESSION_INVALID = 'SESSION_INVALID'
    SESSION_REVOKED = 'SESSION_REVOKED'
    UNAUTHENTICATED = 'UNAUTHENTICATED'
    MULTI_FACTOR_REQUIRED = 'MULTI_FACTOR_REQUIRED'
    MULTI_FACTOR_FAILED = 'MULTI_FACTOR_FAILED'
    ACCOUNT_LOCKED = 'ACCOUNT_LOCKED'
    ACCOUNT_DISABLED = 'ACCOUNT_DISABLED'
    PASSWORD_EXPIRED = 'PASSWORD_EXPIRED'
    PASSWORD_RESET_REQUIRED = 'PASSWORD_RESET_REQUIRED'
    UNRECOGNIZED_DEVICE = 'UNRECOGNIZED_DEVICE'
    def __init__(self):  # noqa: E501
        """AuthErrorCode - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt) -> 'AuthErrorCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AuthErrorCode of this AuthErrorCode.  # noqa: E501
        :rtype: AuthErrorCode
        """
        return util.deserialize_model(dikt, cls)
