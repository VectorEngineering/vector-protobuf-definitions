from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend_server.models.base_model import Model
from backend_server import util


class CreateAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_platform_user_id=None, org_id=None, tenant_id=None, email=None):  # noqa: E501
        """CreateAccountRequest - a model defined in OpenAPI

        :param auth_platform_user_id: The auth_platform_user_id of this CreateAccountRequest.  # noqa: E501
        :type auth_platform_user_id: str
        :param org_id: The org_id of this CreateAccountRequest.  # noqa: E501
        :type org_id: str
        :param tenant_id: The tenant_id of this CreateAccountRequest.  # noqa: E501
        :type tenant_id: str
        :param email: The email of this CreateAccountRequest.  # noqa: E501
        :type email: str
        """
        self.openapi_types = {
            'auth_platform_user_id': str,
            'org_id': str,
            'tenant_id': str,
            'email': str
        }

        self.attribute_map = {
            'auth_platform_user_id': 'authPlatformUserId',
            'org_id': 'orgId',
            'tenant_id': 'tenantId',
            'email': 'email'
        }

        self._auth_platform_user_id = auth_platform_user_id
        self._org_id = org_id
        self._tenant_id = tenant_id
        self._email = email

    @classmethod
    def from_dict(cls, dikt) -> 'CreateAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateAccountRequest of this CreateAccountRequest.  # noqa: E501
        :rtype: CreateAccountRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_platform_user_id(self) -> str:
        """Gets the auth_platform_user_id of this CreateAccountRequest.


        :return: The auth_platform_user_id of this CreateAccountRequest.
        :rtype: str
        """
        return self._auth_platform_user_id

    @auth_platform_user_id.setter
    def auth_platform_user_id(self, auth_platform_user_id: str):
        """Sets the auth_platform_user_id of this CreateAccountRequest.


        :param auth_platform_user_id: The auth_platform_user_id of this CreateAccountRequest.
        :type auth_platform_user_id: str
        """
        if auth_platform_user_id is None:
            raise ValueError("Invalid value for `auth_platform_user_id`, must not be `None`")  # noqa: E501

        self._auth_platform_user_id = auth_platform_user_id

    @property
    def org_id(self) -> str:
        """Gets the org_id of this CreateAccountRequest.


        :return: The org_id of this CreateAccountRequest.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: str):
        """Sets the org_id of this CreateAccountRequest.


        :param org_id: The org_id of this CreateAccountRequest.
        :type org_id: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def tenant_id(self) -> str:
        """Gets the tenant_id of this CreateAccountRequest.


        :return: The tenant_id of this CreateAccountRequest.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id: str):
        """Sets the tenant_id of this CreateAccountRequest.


        :param tenant_id: The tenant_id of this CreateAccountRequest.
        :type tenant_id: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def email(self) -> str:
        """Gets the email of this CreateAccountRequest.


        :return: The email of this CreateAccountRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this CreateAccountRequest.


        :param email: The email of this CreateAccountRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email
