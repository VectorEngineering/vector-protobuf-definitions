from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend_server.models.base_model import Model
from backend_server import util


class CreateScrapingJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, org_id=None, tenant_id=None, name=None, keywords=None, lang=None, zoom=None, lat=None, lon=None, fast_mode=None, radius=None, depth=None, email=None, max_time=None, proxies=None):  # noqa: E501
        """CreateScrapingJobRequest - a model defined in OpenAPI

        :param user_id: The user_id of this CreateScrapingJobRequest.  # noqa: E501
        :type user_id: str
        :param org_id: The org_id of this CreateScrapingJobRequest.  # noqa: E501
        :type org_id: str
        :param tenant_id: The tenant_id of this CreateScrapingJobRequest.  # noqa: E501
        :type tenant_id: str
        :param name: The name of this CreateScrapingJobRequest.  # noqa: E501
        :type name: str
        :param keywords: The keywords of this CreateScrapingJobRequest.  # noqa: E501
        :type keywords: List[str]
        :param lang: The lang of this CreateScrapingJobRequest.  # noqa: E501
        :type lang: str
        :param zoom: The zoom of this CreateScrapingJobRequest.  # noqa: E501
        :type zoom: int
        :param lat: The lat of this CreateScrapingJobRequest.  # noqa: E501
        :type lat: str
        :param lon: The lon of this CreateScrapingJobRequest.  # noqa: E501
        :type lon: str
        :param fast_mode: The fast_mode of this CreateScrapingJobRequest.  # noqa: E501
        :type fast_mode: bool
        :param radius: The radius of this CreateScrapingJobRequest.  # noqa: E501
        :type radius: int
        :param depth: The depth of this CreateScrapingJobRequest.  # noqa: E501
        :type depth: int
        :param email: The email of this CreateScrapingJobRequest.  # noqa: E501
        :type email: bool
        :param max_time: The max_time of this CreateScrapingJobRequest.  # noqa: E501
        :type max_time: int
        :param proxies: The proxies of this CreateScrapingJobRequest.  # noqa: E501
        :type proxies: List[str]
        """
        self.openapi_types = {
            'user_id': str,
            'org_id': str,
            'tenant_id': str,
            'name': str,
            'keywords': List[str],
            'lang': str,
            'zoom': int,
            'lat': str,
            'lon': str,
            'fast_mode': bool,
            'radius': int,
            'depth': int,
            'email': bool,
            'max_time': int,
            'proxies': List[str]
        }

        self.attribute_map = {
            'user_id': 'userId',
            'org_id': 'orgId',
            'tenant_id': 'tenantId',
            'name': 'name',
            'keywords': 'keywords',
            'lang': 'lang',
            'zoom': 'zoom',
            'lat': 'lat',
            'lon': 'lon',
            'fast_mode': 'fastMode',
            'radius': 'radius',
            'depth': 'depth',
            'email': 'email',
            'max_time': 'maxTime',
            'proxies': 'proxies'
        }

        self._user_id = user_id
        self._org_id = org_id
        self._tenant_id = tenant_id
        self._name = name
        self._keywords = keywords
        self._lang = lang
        self._zoom = zoom
        self._lat = lat
        self._lon = lon
        self._fast_mode = fast_mode
        self._radius = radius
        self._depth = depth
        self._email = email
        self._max_time = max_time
        self._proxies = proxies

    @classmethod
    def from_dict(cls, dikt) -> 'CreateScrapingJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateScrapingJobRequest of this CreateScrapingJobRequest.  # noqa: E501
        :rtype: CreateScrapingJobRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this CreateScrapingJobRequest.


        :return: The user_id of this CreateScrapingJobRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this CreateScrapingJobRequest.


        :param user_id: The user_id of this CreateScrapingJobRequest.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def org_id(self) -> str:
        """Gets the org_id of this CreateScrapingJobRequest.


        :return: The org_id of this CreateScrapingJobRequest.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: str):
        """Sets the org_id of this CreateScrapingJobRequest.


        :param org_id: The org_id of this CreateScrapingJobRequest.
        :type org_id: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def tenant_id(self) -> str:
        """Gets the tenant_id of this CreateScrapingJobRequest.


        :return: The tenant_id of this CreateScrapingJobRequest.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id: str):
        """Sets the tenant_id of this CreateScrapingJobRequest.


        :param tenant_id: The tenant_id of this CreateScrapingJobRequest.
        :type tenant_id: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def name(self) -> str:
        """Gets the name of this CreateScrapingJobRequest.


        :return: The name of this CreateScrapingJobRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CreateScrapingJobRequest.


        :param name: The name of this CreateScrapingJobRequest.
        :type name: str
        """

        self._name = name

    @property
    def keywords(self) -> List[str]:
        """Gets the keywords of this CreateScrapingJobRequest.


        :return: The keywords of this CreateScrapingJobRequest.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords: List[str]):
        """Sets the keywords of this CreateScrapingJobRequest.


        :param keywords: The keywords of this CreateScrapingJobRequest.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def lang(self) -> str:
        """Gets the lang of this CreateScrapingJobRequest.


        :return: The lang of this CreateScrapingJobRequest.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang: str):
        """Sets the lang of this CreateScrapingJobRequest.


        :param lang: The lang of this CreateScrapingJobRequest.
        :type lang: str
        """

        self._lang = lang

    @property
    def zoom(self) -> int:
        """Gets the zoom of this CreateScrapingJobRequest.


        :return: The zoom of this CreateScrapingJobRequest.
        :rtype: int
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom: int):
        """Sets the zoom of this CreateScrapingJobRequest.


        :param zoom: The zoom of this CreateScrapingJobRequest.
        :type zoom: int
        """

        self._zoom = zoom

    @property
    def lat(self) -> str:
        """Gets the lat of this CreateScrapingJobRequest.


        :return: The lat of this CreateScrapingJobRequest.
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat: str):
        """Sets the lat of this CreateScrapingJobRequest.


        :param lat: The lat of this CreateScrapingJobRequest.
        :type lat: str
        """

        self._lat = lat

    @property
    def lon(self) -> str:
        """Gets the lon of this CreateScrapingJobRequest.


        :return: The lon of this CreateScrapingJobRequest.
        :rtype: str
        """
        return self._lon

    @lon.setter
    def lon(self, lon: str):
        """Sets the lon of this CreateScrapingJobRequest.


        :param lon: The lon of this CreateScrapingJobRequest.
        :type lon: str
        """

        self._lon = lon

    @property
    def fast_mode(self) -> bool:
        """Gets the fast_mode of this CreateScrapingJobRequest.


        :return: The fast_mode of this CreateScrapingJobRequest.
        :rtype: bool
        """
        return self._fast_mode

    @fast_mode.setter
    def fast_mode(self, fast_mode: bool):
        """Sets the fast_mode of this CreateScrapingJobRequest.


        :param fast_mode: The fast_mode of this CreateScrapingJobRequest.
        :type fast_mode: bool
        """

        self._fast_mode = fast_mode

    @property
    def radius(self) -> int:
        """Gets the radius of this CreateScrapingJobRequest.


        :return: The radius of this CreateScrapingJobRequest.
        :rtype: int
        """
        return self._radius

    @radius.setter
    def radius(self, radius: int):
        """Sets the radius of this CreateScrapingJobRequest.


        :param radius: The radius of this CreateScrapingJobRequest.
        :type radius: int
        """

        self._radius = radius

    @property
    def depth(self) -> int:
        """Gets the depth of this CreateScrapingJobRequest.


        :return: The depth of this CreateScrapingJobRequest.
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth: int):
        """Sets the depth of this CreateScrapingJobRequest.


        :param depth: The depth of this CreateScrapingJobRequest.
        :type depth: int
        """

        self._depth = depth

    @property
    def email(self) -> bool:
        """Gets the email of this CreateScrapingJobRequest.


        :return: The email of this CreateScrapingJobRequest.
        :rtype: bool
        """
        return self._email

    @email.setter
    def email(self, email: bool):
        """Sets the email of this CreateScrapingJobRequest.


        :param email: The email of this CreateScrapingJobRequest.
        :type email: bool
        """

        self._email = email

    @property
    def max_time(self) -> int:
        """Gets the max_time of this CreateScrapingJobRequest.


        :return: The max_time of this CreateScrapingJobRequest.
        :rtype: int
        """
        return self._max_time

    @max_time.setter
    def max_time(self, max_time: int):
        """Sets the max_time of this CreateScrapingJobRequest.


        :param max_time: The max_time of this CreateScrapingJobRequest.
        :type max_time: int
        """

        self._max_time = max_time

    @property
    def proxies(self) -> List[str]:
        """Gets the proxies of this CreateScrapingJobRequest.


        :return: The proxies of this CreateScrapingJobRequest.
        :rtype: List[str]
        """
        return self._proxies

    @proxies.setter
    def proxies(self, proxies: List[str]):
        """Sets the proxies of this CreateScrapingJobRequest.


        :param proxies: The proxies of this CreateScrapingJobRequest.
        :type proxies: List[str]
        """

        self._proxies = proxies
