from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend_server.models.base_model import Model
from backend_server.models.background_job_status import BackgroundJobStatus
from backend_server import util

from backend_server.models.background_job_status import BackgroundJobStatus  # noqa: E501

class CreateScrapingJobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id=None, status=BackgroundJobStatus.UNSPECIFIED):  # noqa: E501
        """CreateScrapingJobResponse - a model defined in OpenAPI

        :param job_id: The job_id of this CreateScrapingJobResponse.  # noqa: E501
        :type job_id: str
        :param status: The status of this CreateScrapingJobResponse.  # noqa: E501
        :type status: BackgroundJobStatus
        """
        self.openapi_types = {
            'job_id': str,
            'status': BackgroundJobStatus
        }

        self.attribute_map = {
            'job_id': 'jobId',
            'status': 'status'
        }

        self._job_id = job_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'CreateScrapingJobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateScrapingJobResponse of this CreateScrapingJobResponse.  # noqa: E501
        :rtype: CreateScrapingJobResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self) -> str:
        """Gets the job_id of this CreateScrapingJobResponse.


        :return: The job_id of this CreateScrapingJobResponse.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: str):
        """Sets the job_id of this CreateScrapingJobResponse.


        :param job_id: The job_id of this CreateScrapingJobResponse.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def status(self) -> BackgroundJobStatus:
        """Gets the status of this CreateScrapingJobResponse.


        :return: The status of this CreateScrapingJobResponse.
        :rtype: BackgroundJobStatus
        """
        return self._status

    @status.setter
    def status(self, status: BackgroundJobStatus):
        """Sets the status of this CreateScrapingJobResponse.


        :param status: The status of this CreateScrapingJobResponse.
        :type status: BackgroundJobStatus
        """

        self._status = status
