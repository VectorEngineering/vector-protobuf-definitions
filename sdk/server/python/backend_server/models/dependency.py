from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend_server.models.base_model import Model
from backend_server import util


class Dependency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, status=None, error=None, latency=None):  # noqa: E501
        """Dependency - a model defined in OpenAPI

        :param name: The name of this Dependency.  # noqa: E501
        :type name: str
        :param status: The status of this Dependency.  # noqa: E501
        :type status: str
        :param error: The error of this Dependency.  # noqa: E501
        :type error: str
        :param latency: The latency of this Dependency.  # noqa: E501
        :type latency: int
        """
        self.openapi_types = {
            'name': str,
            'status': str,
            'error': str,
            'latency': int
        }

        self.attribute_map = {
            'name': 'name',
            'status': 'status',
            'error': 'error',
            'latency': 'latency'
        }

        self._name = name
        self._status = status
        self._error = error
        self._latency = latency

    @classmethod
    def from_dict(cls, dikt) -> 'Dependency':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Dependency of this Dependency.  # noqa: E501
        :rtype: Dependency
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Dependency.


        :return: The name of this Dependency.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Dependency.


        :param name: The name of this Dependency.
        :type name: str
        """

        self._name = name

    @property
    def status(self) -> str:
        """Gets the status of this Dependency.


        :return: The status of this Dependency.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Dependency.


        :param status: The status of this Dependency.
        :type status: str
        """

        self._status = status

    @property
    def error(self) -> str:
        """Gets the error of this Dependency.


        :return: The error of this Dependency.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error: str):
        """Sets the error of this Dependency.


        :param error: The error of this Dependency.
        :type error: str
        """

        self._error = error

    @property
    def latency(self) -> int:
        """Gets the latency of this Dependency.


        :return: The latency of this Dependency.
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency: int):
        """Sets the latency of this Dependency.


        :param latency: The latency of this Dependency.
        :type latency: int
        """

        self._latency = latency
