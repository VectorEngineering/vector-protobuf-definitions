from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend_server.models.base_model import Model
from backend_server import util


class RateLimitContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, ip_address=None, affected_endpoints=None, headers=None):  # noqa: E501
        """RateLimitContext - a model defined in OpenAPI

        :param user_id: The user_id of this RateLimitContext.  # noqa: E501
        :type user_id: str
        :param ip_address: The ip_address of this RateLimitContext.  # noqa: E501
        :type ip_address: str
        :param affected_endpoints: The affected_endpoints of this RateLimitContext.  # noqa: E501
        :type affected_endpoints: List[str]
        :param headers: The headers of this RateLimitContext.  # noqa: E501
        :type headers: Dict[str, str]
        """
        self.openapi_types = {
            'user_id': str,
            'ip_address': str,
            'affected_endpoints': List[str],
            'headers': Dict[str, str]
        }

        self.attribute_map = {
            'user_id': 'userId',
            'ip_address': 'ipAddress',
            'affected_endpoints': 'affectedEndpoints',
            'headers': 'headers'
        }

        self._user_id = user_id
        self._ip_address = ip_address
        self._affected_endpoints = affected_endpoints
        self._headers = headers

    @classmethod
    def from_dict(cls, dikt) -> 'RateLimitContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RateLimitContext of this RateLimitContext.  # noqa: E501
        :rtype: RateLimitContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this RateLimitContext.


        :return: The user_id of this RateLimitContext.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this RateLimitContext.


        :param user_id: The user_id of this RateLimitContext.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def ip_address(self) -> str:
        """Gets the ip_address of this RateLimitContext.


        :return: The ip_address of this RateLimitContext.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address: str):
        """Sets the ip_address of this RateLimitContext.


        :param ip_address: The ip_address of this RateLimitContext.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def affected_endpoints(self) -> List[str]:
        """Gets the affected_endpoints of this RateLimitContext.


        :return: The affected_endpoints of this RateLimitContext.
        :rtype: List[str]
        """
        return self._affected_endpoints

    @affected_endpoints.setter
    def affected_endpoints(self, affected_endpoints: List[str]):
        """Sets the affected_endpoints of this RateLimitContext.


        :param affected_endpoints: The affected_endpoints of this RateLimitContext.
        :type affected_endpoints: List[str]
        """

        self._affected_endpoints = affected_endpoints

    @property
    def headers(self) -> Dict[str, str]:
        """Gets the headers of this RateLimitContext.


        :return: The headers of this RateLimitContext.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers: Dict[str, str]):
        """Sets the headers of this RateLimitContext.


        :param headers: The headers of this RateLimitContext.
        :type headers: Dict[str, str]
        """

        self._headers = headers
