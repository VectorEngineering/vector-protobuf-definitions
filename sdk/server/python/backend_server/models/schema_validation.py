from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend_server.models.base_model import Model
from backend_server import util


class SchemaValidation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, schema_version=None, invalid_patterns=None, type_mismatches=None):  # noqa: E501
        """SchemaValidation - a model defined in OpenAPI

        :param schema_version: The schema_version of this SchemaValidation.  # noqa: E501
        :type schema_version: str
        :param invalid_patterns: The invalid_patterns of this SchemaValidation.  # noqa: E501
        :type invalid_patterns: List[str]
        :param type_mismatches: The type_mismatches of this SchemaValidation.  # noqa: E501
        :type type_mismatches: List[str]
        """
        self.openapi_types = {
            'schema_version': str,
            'invalid_patterns': List[str],
            'type_mismatches': List[str]
        }

        self.attribute_map = {
            'schema_version': 'schemaVersion',
            'invalid_patterns': 'invalidPatterns',
            'type_mismatches': 'typeMismatches'
        }

        self._schema_version = schema_version
        self._invalid_patterns = invalid_patterns
        self._type_mismatches = type_mismatches

    @classmethod
    def from_dict(cls, dikt) -> 'SchemaValidation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SchemaValidation of this SchemaValidation.  # noqa: E501
        :rtype: SchemaValidation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def schema_version(self) -> str:
        """Gets the schema_version of this SchemaValidation.


        :return: The schema_version of this SchemaValidation.
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version: str):
        """Sets the schema_version of this SchemaValidation.


        :param schema_version: The schema_version of this SchemaValidation.
        :type schema_version: str
        """

        self._schema_version = schema_version

    @property
    def invalid_patterns(self) -> List[str]:
        """Gets the invalid_patterns of this SchemaValidation.


        :return: The invalid_patterns of this SchemaValidation.
        :rtype: List[str]
        """
        return self._invalid_patterns

    @invalid_patterns.setter
    def invalid_patterns(self, invalid_patterns: List[str]):
        """Sets the invalid_patterns of this SchemaValidation.


        :param invalid_patterns: The invalid_patterns of this SchemaValidation.
        :type invalid_patterns: List[str]
        """

        self._invalid_patterns = invalid_patterns

    @property
    def type_mismatches(self) -> List[str]:
        """Gets the type_mismatches of this SchemaValidation.


        :return: The type_mismatches of this SchemaValidation.
        :rtype: List[str]
        """
        return self._type_mismatches

    @type_mismatches.setter
    def type_mismatches(self, type_mismatches: List[str]):
        """Sets the type_mismatches of this SchemaValidation.


        :param type_mismatches: The type_mismatches of this SchemaValidation.
        :type type_mismatches: List[str]
        """

        self._type_mismatches = type_mismatches
