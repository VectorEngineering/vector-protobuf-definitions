from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend_server.models.base_model import Model
from backend_server import util


class TokenInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token_id=None, token_type=None, expiry=None, issuer=None, audiences=None):  # noqa: E501
        """TokenInfo - a model defined in OpenAPI

        :param token_id: The token_id of this TokenInfo.  # noqa: E501
        :type token_id: str
        :param token_type: The token_type of this TokenInfo.  # noqa: E501
        :type token_type: str
        :param expiry: The expiry of this TokenInfo.  # noqa: E501
        :type expiry: datetime
        :param issuer: The issuer of this TokenInfo.  # noqa: E501
        :type issuer: str
        :param audiences: The audiences of this TokenInfo.  # noqa: E501
        :type audiences: List[str]
        """
        self.openapi_types = {
            'token_id': str,
            'token_type': str,
            'expiry': datetime,
            'issuer': str,
            'audiences': List[str]
        }

        self.attribute_map = {
            'token_id': 'tokenId',
            'token_type': 'tokenType',
            'expiry': 'expiry',
            'issuer': 'issuer',
            'audiences': 'audiences'
        }

        self._token_id = token_id
        self._token_type = token_type
        self._expiry = expiry
        self._issuer = issuer
        self._audiences = audiences

    @classmethod
    def from_dict(cls, dikt) -> 'TokenInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TokenInfo of this TokenInfo.  # noqa: E501
        :rtype: TokenInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token_id(self) -> str:
        """Gets the token_id of this TokenInfo.


        :return: The token_id of this TokenInfo.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id: str):
        """Sets the token_id of this TokenInfo.


        :param token_id: The token_id of this TokenInfo.
        :type token_id: str
        """

        self._token_id = token_id

    @property
    def token_type(self) -> str:
        """Gets the token_type of this TokenInfo.


        :return: The token_type of this TokenInfo.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type: str):
        """Sets the token_type of this TokenInfo.


        :param token_type: The token_type of this TokenInfo.
        :type token_type: str
        """

        self._token_type = token_type

    @property
    def expiry(self) -> datetime:
        """Gets the expiry of this TokenInfo.


        :return: The expiry of this TokenInfo.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry: datetime):
        """Sets the expiry of this TokenInfo.


        :param expiry: The expiry of this TokenInfo.
        :type expiry: datetime
        """

        self._expiry = expiry

    @property
    def issuer(self) -> str:
        """Gets the issuer of this TokenInfo.


        :return: The issuer of this TokenInfo.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer: str):
        """Sets the issuer of this TokenInfo.


        :param issuer: The issuer of this TokenInfo.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def audiences(self) -> List[str]:
        """Gets the audiences of this TokenInfo.


        :return: The audiences of this TokenInfo.
        :rtype: List[str]
        """
        return self._audiences

    @audiences.setter
    def audiences(self, audiences: List[str]):
        """Sets the audiences of this TokenInfo.


        :param audiences: The audiences of this TokenInfo.
        :type audiences: List[str]
        """

        self._audiences = audiences
