from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.account_settings import AccountSettings
from playbookmedia_backend_server_sdk.models.account_status import AccountStatus
from playbookmedia_backend_server_sdk.models.scraping_job import ScrapingJob
from playbookmedia_backend_server_sdk.models.workspace import Workspace
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.account_settings import AccountSettings  # noqa: E501
from playbookmedia_backend_server_sdk.models.account_status import AccountStatus  # noqa: E501
from playbookmedia_backend_server_sdk.models.scraping_job import ScrapingJob  # noqa: E501
from playbookmedia_backend_server_sdk.models.workspace import Workspace  # noqa: E501

class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, auth_platform_user_id=None, org_id=None, tenant_id=None, email=None, last_modified_at=None, deleted_at=None, created_at=None, scraping_jobs=None, account_status=AccountStatus.UNSPECIFIED, roles=None, permissions=None, mfa_enabled=None, last_login_at=None, timezone=None, total_jobs_run=None, monthly_job_limit=None, concurrent_job_limit=None, workspaces=None, settings=None):  # noqa: E501
        """Account - a model defined in OpenAPI

        :param id: The id of this Account.  # noqa: E501
        :type id: str
        :param auth_platform_user_id: The auth_platform_user_id of this Account.  # noqa: E501
        :type auth_platform_user_id: str
        :param org_id: The org_id of this Account.  # noqa: E501
        :type org_id: str
        :param tenant_id: The tenant_id of this Account.  # noqa: E501
        :type tenant_id: str
        :param email: The email of this Account.  # noqa: E501
        :type email: str
        :param last_modified_at: The last_modified_at of this Account.  # noqa: E501
        :type last_modified_at: datetime
        :param deleted_at: The deleted_at of this Account.  # noqa: E501
        :type deleted_at: datetime
        :param created_at: The created_at of this Account.  # noqa: E501
        :type created_at: datetime
        :param scraping_jobs: The scraping_jobs of this Account.  # noqa: E501
        :type scraping_jobs: List[ScrapingJob]
        :param account_status: The account_status of this Account.  # noqa: E501
        :type account_status: AccountStatus
        :param roles: The roles of this Account.  # noqa: E501
        :type roles: List[str]
        :param permissions: The permissions of this Account.  # noqa: E501
        :type permissions: List[str]
        :param mfa_enabled: The mfa_enabled of this Account.  # noqa: E501
        :type mfa_enabled: bool
        :param last_login_at: The last_login_at of this Account.  # noqa: E501
        :type last_login_at: datetime
        :param timezone: The timezone of this Account.  # noqa: E501
        :type timezone: str
        :param total_jobs_run: The total_jobs_run of this Account.  # noqa: E501
        :type total_jobs_run: int
        :param monthly_job_limit: The monthly_job_limit of this Account.  # noqa: E501
        :type monthly_job_limit: int
        :param concurrent_job_limit: The concurrent_job_limit of this Account.  # noqa: E501
        :type concurrent_job_limit: int
        :param workspaces: The workspaces of this Account.  # noqa: E501
        :type workspaces: List[Workspace]
        :param settings: The settings of this Account.  # noqa: E501
        :type settings: AccountSettings
        """
        self.openapi_types = {
            'id': str,
            'auth_platform_user_id': str,
            'org_id': str,
            'tenant_id': str,
            'email': str,
            'last_modified_at': datetime,
            'deleted_at': datetime,
            'created_at': datetime,
            'scraping_jobs': List[ScrapingJob],
            'account_status': AccountStatus,
            'roles': List[str],
            'permissions': List[str],
            'mfa_enabled': bool,
            'last_login_at': datetime,
            'timezone': str,
            'total_jobs_run': int,
            'monthly_job_limit': int,
            'concurrent_job_limit': int,
            'workspaces': List[Workspace],
            'settings': AccountSettings
        }

        self.attribute_map = {
            'id': 'id',
            'auth_platform_user_id': 'authPlatformUserId',
            'org_id': 'orgId',
            'tenant_id': 'tenantId',
            'email': 'email',
            'last_modified_at': 'lastModifiedAt',
            'deleted_at': 'deletedAt',
            'created_at': 'createdAt',
            'scraping_jobs': 'scrapingJobs',
            'account_status': 'accountStatus',
            'roles': 'roles',
            'permissions': 'permissions',
            'mfa_enabled': 'mfaEnabled',
            'last_login_at': 'lastLoginAt',
            'timezone': 'timezone',
            'total_jobs_run': 'totalJobsRun',
            'monthly_job_limit': 'monthlyJobLimit',
            'concurrent_job_limit': 'concurrentJobLimit',
            'workspaces': 'workspaces',
            'settings': 'settings'
        }

        self._id = id
        self._auth_platform_user_id = auth_platform_user_id
        self._org_id = org_id
        self._tenant_id = tenant_id
        self._email = email
        self._last_modified_at = last_modified_at
        self._deleted_at = deleted_at
        self._created_at = created_at
        self._scraping_jobs = scraping_jobs
        self._account_status = account_status
        self._roles = roles
        self._permissions = permissions
        self._mfa_enabled = mfa_enabled
        self._last_login_at = last_login_at
        self._timezone = timezone
        self._total_jobs_run = total_jobs_run
        self._monthly_job_limit = monthly_job_limit
        self._concurrent_job_limit = concurrent_job_limit
        self._workspaces = workspaces
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Account of this Account.  # noqa: E501
        :rtype: Account
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Account.


        :return: The id of this Account.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Account.


        :param id: The id of this Account.
        :type id: str
        """

        self._id = id

    @property
    def auth_platform_user_id(self) -> str:
        """Gets the auth_platform_user_id of this Account.


        :return: The auth_platform_user_id of this Account.
        :rtype: str
        """
        return self._auth_platform_user_id

    @auth_platform_user_id.setter
    def auth_platform_user_id(self, auth_platform_user_id: str):
        """Sets the auth_platform_user_id of this Account.


        :param auth_platform_user_id: The auth_platform_user_id of this Account.
        :type auth_platform_user_id: str
        """

        self._auth_platform_user_id = auth_platform_user_id

    @property
    def org_id(self) -> str:
        """Gets the org_id of this Account.


        :return: The org_id of this Account.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: str):
        """Sets the org_id of this Account.


        :param org_id: The org_id of this Account.
        :type org_id: str
        """

        self._org_id = org_id

    @property
    def tenant_id(self) -> str:
        """Gets the tenant_id of this Account.


        :return: The tenant_id of this Account.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id: str):
        """Sets the tenant_id of this Account.


        :param tenant_id: The tenant_id of this Account.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def email(self) -> str:
        """Gets the email of this Account.


        :return: The email of this Account.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Account.


        :param email: The email of this Account.
        :type email: str
        """

        self._email = email

    @property
    def last_modified_at(self) -> datetime:
        """Gets the last_modified_at of this Account.


        :return: The last_modified_at of this Account.
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at: datetime):
        """Sets the last_modified_at of this Account.


        :param last_modified_at: The last_modified_at of this Account.
        :type last_modified_at: datetime
        """

        self._last_modified_at = last_modified_at

    @property
    def deleted_at(self) -> datetime:
        """Gets the deleted_at of this Account.


        :return: The deleted_at of this Account.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: datetime):
        """Sets the deleted_at of this Account.


        :param deleted_at: The deleted_at of this Account.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Account.


        :return: The created_at of this Account.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Account.


        :param created_at: The created_at of this Account.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def scraping_jobs(self) -> List[ScrapingJob]:
        """Gets the scraping_jobs of this Account.


        :return: The scraping_jobs of this Account.
        :rtype: List[ScrapingJob]
        """
        return self._scraping_jobs

    @scraping_jobs.setter
    def scraping_jobs(self, scraping_jobs: List[ScrapingJob]):
        """Sets the scraping_jobs of this Account.


        :param scraping_jobs: The scraping_jobs of this Account.
        :type scraping_jobs: List[ScrapingJob]
        """

        self._scraping_jobs = scraping_jobs

    @property
    def account_status(self) -> AccountStatus:
        """Gets the account_status of this Account.


        :return: The account_status of this Account.
        :rtype: AccountStatus
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status: AccountStatus):
        """Sets the account_status of this Account.


        :param account_status: The account_status of this Account.
        :type account_status: AccountStatus
        """

        self._account_status = account_status

    @property
    def roles(self) -> List[str]:
        """Gets the roles of this Account.


        :return: The roles of this Account.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles: List[str]):
        """Sets the roles of this Account.


        :param roles: The roles of this Account.
        :type roles: List[str]
        """

        self._roles = roles

    @property
    def permissions(self) -> List[str]:
        """Gets the permissions of this Account.


        :return: The permissions of this Account.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions: List[str]):
        """Sets the permissions of this Account.


        :param permissions: The permissions of this Account.
        :type permissions: List[str]
        """

        self._permissions = permissions

    @property
    def mfa_enabled(self) -> bool:
        """Gets the mfa_enabled of this Account.


        :return: The mfa_enabled of this Account.
        :rtype: bool
        """
        return self._mfa_enabled

    @mfa_enabled.setter
    def mfa_enabled(self, mfa_enabled: bool):
        """Sets the mfa_enabled of this Account.


        :param mfa_enabled: The mfa_enabled of this Account.
        :type mfa_enabled: bool
        """

        self._mfa_enabled = mfa_enabled

    @property
    def last_login_at(self) -> datetime:
        """Gets the last_login_at of this Account.


        :return: The last_login_at of this Account.
        :rtype: datetime
        """
        return self._last_login_at

    @last_login_at.setter
    def last_login_at(self, last_login_at: datetime):
        """Sets the last_login_at of this Account.


        :param last_login_at: The last_login_at of this Account.
        :type last_login_at: datetime
        """

        self._last_login_at = last_login_at

    @property
    def timezone(self) -> str:
        """Gets the timezone of this Account.


        :return: The timezone of this Account.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone: str):
        """Sets the timezone of this Account.


        :param timezone: The timezone of this Account.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def total_jobs_run(self) -> int:
        """Gets the total_jobs_run of this Account.


        :return: The total_jobs_run of this Account.
        :rtype: int
        """
        return self._total_jobs_run

    @total_jobs_run.setter
    def total_jobs_run(self, total_jobs_run: int):
        """Sets the total_jobs_run of this Account.


        :param total_jobs_run: The total_jobs_run of this Account.
        :type total_jobs_run: int
        """

        self._total_jobs_run = total_jobs_run

    @property
    def monthly_job_limit(self) -> int:
        """Gets the monthly_job_limit of this Account.


        :return: The monthly_job_limit of this Account.
        :rtype: int
        """
        return self._monthly_job_limit

    @monthly_job_limit.setter
    def monthly_job_limit(self, monthly_job_limit: int):
        """Sets the monthly_job_limit of this Account.


        :param monthly_job_limit: The monthly_job_limit of this Account.
        :type monthly_job_limit: int
        """

        self._monthly_job_limit = monthly_job_limit

    @property
    def concurrent_job_limit(self) -> int:
        """Gets the concurrent_job_limit of this Account.


        :return: The concurrent_job_limit of this Account.
        :rtype: int
        """
        return self._concurrent_job_limit

    @concurrent_job_limit.setter
    def concurrent_job_limit(self, concurrent_job_limit: int):
        """Sets the concurrent_job_limit of this Account.


        :param concurrent_job_limit: The concurrent_job_limit of this Account.
        :type concurrent_job_limit: int
        """

        self._concurrent_job_limit = concurrent_job_limit

    @property
    def workspaces(self) -> List[Workspace]:
        """Gets the workspaces of this Account.


        :return: The workspaces of this Account.
        :rtype: List[Workspace]
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces: List[Workspace]):
        """Sets the workspaces of this Account.


        :param workspaces: The workspaces of this Account.
        :type workspaces: List[Workspace]
        """

        self._workspaces = workspaces

    @property
    def settings(self) -> AccountSettings:
        """Gets the settings of this Account.


        :return: The settings of this Account.
        :rtype: AccountSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings: AccountSettings):
        """Sets the settings of this Account.


        :param settings: The settings of this Account.
        :type settings: AccountSettings
        """

        self._settings = settings
