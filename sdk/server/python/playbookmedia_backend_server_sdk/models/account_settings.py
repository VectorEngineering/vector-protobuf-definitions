from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class AccountSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, email_notifications=None, slack_notifications=None, default_data_retention=None, auto_purge_enabled=None, require2fa=None, session_timeout=None, created_at=None, updated_at=None, deleted_at=None):  # noqa: E501
        """AccountSettings - a model defined in OpenAPI

        :param id: The id of this AccountSettings.  # noqa: E501
        :type id: str
        :param email_notifications: The email_notifications of this AccountSettings.  # noqa: E501
        :type email_notifications: bool
        :param slack_notifications: The slack_notifications of this AccountSettings.  # noqa: E501
        :type slack_notifications: bool
        :param default_data_retention: The default_data_retention of this AccountSettings.  # noqa: E501
        :type default_data_retention: str
        :param auto_purge_enabled: The auto_purge_enabled of this AccountSettings.  # noqa: E501
        :type auto_purge_enabled: bool
        :param require2fa: The require2fa of this AccountSettings.  # noqa: E501
        :type require2fa: bool
        :param session_timeout: The session_timeout of this AccountSettings.  # noqa: E501
        :type session_timeout: str
        :param created_at: The created_at of this AccountSettings.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this AccountSettings.  # noqa: E501
        :type updated_at: datetime
        :param deleted_at: The deleted_at of this AccountSettings.  # noqa: E501
        :type deleted_at: datetime
        """
        self.openapi_types = {
            'id': str,
            'email_notifications': bool,
            'slack_notifications': bool,
            'default_data_retention': str,
            'auto_purge_enabled': bool,
            'require2fa': bool,
            'session_timeout': str,
            'created_at': datetime,
            'updated_at': datetime,
            'deleted_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'email_notifications': 'emailNotifications',
            'slack_notifications': 'slackNotifications',
            'default_data_retention': 'defaultDataRetention',
            'auto_purge_enabled': 'autoPurgeEnabled',
            'require2fa': 'require2fa',
            'session_timeout': 'sessionTimeout',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'deleted_at': 'deletedAt'
        }

        self._id = id
        self._email_notifications = email_notifications
        self._slack_notifications = slack_notifications
        self._default_data_retention = default_data_retention
        self._auto_purge_enabled = auto_purge_enabled
        self._require2fa = require2fa
        self._session_timeout = session_timeout
        self._created_at = created_at
        self._updated_at = updated_at
        self._deleted_at = deleted_at

    @classmethod
    def from_dict(cls, dikt) -> 'AccountSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountSettings of this AccountSettings.  # noqa: E501
        :rtype: AccountSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this AccountSettings.


        :return: The id of this AccountSettings.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this AccountSettings.


        :param id: The id of this AccountSettings.
        :type id: str
        """

        self._id = id

    @property
    def email_notifications(self) -> bool:
        """Gets the email_notifications of this AccountSettings.


        :return: The email_notifications of this AccountSettings.
        :rtype: bool
        """
        return self._email_notifications

    @email_notifications.setter
    def email_notifications(self, email_notifications: bool):
        """Sets the email_notifications of this AccountSettings.


        :param email_notifications: The email_notifications of this AccountSettings.
        :type email_notifications: bool
        """

        self._email_notifications = email_notifications

    @property
    def slack_notifications(self) -> bool:
        """Gets the slack_notifications of this AccountSettings.


        :return: The slack_notifications of this AccountSettings.
        :rtype: bool
        """
        return self._slack_notifications

    @slack_notifications.setter
    def slack_notifications(self, slack_notifications: bool):
        """Sets the slack_notifications of this AccountSettings.


        :param slack_notifications: The slack_notifications of this AccountSettings.
        :type slack_notifications: bool
        """

        self._slack_notifications = slack_notifications

    @property
    def default_data_retention(self) -> str:
        """Gets the default_data_retention of this AccountSettings.


        :return: The default_data_retention of this AccountSettings.
        :rtype: str
        """
        return self._default_data_retention

    @default_data_retention.setter
    def default_data_retention(self, default_data_retention: str):
        """Sets the default_data_retention of this AccountSettings.


        :param default_data_retention: The default_data_retention of this AccountSettings.
        :type default_data_retention: str
        """

        self._default_data_retention = default_data_retention

    @property
    def auto_purge_enabled(self) -> bool:
        """Gets the auto_purge_enabled of this AccountSettings.


        :return: The auto_purge_enabled of this AccountSettings.
        :rtype: bool
        """
        return self._auto_purge_enabled

    @auto_purge_enabled.setter
    def auto_purge_enabled(self, auto_purge_enabled: bool):
        """Sets the auto_purge_enabled of this AccountSettings.


        :param auto_purge_enabled: The auto_purge_enabled of this AccountSettings.
        :type auto_purge_enabled: bool
        """

        self._auto_purge_enabled = auto_purge_enabled

    @property
    def require2fa(self) -> bool:
        """Gets the require2fa of this AccountSettings.


        :return: The require2fa of this AccountSettings.
        :rtype: bool
        """
        return self._require2fa

    @require2fa.setter
    def require2fa(self, require2fa: bool):
        """Sets the require2fa of this AccountSettings.


        :param require2fa: The require2fa of this AccountSettings.
        :type require2fa: bool
        """

        self._require2fa = require2fa

    @property
    def session_timeout(self) -> str:
        """Gets the session_timeout of this AccountSettings.


        :return: The session_timeout of this AccountSettings.
        :rtype: str
        """
        return self._session_timeout

    @session_timeout.setter
    def session_timeout(self, session_timeout: str):
        """Sets the session_timeout of this AccountSettings.


        :param session_timeout: The session_timeout of this AccountSettings.
        :type session_timeout: str
        """

        self._session_timeout = session_timeout

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this AccountSettings.


        :return: The created_at of this AccountSettings.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this AccountSettings.


        :param created_at: The created_at of this AccountSettings.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this AccountSettings.


        :return: The updated_at of this AccountSettings.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this AccountSettings.


        :param updated_at: The updated_at of this AccountSettings.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self) -> datetime:
        """Gets the deleted_at of this AccountSettings.


        :return: The deleted_at of this AccountSettings.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: datetime):
        """Sets the deleted_at of this AccountSettings.


        :param deleted_at: The deleted_at of this AccountSettings.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at
