from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class ActivityMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_files=None, total_folders=None, active_users=None, storage_used=None, storage_usage_percentage=None):  # noqa: E501
        """ActivityMetrics - a model defined in OpenAPI

        :param total_files: The total_files of this ActivityMetrics.  # noqa: E501
        :type total_files: int
        :param total_folders: The total_folders of this ActivityMetrics.  # noqa: E501
        :type total_folders: int
        :param active_users: The active_users of this ActivityMetrics.  # noqa: E501
        :type active_users: int
        :param storage_used: The storage_used of this ActivityMetrics.  # noqa: E501
        :type storage_used: str
        :param storage_usage_percentage: The storage_usage_percentage of this ActivityMetrics.  # noqa: E501
        :type storage_usage_percentage: float
        """
        self.openapi_types = {
            'total_files': int,
            'total_folders': int,
            'active_users': int,
            'storage_used': str,
            'storage_usage_percentage': float
        }

        self.attribute_map = {
            'total_files': 'totalFiles',
            'total_folders': 'totalFolders',
            'active_users': 'activeUsers',
            'storage_used': 'storageUsed',
            'storage_usage_percentage': 'storageUsagePercentage'
        }

        self._total_files = total_files
        self._total_folders = total_folders
        self._active_users = active_users
        self._storage_used = storage_used
        self._storage_usage_percentage = storage_usage_percentage

    @classmethod
    def from_dict(cls, dikt) -> 'ActivityMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ActivityMetrics of this ActivityMetrics.  # noqa: E501
        :rtype: ActivityMetrics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_files(self) -> int:
        """Gets the total_files of this ActivityMetrics.


        :return: The total_files of this ActivityMetrics.
        :rtype: int
        """
        return self._total_files

    @total_files.setter
    def total_files(self, total_files: int):
        """Sets the total_files of this ActivityMetrics.


        :param total_files: The total_files of this ActivityMetrics.
        :type total_files: int
        """

        self._total_files = total_files

    @property
    def total_folders(self) -> int:
        """Gets the total_folders of this ActivityMetrics.


        :return: The total_folders of this ActivityMetrics.
        :rtype: int
        """
        return self._total_folders

    @total_folders.setter
    def total_folders(self, total_folders: int):
        """Sets the total_folders of this ActivityMetrics.


        :param total_folders: The total_folders of this ActivityMetrics.
        :type total_folders: int
        """

        self._total_folders = total_folders

    @property
    def active_users(self) -> int:
        """Gets the active_users of this ActivityMetrics.


        :return: The active_users of this ActivityMetrics.
        :rtype: int
        """
        return self._active_users

    @active_users.setter
    def active_users(self, active_users: int):
        """Sets the active_users of this ActivityMetrics.


        :param active_users: The active_users of this ActivityMetrics.
        :type active_users: int
        """

        self._active_users = active_users

    @property
    def storage_used(self) -> str:
        """Gets the storage_used of this ActivityMetrics.


        :return: The storage_used of this ActivityMetrics.
        :rtype: str
        """
        return self._storage_used

    @storage_used.setter
    def storage_used(self, storage_used: str):
        """Sets the storage_used of this ActivityMetrics.


        :param storage_used: The storage_used of this ActivityMetrics.
        :type storage_used: str
        """

        self._storage_used = storage_used

    @property
    def storage_usage_percentage(self) -> float:
        """Gets the storage_usage_percentage of this ActivityMetrics.


        :return: The storage_usage_percentage of this ActivityMetrics.
        :rtype: float
        """
        return self._storage_usage_percentage

    @storage_usage_percentage.setter
    def storage_usage_percentage(self, storage_usage_percentage: float):
        """Sets the storage_usage_percentage of this ActivityMetrics.


        :param storage_usage_percentage: The storage_usage_percentage of this ActivityMetrics.
        :type storage_usage_percentage: float
        """

        self._storage_usage_percentage = storage_usage_percentage
