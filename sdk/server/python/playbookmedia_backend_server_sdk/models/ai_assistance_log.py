from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class AIAssistanceLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, document_id=None, interaction_type=None, user_query=None, ai_response=None, context=None, created_at=None):  # noqa: E501
        """AIAssistanceLog - a model defined in OpenAPI

        :param id: The id of this AIAssistanceLog.  # noqa: E501
        :type id: str
        :param document_id: The document_id of this AIAssistanceLog.  # noqa: E501
        :type document_id: str
        :param interaction_type: The interaction_type of this AIAssistanceLog.  # noqa: E501
        :type interaction_type: str
        :param user_query: The user_query of this AIAssistanceLog.  # noqa: E501
        :type user_query: str
        :param ai_response: The ai_response of this AIAssistanceLog.  # noqa: E501
        :type ai_response: str
        :param context: The context of this AIAssistanceLog.  # noqa: E501
        :type context: Dict[str, str]
        :param created_at: The created_at of this AIAssistanceLog.  # noqa: E501
        :type created_at: datetime
        """
        self.openapi_types = {
            'id': str,
            'document_id': str,
            'interaction_type': str,
            'user_query': str,
            'ai_response': str,
            'context': Dict[str, str],
            'created_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'document_id': 'documentId',
            'interaction_type': 'interactionType',
            'user_query': 'userQuery',
            'ai_response': 'aiResponse',
            'context': 'context',
            'created_at': 'createdAt'
        }

        self._id = id
        self._document_id = document_id
        self._interaction_type = interaction_type
        self._user_query = user_query
        self._ai_response = ai_response
        self._context = context
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt) -> 'AIAssistanceLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AIAssistanceLog of this AIAssistanceLog.  # noqa: E501
        :rtype: AIAssistanceLog
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this AIAssistanceLog.


        :return: The id of this AIAssistanceLog.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this AIAssistanceLog.


        :param id: The id of this AIAssistanceLog.
        :type id: str
        """

        self._id = id

    @property
    def document_id(self) -> str:
        """Gets the document_id of this AIAssistanceLog.


        :return: The document_id of this AIAssistanceLog.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id: str):
        """Sets the document_id of this AIAssistanceLog.


        :param document_id: The document_id of this AIAssistanceLog.
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def interaction_type(self) -> str:
        """Gets the interaction_type of this AIAssistanceLog.


        :return: The interaction_type of this AIAssistanceLog.
        :rtype: str
        """
        return self._interaction_type

    @interaction_type.setter
    def interaction_type(self, interaction_type: str):
        """Sets the interaction_type of this AIAssistanceLog.


        :param interaction_type: The interaction_type of this AIAssistanceLog.
        :type interaction_type: str
        """

        self._interaction_type = interaction_type

    @property
    def user_query(self) -> str:
        """Gets the user_query of this AIAssistanceLog.


        :return: The user_query of this AIAssistanceLog.
        :rtype: str
        """
        return self._user_query

    @user_query.setter
    def user_query(self, user_query: str):
        """Sets the user_query of this AIAssistanceLog.


        :param user_query: The user_query of this AIAssistanceLog.
        :type user_query: str
        """

        self._user_query = user_query

    @property
    def ai_response(self) -> str:
        """Gets the ai_response of this AIAssistanceLog.


        :return: The ai_response of this AIAssistanceLog.
        :rtype: str
        """
        return self._ai_response

    @ai_response.setter
    def ai_response(self, ai_response: str):
        """Sets the ai_response of this AIAssistanceLog.


        :param ai_response: The ai_response of this AIAssistanceLog.
        :type ai_response: str
        """

        self._ai_response = ai_response

    @property
    def context(self) -> Dict[str, str]:
        """Gets the context of this AIAssistanceLog.


        :return: The context of this AIAssistanceLog.
        :rtype: Dict[str, str]
        """
        return self._context

    @context.setter
    def context(self, context: Dict[str, str]):
        """Sets the context of this AIAssistanceLog.


        :param context: The context of this AIAssistanceLog.
        :type context: Dict[str, str]
        """

        self._context = context

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this AIAssistanceLog.


        :return: The created_at of this AIAssistanceLog.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this AIAssistanceLog.


        :param created_at: The created_at of this AIAssistanceLog.
        :type created_at: datetime
        """

        self._created_at = created_at
