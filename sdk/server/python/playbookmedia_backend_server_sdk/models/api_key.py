from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.v1_status import V1Status
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.v1_status import V1Status  # noqa: E501

class APIKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, key_hash=None, key_prefix=None, scopes=None, allowed_ips=None, allowed_domains=None, allowed_environments=None, is_test_key=None, requests_per_second=None, requests_per_day=None, concurrent_requests=None, monthly_request_quota=None, cost_per_request=None, billing_tier=None, total_requests=None, total_errors=None, last_used_at=None, average_response_time=None, endpoint_usage_json=None, error_rates_json=None, recent_errors=None, successful_requests_count=None, success_rate=None, status=V1Status.UNSPECIFIED, created_at=None, updated_at=None, expires_at=None, deleted_at=None, last_rotated_at=None, last_security_review_at=None, requires_client_secret=None, client_secret_hash=None, enforce_https=None, enforce_signing=None, allowed_signature_algorithms=None, enforce_mutual_tls=None, client_certificate_hash=None, require_request_signing=None, description=None, metadata_json=None, tags=None, api_version=None, supported_features=None, documentation_url=None, support_contact=None, log_all_requests=None, last_rotation_reason=None, last_rotation_date=None, rotation_frequency_days=None, compliance_standards=None, requires_audit_logging=None, data_residency=None, approved_integrations=None, alert_emails=None, webhook_url=None, alert_on_quota_threshold=None, quota_alert_threshold=None, alert_on_error_spike=None, error_alert_threshold=None, monitoring_integrations=None, encrypted=None, data_classification=None):  # noqa: E501
        """APIKey - a model defined in OpenAPI

        :param id: The id of this APIKey.  # noqa: E501
        :type id: str
        :param name: The name of this APIKey.  # noqa: E501
        :type name: str
        :param key_hash: The key_hash of this APIKey.  # noqa: E501
        :type key_hash: str
        :param key_prefix: The key_prefix of this APIKey.  # noqa: E501
        :type key_prefix: str
        :param scopes: The scopes of this APIKey.  # noqa: E501
        :type scopes: List[str]
        :param allowed_ips: The allowed_ips of this APIKey.  # noqa: E501
        :type allowed_ips: List[str]
        :param allowed_domains: The allowed_domains of this APIKey.  # noqa: E501
        :type allowed_domains: List[str]
        :param allowed_environments: The allowed_environments of this APIKey.  # noqa: E501
        :type allowed_environments: List[str]
        :param is_test_key: The is_test_key of this APIKey.  # noqa: E501
        :type is_test_key: bool
        :param requests_per_second: The requests_per_second of this APIKey.  # noqa: E501
        :type requests_per_second: int
        :param requests_per_day: The requests_per_day of this APIKey.  # noqa: E501
        :type requests_per_day: int
        :param concurrent_requests: The concurrent_requests of this APIKey.  # noqa: E501
        :type concurrent_requests: int
        :param monthly_request_quota: The monthly_request_quota of this APIKey.  # noqa: E501
        :type monthly_request_quota: str
        :param cost_per_request: The cost_per_request of this APIKey.  # noqa: E501
        :type cost_per_request: float
        :param billing_tier: The billing_tier of this APIKey.  # noqa: E501
        :type billing_tier: str
        :param total_requests: The total_requests of this APIKey.  # noqa: E501
        :type total_requests: str
        :param total_errors: The total_errors of this APIKey.  # noqa: E501
        :type total_errors: str
        :param last_used_at: The last_used_at of this APIKey.  # noqa: E501
        :type last_used_at: datetime
        :param average_response_time: The average_response_time of this APIKey.  # noqa: E501
        :type average_response_time: float
        :param endpoint_usage_json: The endpoint_usage_json of this APIKey.  # noqa: E501
        :type endpoint_usage_json: str
        :param error_rates_json: The error_rates_json of this APIKey.  # noqa: E501
        :type error_rates_json: str
        :param recent_errors: The recent_errors of this APIKey.  # noqa: E501
        :type recent_errors: str
        :param successful_requests_count: The successful_requests_count of this APIKey.  # noqa: E501
        :type successful_requests_count: int
        :param success_rate: The success_rate of this APIKey.  # noqa: E501
        :type success_rate: float
        :param status: The status of this APIKey.  # noqa: E501
        :type status: V1Status
        :param created_at: The created_at of this APIKey.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this APIKey.  # noqa: E501
        :type updated_at: datetime
        :param expires_at: The expires_at of this APIKey.  # noqa: E501
        :type expires_at: datetime
        :param deleted_at: The deleted_at of this APIKey.  # noqa: E501
        :type deleted_at: datetime
        :param last_rotated_at: The last_rotated_at of this APIKey.  # noqa: E501
        :type last_rotated_at: datetime
        :param last_security_review_at: The last_security_review_at of this APIKey.  # noqa: E501
        :type last_security_review_at: datetime
        :param requires_client_secret: The requires_client_secret of this APIKey.  # noqa: E501
        :type requires_client_secret: bool
        :param client_secret_hash: The client_secret_hash of this APIKey.  # noqa: E501
        :type client_secret_hash: str
        :param enforce_https: The enforce_https of this APIKey.  # noqa: E501
        :type enforce_https: bool
        :param enforce_signing: The enforce_signing of this APIKey.  # noqa: E501
        :type enforce_signing: bool
        :param allowed_signature_algorithms: The allowed_signature_algorithms of this APIKey.  # noqa: E501
        :type allowed_signature_algorithms: List[str]
        :param enforce_mutual_tls: The enforce_mutual_tls of this APIKey.  # noqa: E501
        :type enforce_mutual_tls: bool
        :param client_certificate_hash: The client_certificate_hash of this APIKey.  # noqa: E501
        :type client_certificate_hash: str
        :param require_request_signing: The require_request_signing of this APIKey.  # noqa: E501
        :type require_request_signing: bool
        :param description: The description of this APIKey.  # noqa: E501
        :type description: str
        :param metadata_json: The metadata_json of this APIKey.  # noqa: E501
        :type metadata_json: str
        :param tags: The tags of this APIKey.  # noqa: E501
        :type tags: List[str]
        :param api_version: The api_version of this APIKey.  # noqa: E501
        :type api_version: str
        :param supported_features: The supported_features of this APIKey.  # noqa: E501
        :type supported_features: List[str]
        :param documentation_url: The documentation_url of this APIKey.  # noqa: E501
        :type documentation_url: str
        :param support_contact: The support_contact of this APIKey.  # noqa: E501
        :type support_contact: str
        :param log_all_requests: The log_all_requests of this APIKey.  # noqa: E501
        :type log_all_requests: bool
        :param last_rotation_reason: The last_rotation_reason of this APIKey.  # noqa: E501
        :type last_rotation_reason: str
        :param last_rotation_date: The last_rotation_date of this APIKey.  # noqa: E501
        :type last_rotation_date: datetime
        :param rotation_frequency_days: The rotation_frequency_days of this APIKey.  # noqa: E501
        :type rotation_frequency_days: int
        :param compliance_standards: The compliance_standards of this APIKey.  # noqa: E501
        :type compliance_standards: List[str]
        :param requires_audit_logging: The requires_audit_logging of this APIKey.  # noqa: E501
        :type requires_audit_logging: bool
        :param data_residency: The data_residency of this APIKey.  # noqa: E501
        :type data_residency: str
        :param approved_integrations: The approved_integrations of this APIKey.  # noqa: E501
        :type approved_integrations: List[str]
        :param alert_emails: The alert_emails of this APIKey.  # noqa: E501
        :type alert_emails: List[str]
        :param webhook_url: The webhook_url of this APIKey.  # noqa: E501
        :type webhook_url: str
        :param alert_on_quota_threshold: The alert_on_quota_threshold of this APIKey.  # noqa: E501
        :type alert_on_quota_threshold: bool
        :param quota_alert_threshold: The quota_alert_threshold of this APIKey.  # noqa: E501
        :type quota_alert_threshold: float
        :param alert_on_error_spike: The alert_on_error_spike of this APIKey.  # noqa: E501
        :type alert_on_error_spike: bool
        :param error_alert_threshold: The error_alert_threshold of this APIKey.  # noqa: E501
        :type error_alert_threshold: float
        :param monitoring_integrations: The monitoring_integrations of this APIKey.  # noqa: E501
        :type monitoring_integrations: List[str]
        :param encrypted: The encrypted of this APIKey.  # noqa: E501
        :type encrypted: bool
        :param data_classification: The data_classification of this APIKey.  # noqa: E501
        :type data_classification: str
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'key_hash': str,
            'key_prefix': str,
            'scopes': List[str],
            'allowed_ips': List[str],
            'allowed_domains': List[str],
            'allowed_environments': List[str],
            'is_test_key': bool,
            'requests_per_second': int,
            'requests_per_day': int,
            'concurrent_requests': int,
            'monthly_request_quota': str,
            'cost_per_request': float,
            'billing_tier': str,
            'total_requests': str,
            'total_errors': str,
            'last_used_at': datetime,
            'average_response_time': float,
            'endpoint_usage_json': str,
            'error_rates_json': str,
            'recent_errors': str,
            'successful_requests_count': int,
            'success_rate': float,
            'status': V1Status,
            'created_at': datetime,
            'updated_at': datetime,
            'expires_at': datetime,
            'deleted_at': datetime,
            'last_rotated_at': datetime,
            'last_security_review_at': datetime,
            'requires_client_secret': bool,
            'client_secret_hash': str,
            'enforce_https': bool,
            'enforce_signing': bool,
            'allowed_signature_algorithms': List[str],
            'enforce_mutual_tls': bool,
            'client_certificate_hash': str,
            'require_request_signing': bool,
            'description': str,
            'metadata_json': str,
            'tags': List[str],
            'api_version': str,
            'supported_features': List[str],
            'documentation_url': str,
            'support_contact': str,
            'log_all_requests': bool,
            'last_rotation_reason': str,
            'last_rotation_date': datetime,
            'rotation_frequency_days': int,
            'compliance_standards': List[str],
            'requires_audit_logging': bool,
            'data_residency': str,
            'approved_integrations': List[str],
            'alert_emails': List[str],
            'webhook_url': str,
            'alert_on_quota_threshold': bool,
            'quota_alert_threshold': float,
            'alert_on_error_spike': bool,
            'error_alert_threshold': float,
            'monitoring_integrations': List[str],
            'encrypted': bool,
            'data_classification': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'key_hash': 'keyHash',
            'key_prefix': 'keyPrefix',
            'scopes': 'scopes',
            'allowed_ips': 'allowedIps',
            'allowed_domains': 'allowedDomains',
            'allowed_environments': 'allowedEnvironments',
            'is_test_key': 'isTestKey',
            'requests_per_second': 'requestsPerSecond',
            'requests_per_day': 'requestsPerDay',
            'concurrent_requests': 'concurrentRequests',
            'monthly_request_quota': 'monthlyRequestQuota',
            'cost_per_request': 'costPerRequest',
            'billing_tier': 'billingTier',
            'total_requests': 'totalRequests',
            'total_errors': 'totalErrors',
            'last_used_at': 'lastUsedAt',
            'average_response_time': 'averageResponseTime',
            'endpoint_usage_json': 'endpointUsageJson',
            'error_rates_json': 'errorRatesJson',
            'recent_errors': 'recentErrors',
            'successful_requests_count': 'successfulRequestsCount',
            'success_rate': 'successRate',
            'status': 'status',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'expires_at': 'expiresAt',
            'deleted_at': 'deletedAt',
            'last_rotated_at': 'lastRotatedAt',
            'last_security_review_at': 'lastSecurityReviewAt',
            'requires_client_secret': 'requiresClientSecret',
            'client_secret_hash': 'clientSecretHash',
            'enforce_https': 'enforceHttps',
            'enforce_signing': 'enforceSigning',
            'allowed_signature_algorithms': 'allowedSignatureAlgorithms',
            'enforce_mutual_tls': 'enforceMutualTls',
            'client_certificate_hash': 'clientCertificateHash',
            'require_request_signing': 'requireRequestSigning',
            'description': 'description',
            'metadata_json': 'metadataJson',
            'tags': 'tags',
            'api_version': 'apiVersion',
            'supported_features': 'supportedFeatures',
            'documentation_url': 'documentationUrl',
            'support_contact': 'supportContact',
            'log_all_requests': 'logAllRequests',
            'last_rotation_reason': 'lastRotationReason',
            'last_rotation_date': 'lastRotationDate',
            'rotation_frequency_days': 'rotationFrequencyDays',
            'compliance_standards': 'complianceStandards',
            'requires_audit_logging': 'requiresAuditLogging',
            'data_residency': 'dataResidency',
            'approved_integrations': 'approvedIntegrations',
            'alert_emails': 'alertEmails',
            'webhook_url': 'webhookUrl',
            'alert_on_quota_threshold': 'alertOnQuotaThreshold',
            'quota_alert_threshold': 'quotaAlertThreshold',
            'alert_on_error_spike': 'alertOnErrorSpike',
            'error_alert_threshold': 'errorAlertThreshold',
            'monitoring_integrations': 'monitoringIntegrations',
            'encrypted': 'encrypted',
            'data_classification': 'dataClassification'
        }

        self._id = id
        self._name = name
        self._key_hash = key_hash
        self._key_prefix = key_prefix
        self._scopes = scopes
        self._allowed_ips = allowed_ips
        self._allowed_domains = allowed_domains
        self._allowed_environments = allowed_environments
        self._is_test_key = is_test_key
        self._requests_per_second = requests_per_second
        self._requests_per_day = requests_per_day
        self._concurrent_requests = concurrent_requests
        self._monthly_request_quota = monthly_request_quota
        self._cost_per_request = cost_per_request
        self._billing_tier = billing_tier
        self._total_requests = total_requests
        self._total_errors = total_errors
        self._last_used_at = last_used_at
        self._average_response_time = average_response_time
        self._endpoint_usage_json = endpoint_usage_json
        self._error_rates_json = error_rates_json
        self._recent_errors = recent_errors
        self._successful_requests_count = successful_requests_count
        self._success_rate = success_rate
        self._status = status
        self._created_at = created_at
        self._updated_at = updated_at
        self._expires_at = expires_at
        self._deleted_at = deleted_at
        self._last_rotated_at = last_rotated_at
        self._last_security_review_at = last_security_review_at
        self._requires_client_secret = requires_client_secret
        self._client_secret_hash = client_secret_hash
        self._enforce_https = enforce_https
        self._enforce_signing = enforce_signing
        self._allowed_signature_algorithms = allowed_signature_algorithms
        self._enforce_mutual_tls = enforce_mutual_tls
        self._client_certificate_hash = client_certificate_hash
        self._require_request_signing = require_request_signing
        self._description = description
        self._metadata_json = metadata_json
        self._tags = tags
        self._api_version = api_version
        self._supported_features = supported_features
        self._documentation_url = documentation_url
        self._support_contact = support_contact
        self._log_all_requests = log_all_requests
        self._last_rotation_reason = last_rotation_reason
        self._last_rotation_date = last_rotation_date
        self._rotation_frequency_days = rotation_frequency_days
        self._compliance_standards = compliance_standards
        self._requires_audit_logging = requires_audit_logging
        self._data_residency = data_residency
        self._approved_integrations = approved_integrations
        self._alert_emails = alert_emails
        self._webhook_url = webhook_url
        self._alert_on_quota_threshold = alert_on_quota_threshold
        self._quota_alert_threshold = quota_alert_threshold
        self._alert_on_error_spike = alert_on_error_spike
        self._error_alert_threshold = error_alert_threshold
        self._monitoring_integrations = monitoring_integrations
        self._encrypted = encrypted
        self._data_classification = data_classification

    @classmethod
    def from_dict(cls, dikt) -> 'APIKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The APIKey of this APIKey.  # noqa: E501
        :rtype: APIKey
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this APIKey.


        :return: The id of this APIKey.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this APIKey.


        :param id: The id of this APIKey.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this APIKey.


        :return: The name of this APIKey.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this APIKey.


        :param name: The name of this APIKey.
        :type name: str
        """

        self._name = name

    @property
    def key_hash(self) -> str:
        """Gets the key_hash of this APIKey.


        :return: The key_hash of this APIKey.
        :rtype: str
        """
        return self._key_hash

    @key_hash.setter
    def key_hash(self, key_hash: str):
        """Sets the key_hash of this APIKey.


        :param key_hash: The key_hash of this APIKey.
        :type key_hash: str
        """

        self._key_hash = key_hash

    @property
    def key_prefix(self) -> str:
        """Gets the key_prefix of this APIKey.


        :return: The key_prefix of this APIKey.
        :rtype: str
        """
        return self._key_prefix

    @key_prefix.setter
    def key_prefix(self, key_prefix: str):
        """Sets the key_prefix of this APIKey.


        :param key_prefix: The key_prefix of this APIKey.
        :type key_prefix: str
        """

        self._key_prefix = key_prefix

    @property
    def scopes(self) -> List[str]:
        """Gets the scopes of this APIKey.


        :return: The scopes of this APIKey.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes: List[str]):
        """Sets the scopes of this APIKey.


        :param scopes: The scopes of this APIKey.
        :type scopes: List[str]
        """

        self._scopes = scopes

    @property
    def allowed_ips(self) -> List[str]:
        """Gets the allowed_ips of this APIKey.


        :return: The allowed_ips of this APIKey.
        :rtype: List[str]
        """
        return self._allowed_ips

    @allowed_ips.setter
    def allowed_ips(self, allowed_ips: List[str]):
        """Sets the allowed_ips of this APIKey.


        :param allowed_ips: The allowed_ips of this APIKey.
        :type allowed_ips: List[str]
        """

        self._allowed_ips = allowed_ips

    @property
    def allowed_domains(self) -> List[str]:
        """Gets the allowed_domains of this APIKey.


        :return: The allowed_domains of this APIKey.
        :rtype: List[str]
        """
        return self._allowed_domains

    @allowed_domains.setter
    def allowed_domains(self, allowed_domains: List[str]):
        """Sets the allowed_domains of this APIKey.


        :param allowed_domains: The allowed_domains of this APIKey.
        :type allowed_domains: List[str]
        """

        self._allowed_domains = allowed_domains

    @property
    def allowed_environments(self) -> List[str]:
        """Gets the allowed_environments of this APIKey.


        :return: The allowed_environments of this APIKey.
        :rtype: List[str]
        """
        return self._allowed_environments

    @allowed_environments.setter
    def allowed_environments(self, allowed_environments: List[str]):
        """Sets the allowed_environments of this APIKey.


        :param allowed_environments: The allowed_environments of this APIKey.
        :type allowed_environments: List[str]
        """

        self._allowed_environments = allowed_environments

    @property
    def is_test_key(self) -> bool:
        """Gets the is_test_key of this APIKey.


        :return: The is_test_key of this APIKey.
        :rtype: bool
        """
        return self._is_test_key

    @is_test_key.setter
    def is_test_key(self, is_test_key: bool):
        """Sets the is_test_key of this APIKey.


        :param is_test_key: The is_test_key of this APIKey.
        :type is_test_key: bool
        """

        self._is_test_key = is_test_key

    @property
    def requests_per_second(self) -> int:
        """Gets the requests_per_second of this APIKey.


        :return: The requests_per_second of this APIKey.
        :rtype: int
        """
        return self._requests_per_second

    @requests_per_second.setter
    def requests_per_second(self, requests_per_second: int):
        """Sets the requests_per_second of this APIKey.


        :param requests_per_second: The requests_per_second of this APIKey.
        :type requests_per_second: int
        """

        self._requests_per_second = requests_per_second

    @property
    def requests_per_day(self) -> int:
        """Gets the requests_per_day of this APIKey.


        :return: The requests_per_day of this APIKey.
        :rtype: int
        """
        return self._requests_per_day

    @requests_per_day.setter
    def requests_per_day(self, requests_per_day: int):
        """Sets the requests_per_day of this APIKey.


        :param requests_per_day: The requests_per_day of this APIKey.
        :type requests_per_day: int
        """

        self._requests_per_day = requests_per_day

    @property
    def concurrent_requests(self) -> int:
        """Gets the concurrent_requests of this APIKey.


        :return: The concurrent_requests of this APIKey.
        :rtype: int
        """
        return self._concurrent_requests

    @concurrent_requests.setter
    def concurrent_requests(self, concurrent_requests: int):
        """Sets the concurrent_requests of this APIKey.


        :param concurrent_requests: The concurrent_requests of this APIKey.
        :type concurrent_requests: int
        """

        self._concurrent_requests = concurrent_requests

    @property
    def monthly_request_quota(self) -> str:
        """Gets the monthly_request_quota of this APIKey.


        :return: The monthly_request_quota of this APIKey.
        :rtype: str
        """
        return self._monthly_request_quota

    @monthly_request_quota.setter
    def monthly_request_quota(self, monthly_request_quota: str):
        """Sets the monthly_request_quota of this APIKey.


        :param monthly_request_quota: The monthly_request_quota of this APIKey.
        :type monthly_request_quota: str
        """

        self._monthly_request_quota = monthly_request_quota

    @property
    def cost_per_request(self) -> float:
        """Gets the cost_per_request of this APIKey.


        :return: The cost_per_request of this APIKey.
        :rtype: float
        """
        return self._cost_per_request

    @cost_per_request.setter
    def cost_per_request(self, cost_per_request: float):
        """Sets the cost_per_request of this APIKey.


        :param cost_per_request: The cost_per_request of this APIKey.
        :type cost_per_request: float
        """

        self._cost_per_request = cost_per_request

    @property
    def billing_tier(self) -> str:
        """Gets the billing_tier of this APIKey.


        :return: The billing_tier of this APIKey.
        :rtype: str
        """
        return self._billing_tier

    @billing_tier.setter
    def billing_tier(self, billing_tier: str):
        """Sets the billing_tier of this APIKey.


        :param billing_tier: The billing_tier of this APIKey.
        :type billing_tier: str
        """

        self._billing_tier = billing_tier

    @property
    def total_requests(self) -> str:
        """Gets the total_requests of this APIKey.


        :return: The total_requests of this APIKey.
        :rtype: str
        """
        return self._total_requests

    @total_requests.setter
    def total_requests(self, total_requests: str):
        """Sets the total_requests of this APIKey.


        :param total_requests: The total_requests of this APIKey.
        :type total_requests: str
        """

        self._total_requests = total_requests

    @property
    def total_errors(self) -> str:
        """Gets the total_errors of this APIKey.


        :return: The total_errors of this APIKey.
        :rtype: str
        """
        return self._total_errors

    @total_errors.setter
    def total_errors(self, total_errors: str):
        """Sets the total_errors of this APIKey.


        :param total_errors: The total_errors of this APIKey.
        :type total_errors: str
        """

        self._total_errors = total_errors

    @property
    def last_used_at(self) -> datetime:
        """Gets the last_used_at of this APIKey.


        :return: The last_used_at of this APIKey.
        :rtype: datetime
        """
        return self._last_used_at

    @last_used_at.setter
    def last_used_at(self, last_used_at: datetime):
        """Sets the last_used_at of this APIKey.


        :param last_used_at: The last_used_at of this APIKey.
        :type last_used_at: datetime
        """

        self._last_used_at = last_used_at

    @property
    def average_response_time(self) -> float:
        """Gets the average_response_time of this APIKey.


        :return: The average_response_time of this APIKey.
        :rtype: float
        """
        return self._average_response_time

    @average_response_time.setter
    def average_response_time(self, average_response_time: float):
        """Sets the average_response_time of this APIKey.


        :param average_response_time: The average_response_time of this APIKey.
        :type average_response_time: float
        """

        self._average_response_time = average_response_time

    @property
    def endpoint_usage_json(self) -> str:
        """Gets the endpoint_usage_json of this APIKey.

        Tracks usage per endpoint  # noqa: E501

        :return: The endpoint_usage_json of this APIKey.
        :rtype: str
        """
        return self._endpoint_usage_json

    @endpoint_usage_json.setter
    def endpoint_usage_json(self, endpoint_usage_json: str):
        """Sets the endpoint_usage_json of this APIKey.

        Tracks usage per endpoint  # noqa: E501

        :param endpoint_usage_json: The endpoint_usage_json of this APIKey.
        :type endpoint_usage_json: str
        """

        self._endpoint_usage_json = endpoint_usage_json

    @property
    def error_rates_json(self) -> str:
        """Gets the error_rates_json of this APIKey.


        :return: The error_rates_json of this APIKey.
        :rtype: str
        """
        return self._error_rates_json

    @error_rates_json.setter
    def error_rates_json(self, error_rates_json: str):
        """Sets the error_rates_json of this APIKey.


        :param error_rates_json: The error_rates_json of this APIKey.
        :type error_rates_json: str
        """

        self._error_rates_json = error_rates_json

    @property
    def recent_errors(self) -> str:
        """Gets the recent_errors of this APIKey.


        :return: The recent_errors of this APIKey.
        :rtype: str
        """
        return self._recent_errors

    @recent_errors.setter
    def recent_errors(self, recent_errors: str):
        """Sets the recent_errors of this APIKey.


        :param recent_errors: The recent_errors of this APIKey.
        :type recent_errors: str
        """

        self._recent_errors = recent_errors

    @property
    def successful_requests_count(self) -> int:
        """Gets the successful_requests_count of this APIKey.


        :return: The successful_requests_count of this APIKey.
        :rtype: int
        """
        return self._successful_requests_count

    @successful_requests_count.setter
    def successful_requests_count(self, successful_requests_count: int):
        """Sets the successful_requests_count of this APIKey.


        :param successful_requests_count: The successful_requests_count of this APIKey.
        :type successful_requests_count: int
        """

        self._successful_requests_count = successful_requests_count

    @property
    def success_rate(self) -> float:
        """Gets the success_rate of this APIKey.


        :return: The success_rate of this APIKey.
        :rtype: float
        """
        return self._success_rate

    @success_rate.setter
    def success_rate(self, success_rate: float):
        """Sets the success_rate of this APIKey.


        :param success_rate: The success_rate of this APIKey.
        :type success_rate: float
        """

        self._success_rate = success_rate

    @property
    def status(self) -> V1Status:
        """Gets the status of this APIKey.


        :return: The status of this APIKey.
        :rtype: V1Status
        """
        return self._status

    @status.setter
    def status(self, status: V1Status):
        """Sets the status of this APIKey.


        :param status: The status of this APIKey.
        :type status: V1Status
        """

        self._status = status

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this APIKey.


        :return: The created_at of this APIKey.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this APIKey.


        :param created_at: The created_at of this APIKey.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this APIKey.


        :return: The updated_at of this APIKey.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this APIKey.


        :param updated_at: The updated_at of this APIKey.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def expires_at(self) -> datetime:
        """Gets the expires_at of this APIKey.


        :return: The expires_at of this APIKey.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at: datetime):
        """Sets the expires_at of this APIKey.


        :param expires_at: The expires_at of this APIKey.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def deleted_at(self) -> datetime:
        """Gets the deleted_at of this APIKey.


        :return: The deleted_at of this APIKey.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: datetime):
        """Sets the deleted_at of this APIKey.


        :param deleted_at: The deleted_at of this APIKey.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def last_rotated_at(self) -> datetime:
        """Gets the last_rotated_at of this APIKey.


        :return: The last_rotated_at of this APIKey.
        :rtype: datetime
        """
        return self._last_rotated_at

    @last_rotated_at.setter
    def last_rotated_at(self, last_rotated_at: datetime):
        """Sets the last_rotated_at of this APIKey.


        :param last_rotated_at: The last_rotated_at of this APIKey.
        :type last_rotated_at: datetime
        """

        self._last_rotated_at = last_rotated_at

    @property
    def last_security_review_at(self) -> datetime:
        """Gets the last_security_review_at of this APIKey.


        :return: The last_security_review_at of this APIKey.
        :rtype: datetime
        """
        return self._last_security_review_at

    @last_security_review_at.setter
    def last_security_review_at(self, last_security_review_at: datetime):
        """Sets the last_security_review_at of this APIKey.


        :param last_security_review_at: The last_security_review_at of this APIKey.
        :type last_security_review_at: datetime
        """

        self._last_security_review_at = last_security_review_at

    @property
    def requires_client_secret(self) -> bool:
        """Gets the requires_client_secret of this APIKey.


        :return: The requires_client_secret of this APIKey.
        :rtype: bool
        """
        return self._requires_client_secret

    @requires_client_secret.setter
    def requires_client_secret(self, requires_client_secret: bool):
        """Sets the requires_client_secret of this APIKey.


        :param requires_client_secret: The requires_client_secret of this APIKey.
        :type requires_client_secret: bool
        """

        self._requires_client_secret = requires_client_secret

    @property
    def client_secret_hash(self) -> str:
        """Gets the client_secret_hash of this APIKey.


        :return: The client_secret_hash of this APIKey.
        :rtype: str
        """
        return self._client_secret_hash

    @client_secret_hash.setter
    def client_secret_hash(self, client_secret_hash: str):
        """Sets the client_secret_hash of this APIKey.


        :param client_secret_hash: The client_secret_hash of this APIKey.
        :type client_secret_hash: str
        """

        self._client_secret_hash = client_secret_hash

    @property
    def enforce_https(self) -> bool:
        """Gets the enforce_https of this APIKey.


        :return: The enforce_https of this APIKey.
        :rtype: bool
        """
        return self._enforce_https

    @enforce_https.setter
    def enforce_https(self, enforce_https: bool):
        """Sets the enforce_https of this APIKey.


        :param enforce_https: The enforce_https of this APIKey.
        :type enforce_https: bool
        """

        self._enforce_https = enforce_https

    @property
    def enforce_signing(self) -> bool:
        """Gets the enforce_signing of this APIKey.


        :return: The enforce_signing of this APIKey.
        :rtype: bool
        """
        return self._enforce_signing

    @enforce_signing.setter
    def enforce_signing(self, enforce_signing: bool):
        """Sets the enforce_signing of this APIKey.


        :param enforce_signing: The enforce_signing of this APIKey.
        :type enforce_signing: bool
        """

        self._enforce_signing = enforce_signing

    @property
    def allowed_signature_algorithms(self) -> List[str]:
        """Gets the allowed_signature_algorithms of this APIKey.


        :return: The allowed_signature_algorithms of this APIKey.
        :rtype: List[str]
        """
        return self._allowed_signature_algorithms

    @allowed_signature_algorithms.setter
    def allowed_signature_algorithms(self, allowed_signature_algorithms: List[str]):
        """Sets the allowed_signature_algorithms of this APIKey.


        :param allowed_signature_algorithms: The allowed_signature_algorithms of this APIKey.
        :type allowed_signature_algorithms: List[str]
        """

        self._allowed_signature_algorithms = allowed_signature_algorithms

    @property
    def enforce_mutual_tls(self) -> bool:
        """Gets the enforce_mutual_tls of this APIKey.


        :return: The enforce_mutual_tls of this APIKey.
        :rtype: bool
        """
        return self._enforce_mutual_tls

    @enforce_mutual_tls.setter
    def enforce_mutual_tls(self, enforce_mutual_tls: bool):
        """Sets the enforce_mutual_tls of this APIKey.


        :param enforce_mutual_tls: The enforce_mutual_tls of this APIKey.
        :type enforce_mutual_tls: bool
        """

        self._enforce_mutual_tls = enforce_mutual_tls

    @property
    def client_certificate_hash(self) -> str:
        """Gets the client_certificate_hash of this APIKey.


        :return: The client_certificate_hash of this APIKey.
        :rtype: str
        """
        return self._client_certificate_hash

    @client_certificate_hash.setter
    def client_certificate_hash(self, client_certificate_hash: str):
        """Sets the client_certificate_hash of this APIKey.


        :param client_certificate_hash: The client_certificate_hash of this APIKey.
        :type client_certificate_hash: str
        """

        self._client_certificate_hash = client_certificate_hash

    @property
    def require_request_signing(self) -> bool:
        """Gets the require_request_signing of this APIKey.


        :return: The require_request_signing of this APIKey.
        :rtype: bool
        """
        return self._require_request_signing

    @require_request_signing.setter
    def require_request_signing(self, require_request_signing: bool):
        """Sets the require_request_signing of this APIKey.


        :param require_request_signing: The require_request_signing of this APIKey.
        :type require_request_signing: bool
        """

        self._require_request_signing = require_request_signing

    @property
    def description(self) -> str:
        """Gets the description of this APIKey.

        Detailed description of key usage  # noqa: E501

        :return: The description of this APIKey.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this APIKey.

        Detailed description of key usage  # noqa: E501

        :param description: The description of this APIKey.
        :type description: str
        """

        self._description = description

    @property
    def metadata_json(self) -> str:
        """Gets the metadata_json of this APIKey.


        :return: The metadata_json of this APIKey.
        :rtype: str
        """
        return self._metadata_json

    @metadata_json.setter
    def metadata_json(self, metadata_json: str):
        """Sets the metadata_json of this APIKey.


        :param metadata_json: The metadata_json of this APIKey.
        :type metadata_json: str
        """

        self._metadata_json = metadata_json

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this APIKey.


        :return: The tags of this APIKey.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this APIKey.


        :param tags: The tags of this APIKey.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def api_version(self) -> str:
        """Gets the api_version of this APIKey.


        :return: The api_version of this APIKey.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version: str):
        """Sets the api_version of this APIKey.


        :param api_version: The api_version of this APIKey.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def supported_features(self) -> List[str]:
        """Gets the supported_features of this APIKey.


        :return: The supported_features of this APIKey.
        :rtype: List[str]
        """
        return self._supported_features

    @supported_features.setter
    def supported_features(self, supported_features: List[str]):
        """Sets the supported_features of this APIKey.


        :param supported_features: The supported_features of this APIKey.
        :type supported_features: List[str]
        """

        self._supported_features = supported_features

    @property
    def documentation_url(self) -> str:
        """Gets the documentation_url of this APIKey.


        :return: The documentation_url of this APIKey.
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url: str):
        """Sets the documentation_url of this APIKey.


        :param documentation_url: The documentation_url of this APIKey.
        :type documentation_url: str
        """

        self._documentation_url = documentation_url

    @property
    def support_contact(self) -> str:
        """Gets the support_contact of this APIKey.


        :return: The support_contact of this APIKey.
        :rtype: str
        """
        return self._support_contact

    @support_contact.setter
    def support_contact(self, support_contact: str):
        """Sets the support_contact of this APIKey.


        :param support_contact: The support_contact of this APIKey.
        :type support_contact: str
        """

        self._support_contact = support_contact

    @property
    def log_all_requests(self) -> bool:
        """Gets the log_all_requests of this APIKey.


        :return: The log_all_requests of this APIKey.
        :rtype: bool
        """
        return self._log_all_requests

    @log_all_requests.setter
    def log_all_requests(self, log_all_requests: bool):
        """Sets the log_all_requests of this APIKey.


        :param log_all_requests: The log_all_requests of this APIKey.
        :type log_all_requests: bool
        """

        self._log_all_requests = log_all_requests

    @property
    def last_rotation_reason(self) -> str:
        """Gets the last_rotation_reason of this APIKey.


        :return: The last_rotation_reason of this APIKey.
        :rtype: str
        """
        return self._last_rotation_reason

    @last_rotation_reason.setter
    def last_rotation_reason(self, last_rotation_reason: str):
        """Sets the last_rotation_reason of this APIKey.


        :param last_rotation_reason: The last_rotation_reason of this APIKey.
        :type last_rotation_reason: str
        """

        self._last_rotation_reason = last_rotation_reason

    @property
    def last_rotation_date(self) -> datetime:
        """Gets the last_rotation_date of this APIKey.


        :return: The last_rotation_date of this APIKey.
        :rtype: datetime
        """
        return self._last_rotation_date

    @last_rotation_date.setter
    def last_rotation_date(self, last_rotation_date: datetime):
        """Sets the last_rotation_date of this APIKey.


        :param last_rotation_date: The last_rotation_date of this APIKey.
        :type last_rotation_date: datetime
        """

        self._last_rotation_date = last_rotation_date

    @property
    def rotation_frequency_days(self) -> int:
        """Gets the rotation_frequency_days of this APIKey.


        :return: The rotation_frequency_days of this APIKey.
        :rtype: int
        """
        return self._rotation_frequency_days

    @rotation_frequency_days.setter
    def rotation_frequency_days(self, rotation_frequency_days: int):
        """Sets the rotation_frequency_days of this APIKey.


        :param rotation_frequency_days: The rotation_frequency_days of this APIKey.
        :type rotation_frequency_days: int
        """

        self._rotation_frequency_days = rotation_frequency_days

    @property
    def compliance_standards(self) -> List[str]:
        """Gets the compliance_standards of this APIKey.


        :return: The compliance_standards of this APIKey.
        :rtype: List[str]
        """
        return self._compliance_standards

    @compliance_standards.setter
    def compliance_standards(self, compliance_standards: List[str]):
        """Sets the compliance_standards of this APIKey.


        :param compliance_standards: The compliance_standards of this APIKey.
        :type compliance_standards: List[str]
        """

        self._compliance_standards = compliance_standards

    @property
    def requires_audit_logging(self) -> bool:
        """Gets the requires_audit_logging of this APIKey.


        :return: The requires_audit_logging of this APIKey.
        :rtype: bool
        """
        return self._requires_audit_logging

    @requires_audit_logging.setter
    def requires_audit_logging(self, requires_audit_logging: bool):
        """Sets the requires_audit_logging of this APIKey.


        :param requires_audit_logging: The requires_audit_logging of this APIKey.
        :type requires_audit_logging: bool
        """

        self._requires_audit_logging = requires_audit_logging

    @property
    def data_residency(self) -> str:
        """Gets the data_residency of this APIKey.


        :return: The data_residency of this APIKey.
        :rtype: str
        """
        return self._data_residency

    @data_residency.setter
    def data_residency(self, data_residency: str):
        """Sets the data_residency of this APIKey.


        :param data_residency: The data_residency of this APIKey.
        :type data_residency: str
        """

        self._data_residency = data_residency

    @property
    def approved_integrations(self) -> List[str]:
        """Gets the approved_integrations of this APIKey.


        :return: The approved_integrations of this APIKey.
        :rtype: List[str]
        """
        return self._approved_integrations

    @approved_integrations.setter
    def approved_integrations(self, approved_integrations: List[str]):
        """Sets the approved_integrations of this APIKey.


        :param approved_integrations: The approved_integrations of this APIKey.
        :type approved_integrations: List[str]
        """

        self._approved_integrations = approved_integrations

    @property
    def alert_emails(self) -> List[str]:
        """Gets the alert_emails of this APIKey.


        :return: The alert_emails of this APIKey.
        :rtype: List[str]
        """
        return self._alert_emails

    @alert_emails.setter
    def alert_emails(self, alert_emails: List[str]):
        """Sets the alert_emails of this APIKey.


        :param alert_emails: The alert_emails of this APIKey.
        :type alert_emails: List[str]
        """

        self._alert_emails = alert_emails

    @property
    def webhook_url(self) -> str:
        """Gets the webhook_url of this APIKey.


        :return: The webhook_url of this APIKey.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url: str):
        """Sets the webhook_url of this APIKey.


        :param webhook_url: The webhook_url of this APIKey.
        :type webhook_url: str
        """

        self._webhook_url = webhook_url

    @property
    def alert_on_quota_threshold(self) -> bool:
        """Gets the alert_on_quota_threshold of this APIKey.


        :return: The alert_on_quota_threshold of this APIKey.
        :rtype: bool
        """
        return self._alert_on_quota_threshold

    @alert_on_quota_threshold.setter
    def alert_on_quota_threshold(self, alert_on_quota_threshold: bool):
        """Sets the alert_on_quota_threshold of this APIKey.


        :param alert_on_quota_threshold: The alert_on_quota_threshold of this APIKey.
        :type alert_on_quota_threshold: bool
        """

        self._alert_on_quota_threshold = alert_on_quota_threshold

    @property
    def quota_alert_threshold(self) -> float:
        """Gets the quota_alert_threshold of this APIKey.


        :return: The quota_alert_threshold of this APIKey.
        :rtype: float
        """
        return self._quota_alert_threshold

    @quota_alert_threshold.setter
    def quota_alert_threshold(self, quota_alert_threshold: float):
        """Sets the quota_alert_threshold of this APIKey.


        :param quota_alert_threshold: The quota_alert_threshold of this APIKey.
        :type quota_alert_threshold: float
        """

        self._quota_alert_threshold = quota_alert_threshold

    @property
    def alert_on_error_spike(self) -> bool:
        """Gets the alert_on_error_spike of this APIKey.


        :return: The alert_on_error_spike of this APIKey.
        :rtype: bool
        """
        return self._alert_on_error_spike

    @alert_on_error_spike.setter
    def alert_on_error_spike(self, alert_on_error_spike: bool):
        """Sets the alert_on_error_spike of this APIKey.


        :param alert_on_error_spike: The alert_on_error_spike of this APIKey.
        :type alert_on_error_spike: bool
        """

        self._alert_on_error_spike = alert_on_error_spike

    @property
    def error_alert_threshold(self) -> float:
        """Gets the error_alert_threshold of this APIKey.


        :return: The error_alert_threshold of this APIKey.
        :rtype: float
        """
        return self._error_alert_threshold

    @error_alert_threshold.setter
    def error_alert_threshold(self, error_alert_threshold: float):
        """Sets the error_alert_threshold of this APIKey.


        :param error_alert_threshold: The error_alert_threshold of this APIKey.
        :type error_alert_threshold: float
        """

        self._error_alert_threshold = error_alert_threshold

    @property
    def monitoring_integrations(self) -> List[str]:
        """Gets the monitoring_integrations of this APIKey.


        :return: The monitoring_integrations of this APIKey.
        :rtype: List[str]
        """
        return self._monitoring_integrations

    @monitoring_integrations.setter
    def monitoring_integrations(self, monitoring_integrations: List[str]):
        """Sets the monitoring_integrations of this APIKey.


        :param monitoring_integrations: The monitoring_integrations of this APIKey.
        :type monitoring_integrations: List[str]
        """

        self._monitoring_integrations = monitoring_integrations

    @property
    def encrypted(self) -> bool:
        """Gets the encrypted of this APIKey.


        :return: The encrypted of this APIKey.
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted: bool):
        """Sets the encrypted of this APIKey.


        :param encrypted: The encrypted of this APIKey.
        :type encrypted: bool
        """

        self._encrypted = encrypted

    @property
    def data_classification(self) -> str:
        """Gets the data_classification of this APIKey.


        :return: The data_classification of this APIKey.
        :rtype: str
        """
        return self._data_classification

    @data_classification.setter
    def data_classification(self, data_classification: str):
        """Sets the data_classification of this APIKey.


        :param data_classification: The data_classification of this APIKey.
        :type data_classification: str
        """

        self._data_classification = data_classification
