from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class AuthContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, required_scopes=None, provided_scopes=None, missing_permissions=None, tenant_id=None):  # noqa: E501
        """AuthContext - a model defined in OpenAPI

        :param required_scopes: The required_scopes of this AuthContext.  # noqa: E501
        :type required_scopes: List[str]
        :param provided_scopes: The provided_scopes of this AuthContext.  # noqa: E501
        :type provided_scopes: List[str]
        :param missing_permissions: The missing_permissions of this AuthContext.  # noqa: E501
        :type missing_permissions: List[str]
        :param tenant_id: The tenant_id of this AuthContext.  # noqa: E501
        :type tenant_id: str
        """
        self.openapi_types = {
            'required_scopes': List[str],
            'provided_scopes': List[str],
            'missing_permissions': List[str],
            'tenant_id': str
        }

        self.attribute_map = {
            'required_scopes': 'requiredScopes',
            'provided_scopes': 'providedScopes',
            'missing_permissions': 'missingPermissions',
            'tenant_id': 'tenantId'
        }

        self._required_scopes = required_scopes
        self._provided_scopes = provided_scopes
        self._missing_permissions = missing_permissions
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt) -> 'AuthContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AuthContext of this AuthContext.  # noqa: E501
        :rtype: AuthContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def required_scopes(self) -> List[str]:
        """Gets the required_scopes of this AuthContext.


        :return: The required_scopes of this AuthContext.
        :rtype: List[str]
        """
        return self._required_scopes

    @required_scopes.setter
    def required_scopes(self, required_scopes: List[str]):
        """Sets the required_scopes of this AuthContext.


        :param required_scopes: The required_scopes of this AuthContext.
        :type required_scopes: List[str]
        """

        self._required_scopes = required_scopes

    @property
    def provided_scopes(self) -> List[str]:
        """Gets the provided_scopes of this AuthContext.


        :return: The provided_scopes of this AuthContext.
        :rtype: List[str]
        """
        return self._provided_scopes

    @provided_scopes.setter
    def provided_scopes(self, provided_scopes: List[str]):
        """Sets the provided_scopes of this AuthContext.


        :param provided_scopes: The provided_scopes of this AuthContext.
        :type provided_scopes: List[str]
        """

        self._provided_scopes = provided_scopes

    @property
    def missing_permissions(self) -> List[str]:
        """Gets the missing_permissions of this AuthContext.


        :return: The missing_permissions of this AuthContext.
        :rtype: List[str]
        """
        return self._missing_permissions

    @missing_permissions.setter
    def missing_permissions(self, missing_permissions: List[str]):
        """Sets the missing_permissions of this AuthContext.


        :param missing_permissions: The missing_permissions of this AuthContext.
        :type missing_permissions: List[str]
        """

        self._missing_permissions = missing_permissions

    @property
    def tenant_id(self) -> str:
        """Gets the tenant_id of this AuthContext.


        :return: The tenant_id of this AuthContext.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id: str):
        """Sets the tenant_id of this AuthContext.


        :param tenant_id: The tenant_id of this AuthContext.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
