from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class BranchMerge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, branch_id=None, source_branch=None, target_branch=None, merge_status=None, merge_strategy=None, conflicts=None, merger_id=None, created_at=None, completed_at=None):  # noqa: E501
        """BranchMerge - a model defined in OpenAPI

        :param id: The id of this BranchMerge.  # noqa: E501
        :type id: str
        :param branch_id: The branch_id of this BranchMerge.  # noqa: E501
        :type branch_id: str
        :param source_branch: The source_branch of this BranchMerge.  # noqa: E501
        :type source_branch: str
        :param target_branch: The target_branch of this BranchMerge.  # noqa: E501
        :type target_branch: str
        :param merge_status: The merge_status of this BranchMerge.  # noqa: E501
        :type merge_status: str
        :param merge_strategy: The merge_strategy of this BranchMerge.  # noqa: E501
        :type merge_strategy: str
        :param conflicts: The conflicts of this BranchMerge.  # noqa: E501
        :type conflicts: List[str]
        :param merger_id: The merger_id of this BranchMerge.  # noqa: E501
        :type merger_id: str
        :param created_at: The created_at of this BranchMerge.  # noqa: E501
        :type created_at: datetime
        :param completed_at: The completed_at of this BranchMerge.  # noqa: E501
        :type completed_at: datetime
        """
        self.openapi_types = {
            'id': str,
            'branch_id': str,
            'source_branch': str,
            'target_branch': str,
            'merge_status': str,
            'merge_strategy': str,
            'conflicts': List[str],
            'merger_id': str,
            'created_at': datetime,
            'completed_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'branch_id': 'branchId',
            'source_branch': 'sourceBranch',
            'target_branch': 'targetBranch',
            'merge_status': 'mergeStatus',
            'merge_strategy': 'mergeStrategy',
            'conflicts': 'conflicts',
            'merger_id': 'mergerId',
            'created_at': 'createdAt',
            'completed_at': 'completedAt'
        }

        self._id = id
        self._branch_id = branch_id
        self._source_branch = source_branch
        self._target_branch = target_branch
        self._merge_status = merge_status
        self._merge_strategy = merge_strategy
        self._conflicts = conflicts
        self._merger_id = merger_id
        self._created_at = created_at
        self._completed_at = completed_at

    @classmethod
    def from_dict(cls, dikt) -> 'BranchMerge':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BranchMerge of this BranchMerge.  # noqa: E501
        :rtype: BranchMerge
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this BranchMerge.


        :return: The id of this BranchMerge.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BranchMerge.


        :param id: The id of this BranchMerge.
        :type id: str
        """

        self._id = id

    @property
    def branch_id(self) -> str:
        """Gets the branch_id of this BranchMerge.


        :return: The branch_id of this BranchMerge.
        :rtype: str
        """
        return self._branch_id

    @branch_id.setter
    def branch_id(self, branch_id: str):
        """Sets the branch_id of this BranchMerge.


        :param branch_id: The branch_id of this BranchMerge.
        :type branch_id: str
        """

        self._branch_id = branch_id

    @property
    def source_branch(self) -> str:
        """Gets the source_branch of this BranchMerge.


        :return: The source_branch of this BranchMerge.
        :rtype: str
        """
        return self._source_branch

    @source_branch.setter
    def source_branch(self, source_branch: str):
        """Sets the source_branch of this BranchMerge.


        :param source_branch: The source_branch of this BranchMerge.
        :type source_branch: str
        """

        self._source_branch = source_branch

    @property
    def target_branch(self) -> str:
        """Gets the target_branch of this BranchMerge.


        :return: The target_branch of this BranchMerge.
        :rtype: str
        """
        return self._target_branch

    @target_branch.setter
    def target_branch(self, target_branch: str):
        """Sets the target_branch of this BranchMerge.


        :param target_branch: The target_branch of this BranchMerge.
        :type target_branch: str
        """

        self._target_branch = target_branch

    @property
    def merge_status(self) -> str:
        """Gets the merge_status of this BranchMerge.


        :return: The merge_status of this BranchMerge.
        :rtype: str
        """
        return self._merge_status

    @merge_status.setter
    def merge_status(self, merge_status: str):
        """Sets the merge_status of this BranchMerge.


        :param merge_status: The merge_status of this BranchMerge.
        :type merge_status: str
        """

        self._merge_status = merge_status

    @property
    def merge_strategy(self) -> str:
        """Gets the merge_strategy of this BranchMerge.


        :return: The merge_strategy of this BranchMerge.
        :rtype: str
        """
        return self._merge_strategy

    @merge_strategy.setter
    def merge_strategy(self, merge_strategy: str):
        """Sets the merge_strategy of this BranchMerge.


        :param merge_strategy: The merge_strategy of this BranchMerge.
        :type merge_strategy: str
        """

        self._merge_strategy = merge_strategy

    @property
    def conflicts(self) -> List[str]:
        """Gets the conflicts of this BranchMerge.


        :return: The conflicts of this BranchMerge.
        :rtype: List[str]
        """
        return self._conflicts

    @conflicts.setter
    def conflicts(self, conflicts: List[str]):
        """Sets the conflicts of this BranchMerge.


        :param conflicts: The conflicts of this BranchMerge.
        :type conflicts: List[str]
        """

        self._conflicts = conflicts

    @property
    def merger_id(self) -> str:
        """Gets the merger_id of this BranchMerge.


        :return: The merger_id of this BranchMerge.
        :rtype: str
        """
        return self._merger_id

    @merger_id.setter
    def merger_id(self, merger_id: str):
        """Sets the merger_id of this BranchMerge.


        :param merger_id: The merger_id of this BranchMerge.
        :type merger_id: str
        """

        self._merger_id = merger_id

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this BranchMerge.


        :return: The created_at of this BranchMerge.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this BranchMerge.


        :param created_at: The created_at of this BranchMerge.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def completed_at(self) -> datetime:
        """Gets the completed_at of this BranchMerge.


        :return: The completed_at of this BranchMerge.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at: datetime):
        """Sets the completed_at of this BranchMerge.


        :param completed_at: The completed_at of this BranchMerge.
        :type completed_at: datetime
        """

        self._completed_at = completed_at
