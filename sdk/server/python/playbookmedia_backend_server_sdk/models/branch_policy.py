from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class BranchPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, branch_id=None, required_approvers=None, minimum_approvals=None, enforce_linear_history=None, allow_force_push=None, protected_paths=None, merge_rules=None, automated_checks=None, created_at=None, updated_at=None):  # noqa: E501
        """BranchPolicy - a model defined in OpenAPI

        :param id: The id of this BranchPolicy.  # noqa: E501
        :type id: str
        :param branch_id: The branch_id of this BranchPolicy.  # noqa: E501
        :type branch_id: str
        :param required_approvers: The required_approvers of this BranchPolicy.  # noqa: E501
        :type required_approvers: List[str]
        :param minimum_approvals: The minimum_approvals of this BranchPolicy.  # noqa: E501
        :type minimum_approvals: int
        :param enforce_linear_history: The enforce_linear_history of this BranchPolicy.  # noqa: E501
        :type enforce_linear_history: bool
        :param allow_force_push: The allow_force_push of this BranchPolicy.  # noqa: E501
        :type allow_force_push: bool
        :param protected_paths: The protected_paths of this BranchPolicy.  # noqa: E501
        :type protected_paths: List[str]
        :param merge_rules: The merge_rules of this BranchPolicy.  # noqa: E501
        :type merge_rules: Dict[str, str]
        :param automated_checks: The automated_checks of this BranchPolicy.  # noqa: E501
        :type automated_checks: List[str]
        :param created_at: The created_at of this BranchPolicy.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this BranchPolicy.  # noqa: E501
        :type updated_at: datetime
        """
        self.openapi_types = {
            'id': str,
            'branch_id': str,
            'required_approvers': List[str],
            'minimum_approvals': int,
            'enforce_linear_history': bool,
            'allow_force_push': bool,
            'protected_paths': List[str],
            'merge_rules': Dict[str, str],
            'automated_checks': List[str],
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'branch_id': 'branchId',
            'required_approvers': 'requiredApprovers',
            'minimum_approvals': 'minimumApprovals',
            'enforce_linear_history': 'enforceLinearHistory',
            'allow_force_push': 'allowForcePush',
            'protected_paths': 'protectedPaths',
            'merge_rules': 'mergeRules',
            'automated_checks': 'automatedChecks',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._id = id
        self._branch_id = branch_id
        self._required_approvers = required_approvers
        self._minimum_approvals = minimum_approvals
        self._enforce_linear_history = enforce_linear_history
        self._allow_force_push = allow_force_push
        self._protected_paths = protected_paths
        self._merge_rules = merge_rules
        self._automated_checks = automated_checks
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'BranchPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BranchPolicy of this BranchPolicy.  # noqa: E501
        :rtype: BranchPolicy
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this BranchPolicy.


        :return: The id of this BranchPolicy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BranchPolicy.


        :param id: The id of this BranchPolicy.
        :type id: str
        """

        self._id = id

    @property
    def branch_id(self) -> str:
        """Gets the branch_id of this BranchPolicy.


        :return: The branch_id of this BranchPolicy.
        :rtype: str
        """
        return self._branch_id

    @branch_id.setter
    def branch_id(self, branch_id: str):
        """Sets the branch_id of this BranchPolicy.


        :param branch_id: The branch_id of this BranchPolicy.
        :type branch_id: str
        """

        self._branch_id = branch_id

    @property
    def required_approvers(self) -> List[str]:
        """Gets the required_approvers of this BranchPolicy.


        :return: The required_approvers of this BranchPolicy.
        :rtype: List[str]
        """
        return self._required_approvers

    @required_approvers.setter
    def required_approvers(self, required_approvers: List[str]):
        """Sets the required_approvers of this BranchPolicy.


        :param required_approvers: The required_approvers of this BranchPolicy.
        :type required_approvers: List[str]
        """

        self._required_approvers = required_approvers

    @property
    def minimum_approvals(self) -> int:
        """Gets the minimum_approvals of this BranchPolicy.


        :return: The minimum_approvals of this BranchPolicy.
        :rtype: int
        """
        return self._minimum_approvals

    @minimum_approvals.setter
    def minimum_approvals(self, minimum_approvals: int):
        """Sets the minimum_approvals of this BranchPolicy.


        :param minimum_approvals: The minimum_approvals of this BranchPolicy.
        :type minimum_approvals: int
        """

        self._minimum_approvals = minimum_approvals

    @property
    def enforce_linear_history(self) -> bool:
        """Gets the enforce_linear_history of this BranchPolicy.


        :return: The enforce_linear_history of this BranchPolicy.
        :rtype: bool
        """
        return self._enforce_linear_history

    @enforce_linear_history.setter
    def enforce_linear_history(self, enforce_linear_history: bool):
        """Sets the enforce_linear_history of this BranchPolicy.


        :param enforce_linear_history: The enforce_linear_history of this BranchPolicy.
        :type enforce_linear_history: bool
        """

        self._enforce_linear_history = enforce_linear_history

    @property
    def allow_force_push(self) -> bool:
        """Gets the allow_force_push of this BranchPolicy.


        :return: The allow_force_push of this BranchPolicy.
        :rtype: bool
        """
        return self._allow_force_push

    @allow_force_push.setter
    def allow_force_push(self, allow_force_push: bool):
        """Sets the allow_force_push of this BranchPolicy.


        :param allow_force_push: The allow_force_push of this BranchPolicy.
        :type allow_force_push: bool
        """

        self._allow_force_push = allow_force_push

    @property
    def protected_paths(self) -> List[str]:
        """Gets the protected_paths of this BranchPolicy.


        :return: The protected_paths of this BranchPolicy.
        :rtype: List[str]
        """
        return self._protected_paths

    @protected_paths.setter
    def protected_paths(self, protected_paths: List[str]):
        """Sets the protected_paths of this BranchPolicy.


        :param protected_paths: The protected_paths of this BranchPolicy.
        :type protected_paths: List[str]
        """

        self._protected_paths = protected_paths

    @property
    def merge_rules(self) -> Dict[str, str]:
        """Gets the merge_rules of this BranchPolicy.


        :return: The merge_rules of this BranchPolicy.
        :rtype: Dict[str, str]
        """
        return self._merge_rules

    @merge_rules.setter
    def merge_rules(self, merge_rules: Dict[str, str]):
        """Sets the merge_rules of this BranchPolicy.


        :param merge_rules: The merge_rules of this BranchPolicy.
        :type merge_rules: Dict[str, str]
        """

        self._merge_rules = merge_rules

    @property
    def automated_checks(self) -> List[str]:
        """Gets the automated_checks of this BranchPolicy.


        :return: The automated_checks of this BranchPolicy.
        :rtype: List[str]
        """
        return self._automated_checks

    @automated_checks.setter
    def automated_checks(self, automated_checks: List[str]):
        """Sets the automated_checks of this BranchPolicy.


        :param automated_checks: The automated_checks of this BranchPolicy.
        :type automated_checks: List[str]
        """

        self._automated_checks = automated_checks

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this BranchPolicy.


        :return: The created_at of this BranchPolicy.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this BranchPolicy.


        :param created_at: The created_at of this BranchPolicy.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this BranchPolicy.


        :return: The updated_at of this BranchPolicy.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this BranchPolicy.


        :param updated_at: The updated_at of this BranchPolicy.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
