from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class ChangeSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, version_id=None, change_type=None, content_before=None, content_after=None, metadata=None, created_at=None):  # noqa: E501
        """ChangeSet - a model defined in OpenAPI

        :param id: The id of this ChangeSet.  # noqa: E501
        :type id: str
        :param version_id: The version_id of this ChangeSet.  # noqa: E501
        :type version_id: str
        :param change_type: The change_type of this ChangeSet.  # noqa: E501
        :type change_type: str
        :param content_before: The content_before of this ChangeSet.  # noqa: E501
        :type content_before: str
        :param content_after: The content_after of this ChangeSet.  # noqa: E501
        :type content_after: str
        :param metadata: The metadata of this ChangeSet.  # noqa: E501
        :type metadata: Dict[str, str]
        :param created_at: The created_at of this ChangeSet.  # noqa: E501
        :type created_at: datetime
        """
        self.openapi_types = {
            'id': str,
            'version_id': str,
            'change_type': str,
            'content_before': str,
            'content_after': str,
            'metadata': Dict[str, str],
            'created_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'version_id': 'versionId',
            'change_type': 'changeType',
            'content_before': 'contentBefore',
            'content_after': 'contentAfter',
            'metadata': 'metadata',
            'created_at': 'createdAt'
        }

        self._id = id
        self._version_id = version_id
        self._change_type = change_type
        self._content_before = content_before
        self._content_after = content_after
        self._metadata = metadata
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt) -> 'ChangeSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChangeSet of this ChangeSet.  # noqa: E501
        :rtype: ChangeSet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ChangeSet.


        :return: The id of this ChangeSet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ChangeSet.


        :param id: The id of this ChangeSet.
        :type id: str
        """

        self._id = id

    @property
    def version_id(self) -> str:
        """Gets the version_id of this ChangeSet.


        :return: The version_id of this ChangeSet.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id: str):
        """Sets the version_id of this ChangeSet.


        :param version_id: The version_id of this ChangeSet.
        :type version_id: str
        """

        self._version_id = version_id

    @property
    def change_type(self) -> str:
        """Gets the change_type of this ChangeSet.


        :return: The change_type of this ChangeSet.
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type: str):
        """Sets the change_type of this ChangeSet.


        :param change_type: The change_type of this ChangeSet.
        :type change_type: str
        """

        self._change_type = change_type

    @property
    def content_before(self) -> str:
        """Gets the content_before of this ChangeSet.


        :return: The content_before of this ChangeSet.
        :rtype: str
        """
        return self._content_before

    @content_before.setter
    def content_before(self, content_before: str):
        """Sets the content_before of this ChangeSet.


        :param content_before: The content_before of this ChangeSet.
        :type content_before: str
        """

        self._content_before = content_before

    @property
    def content_after(self) -> str:
        """Gets the content_after of this ChangeSet.


        :return: The content_after of this ChangeSet.
        :rtype: str
        """
        return self._content_after

    @content_after.setter
    def content_after(self, content_after: str):
        """Sets the content_after of this ChangeSet.


        :param content_after: The content_after of this ChangeSet.
        :type content_after: str
        """

        self._content_after = content_after

    @property
    def metadata(self) -> Dict[str, str]:
        """Gets the metadata of this ChangeSet.


        :return: The metadata of this ChangeSet.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Dict[str, str]):
        """Sets the metadata of this ChangeSet.


        :param metadata: The metadata of this ChangeSet.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this ChangeSet.


        :return: The created_at of this ChangeSet.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this ChangeSet.


        :param created_at: The created_at of this ChangeSet.
        :type created_at: datetime
        """

        self._created_at = created_at
