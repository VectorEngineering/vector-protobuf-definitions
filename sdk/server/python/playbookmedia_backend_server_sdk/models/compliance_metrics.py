from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class ComplianceMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gdpr_compliance_score=None, hipaa_compliance_score=None, pending_approvals=None, compliance_violations=None):  # noqa: E501
        """ComplianceMetrics - a model defined in OpenAPI

        :param gdpr_compliance_score: The gdpr_compliance_score of this ComplianceMetrics.  # noqa: E501
        :type gdpr_compliance_score: float
        :param hipaa_compliance_score: The hipaa_compliance_score of this ComplianceMetrics.  # noqa: E501
        :type hipaa_compliance_score: float
        :param pending_approvals: The pending_approvals of this ComplianceMetrics.  # noqa: E501
        :type pending_approvals: int
        :param compliance_violations: The compliance_violations of this ComplianceMetrics.  # noqa: E501
        :type compliance_violations: int
        """
        self.openapi_types = {
            'gdpr_compliance_score': float,
            'hipaa_compliance_score': float,
            'pending_approvals': int,
            'compliance_violations': int
        }

        self.attribute_map = {
            'gdpr_compliance_score': 'gdprComplianceScore',
            'hipaa_compliance_score': 'hipaaComplianceScore',
            'pending_approvals': 'pendingApprovals',
            'compliance_violations': 'complianceViolations'
        }

        self._gdpr_compliance_score = gdpr_compliance_score
        self._hipaa_compliance_score = hipaa_compliance_score
        self._pending_approvals = pending_approvals
        self._compliance_violations = compliance_violations

    @classmethod
    def from_dict(cls, dikt) -> 'ComplianceMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ComplianceMetrics of this ComplianceMetrics.  # noqa: E501
        :rtype: ComplianceMetrics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gdpr_compliance_score(self) -> float:
        """Gets the gdpr_compliance_score of this ComplianceMetrics.


        :return: The gdpr_compliance_score of this ComplianceMetrics.
        :rtype: float
        """
        return self._gdpr_compliance_score

    @gdpr_compliance_score.setter
    def gdpr_compliance_score(self, gdpr_compliance_score: float):
        """Sets the gdpr_compliance_score of this ComplianceMetrics.


        :param gdpr_compliance_score: The gdpr_compliance_score of this ComplianceMetrics.
        :type gdpr_compliance_score: float
        """

        self._gdpr_compliance_score = gdpr_compliance_score

    @property
    def hipaa_compliance_score(self) -> float:
        """Gets the hipaa_compliance_score of this ComplianceMetrics.


        :return: The hipaa_compliance_score of this ComplianceMetrics.
        :rtype: float
        """
        return self._hipaa_compliance_score

    @hipaa_compliance_score.setter
    def hipaa_compliance_score(self, hipaa_compliance_score: float):
        """Sets the hipaa_compliance_score of this ComplianceMetrics.


        :param hipaa_compliance_score: The hipaa_compliance_score of this ComplianceMetrics.
        :type hipaa_compliance_score: float
        """

        self._hipaa_compliance_score = hipaa_compliance_score

    @property
    def pending_approvals(self) -> int:
        """Gets the pending_approvals of this ComplianceMetrics.


        :return: The pending_approvals of this ComplianceMetrics.
        :rtype: int
        """
        return self._pending_approvals

    @pending_approvals.setter
    def pending_approvals(self, pending_approvals: int):
        """Sets the pending_approvals of this ComplianceMetrics.


        :param pending_approvals: The pending_approvals of this ComplianceMetrics.
        :type pending_approvals: int
        """

        self._pending_approvals = pending_approvals

    @property
    def compliance_violations(self) -> int:
        """Gets the compliance_violations of this ComplianceMetrics.


        :return: The compliance_violations of this ComplianceMetrics.
        :rtype: int
        """
        return self._compliance_violations

    @compliance_violations.setter
    def compliance_violations(self, compliance_violations: int):
        """Sets the compliance_violations of this ComplianceMetrics.


        :param compliance_violations: The compliance_violations of this ComplianceMetrics.
        :type compliance_violations: int
        """

        self._compliance_violations = compliance_violations
