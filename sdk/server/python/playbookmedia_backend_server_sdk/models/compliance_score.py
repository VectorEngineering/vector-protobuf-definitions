from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class ComplianceScore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category=None, score=None, status=None, improvements=None):  # noqa: E501
        """ComplianceScore - a model defined in OpenAPI

        :param category: The category of this ComplianceScore.  # noqa: E501
        :type category: str
        :param score: The score of this ComplianceScore.  # noqa: E501
        :type score: float
        :param status: The status of this ComplianceScore.  # noqa: E501
        :type status: str
        :param improvements: The improvements of this ComplianceScore.  # noqa: E501
        :type improvements: List[str]
        """
        self.openapi_types = {
            'category': str,
            'score': float,
            'status': str,
            'improvements': List[str]
        }

        self.attribute_map = {
            'category': 'category',
            'score': 'score',
            'status': 'status',
            'improvements': 'improvements'
        }

        self._category = category
        self._score = score
        self._status = status
        self._improvements = improvements

    @classmethod
    def from_dict(cls, dikt) -> 'ComplianceScore':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ComplianceScore of this ComplianceScore.  # noqa: E501
        :rtype: ComplianceScore
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self) -> str:
        """Gets the category of this ComplianceScore.


        :return: The category of this ComplianceScore.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this ComplianceScore.


        :param category: The category of this ComplianceScore.
        :type category: str
        """

        self._category = category

    @property
    def score(self) -> float:
        """Gets the score of this ComplianceScore.


        :return: The score of this ComplianceScore.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score: float):
        """Sets the score of this ComplianceScore.


        :param score: The score of this ComplianceScore.
        :type score: float
        """

        self._score = score

    @property
    def status(self) -> str:
        """Gets the status of this ComplianceScore.


        :return: The status of this ComplianceScore.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ComplianceScore.


        :param status: The status of this ComplianceScore.
        :type status: str
        """

        self._status = status

    @property
    def improvements(self) -> List[str]:
        """Gets the improvements of this ComplianceScore.


        :return: The improvements of this ComplianceScore.
        :rtype: List[str]
        """
        return self._improvements

    @improvements.setter
    def improvements(self, improvements: List[str]):
        """Sets the improvements of this ComplianceScore.


        :param improvements: The improvements of this ComplianceScore.
        :type improvements: List[str]
        """

        self._improvements = improvements
