from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class ComplianceViolation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_id=None, severity=None, description=None, affected_resources=None, remediation_steps=None):  # noqa: E501
        """ComplianceViolation - a model defined in OpenAPI

        :param rule_id: The rule_id of this ComplianceViolation.  # noqa: E501
        :type rule_id: str
        :param severity: The severity of this ComplianceViolation.  # noqa: E501
        :type severity: str
        :param description: The description of this ComplianceViolation.  # noqa: E501
        :type description: str
        :param affected_resources: The affected_resources of this ComplianceViolation.  # noqa: E501
        :type affected_resources: List[str]
        :param remediation_steps: The remediation_steps of this ComplianceViolation.  # noqa: E501
        :type remediation_steps: str
        """
        self.openapi_types = {
            'rule_id': str,
            'severity': str,
            'description': str,
            'affected_resources': List[str],
            'remediation_steps': str
        }

        self.attribute_map = {
            'rule_id': 'ruleId',
            'severity': 'severity',
            'description': 'description',
            'affected_resources': 'affectedResources',
            'remediation_steps': 'remediationSteps'
        }

        self._rule_id = rule_id
        self._severity = severity
        self._description = description
        self._affected_resources = affected_resources
        self._remediation_steps = remediation_steps

    @classmethod
    def from_dict(cls, dikt) -> 'ComplianceViolation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ComplianceViolation of this ComplianceViolation.  # noqa: E501
        :rtype: ComplianceViolation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_id(self) -> str:
        """Gets the rule_id of this ComplianceViolation.


        :return: The rule_id of this ComplianceViolation.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id: str):
        """Sets the rule_id of this ComplianceViolation.


        :param rule_id: The rule_id of this ComplianceViolation.
        :type rule_id: str
        """

        self._rule_id = rule_id

    @property
    def severity(self) -> str:
        """Gets the severity of this ComplianceViolation.


        :return: The severity of this ComplianceViolation.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity: str):
        """Sets the severity of this ComplianceViolation.


        :param severity: The severity of this ComplianceViolation.
        :type severity: str
        """

        self._severity = severity

    @property
    def description(self) -> str:
        """Gets the description of this ComplianceViolation.


        :return: The description of this ComplianceViolation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ComplianceViolation.


        :param description: The description of this ComplianceViolation.
        :type description: str
        """

        self._description = description

    @property
    def affected_resources(self) -> List[str]:
        """Gets the affected_resources of this ComplianceViolation.


        :return: The affected_resources of this ComplianceViolation.
        :rtype: List[str]
        """
        return self._affected_resources

    @affected_resources.setter
    def affected_resources(self, affected_resources: List[str]):
        """Sets the affected_resources of this ComplianceViolation.


        :param affected_resources: The affected_resources of this ComplianceViolation.
        :type affected_resources: List[str]
        """

        self._affected_resources = affected_resources

    @property
    def remediation_steps(self) -> str:
        """Gets the remediation_steps of this ComplianceViolation.


        :return: The remediation_steps of this ComplianceViolation.
        :rtype: str
        """
        return self._remediation_steps

    @remediation_steps.setter
    def remediation_steps(self, remediation_steps: str):
        """Sets the remediation_steps of this ComplianceViolation.


        :param remediation_steps: The remediation_steps of this ComplianceViolation.
        :type remediation_steps: str
        """

        self._remediation_steps = remediation_steps
