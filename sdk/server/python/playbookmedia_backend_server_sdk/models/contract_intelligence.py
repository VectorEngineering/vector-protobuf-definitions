from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.compliance_check import ComplianceCheck
from playbookmedia_backend_server_sdk.models.risk_assessment import RiskAssessment
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.compliance_check import ComplianceCheck  # noqa: E501
from playbookmedia_backend_server_sdk.models.risk_assessment import RiskAssessment  # noqa: E501

class ContractIntelligence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, contract_type=None, risk_scores=None, detected_clauses=None, key_obligations=None, compliance_scores=None, jurisdiction=None, governing_laws=None, semantic_analysis=None, analysis_date=None, risk_assessments=None, compliance_checks=None):  # noqa: E501
        """ContractIntelligence - a model defined in OpenAPI

        :param id: The id of this ContractIntelligence.  # noqa: E501
        :type id: str
        :param contract_type: The contract_type of this ContractIntelligence.  # noqa: E501
        :type contract_type: str
        :param risk_scores: The risk_scores of this ContractIntelligence.  # noqa: E501
        :type risk_scores: Dict[str, float]
        :param detected_clauses: The detected_clauses of this ContractIntelligence.  # noqa: E501
        :type detected_clauses: Dict[str, str]
        :param key_obligations: The key_obligations of this ContractIntelligence.  # noqa: E501
        :type key_obligations: List[str]
        :param compliance_scores: The compliance_scores of this ContractIntelligence.  # noqa: E501
        :type compliance_scores: Dict[str, float]
        :param jurisdiction: The jurisdiction of this ContractIntelligence.  # noqa: E501
        :type jurisdiction: str
        :param governing_laws: The governing_laws of this ContractIntelligence.  # noqa: E501
        :type governing_laws: List[str]
        :param semantic_analysis: The semantic_analysis of this ContractIntelligence.  # noqa: E501
        :type semantic_analysis: Dict[str, str]
        :param analysis_date: The analysis_date of this ContractIntelligence.  # noqa: E501
        :type analysis_date: datetime
        :param risk_assessments: The risk_assessments of this ContractIntelligence.  # noqa: E501
        :type risk_assessments: List[RiskAssessment]
        :param compliance_checks: The compliance_checks of this ContractIntelligence.  # noqa: E501
        :type compliance_checks: List[ComplianceCheck]
        """
        self.openapi_types = {
            'id': str,
            'contract_type': str,
            'risk_scores': Dict[str, float],
            'detected_clauses': Dict[str, str],
            'key_obligations': List[str],
            'compliance_scores': Dict[str, float],
            'jurisdiction': str,
            'governing_laws': List[str],
            'semantic_analysis': Dict[str, str],
            'analysis_date': datetime,
            'risk_assessments': List[RiskAssessment],
            'compliance_checks': List[ComplianceCheck]
        }

        self.attribute_map = {
            'id': 'id',
            'contract_type': 'contractType',
            'risk_scores': 'riskScores',
            'detected_clauses': 'detectedClauses',
            'key_obligations': 'keyObligations',
            'compliance_scores': 'complianceScores',
            'jurisdiction': 'jurisdiction',
            'governing_laws': 'governingLaws',
            'semantic_analysis': 'semanticAnalysis',
            'analysis_date': 'analysisDate',
            'risk_assessments': 'riskAssessments',
            'compliance_checks': 'complianceChecks'
        }

        self._id = id
        self._contract_type = contract_type
        self._risk_scores = risk_scores
        self._detected_clauses = detected_clauses
        self._key_obligations = key_obligations
        self._compliance_scores = compliance_scores
        self._jurisdiction = jurisdiction
        self._governing_laws = governing_laws
        self._semantic_analysis = semantic_analysis
        self._analysis_date = analysis_date
        self._risk_assessments = risk_assessments
        self._compliance_checks = compliance_checks

    @classmethod
    def from_dict(cls, dikt) -> 'ContractIntelligence':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ContractIntelligence of this ContractIntelligence.  # noqa: E501
        :rtype: ContractIntelligence
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ContractIntelligence.


        :return: The id of this ContractIntelligence.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ContractIntelligence.


        :param id: The id of this ContractIntelligence.
        :type id: str
        """

        self._id = id

    @property
    def contract_type(self) -> str:
        """Gets the contract_type of this ContractIntelligence.


        :return: The contract_type of this ContractIntelligence.
        :rtype: str
        """
        return self._contract_type

    @contract_type.setter
    def contract_type(self, contract_type: str):
        """Sets the contract_type of this ContractIntelligence.


        :param contract_type: The contract_type of this ContractIntelligence.
        :type contract_type: str
        """

        self._contract_type = contract_type

    @property
    def risk_scores(self) -> Dict[str, float]:
        """Gets the risk_scores of this ContractIntelligence.


        :return: The risk_scores of this ContractIntelligence.
        :rtype: Dict[str, float]
        """
        return self._risk_scores

    @risk_scores.setter
    def risk_scores(self, risk_scores: Dict[str, float]):
        """Sets the risk_scores of this ContractIntelligence.


        :param risk_scores: The risk_scores of this ContractIntelligence.
        :type risk_scores: Dict[str, float]
        """

        self._risk_scores = risk_scores

    @property
    def detected_clauses(self) -> Dict[str, str]:
        """Gets the detected_clauses of this ContractIntelligence.


        :return: The detected_clauses of this ContractIntelligence.
        :rtype: Dict[str, str]
        """
        return self._detected_clauses

    @detected_clauses.setter
    def detected_clauses(self, detected_clauses: Dict[str, str]):
        """Sets the detected_clauses of this ContractIntelligence.


        :param detected_clauses: The detected_clauses of this ContractIntelligence.
        :type detected_clauses: Dict[str, str]
        """

        self._detected_clauses = detected_clauses

    @property
    def key_obligations(self) -> List[str]:
        """Gets the key_obligations of this ContractIntelligence.


        :return: The key_obligations of this ContractIntelligence.
        :rtype: List[str]
        """
        return self._key_obligations

    @key_obligations.setter
    def key_obligations(self, key_obligations: List[str]):
        """Sets the key_obligations of this ContractIntelligence.


        :param key_obligations: The key_obligations of this ContractIntelligence.
        :type key_obligations: List[str]
        """

        self._key_obligations = key_obligations

    @property
    def compliance_scores(self) -> Dict[str, float]:
        """Gets the compliance_scores of this ContractIntelligence.


        :return: The compliance_scores of this ContractIntelligence.
        :rtype: Dict[str, float]
        """
        return self._compliance_scores

    @compliance_scores.setter
    def compliance_scores(self, compliance_scores: Dict[str, float]):
        """Sets the compliance_scores of this ContractIntelligence.


        :param compliance_scores: The compliance_scores of this ContractIntelligence.
        :type compliance_scores: Dict[str, float]
        """

        self._compliance_scores = compliance_scores

    @property
    def jurisdiction(self) -> str:
        """Gets the jurisdiction of this ContractIntelligence.


        :return: The jurisdiction of this ContractIntelligence.
        :rtype: str
        """
        return self._jurisdiction

    @jurisdiction.setter
    def jurisdiction(self, jurisdiction: str):
        """Sets the jurisdiction of this ContractIntelligence.


        :param jurisdiction: The jurisdiction of this ContractIntelligence.
        :type jurisdiction: str
        """

        self._jurisdiction = jurisdiction

    @property
    def governing_laws(self) -> List[str]:
        """Gets the governing_laws of this ContractIntelligence.


        :return: The governing_laws of this ContractIntelligence.
        :rtype: List[str]
        """
        return self._governing_laws

    @governing_laws.setter
    def governing_laws(self, governing_laws: List[str]):
        """Sets the governing_laws of this ContractIntelligence.


        :param governing_laws: The governing_laws of this ContractIntelligence.
        :type governing_laws: List[str]
        """

        self._governing_laws = governing_laws

    @property
    def semantic_analysis(self) -> Dict[str, str]:
        """Gets the semantic_analysis of this ContractIntelligence.


        :return: The semantic_analysis of this ContractIntelligence.
        :rtype: Dict[str, str]
        """
        return self._semantic_analysis

    @semantic_analysis.setter
    def semantic_analysis(self, semantic_analysis: Dict[str, str]):
        """Sets the semantic_analysis of this ContractIntelligence.


        :param semantic_analysis: The semantic_analysis of this ContractIntelligence.
        :type semantic_analysis: Dict[str, str]
        """

        self._semantic_analysis = semantic_analysis

    @property
    def analysis_date(self) -> datetime:
        """Gets the analysis_date of this ContractIntelligence.


        :return: The analysis_date of this ContractIntelligence.
        :rtype: datetime
        """
        return self._analysis_date

    @analysis_date.setter
    def analysis_date(self, analysis_date: datetime):
        """Sets the analysis_date of this ContractIntelligence.


        :param analysis_date: The analysis_date of this ContractIntelligence.
        :type analysis_date: datetime
        """

        self._analysis_date = analysis_date

    @property
    def risk_assessments(self) -> List[RiskAssessment]:
        """Gets the risk_assessments of this ContractIntelligence.


        :return: The risk_assessments of this ContractIntelligence.
        :rtype: List[RiskAssessment]
        """
        return self._risk_assessments

    @risk_assessments.setter
    def risk_assessments(self, risk_assessments: List[RiskAssessment]):
        """Sets the risk_assessments of this ContractIntelligence.


        :param risk_assessments: The risk_assessments of this ContractIntelligence.
        :type risk_assessments: List[RiskAssessment]
        """

        self._risk_assessments = risk_assessments

    @property
    def compliance_checks(self) -> List[ComplianceCheck]:
        """Gets the compliance_checks of this ContractIntelligence.


        :return: The compliance_checks of this ContractIntelligence.
        :rtype: List[ComplianceCheck]
        """
        return self._compliance_checks

    @compliance_checks.setter
    def compliance_checks(self, compliance_checks: List[ComplianceCheck]):
        """Sets the compliance_checks of this ContractIntelligence.


        :param compliance_checks: The compliance_checks of this ContractIntelligence.
        :type compliance_checks: List[ComplianceCheck]
        """

        self._compliance_checks = compliance_checks
