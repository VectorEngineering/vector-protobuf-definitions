from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.compliance_level import ComplianceLevel
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.compliance_level import ComplianceLevel  # noqa: E501

class CreateAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth0_user_id=None, email=None, base_directory=None, region=None, org_id=None, tenant_id=None, roles=None, permissions=None, mfa_enabled=None, compliance_level=ComplianceLevel.UNSPECIFIED, preferences=None):  # noqa: E501
        """CreateAccountRequest - a model defined in OpenAPI

        :param auth0_user_id: The auth0_user_id of this CreateAccountRequest.  # noqa: E501
        :type auth0_user_id: str
        :param email: The email of this CreateAccountRequest.  # noqa: E501
        :type email: str
        :param base_directory: The base_directory of this CreateAccountRequest.  # noqa: E501
        :type base_directory: str
        :param region: The region of this CreateAccountRequest.  # noqa: E501
        :type region: str
        :param org_id: The org_id of this CreateAccountRequest.  # noqa: E501
        :type org_id: str
        :param tenant_id: The tenant_id of this CreateAccountRequest.  # noqa: E501
        :type tenant_id: str
        :param roles: The roles of this CreateAccountRequest.  # noqa: E501
        :type roles: List[str]
        :param permissions: The permissions of this CreateAccountRequest.  # noqa: E501
        :type permissions: List[str]
        :param mfa_enabled: The mfa_enabled of this CreateAccountRequest.  # noqa: E501
        :type mfa_enabled: bool
        :param compliance_level: The compliance_level of this CreateAccountRequest.  # noqa: E501
        :type compliance_level: ComplianceLevel
        :param preferences: The preferences of this CreateAccountRequest.  # noqa: E501
        :type preferences: Dict[str, str]
        """
        self.openapi_types = {
            'auth0_user_id': str,
            'email': str,
            'base_directory': str,
            'region': str,
            'org_id': str,
            'tenant_id': str,
            'roles': List[str],
            'permissions': List[str],
            'mfa_enabled': bool,
            'compliance_level': ComplianceLevel,
            'preferences': Dict[str, str]
        }

        self.attribute_map = {
            'auth0_user_id': 'auth0UserId',
            'email': 'email',
            'base_directory': 'baseDirectory',
            'region': 'region',
            'org_id': 'orgId',
            'tenant_id': 'tenantId',
            'roles': 'roles',
            'permissions': 'permissions',
            'mfa_enabled': 'mfaEnabled',
            'compliance_level': 'complianceLevel',
            'preferences': 'preferences'
        }

        self._auth0_user_id = auth0_user_id
        self._email = email
        self._base_directory = base_directory
        self._region = region
        self._org_id = org_id
        self._tenant_id = tenant_id
        self._roles = roles
        self._permissions = permissions
        self._mfa_enabled = mfa_enabled
        self._compliance_level = compliance_level
        self._preferences = preferences

    @classmethod
    def from_dict(cls, dikt) -> 'CreateAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateAccountRequest of this CreateAccountRequest.  # noqa: E501
        :rtype: CreateAccountRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth0_user_id(self) -> str:
        """Gets the auth0_user_id of this CreateAccountRequest.


        :return: The auth0_user_id of this CreateAccountRequest.
        :rtype: str
        """
        return self._auth0_user_id

    @auth0_user_id.setter
    def auth0_user_id(self, auth0_user_id: str):
        """Sets the auth0_user_id of this CreateAccountRequest.


        :param auth0_user_id: The auth0_user_id of this CreateAccountRequest.
        :type auth0_user_id: str
        """
        if auth0_user_id is None:
            raise ValueError("Invalid value for `auth0_user_id`, must not be `None`")  # noqa: E501

        self._auth0_user_id = auth0_user_id

    @property
    def email(self) -> str:
        """Gets the email of this CreateAccountRequest.


        :return: The email of this CreateAccountRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this CreateAccountRequest.


        :param email: The email of this CreateAccountRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def base_directory(self) -> str:
        """Gets the base_directory of this CreateAccountRequest.


        :return: The base_directory of this CreateAccountRequest.
        :rtype: str
        """
        return self._base_directory

    @base_directory.setter
    def base_directory(self, base_directory: str):
        """Sets the base_directory of this CreateAccountRequest.


        :param base_directory: The base_directory of this CreateAccountRequest.
        :type base_directory: str
        """

        self._base_directory = base_directory

    @property
    def region(self) -> str:
        """Gets the region of this CreateAccountRequest.


        :return: The region of this CreateAccountRequest.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region: str):
        """Sets the region of this CreateAccountRequest.


        :param region: The region of this CreateAccountRequest.
        :type region: str
        """

        self._region = region

    @property
    def org_id(self) -> str:
        """Gets the org_id of this CreateAccountRequest.


        :return: The org_id of this CreateAccountRequest.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: str):
        """Sets the org_id of this CreateAccountRequest.


        :param org_id: The org_id of this CreateAccountRequest.
        :type org_id: str
        """

        self._org_id = org_id

    @property
    def tenant_id(self) -> str:
        """Gets the tenant_id of this CreateAccountRequest.


        :return: The tenant_id of this CreateAccountRequest.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id: str):
        """Sets the tenant_id of this CreateAccountRequest.


        :param tenant_id: The tenant_id of this CreateAccountRequest.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def roles(self) -> List[str]:
        """Gets the roles of this CreateAccountRequest.


        :return: The roles of this CreateAccountRequest.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles: List[str]):
        """Sets the roles of this CreateAccountRequest.


        :param roles: The roles of this CreateAccountRequest.
        :type roles: List[str]
        """

        self._roles = roles

    @property
    def permissions(self) -> List[str]:
        """Gets the permissions of this CreateAccountRequest.


        :return: The permissions of this CreateAccountRequest.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions: List[str]):
        """Sets the permissions of this CreateAccountRequest.


        :param permissions: The permissions of this CreateAccountRequest.
        :type permissions: List[str]
        """

        self._permissions = permissions

    @property
    def mfa_enabled(self) -> bool:
        """Gets the mfa_enabled of this CreateAccountRequest.


        :return: The mfa_enabled of this CreateAccountRequest.
        :rtype: bool
        """
        return self._mfa_enabled

    @mfa_enabled.setter
    def mfa_enabled(self, mfa_enabled: bool):
        """Sets the mfa_enabled of this CreateAccountRequest.


        :param mfa_enabled: The mfa_enabled of this CreateAccountRequest.
        :type mfa_enabled: bool
        """

        self._mfa_enabled = mfa_enabled

    @property
    def compliance_level(self) -> ComplianceLevel:
        """Gets the compliance_level of this CreateAccountRequest.


        :return: The compliance_level of this CreateAccountRequest.
        :rtype: ComplianceLevel
        """
        return self._compliance_level

    @compliance_level.setter
    def compliance_level(self, compliance_level: ComplianceLevel):
        """Sets the compliance_level of this CreateAccountRequest.


        :param compliance_level: The compliance_level of this CreateAccountRequest.
        :type compliance_level: ComplianceLevel
        """

        self._compliance_level = compliance_level

    @property
    def preferences(self) -> Dict[str, str]:
        """Gets the preferences of this CreateAccountRequest.


        :return: The preferences of this CreateAccountRequest.
        :rtype: Dict[str, str]
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences: Dict[str, str]):
        """Sets the preferences of this CreateAccountRequest.


        :param preferences: The preferences of this CreateAccountRequest.
        :type preferences: Dict[str, str]
        """

        self._preferences = preferences
