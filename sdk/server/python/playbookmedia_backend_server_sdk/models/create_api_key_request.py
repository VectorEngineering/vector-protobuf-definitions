from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class CreateAPIKeyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, organization_id=None, workspace_id=None, tenant_id=None, account_id=None, name=None, description=None, scopes=None, expires_at=None, max_uses=None, allowed_ips=None, rate_limit=None, enforce_signing=None, allowed_signature_algorithms=None, enforce_mutual_tls=None, alert_emails=None, alert_on_quota_threshold=None, quota_alert_threshold=None):  # noqa: E501
        """CreateAPIKeyRequest - a model defined in OpenAPI

        :param organization_id: The organization_id of this CreateAPIKeyRequest.  # noqa: E501
        :type organization_id: str
        :param workspace_id: The workspace_id of this CreateAPIKeyRequest.  # noqa: E501
        :type workspace_id: str
        :param tenant_id: The tenant_id of this CreateAPIKeyRequest.  # noqa: E501
        :type tenant_id: str
        :param account_id: The account_id of this CreateAPIKeyRequest.  # noqa: E501
        :type account_id: str
        :param name: The name of this CreateAPIKeyRequest.  # noqa: E501
        :type name: str
        :param description: The description of this CreateAPIKeyRequest.  # noqa: E501
        :type description: str
        :param scopes: The scopes of this CreateAPIKeyRequest.  # noqa: E501
        :type scopes: List[str]
        :param expires_at: The expires_at of this CreateAPIKeyRequest.  # noqa: E501
        :type expires_at: datetime
        :param max_uses: The max_uses of this CreateAPIKeyRequest.  # noqa: E501
        :type max_uses: int
        :param allowed_ips: The allowed_ips of this CreateAPIKeyRequest.  # noqa: E501
        :type allowed_ips: List[str]
        :param rate_limit: The rate_limit of this CreateAPIKeyRequest.  # noqa: E501
        :type rate_limit: int
        :param enforce_signing: The enforce_signing of this CreateAPIKeyRequest.  # noqa: E501
        :type enforce_signing: bool
        :param allowed_signature_algorithms: The allowed_signature_algorithms of this CreateAPIKeyRequest.  # noqa: E501
        :type allowed_signature_algorithms: List[str]
        :param enforce_mutual_tls: The enforce_mutual_tls of this CreateAPIKeyRequest.  # noqa: E501
        :type enforce_mutual_tls: bool
        :param alert_emails: The alert_emails of this CreateAPIKeyRequest.  # noqa: E501
        :type alert_emails: List[str]
        :param alert_on_quota_threshold: The alert_on_quota_threshold of this CreateAPIKeyRequest.  # noqa: E501
        :type alert_on_quota_threshold: bool
        :param quota_alert_threshold: The quota_alert_threshold of this CreateAPIKeyRequest.  # noqa: E501
        :type quota_alert_threshold: float
        """
        self.openapi_types = {
            'organization_id': str,
            'workspace_id': str,
            'tenant_id': str,
            'account_id': str,
            'name': str,
            'description': str,
            'scopes': List[str],
            'expires_at': datetime,
            'max_uses': int,
            'allowed_ips': List[str],
            'rate_limit': int,
            'enforce_signing': bool,
            'allowed_signature_algorithms': List[str],
            'enforce_mutual_tls': bool,
            'alert_emails': List[str],
            'alert_on_quota_threshold': bool,
            'quota_alert_threshold': float
        }

        self.attribute_map = {
            'organization_id': 'organizationId',
            'workspace_id': 'workspaceId',
            'tenant_id': 'tenantId',
            'account_id': 'accountId',
            'name': 'name',
            'description': 'description',
            'scopes': 'scopes',
            'expires_at': 'expiresAt',
            'max_uses': 'maxUses',
            'allowed_ips': 'allowedIps',
            'rate_limit': 'rateLimit',
            'enforce_signing': 'enforceSigning',
            'allowed_signature_algorithms': 'allowedSignatureAlgorithms',
            'enforce_mutual_tls': 'enforceMutualTls',
            'alert_emails': 'alertEmails',
            'alert_on_quota_threshold': 'alertOnQuotaThreshold',
            'quota_alert_threshold': 'quotaAlertThreshold'
        }

        self._organization_id = organization_id
        self._workspace_id = workspace_id
        self._tenant_id = tenant_id
        self._account_id = account_id
        self._name = name
        self._description = description
        self._scopes = scopes
        self._expires_at = expires_at
        self._max_uses = max_uses
        self._allowed_ips = allowed_ips
        self._rate_limit = rate_limit
        self._enforce_signing = enforce_signing
        self._allowed_signature_algorithms = allowed_signature_algorithms
        self._enforce_mutual_tls = enforce_mutual_tls
        self._alert_emails = alert_emails
        self._alert_on_quota_threshold = alert_on_quota_threshold
        self._quota_alert_threshold = quota_alert_threshold

    @classmethod
    def from_dict(cls, dikt) -> 'CreateAPIKeyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateAPIKeyRequest of this CreateAPIKeyRequest.  # noqa: E501
        :rtype: CreateAPIKeyRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def organization_id(self) -> str:
        """Gets the organization_id of this CreateAPIKeyRequest.


        :return: The organization_id of this CreateAPIKeyRequest.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id: str):
        """Sets the organization_id of this CreateAPIKeyRequest.


        :param organization_id: The organization_id of this CreateAPIKeyRequest.
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def workspace_id(self) -> str:
        """Gets the workspace_id of this CreateAPIKeyRequest.


        :return: The workspace_id of this CreateAPIKeyRequest.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id: str):
        """Sets the workspace_id of this CreateAPIKeyRequest.


        :param workspace_id: The workspace_id of this CreateAPIKeyRequest.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id

    @property
    def tenant_id(self) -> str:
        """Gets the tenant_id of this CreateAPIKeyRequest.


        :return: The tenant_id of this CreateAPIKeyRequest.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id: str):
        """Sets the tenant_id of this CreateAPIKeyRequest.


        :param tenant_id: The tenant_id of this CreateAPIKeyRequest.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def account_id(self) -> str:
        """Gets the account_id of this CreateAPIKeyRequest.


        :return: The account_id of this CreateAPIKeyRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this CreateAPIKeyRequest.


        :param account_id: The account_id of this CreateAPIKeyRequest.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def name(self) -> str:
        """Gets the name of this CreateAPIKeyRequest.


        :return: The name of this CreateAPIKeyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CreateAPIKeyRequest.


        :param name: The name of this CreateAPIKeyRequest.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this CreateAPIKeyRequest.


        :return: The description of this CreateAPIKeyRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CreateAPIKeyRequest.


        :param description: The description of this CreateAPIKeyRequest.
        :type description: str
        """

        self._description = description

    @property
    def scopes(self) -> List[str]:
        """Gets the scopes of this CreateAPIKeyRequest.


        :return: The scopes of this CreateAPIKeyRequest.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes: List[str]):
        """Sets the scopes of this CreateAPIKeyRequest.


        :param scopes: The scopes of this CreateAPIKeyRequest.
        :type scopes: List[str]
        """

        self._scopes = scopes

    @property
    def expires_at(self) -> datetime:
        """Gets the expires_at of this CreateAPIKeyRequest.


        :return: The expires_at of this CreateAPIKeyRequest.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at: datetime):
        """Sets the expires_at of this CreateAPIKeyRequest.


        :param expires_at: The expires_at of this CreateAPIKeyRequest.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def max_uses(self) -> int:
        """Gets the max_uses of this CreateAPIKeyRequest.


        :return: The max_uses of this CreateAPIKeyRequest.
        :rtype: int
        """
        return self._max_uses

    @max_uses.setter
    def max_uses(self, max_uses: int):
        """Sets the max_uses of this CreateAPIKeyRequest.


        :param max_uses: The max_uses of this CreateAPIKeyRequest.
        :type max_uses: int
        """

        self._max_uses = max_uses

    @property
    def allowed_ips(self) -> List[str]:
        """Gets the allowed_ips of this CreateAPIKeyRequest.


        :return: The allowed_ips of this CreateAPIKeyRequest.
        :rtype: List[str]
        """
        return self._allowed_ips

    @allowed_ips.setter
    def allowed_ips(self, allowed_ips: List[str]):
        """Sets the allowed_ips of this CreateAPIKeyRequest.


        :param allowed_ips: The allowed_ips of this CreateAPIKeyRequest.
        :type allowed_ips: List[str]
        """

        self._allowed_ips = allowed_ips

    @property
    def rate_limit(self) -> int:
        """Gets the rate_limit of this CreateAPIKeyRequest.


        :return: The rate_limit of this CreateAPIKeyRequest.
        :rtype: int
        """
        return self._rate_limit

    @rate_limit.setter
    def rate_limit(self, rate_limit: int):
        """Sets the rate_limit of this CreateAPIKeyRequest.


        :param rate_limit: The rate_limit of this CreateAPIKeyRequest.
        :type rate_limit: int
        """

        self._rate_limit = rate_limit

    @property
    def enforce_signing(self) -> bool:
        """Gets the enforce_signing of this CreateAPIKeyRequest.


        :return: The enforce_signing of this CreateAPIKeyRequest.
        :rtype: bool
        """
        return self._enforce_signing

    @enforce_signing.setter
    def enforce_signing(self, enforce_signing: bool):
        """Sets the enforce_signing of this CreateAPIKeyRequest.


        :param enforce_signing: The enforce_signing of this CreateAPIKeyRequest.
        :type enforce_signing: bool
        """

        self._enforce_signing = enforce_signing

    @property
    def allowed_signature_algorithms(self) -> List[str]:
        """Gets the allowed_signature_algorithms of this CreateAPIKeyRequest.


        :return: The allowed_signature_algorithms of this CreateAPIKeyRequest.
        :rtype: List[str]
        """
        return self._allowed_signature_algorithms

    @allowed_signature_algorithms.setter
    def allowed_signature_algorithms(self, allowed_signature_algorithms: List[str]):
        """Sets the allowed_signature_algorithms of this CreateAPIKeyRequest.


        :param allowed_signature_algorithms: The allowed_signature_algorithms of this CreateAPIKeyRequest.
        :type allowed_signature_algorithms: List[str]
        """

        self._allowed_signature_algorithms = allowed_signature_algorithms

    @property
    def enforce_mutual_tls(self) -> bool:
        """Gets the enforce_mutual_tls of this CreateAPIKeyRequest.


        :return: The enforce_mutual_tls of this CreateAPIKeyRequest.
        :rtype: bool
        """
        return self._enforce_mutual_tls

    @enforce_mutual_tls.setter
    def enforce_mutual_tls(self, enforce_mutual_tls: bool):
        """Sets the enforce_mutual_tls of this CreateAPIKeyRequest.


        :param enforce_mutual_tls: The enforce_mutual_tls of this CreateAPIKeyRequest.
        :type enforce_mutual_tls: bool
        """

        self._enforce_mutual_tls = enforce_mutual_tls

    @property
    def alert_emails(self) -> List[str]:
        """Gets the alert_emails of this CreateAPIKeyRequest.


        :return: The alert_emails of this CreateAPIKeyRequest.
        :rtype: List[str]
        """
        return self._alert_emails

    @alert_emails.setter
    def alert_emails(self, alert_emails: List[str]):
        """Sets the alert_emails of this CreateAPIKeyRequest.


        :param alert_emails: The alert_emails of this CreateAPIKeyRequest.
        :type alert_emails: List[str]
        """

        self._alert_emails = alert_emails

    @property
    def alert_on_quota_threshold(self) -> bool:
        """Gets the alert_on_quota_threshold of this CreateAPIKeyRequest.


        :return: The alert_on_quota_threshold of this CreateAPIKeyRequest.
        :rtype: bool
        """
        return self._alert_on_quota_threshold

    @alert_on_quota_threshold.setter
    def alert_on_quota_threshold(self, alert_on_quota_threshold: bool):
        """Sets the alert_on_quota_threshold of this CreateAPIKeyRequest.


        :param alert_on_quota_threshold: The alert_on_quota_threshold of this CreateAPIKeyRequest.
        :type alert_on_quota_threshold: bool
        """

        self._alert_on_quota_threshold = alert_on_quota_threshold

    @property
    def quota_alert_threshold(self) -> float:
        """Gets the quota_alert_threshold of this CreateAPIKeyRequest.


        :return: The quota_alert_threshold of this CreateAPIKeyRequest.
        :rtype: float
        """
        return self._quota_alert_threshold

    @quota_alert_threshold.setter
    def quota_alert_threshold(self, quota_alert_threshold: float):
        """Sets the quota_alert_threshold of this CreateAPIKeyRequest.


        :param quota_alert_threshold: The quota_alert_threshold of this CreateAPIKeyRequest.
        :type quota_alert_threshold: float
        """

        self._quota_alert_threshold = quota_alert_threshold
