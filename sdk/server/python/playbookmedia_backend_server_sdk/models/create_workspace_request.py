from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class CreateWorkspaceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id=None, name=None, storage_quota=None, allow_public_sharing=None, require_approval=None, gdpr_compliant=None, hipaa_compliant=None):  # noqa: E501
        """CreateWorkspaceRequest - a model defined in OpenAPI

        :param account_id: The account_id of this CreateWorkspaceRequest.  # noqa: E501
        :type account_id: str
        :param name: The name of this CreateWorkspaceRequest.  # noqa: E501
        :type name: str
        :param storage_quota: The storage_quota of this CreateWorkspaceRequest.  # noqa: E501
        :type storage_quota: str
        :param allow_public_sharing: The allow_public_sharing of this CreateWorkspaceRequest.  # noqa: E501
        :type allow_public_sharing: bool
        :param require_approval: The require_approval of this CreateWorkspaceRequest.  # noqa: E501
        :type require_approval: bool
        :param gdpr_compliant: The gdpr_compliant of this CreateWorkspaceRequest.  # noqa: E501
        :type gdpr_compliant: bool
        :param hipaa_compliant: The hipaa_compliant of this CreateWorkspaceRequest.  # noqa: E501
        :type hipaa_compliant: bool
        """
        self.openapi_types = {
            'account_id': str,
            'name': str,
            'storage_quota': str,
            'allow_public_sharing': bool,
            'require_approval': bool,
            'gdpr_compliant': bool,
            'hipaa_compliant': bool
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'name': 'name',
            'storage_quota': 'storageQuota',
            'allow_public_sharing': 'allowPublicSharing',
            'require_approval': 'requireApproval',
            'gdpr_compliant': 'gdprCompliant',
            'hipaa_compliant': 'hipaaCompliant'
        }

        self._account_id = account_id
        self._name = name
        self._storage_quota = storage_quota
        self._allow_public_sharing = allow_public_sharing
        self._require_approval = require_approval
        self._gdpr_compliant = gdpr_compliant
        self._hipaa_compliant = hipaa_compliant

    @classmethod
    def from_dict(cls, dikt) -> 'CreateWorkspaceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateWorkspaceRequest of this CreateWorkspaceRequest.  # noqa: E501
        :rtype: CreateWorkspaceRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self) -> str:
        """Gets the account_id of this CreateWorkspaceRequest.


        :return: The account_id of this CreateWorkspaceRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this CreateWorkspaceRequest.


        :param account_id: The account_id of this CreateWorkspaceRequest.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def name(self) -> str:
        """Gets the name of this CreateWorkspaceRequest.


        :return: The name of this CreateWorkspaceRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CreateWorkspaceRequest.


        :param name: The name of this CreateWorkspaceRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def storage_quota(self) -> str:
        """Gets the storage_quota of this CreateWorkspaceRequest.


        :return: The storage_quota of this CreateWorkspaceRequest.
        :rtype: str
        """
        return self._storage_quota

    @storage_quota.setter
    def storage_quota(self, storage_quota: str):
        """Sets the storage_quota of this CreateWorkspaceRequest.


        :param storage_quota: The storage_quota of this CreateWorkspaceRequest.
        :type storage_quota: str
        """

        self._storage_quota = storage_quota

    @property
    def allow_public_sharing(self) -> bool:
        """Gets the allow_public_sharing of this CreateWorkspaceRequest.


        :return: The allow_public_sharing of this CreateWorkspaceRequest.
        :rtype: bool
        """
        return self._allow_public_sharing

    @allow_public_sharing.setter
    def allow_public_sharing(self, allow_public_sharing: bool):
        """Sets the allow_public_sharing of this CreateWorkspaceRequest.


        :param allow_public_sharing: The allow_public_sharing of this CreateWorkspaceRequest.
        :type allow_public_sharing: bool
        """

        self._allow_public_sharing = allow_public_sharing

    @property
    def require_approval(self) -> bool:
        """Gets the require_approval of this CreateWorkspaceRequest.


        :return: The require_approval of this CreateWorkspaceRequest.
        :rtype: bool
        """
        return self._require_approval

    @require_approval.setter
    def require_approval(self, require_approval: bool):
        """Sets the require_approval of this CreateWorkspaceRequest.


        :param require_approval: The require_approval of this CreateWorkspaceRequest.
        :type require_approval: bool
        """

        self._require_approval = require_approval

    @property
    def gdpr_compliant(self) -> bool:
        """Gets the gdpr_compliant of this CreateWorkspaceRequest.


        :return: The gdpr_compliant of this CreateWorkspaceRequest.
        :rtype: bool
        """
        return self._gdpr_compliant

    @gdpr_compliant.setter
    def gdpr_compliant(self, gdpr_compliant: bool):
        """Sets the gdpr_compliant of this CreateWorkspaceRequest.


        :param gdpr_compliant: The gdpr_compliant of this CreateWorkspaceRequest.
        :type gdpr_compliant: bool
        """

        self._gdpr_compliant = gdpr_compliant

    @property
    def hipaa_compliant(self) -> bool:
        """Gets the hipaa_compliant of this CreateWorkspaceRequest.


        :return: The hipaa_compliant of this CreateWorkspaceRequest.
        :rtype: bool
        """
        return self._hipaa_compliant

    @hipaa_compliant.setter
    def hipaa_compliant(self, hipaa_compliant: bool):
        """Sets the hipaa_compliant of this CreateWorkspaceRequest.


        :param hipaa_compliant: The hipaa_compliant of this CreateWorkspaceRequest.
        :type hipaa_compliant: bool
        """

        self._hipaa_compliant = hipaa_compliant
