from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class DataProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, profile_type=None, data_fields=None, is_default=None, created_at=None, updated_at=None):  # noqa: E501
        """DataProfile - a model defined in OpenAPI

        :param id: The id of this DataProfile.  # noqa: E501
        :type id: str
        :param name: The name of this DataProfile.  # noqa: E501
        :type name: str
        :param profile_type: The profile_type of this DataProfile.  # noqa: E501
        :type profile_type: str
        :param data_fields: The data_fields of this DataProfile.  # noqa: E501
        :type data_fields: Dict[str, str]
        :param is_default: The is_default of this DataProfile.  # noqa: E501
        :type is_default: bool
        :param created_at: The created_at of this DataProfile.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this DataProfile.  # noqa: E501
        :type updated_at: datetime
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'profile_type': str,
            'data_fields': Dict[str, str],
            'is_default': bool,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'profile_type': 'profileType',
            'data_fields': 'dataFields',
            'is_default': 'isDefault',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._id = id
        self._name = name
        self._profile_type = profile_type
        self._data_fields = data_fields
        self._is_default = is_default
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'DataProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataProfile of this DataProfile.  # noqa: E501
        :rtype: DataProfile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this DataProfile.


        :return: The id of this DataProfile.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this DataProfile.


        :param id: The id of this DataProfile.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this DataProfile.


        :return: The name of this DataProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DataProfile.


        :param name: The name of this DataProfile.
        :type name: str
        """

        self._name = name

    @property
    def profile_type(self) -> str:
        """Gets the profile_type of this DataProfile.


        :return: The profile_type of this DataProfile.
        :rtype: str
        """
        return self._profile_type

    @profile_type.setter
    def profile_type(self, profile_type: str):
        """Sets the profile_type of this DataProfile.


        :param profile_type: The profile_type of this DataProfile.
        :type profile_type: str
        """

        self._profile_type = profile_type

    @property
    def data_fields(self) -> Dict[str, str]:
        """Gets the data_fields of this DataProfile.


        :return: The data_fields of this DataProfile.
        :rtype: Dict[str, str]
        """
        return self._data_fields

    @data_fields.setter
    def data_fields(self, data_fields: Dict[str, str]):
        """Sets the data_fields of this DataProfile.


        :param data_fields: The data_fields of this DataProfile.
        :type data_fields: Dict[str, str]
        """

        self._data_fields = data_fields

    @property
    def is_default(self) -> bool:
        """Gets the is_default of this DataProfile.


        :return: The is_default of this DataProfile.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default: bool):
        """Sets the is_default of this DataProfile.


        :param is_default: The is_default of this DataProfile.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this DataProfile.


        :return: The created_at of this DataProfile.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this DataProfile.


        :param created_at: The created_at of this DataProfile.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this DataProfile.


        :return: The updated_at of this DataProfile.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this DataProfile.


        :param updated_at: The updated_at of this DataProfile.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
