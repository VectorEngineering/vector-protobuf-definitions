from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.branch_merge import BranchMerge
from playbookmedia_backend_server_sdk.models.branch_policy import BranchPolicy
from playbookmedia_backend_server_sdk.models.merge_request import MergeRequest
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.branch_merge import BranchMerge  # noqa: E501
from playbookmedia_backend_server_sdk.models.branch_policy import BranchPolicy  # noqa: E501
from playbookmedia_backend_server_sdk.models.merge_request import MergeRequest  # noqa: E501

class DocumentBranch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, base_version_hash=None, current_head_hash=None, purpose=None, status=None, reviewers=None, branch_metadata=None, is_locked=None, last_updated=None, merges=None, policy=None, merge_requests=None):  # noqa: E501
        """DocumentBranch - a model defined in OpenAPI

        :param id: The id of this DocumentBranch.  # noqa: E501
        :type id: str
        :param name: The name of this DocumentBranch.  # noqa: E501
        :type name: str
        :param base_version_hash: The base_version_hash of this DocumentBranch.  # noqa: E501
        :type base_version_hash: str
        :param current_head_hash: The current_head_hash of this DocumentBranch.  # noqa: E501
        :type current_head_hash: str
        :param purpose: The purpose of this DocumentBranch.  # noqa: E501
        :type purpose: str
        :param status: The status of this DocumentBranch.  # noqa: E501
        :type status: str
        :param reviewers: The reviewers of this DocumentBranch.  # noqa: E501
        :type reviewers: List[str]
        :param branch_metadata: The branch_metadata of this DocumentBranch.  # noqa: E501
        :type branch_metadata: Dict[str, str]
        :param is_locked: The is_locked of this DocumentBranch.  # noqa: E501
        :type is_locked: bool
        :param last_updated: The last_updated of this DocumentBranch.  # noqa: E501
        :type last_updated: datetime
        :param merges: The merges of this DocumentBranch.  # noqa: E501
        :type merges: List[BranchMerge]
        :param policy: The policy of this DocumentBranch.  # noqa: E501
        :type policy: BranchPolicy
        :param merge_requests: The merge_requests of this DocumentBranch.  # noqa: E501
        :type merge_requests: List[MergeRequest]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'base_version_hash': str,
            'current_head_hash': str,
            'purpose': str,
            'status': str,
            'reviewers': List[str],
            'branch_metadata': Dict[str, str],
            'is_locked': bool,
            'last_updated': datetime,
            'merges': List[BranchMerge],
            'policy': BranchPolicy,
            'merge_requests': List[MergeRequest]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'base_version_hash': 'baseVersionHash',
            'current_head_hash': 'currentHeadHash',
            'purpose': 'purpose',
            'status': 'status',
            'reviewers': 'reviewers',
            'branch_metadata': 'branchMetadata',
            'is_locked': 'isLocked',
            'last_updated': 'lastUpdated',
            'merges': 'merges',
            'policy': 'policy',
            'merge_requests': 'mergeRequests'
        }

        self._id = id
        self._name = name
        self._base_version_hash = base_version_hash
        self._current_head_hash = current_head_hash
        self._purpose = purpose
        self._status = status
        self._reviewers = reviewers
        self._branch_metadata = branch_metadata
        self._is_locked = is_locked
        self._last_updated = last_updated
        self._merges = merges
        self._policy = policy
        self._merge_requests = merge_requests

    @classmethod
    def from_dict(cls, dikt) -> 'DocumentBranch':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DocumentBranch of this DocumentBranch.  # noqa: E501
        :rtype: DocumentBranch
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this DocumentBranch.


        :return: The id of this DocumentBranch.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this DocumentBranch.


        :param id: The id of this DocumentBranch.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this DocumentBranch.


        :return: The name of this DocumentBranch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DocumentBranch.


        :param name: The name of this DocumentBranch.
        :type name: str
        """

        self._name = name

    @property
    def base_version_hash(self) -> str:
        """Gets the base_version_hash of this DocumentBranch.


        :return: The base_version_hash of this DocumentBranch.
        :rtype: str
        """
        return self._base_version_hash

    @base_version_hash.setter
    def base_version_hash(self, base_version_hash: str):
        """Sets the base_version_hash of this DocumentBranch.


        :param base_version_hash: The base_version_hash of this DocumentBranch.
        :type base_version_hash: str
        """

        self._base_version_hash = base_version_hash

    @property
    def current_head_hash(self) -> str:
        """Gets the current_head_hash of this DocumentBranch.


        :return: The current_head_hash of this DocumentBranch.
        :rtype: str
        """
        return self._current_head_hash

    @current_head_hash.setter
    def current_head_hash(self, current_head_hash: str):
        """Sets the current_head_hash of this DocumentBranch.


        :param current_head_hash: The current_head_hash of this DocumentBranch.
        :type current_head_hash: str
        """

        self._current_head_hash = current_head_hash

    @property
    def purpose(self) -> str:
        """Gets the purpose of this DocumentBranch.


        :return: The purpose of this DocumentBranch.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose: str):
        """Sets the purpose of this DocumentBranch.


        :param purpose: The purpose of this DocumentBranch.
        :type purpose: str
        """

        self._purpose = purpose

    @property
    def status(self) -> str:
        """Gets the status of this DocumentBranch.


        :return: The status of this DocumentBranch.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this DocumentBranch.


        :param status: The status of this DocumentBranch.
        :type status: str
        """

        self._status = status

    @property
    def reviewers(self) -> List[str]:
        """Gets the reviewers of this DocumentBranch.


        :return: The reviewers of this DocumentBranch.
        :rtype: List[str]
        """
        return self._reviewers

    @reviewers.setter
    def reviewers(self, reviewers: List[str]):
        """Sets the reviewers of this DocumentBranch.


        :param reviewers: The reviewers of this DocumentBranch.
        :type reviewers: List[str]
        """

        self._reviewers = reviewers

    @property
    def branch_metadata(self) -> Dict[str, str]:
        """Gets the branch_metadata of this DocumentBranch.


        :return: The branch_metadata of this DocumentBranch.
        :rtype: Dict[str, str]
        """
        return self._branch_metadata

    @branch_metadata.setter
    def branch_metadata(self, branch_metadata: Dict[str, str]):
        """Sets the branch_metadata of this DocumentBranch.


        :param branch_metadata: The branch_metadata of this DocumentBranch.
        :type branch_metadata: Dict[str, str]
        """

        self._branch_metadata = branch_metadata

    @property
    def is_locked(self) -> bool:
        """Gets the is_locked of this DocumentBranch.


        :return: The is_locked of this DocumentBranch.
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked: bool):
        """Sets the is_locked of this DocumentBranch.


        :param is_locked: The is_locked of this DocumentBranch.
        :type is_locked: bool
        """

        self._is_locked = is_locked

    @property
    def last_updated(self) -> datetime:
        """Gets the last_updated of this DocumentBranch.


        :return: The last_updated of this DocumentBranch.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: datetime):
        """Sets the last_updated of this DocumentBranch.


        :param last_updated: The last_updated of this DocumentBranch.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def merges(self) -> List[BranchMerge]:
        """Gets the merges of this DocumentBranch.


        :return: The merges of this DocumentBranch.
        :rtype: List[BranchMerge]
        """
        return self._merges

    @merges.setter
    def merges(self, merges: List[BranchMerge]):
        """Sets the merges of this DocumentBranch.


        :param merges: The merges of this DocumentBranch.
        :type merges: List[BranchMerge]
        """

        self._merges = merges

    @property
    def policy(self) -> BranchPolicy:
        """Gets the policy of this DocumentBranch.


        :return: The policy of this DocumentBranch.
        :rtype: BranchPolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy: BranchPolicy):
        """Sets the policy of this DocumentBranch.


        :param policy: The policy of this DocumentBranch.
        :type policy: BranchPolicy
        """

        self._policy = policy

    @property
    def merge_requests(self) -> List[MergeRequest]:
        """Gets the merge_requests of this DocumentBranch.


        :return: The merge_requests of this DocumentBranch.
        :rtype: List[MergeRequest]
        """
        return self._merge_requests

    @merge_requests.setter
    def merge_requests(self, merge_requests: List[MergeRequest]):
        """Sets the merge_requests of this DocumentBranch.


        :param merge_requests: The merge_requests of this DocumentBranch.
        :type merge_requests: List[MergeRequest]
        """

        self._merge_requests = merge_requests
