from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.contract_intelligence import ContractIntelligence
from playbookmedia_backend_server_sdk.models.document_instance import DocumentInstance
from playbookmedia_backend_server_sdk.models.explanation_block import ExplanationBlock
from playbookmedia_backend_server_sdk.models.template_type import TemplateType
from playbookmedia_backend_server_sdk.models.template_variable import TemplateVariable
from playbookmedia_backend_server_sdk.models.template_version import TemplateVersion
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.contract_intelligence import ContractIntelligence  # noqa: E501
from playbookmedia_backend_server_sdk.models.document_instance import DocumentInstance  # noqa: E501
from playbookmedia_backend_server_sdk.models.explanation_block import ExplanationBlock  # noqa: E501
from playbookmedia_backend_server_sdk.models.template_type import TemplateType  # noqa: E501
from playbookmedia_backend_server_sdk.models.template_variable import TemplateVariable  # noqa: E501
from playbookmedia_backend_server_sdk.models.template_version import TemplateVersion  # noqa: E501

class DocumentTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, description=None, industry_type=None, document_type=None, base_content=None, is_adaptive=None, metadata=None, supported_languages=None, required_data_fields=None, version=None, created_at=None, updated_at=None, template_type=TemplateType.UNSPECIFIED, content=None, detected_variables=None, variable_mappings=None, is_context_aware=None, supported_contexts=None, formatting_rules=None, conditional_sections=None, versions=None, variables=None, instances=None, explanations=None, intelligence=None):  # noqa: E501
        """DocumentTemplate - a model defined in OpenAPI

        :param id: The id of this DocumentTemplate.  # noqa: E501
        :type id: str
        :param name: The name of this DocumentTemplate.  # noqa: E501
        :type name: str
        :param description: The description of this DocumentTemplate.  # noqa: E501
        :type description: str
        :param industry_type: The industry_type of this DocumentTemplate.  # noqa: E501
        :type industry_type: str
        :param document_type: The document_type of this DocumentTemplate.  # noqa: E501
        :type document_type: str
        :param base_content: The base_content of this DocumentTemplate.  # noqa: E501
        :type base_content: str
        :param is_adaptive: The is_adaptive of this DocumentTemplate.  # noqa: E501
        :type is_adaptive: bool
        :param metadata: The metadata of this DocumentTemplate.  # noqa: E501
        :type metadata: Dict[str, str]
        :param supported_languages: The supported_languages of this DocumentTemplate.  # noqa: E501
        :type supported_languages: List[str]
        :param required_data_fields: The required_data_fields of this DocumentTemplate.  # noqa: E501
        :type required_data_fields: List[str]
        :param version: The version of this DocumentTemplate.  # noqa: E501
        :type version: str
        :param created_at: The created_at of this DocumentTemplate.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this DocumentTemplate.  # noqa: E501
        :type updated_at: datetime
        :param template_type: The template_type of this DocumentTemplate.  # noqa: E501
        :type template_type: TemplateType
        :param content: The content of this DocumentTemplate.  # noqa: E501
        :type content: str
        :param detected_variables: The detected_variables of this DocumentTemplate.  # noqa: E501
        :type detected_variables: List[str]
        :param variable_mappings: The variable_mappings of this DocumentTemplate.  # noqa: E501
        :type variable_mappings: Dict[str, str]
        :param is_context_aware: The is_context_aware of this DocumentTemplate.  # noqa: E501
        :type is_context_aware: bool
        :param supported_contexts: The supported_contexts of this DocumentTemplate.  # noqa: E501
        :type supported_contexts: List[str]
        :param formatting_rules: The formatting_rules of this DocumentTemplate.  # noqa: E501
        :type formatting_rules: Dict[str, str]
        :param conditional_sections: The conditional_sections of this DocumentTemplate.  # noqa: E501
        :type conditional_sections: List[str]
        :param versions: The versions of this DocumentTemplate.  # noqa: E501
        :type versions: List[TemplateVersion]
        :param variables: The variables of this DocumentTemplate.  # noqa: E501
        :type variables: List[TemplateVariable]
        :param instances: The instances of this DocumentTemplate.  # noqa: E501
        :type instances: List[DocumentInstance]
        :param explanations: The explanations of this DocumentTemplate.  # noqa: E501
        :type explanations: List[ExplanationBlock]
        :param intelligence: The intelligence of this DocumentTemplate.  # noqa: E501
        :type intelligence: List[ContractIntelligence]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'industry_type': str,
            'document_type': str,
            'base_content': str,
            'is_adaptive': bool,
            'metadata': Dict[str, str],
            'supported_languages': List[str],
            'required_data_fields': List[str],
            'version': str,
            'created_at': datetime,
            'updated_at': datetime,
            'template_type': TemplateType,
            'content': str,
            'detected_variables': List[str],
            'variable_mappings': Dict[str, str],
            'is_context_aware': bool,
            'supported_contexts': List[str],
            'formatting_rules': Dict[str, str],
            'conditional_sections': List[str],
            'versions': List[TemplateVersion],
            'variables': List[TemplateVariable],
            'instances': List[DocumentInstance],
            'explanations': List[ExplanationBlock],
            'intelligence': List[ContractIntelligence]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'industry_type': 'industryType',
            'document_type': 'documentType',
            'base_content': 'baseContent',
            'is_adaptive': 'isAdaptive',
            'metadata': 'metadata',
            'supported_languages': 'supportedLanguages',
            'required_data_fields': 'requiredDataFields',
            'version': 'version',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'template_type': 'templateType',
            'content': 'content',
            'detected_variables': 'detectedVariables',
            'variable_mappings': 'variableMappings',
            'is_context_aware': 'isContextAware',
            'supported_contexts': 'supportedContexts',
            'formatting_rules': 'formattingRules',
            'conditional_sections': 'conditionalSections',
            'versions': 'versions',
            'variables': 'variables',
            'instances': 'instances',
            'explanations': 'explanations',
            'intelligence': 'intelligence'
        }

        self._id = id
        self._name = name
        self._description = description
        self._industry_type = industry_type
        self._document_type = document_type
        self._base_content = base_content
        self._is_adaptive = is_adaptive
        self._metadata = metadata
        self._supported_languages = supported_languages
        self._required_data_fields = required_data_fields
        self._version = version
        self._created_at = created_at
        self._updated_at = updated_at
        self._template_type = template_type
        self._content = content
        self._detected_variables = detected_variables
        self._variable_mappings = variable_mappings
        self._is_context_aware = is_context_aware
        self._supported_contexts = supported_contexts
        self._formatting_rules = formatting_rules
        self._conditional_sections = conditional_sections
        self._versions = versions
        self._variables = variables
        self._instances = instances
        self._explanations = explanations
        self._intelligence = intelligence

    @classmethod
    def from_dict(cls, dikt) -> 'DocumentTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DocumentTemplate of this DocumentTemplate.  # noqa: E501
        :rtype: DocumentTemplate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this DocumentTemplate.


        :return: The id of this DocumentTemplate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this DocumentTemplate.


        :param id: The id of this DocumentTemplate.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this DocumentTemplate.


        :return: The name of this DocumentTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DocumentTemplate.


        :param name: The name of this DocumentTemplate.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this DocumentTemplate.


        :return: The description of this DocumentTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this DocumentTemplate.


        :param description: The description of this DocumentTemplate.
        :type description: str
        """

        self._description = description

    @property
    def industry_type(self) -> str:
        """Gets the industry_type of this DocumentTemplate.


        :return: The industry_type of this DocumentTemplate.
        :rtype: str
        """
        return self._industry_type

    @industry_type.setter
    def industry_type(self, industry_type: str):
        """Sets the industry_type of this DocumentTemplate.


        :param industry_type: The industry_type of this DocumentTemplate.
        :type industry_type: str
        """

        self._industry_type = industry_type

    @property
    def document_type(self) -> str:
        """Gets the document_type of this DocumentTemplate.


        :return: The document_type of this DocumentTemplate.
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type: str):
        """Sets the document_type of this DocumentTemplate.


        :param document_type: The document_type of this DocumentTemplate.
        :type document_type: str
        """

        self._document_type = document_type

    @property
    def base_content(self) -> str:
        """Gets the base_content of this DocumentTemplate.


        :return: The base_content of this DocumentTemplate.
        :rtype: str
        """
        return self._base_content

    @base_content.setter
    def base_content(self, base_content: str):
        """Sets the base_content of this DocumentTemplate.


        :param base_content: The base_content of this DocumentTemplate.
        :type base_content: str
        """

        self._base_content = base_content

    @property
    def is_adaptive(self) -> bool:
        """Gets the is_adaptive of this DocumentTemplate.


        :return: The is_adaptive of this DocumentTemplate.
        :rtype: bool
        """
        return self._is_adaptive

    @is_adaptive.setter
    def is_adaptive(self, is_adaptive: bool):
        """Sets the is_adaptive of this DocumentTemplate.


        :param is_adaptive: The is_adaptive of this DocumentTemplate.
        :type is_adaptive: bool
        """

        self._is_adaptive = is_adaptive

    @property
    def metadata(self) -> Dict[str, str]:
        """Gets the metadata of this DocumentTemplate.


        :return: The metadata of this DocumentTemplate.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Dict[str, str]):
        """Sets the metadata of this DocumentTemplate.


        :param metadata: The metadata of this DocumentTemplate.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def supported_languages(self) -> List[str]:
        """Gets the supported_languages of this DocumentTemplate.


        :return: The supported_languages of this DocumentTemplate.
        :rtype: List[str]
        """
        return self._supported_languages

    @supported_languages.setter
    def supported_languages(self, supported_languages: List[str]):
        """Sets the supported_languages of this DocumentTemplate.


        :param supported_languages: The supported_languages of this DocumentTemplate.
        :type supported_languages: List[str]
        """

        self._supported_languages = supported_languages

    @property
    def required_data_fields(self) -> List[str]:
        """Gets the required_data_fields of this DocumentTemplate.


        :return: The required_data_fields of this DocumentTemplate.
        :rtype: List[str]
        """
        return self._required_data_fields

    @required_data_fields.setter
    def required_data_fields(self, required_data_fields: List[str]):
        """Sets the required_data_fields of this DocumentTemplate.


        :param required_data_fields: The required_data_fields of this DocumentTemplate.
        :type required_data_fields: List[str]
        """

        self._required_data_fields = required_data_fields

    @property
    def version(self) -> str:
        """Gets the version of this DocumentTemplate.


        :return: The version of this DocumentTemplate.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this DocumentTemplate.


        :param version: The version of this DocumentTemplate.
        :type version: str
        """

        self._version = version

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this DocumentTemplate.


        :return: The created_at of this DocumentTemplate.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this DocumentTemplate.


        :param created_at: The created_at of this DocumentTemplate.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this DocumentTemplate.


        :return: The updated_at of this DocumentTemplate.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this DocumentTemplate.


        :param updated_at: The updated_at of this DocumentTemplate.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def template_type(self) -> TemplateType:
        """Gets the template_type of this DocumentTemplate.


        :return: The template_type of this DocumentTemplate.
        :rtype: TemplateType
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type: TemplateType):
        """Sets the template_type of this DocumentTemplate.


        :param template_type: The template_type of this DocumentTemplate.
        :type template_type: TemplateType
        """

        self._template_type = template_type

    @property
    def content(self) -> str:
        """Gets the content of this DocumentTemplate.


        :return: The content of this DocumentTemplate.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this DocumentTemplate.


        :param content: The content of this DocumentTemplate.
        :type content: str
        """

        self._content = content

    @property
    def detected_variables(self) -> List[str]:
        """Gets the detected_variables of this DocumentTemplate.


        :return: The detected_variables of this DocumentTemplate.
        :rtype: List[str]
        """
        return self._detected_variables

    @detected_variables.setter
    def detected_variables(self, detected_variables: List[str]):
        """Sets the detected_variables of this DocumentTemplate.


        :param detected_variables: The detected_variables of this DocumentTemplate.
        :type detected_variables: List[str]
        """

        self._detected_variables = detected_variables

    @property
    def variable_mappings(self) -> Dict[str, str]:
        """Gets the variable_mappings of this DocumentTemplate.


        :return: The variable_mappings of this DocumentTemplate.
        :rtype: Dict[str, str]
        """
        return self._variable_mappings

    @variable_mappings.setter
    def variable_mappings(self, variable_mappings: Dict[str, str]):
        """Sets the variable_mappings of this DocumentTemplate.


        :param variable_mappings: The variable_mappings of this DocumentTemplate.
        :type variable_mappings: Dict[str, str]
        """

        self._variable_mappings = variable_mappings

    @property
    def is_context_aware(self) -> bool:
        """Gets the is_context_aware of this DocumentTemplate.


        :return: The is_context_aware of this DocumentTemplate.
        :rtype: bool
        """
        return self._is_context_aware

    @is_context_aware.setter
    def is_context_aware(self, is_context_aware: bool):
        """Sets the is_context_aware of this DocumentTemplate.


        :param is_context_aware: The is_context_aware of this DocumentTemplate.
        :type is_context_aware: bool
        """

        self._is_context_aware = is_context_aware

    @property
    def supported_contexts(self) -> List[str]:
        """Gets the supported_contexts of this DocumentTemplate.


        :return: The supported_contexts of this DocumentTemplate.
        :rtype: List[str]
        """
        return self._supported_contexts

    @supported_contexts.setter
    def supported_contexts(self, supported_contexts: List[str]):
        """Sets the supported_contexts of this DocumentTemplate.


        :param supported_contexts: The supported_contexts of this DocumentTemplate.
        :type supported_contexts: List[str]
        """

        self._supported_contexts = supported_contexts

    @property
    def formatting_rules(self) -> Dict[str, str]:
        """Gets the formatting_rules of this DocumentTemplate.


        :return: The formatting_rules of this DocumentTemplate.
        :rtype: Dict[str, str]
        """
        return self._formatting_rules

    @formatting_rules.setter
    def formatting_rules(self, formatting_rules: Dict[str, str]):
        """Sets the formatting_rules of this DocumentTemplate.


        :param formatting_rules: The formatting_rules of this DocumentTemplate.
        :type formatting_rules: Dict[str, str]
        """

        self._formatting_rules = formatting_rules

    @property
    def conditional_sections(self) -> List[str]:
        """Gets the conditional_sections of this DocumentTemplate.


        :return: The conditional_sections of this DocumentTemplate.
        :rtype: List[str]
        """
        return self._conditional_sections

    @conditional_sections.setter
    def conditional_sections(self, conditional_sections: List[str]):
        """Sets the conditional_sections of this DocumentTemplate.


        :param conditional_sections: The conditional_sections of this DocumentTemplate.
        :type conditional_sections: List[str]
        """

        self._conditional_sections = conditional_sections

    @property
    def versions(self) -> List[TemplateVersion]:
        """Gets the versions of this DocumentTemplate.


        :return: The versions of this DocumentTemplate.
        :rtype: List[TemplateVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions: List[TemplateVersion]):
        """Sets the versions of this DocumentTemplate.


        :param versions: The versions of this DocumentTemplate.
        :type versions: List[TemplateVersion]
        """

        self._versions = versions

    @property
    def variables(self) -> List[TemplateVariable]:
        """Gets the variables of this DocumentTemplate.


        :return: The variables of this DocumentTemplate.
        :rtype: List[TemplateVariable]
        """
        return self._variables

    @variables.setter
    def variables(self, variables: List[TemplateVariable]):
        """Sets the variables of this DocumentTemplate.


        :param variables: The variables of this DocumentTemplate.
        :type variables: List[TemplateVariable]
        """

        self._variables = variables

    @property
    def instances(self) -> List[DocumentInstance]:
        """Gets the instances of this DocumentTemplate.


        :return: The instances of this DocumentTemplate.
        :rtype: List[DocumentInstance]
        """
        return self._instances

    @instances.setter
    def instances(self, instances: List[DocumentInstance]):
        """Sets the instances of this DocumentTemplate.


        :param instances: The instances of this DocumentTemplate.
        :type instances: List[DocumentInstance]
        """

        self._instances = instances

    @property
    def explanations(self) -> List[ExplanationBlock]:
        """Gets the explanations of this DocumentTemplate.


        :return: The explanations of this DocumentTemplate.
        :rtype: List[ExplanationBlock]
        """
        return self._explanations

    @explanations.setter
    def explanations(self, explanations: List[ExplanationBlock]):
        """Sets the explanations of this DocumentTemplate.


        :param explanations: The explanations of this DocumentTemplate.
        :type explanations: List[ExplanationBlock]
        """

        self._explanations = explanations

    @property
    def intelligence(self) -> List[ContractIntelligence]:
        """Gets the intelligence of this DocumentTemplate.


        :return: The intelligence of this DocumentTemplate.
        :rtype: List[ContractIntelligence]
        """
        return self._intelligence

    @intelligence.setter
    def intelligence(self, intelligence: List[ContractIntelligence]):
        """Sets the intelligence of this DocumentTemplate.


        :param intelligence: The intelligence of this DocumentTemplate.
        :type intelligence: List[ContractIntelligence]
        """

        self._intelligence = intelligence
