from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.change_set import ChangeSet
from playbookmedia_backend_server_sdk.models.contextual_summary import ContextualSummary
from playbookmedia_backend_server_sdk.models.document_branch import DocumentBranch
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.change_set import ChangeSet  # noqa: E501
from playbookmedia_backend_server_sdk.models.contextual_summary import ContextualSummary  # noqa: E501
from playbookmedia_backend_server_sdk.models.document_branch import DocumentBranch  # noqa: E501

class DocumentVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, version_hash=None, parent_hash=None, commit_message=None, author_id=None, branch_name=None, metadata=None, tags=None, is_approved=None, approval_chain=None, created_at=None, branches=None, changes=None, summaries=None):  # noqa: E501
        """DocumentVersion - a model defined in OpenAPI

        :param id: The id of this DocumentVersion.  # noqa: E501
        :type id: str
        :param version_hash: The version_hash of this DocumentVersion.  # noqa: E501
        :type version_hash: str
        :param parent_hash: The parent_hash of this DocumentVersion.  # noqa: E501
        :type parent_hash: str
        :param commit_message: The commit_message of this DocumentVersion.  # noqa: E501
        :type commit_message: str
        :param author_id: The author_id of this DocumentVersion.  # noqa: E501
        :type author_id: str
        :param branch_name: The branch_name of this DocumentVersion.  # noqa: E501
        :type branch_name: str
        :param metadata: The metadata of this DocumentVersion.  # noqa: E501
        :type metadata: Dict[str, str]
        :param tags: The tags of this DocumentVersion.  # noqa: E501
        :type tags: List[str]
        :param is_approved: The is_approved of this DocumentVersion.  # noqa: E501
        :type is_approved: bool
        :param approval_chain: The approval_chain of this DocumentVersion.  # noqa: E501
        :type approval_chain: str
        :param created_at: The created_at of this DocumentVersion.  # noqa: E501
        :type created_at: datetime
        :param branches: The branches of this DocumentVersion.  # noqa: E501
        :type branches: List[DocumentBranch]
        :param changes: The changes of this DocumentVersion.  # noqa: E501
        :type changes: List[ChangeSet]
        :param summaries: The summaries of this DocumentVersion.  # noqa: E501
        :type summaries: List[ContextualSummary]
        """
        self.openapi_types = {
            'id': str,
            'version_hash': str,
            'parent_hash': str,
            'commit_message': str,
            'author_id': str,
            'branch_name': str,
            'metadata': Dict[str, str],
            'tags': List[str],
            'is_approved': bool,
            'approval_chain': str,
            'created_at': datetime,
            'branches': List[DocumentBranch],
            'changes': List[ChangeSet],
            'summaries': List[ContextualSummary]
        }

        self.attribute_map = {
            'id': 'id',
            'version_hash': 'versionHash',
            'parent_hash': 'parentHash',
            'commit_message': 'commitMessage',
            'author_id': 'authorId',
            'branch_name': 'branchName',
            'metadata': 'metadata',
            'tags': 'tags',
            'is_approved': 'isApproved',
            'approval_chain': 'approvalChain',
            'created_at': 'createdAt',
            'branches': 'branches',
            'changes': 'changes',
            'summaries': 'summaries'
        }

        self._id = id
        self._version_hash = version_hash
        self._parent_hash = parent_hash
        self._commit_message = commit_message
        self._author_id = author_id
        self._branch_name = branch_name
        self._metadata = metadata
        self._tags = tags
        self._is_approved = is_approved
        self._approval_chain = approval_chain
        self._created_at = created_at
        self._branches = branches
        self._changes = changes
        self._summaries = summaries

    @classmethod
    def from_dict(cls, dikt) -> 'DocumentVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DocumentVersion of this DocumentVersion.  # noqa: E501
        :rtype: DocumentVersion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this DocumentVersion.


        :return: The id of this DocumentVersion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this DocumentVersion.


        :param id: The id of this DocumentVersion.
        :type id: str
        """

        self._id = id

    @property
    def version_hash(self) -> str:
        """Gets the version_hash of this DocumentVersion.


        :return: The version_hash of this DocumentVersion.
        :rtype: str
        """
        return self._version_hash

    @version_hash.setter
    def version_hash(self, version_hash: str):
        """Sets the version_hash of this DocumentVersion.


        :param version_hash: The version_hash of this DocumentVersion.
        :type version_hash: str
        """

        self._version_hash = version_hash

    @property
    def parent_hash(self) -> str:
        """Gets the parent_hash of this DocumentVersion.


        :return: The parent_hash of this DocumentVersion.
        :rtype: str
        """
        return self._parent_hash

    @parent_hash.setter
    def parent_hash(self, parent_hash: str):
        """Sets the parent_hash of this DocumentVersion.


        :param parent_hash: The parent_hash of this DocumentVersion.
        :type parent_hash: str
        """

        self._parent_hash = parent_hash

    @property
    def commit_message(self) -> str:
        """Gets the commit_message of this DocumentVersion.


        :return: The commit_message of this DocumentVersion.
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message: str):
        """Sets the commit_message of this DocumentVersion.


        :param commit_message: The commit_message of this DocumentVersion.
        :type commit_message: str
        """

        self._commit_message = commit_message

    @property
    def author_id(self) -> str:
        """Gets the author_id of this DocumentVersion.


        :return: The author_id of this DocumentVersion.
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id: str):
        """Sets the author_id of this DocumentVersion.


        :param author_id: The author_id of this DocumentVersion.
        :type author_id: str
        """

        self._author_id = author_id

    @property
    def branch_name(self) -> str:
        """Gets the branch_name of this DocumentVersion.


        :return: The branch_name of this DocumentVersion.
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name: str):
        """Sets the branch_name of this DocumentVersion.


        :param branch_name: The branch_name of this DocumentVersion.
        :type branch_name: str
        """

        self._branch_name = branch_name

    @property
    def metadata(self) -> Dict[str, str]:
        """Gets the metadata of this DocumentVersion.


        :return: The metadata of this DocumentVersion.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Dict[str, str]):
        """Sets the metadata of this DocumentVersion.


        :param metadata: The metadata of this DocumentVersion.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this DocumentVersion.


        :return: The tags of this DocumentVersion.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this DocumentVersion.


        :param tags: The tags of this DocumentVersion.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def is_approved(self) -> bool:
        """Gets the is_approved of this DocumentVersion.


        :return: The is_approved of this DocumentVersion.
        :rtype: bool
        """
        return self._is_approved

    @is_approved.setter
    def is_approved(self, is_approved: bool):
        """Sets the is_approved of this DocumentVersion.


        :param is_approved: The is_approved of this DocumentVersion.
        :type is_approved: bool
        """

        self._is_approved = is_approved

    @property
    def approval_chain(self) -> str:
        """Gets the approval_chain of this DocumentVersion.


        :return: The approval_chain of this DocumentVersion.
        :rtype: str
        """
        return self._approval_chain

    @approval_chain.setter
    def approval_chain(self, approval_chain: str):
        """Sets the approval_chain of this DocumentVersion.


        :param approval_chain: The approval_chain of this DocumentVersion.
        :type approval_chain: str
        """

        self._approval_chain = approval_chain

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this DocumentVersion.


        :return: The created_at of this DocumentVersion.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this DocumentVersion.


        :param created_at: The created_at of this DocumentVersion.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def branches(self) -> List[DocumentBranch]:
        """Gets the branches of this DocumentVersion.


        :return: The branches of this DocumentVersion.
        :rtype: List[DocumentBranch]
        """
        return self._branches

    @branches.setter
    def branches(self, branches: List[DocumentBranch]):
        """Sets the branches of this DocumentVersion.


        :param branches: The branches of this DocumentVersion.
        :type branches: List[DocumentBranch]
        """

        self._branches = branches

    @property
    def changes(self) -> List[ChangeSet]:
        """Gets the changes of this DocumentVersion.


        :return: The changes of this DocumentVersion.
        :rtype: List[ChangeSet]
        """
        return self._changes

    @changes.setter
    def changes(self, changes: List[ChangeSet]):
        """Sets the changes of this DocumentVersion.


        :param changes: The changes of this DocumentVersion.
        :type changes: List[ChangeSet]
        """

        self._changes = changes

    @property
    def summaries(self) -> List[ContextualSummary]:
        """Gets the summaries of this DocumentVersion.


        :return: The summaries of this DocumentVersion.
        :rtype: List[ContextualSummary]
        """
        return self._summaries

    @summaries.setter
    def summaries(self, summaries: List[ContextualSummary]):
        """Sets the summaries of this DocumentVersion.


        :param summaries: The summaries of this DocumentVersion.
        :type summaries: List[ContextualSummary]
        """

        self._summaries = summaries
