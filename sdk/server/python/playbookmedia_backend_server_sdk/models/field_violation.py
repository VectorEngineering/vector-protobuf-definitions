from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class FieldViolation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field=None, validation=None, message=None, expected=None, actual=None):  # noqa: E501
        """FieldViolation - a model defined in OpenAPI

        :param _field: The _field of this FieldViolation.  # noqa: E501
        :type _field: str
        :param validation: The validation of this FieldViolation.  # noqa: E501
        :type validation: str
        :param message: The message of this FieldViolation.  # noqa: E501
        :type message: str
        :param expected: The expected of this FieldViolation.  # noqa: E501
        :type expected: str
        :param actual: The actual of this FieldViolation.  # noqa: E501
        :type actual: str
        """
        self.openapi_types = {
            '_field': str,
            'validation': str,
            'message': str,
            'expected': str,
            'actual': str
        }

        self.attribute_map = {
            '_field': 'field',
            'validation': 'validation',
            'message': 'message',
            'expected': 'expected',
            'actual': 'actual'
        }

        self.__field = _field
        self._validation = validation
        self._message = message
        self._expected = expected
        self._actual = actual

    @classmethod
    def from_dict(cls, dikt) -> 'FieldViolation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FieldViolation of this FieldViolation.  # noqa: E501
        :rtype: FieldViolation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self) -> str:
        """Gets the _field of this FieldViolation.


        :return: The _field of this FieldViolation.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field: str):
        """Sets the _field of this FieldViolation.


        :param _field: The _field of this FieldViolation.
        :type _field: str
        """

        self.__field = _field

    @property
    def validation(self) -> str:
        """Gets the validation of this FieldViolation.


        :return: The validation of this FieldViolation.
        :rtype: str
        """
        return self._validation

    @validation.setter
    def validation(self, validation: str):
        """Sets the validation of this FieldViolation.


        :param validation: The validation of this FieldViolation.
        :type validation: str
        """

        self._validation = validation

    @property
    def message(self) -> str:
        """Gets the message of this FieldViolation.


        :return: The message of this FieldViolation.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this FieldViolation.


        :param message: The message of this FieldViolation.
        :type message: str
        """

        self._message = message

    @property
    def expected(self) -> str:
        """Gets the expected of this FieldViolation.


        :return: The expected of this FieldViolation.
        :rtype: str
        """
        return self._expected

    @expected.setter
    def expected(self, expected: str):
        """Sets the expected of this FieldViolation.


        :param expected: The expected of this FieldViolation.
        :type expected: str
        """

        self._expected = expected

    @property
    def actual(self) -> str:
        """Gets the actual of this FieldViolation.


        :return: The actual of this FieldViolation.
        :rtype: str
        """
        return self._actual

    @actual.setter
    def actual(self, actual: str):
        """Sets the actual of this FieldViolation.


        :param actual: The actual of this FieldViolation.
        :type actual: str
        """

        self._actual = actual
