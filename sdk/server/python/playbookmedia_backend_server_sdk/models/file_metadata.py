from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.comment_thread import CommentThread
from playbookmedia_backend_server_sdk.models.document_snapshot import DocumentSnapshot
from playbookmedia_backend_server_sdk.models.file_embeddings import FileEmbeddings
from playbookmedia_backend_server_sdk.models.file_sharing import FileSharing
from playbookmedia_backend_server_sdk.models.file_version import FileVersion
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.comment_thread import CommentThread  # noqa: E501
from playbookmedia_backend_server_sdk.models.document_snapshot import DocumentSnapshot  # noqa: E501
from playbookmedia_backend_server_sdk.models.file_embeddings import FileEmbeddings  # noqa: E501
from playbookmedia_backend_server_sdk.models.file_sharing import FileSharing  # noqa: E501
from playbookmedia_backend_server_sdk.models.file_version import FileVersion  # noqa: E501

class FileMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, size=None, s3_key=None, s3_bucket_name=None, is_deleted=None, version=None, created_at=None, updated_at=None, deleted_at=None, embeddings=None, versions=None, comments=None, sharing=None, snapshots=None):  # noqa: E501
        """FileMetadata - a model defined in OpenAPI

        :param id: The id of this FileMetadata.  # noqa: E501
        :type id: str
        :param name: The name of this FileMetadata.  # noqa: E501
        :type name: str
        :param size: The size of this FileMetadata.  # noqa: E501
        :type size: str
        :param s3_key: The s3_key of this FileMetadata.  # noqa: E501
        :type s3_key: str
        :param s3_bucket_name: The s3_bucket_name of this FileMetadata.  # noqa: E501
        :type s3_bucket_name: str
        :param is_deleted: The is_deleted of this FileMetadata.  # noqa: E501
        :type is_deleted: bool
        :param version: The version of this FileMetadata.  # noqa: E501
        :type version: int
        :param created_at: The created_at of this FileMetadata.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this FileMetadata.  # noqa: E501
        :type updated_at: datetime
        :param deleted_at: The deleted_at of this FileMetadata.  # noqa: E501
        :type deleted_at: datetime
        :param embeddings: The embeddings of this FileMetadata.  # noqa: E501
        :type embeddings: FileEmbeddings
        :param versions: The versions of this FileMetadata.  # noqa: E501
        :type versions: List[FileVersion]
        :param comments: The comments of this FileMetadata.  # noqa: E501
        :type comments: List[CommentThread]
        :param sharing: The sharing of this FileMetadata.  # noqa: E501
        :type sharing: List[FileSharing]
        :param snapshots: The snapshots of this FileMetadata.  # noqa: E501
        :type snapshots: List[DocumentSnapshot]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'size': str,
            's3_key': str,
            's3_bucket_name': str,
            'is_deleted': bool,
            'version': int,
            'created_at': datetime,
            'updated_at': datetime,
            'deleted_at': datetime,
            'embeddings': FileEmbeddings,
            'versions': List[FileVersion],
            'comments': List[CommentThread],
            'sharing': List[FileSharing],
            'snapshots': List[DocumentSnapshot]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'size': 'size',
            's3_key': 's3Key',
            's3_bucket_name': 's3BucketName',
            'is_deleted': 'isDeleted',
            'version': 'version',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'deleted_at': 'deletedAt',
            'embeddings': 'embeddings',
            'versions': 'versions',
            'comments': 'comments',
            'sharing': 'sharing',
            'snapshots': 'snapshots'
        }

        self._id = id
        self._name = name
        self._size = size
        self._s3_key = s3_key
        self._s3_bucket_name = s3_bucket_name
        self._is_deleted = is_deleted
        self._version = version
        self._created_at = created_at
        self._updated_at = updated_at
        self._deleted_at = deleted_at
        self._embeddings = embeddings
        self._versions = versions
        self._comments = comments
        self._sharing = sharing
        self._snapshots = snapshots

    @classmethod
    def from_dict(cls, dikt) -> 'FileMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FileMetadata of this FileMetadata.  # noqa: E501
        :rtype: FileMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this FileMetadata.


        :return: The id of this FileMetadata.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this FileMetadata.


        :param id: The id of this FileMetadata.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this FileMetadata.


        :return: The name of this FileMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this FileMetadata.


        :param name: The name of this FileMetadata.
        :type name: str
        """

        self._name = name

    @property
    def size(self) -> str:
        """Gets the size of this FileMetadata.


        :return: The size of this FileMetadata.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size: str):
        """Sets the size of this FileMetadata.


        :param size: The size of this FileMetadata.
        :type size: str
        """

        self._size = size

    @property
    def s3_key(self) -> str:
        """Gets the s3_key of this FileMetadata.


        :return: The s3_key of this FileMetadata.
        :rtype: str
        """
        return self._s3_key

    @s3_key.setter
    def s3_key(self, s3_key: str):
        """Sets the s3_key of this FileMetadata.


        :param s3_key: The s3_key of this FileMetadata.
        :type s3_key: str
        """

        self._s3_key = s3_key

    @property
    def s3_bucket_name(self) -> str:
        """Gets the s3_bucket_name of this FileMetadata.


        :return: The s3_bucket_name of this FileMetadata.
        :rtype: str
        """
        return self._s3_bucket_name

    @s3_bucket_name.setter
    def s3_bucket_name(self, s3_bucket_name: str):
        """Sets the s3_bucket_name of this FileMetadata.


        :param s3_bucket_name: The s3_bucket_name of this FileMetadata.
        :type s3_bucket_name: str
        """

        self._s3_bucket_name = s3_bucket_name

    @property
    def is_deleted(self) -> bool:
        """Gets the is_deleted of this FileMetadata.


        :return: The is_deleted of this FileMetadata.
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted: bool):
        """Sets the is_deleted of this FileMetadata.


        :param is_deleted: The is_deleted of this FileMetadata.
        :type is_deleted: bool
        """

        self._is_deleted = is_deleted

    @property
    def version(self) -> int:
        """Gets the version of this FileMetadata.


        :return: The version of this FileMetadata.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: int):
        """Sets the version of this FileMetadata.


        :param version: The version of this FileMetadata.
        :type version: int
        """

        self._version = version

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this FileMetadata.


        :return: The created_at of this FileMetadata.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this FileMetadata.


        :param created_at: The created_at of this FileMetadata.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this FileMetadata.


        :return: The updated_at of this FileMetadata.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this FileMetadata.


        :param updated_at: The updated_at of this FileMetadata.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self) -> datetime:
        """Gets the deleted_at of this FileMetadata.


        :return: The deleted_at of this FileMetadata.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: datetime):
        """Sets the deleted_at of this FileMetadata.


        :param deleted_at: The deleted_at of this FileMetadata.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def embeddings(self) -> FileEmbeddings:
        """Gets the embeddings of this FileMetadata.


        :return: The embeddings of this FileMetadata.
        :rtype: FileEmbeddings
        """
        return self._embeddings

    @embeddings.setter
    def embeddings(self, embeddings: FileEmbeddings):
        """Sets the embeddings of this FileMetadata.


        :param embeddings: The embeddings of this FileMetadata.
        :type embeddings: FileEmbeddings
        """

        self._embeddings = embeddings

    @property
    def versions(self) -> List[FileVersion]:
        """Gets the versions of this FileMetadata.


        :return: The versions of this FileMetadata.
        :rtype: List[FileVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions: List[FileVersion]):
        """Sets the versions of this FileMetadata.


        :param versions: The versions of this FileMetadata.
        :type versions: List[FileVersion]
        """

        self._versions = versions

    @property
    def comments(self) -> List[CommentThread]:
        """Gets the comments of this FileMetadata.


        :return: The comments of this FileMetadata.
        :rtype: List[CommentThread]
        """
        return self._comments

    @comments.setter
    def comments(self, comments: List[CommentThread]):
        """Sets the comments of this FileMetadata.


        :param comments: The comments of this FileMetadata.
        :type comments: List[CommentThread]
        """

        self._comments = comments

    @property
    def sharing(self) -> List[FileSharing]:
        """Gets the sharing of this FileMetadata.


        :return: The sharing of this FileMetadata.
        :rtype: List[FileSharing]
        """
        return self._sharing

    @sharing.setter
    def sharing(self, sharing: List[FileSharing]):
        """Sets the sharing of this FileMetadata.


        :param sharing: The sharing of this FileMetadata.
        :type sharing: List[FileSharing]
        """

        self._sharing = sharing

    @property
    def snapshots(self) -> List[DocumentSnapshot]:
        """Gets the snapshots of this FileMetadata.


        :return: The snapshots of this FileMetadata.
        :rtype: List[DocumentSnapshot]
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots: List[DocumentSnapshot]):
        """Sets the snapshots of this FileMetadata.


        :param snapshots: The snapshots of this FileMetadata.
        :type snapshots: List[DocumentSnapshot]
        """

        self._snapshots = snapshots
