from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.business_hours import BusinessHours
from playbookmedia_backend_server_sdk.models.employee_benefit import EmployeeBenefit
from playbookmedia_backend_server_sdk.models.revenue_range import RevenueRange
from playbookmedia_backend_server_sdk.models.review import Review
from playbookmedia_backend_server_sdk.models.scraping_job import ScrapingJob
from playbookmedia_backend_server_sdk.models.workspace import Workspace
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.business_hours import BusinessHours  # noqa: E501
from playbookmedia_backend_server_sdk.models.employee_benefit import EmployeeBenefit  # noqa: E501
from playbookmedia_backend_server_sdk.models.revenue_range import RevenueRange  # noqa: E501
from playbookmedia_backend_server_sdk.models.review import Review  # noqa: E501
from playbookmedia_backend_server_sdk.models.scraping_job import ScrapingJob  # noqa: E501
from playbookmedia_backend_server_sdk.models.workspace import Workspace  # noqa: E501

class Lead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, website=None, phone=None, address=None, city=None, state=None, country=None, latitude=None, longitude=None, google_rating=None, review_count=None, industry=None, employee_count=None, estimated_revenue=None, org_id=None, tenant_id=None, created_at=None, updated_at=None, deleted_at=None, job=None, workspace=None, place_id=None, google_maps_url=None, business_status=None, regular_hours=None, special_hours=None, photo_references=None, main_photo_url=None, reviews=None, types=None, amenities=None, serves_vegetarian_food=None, outdoor_seating=None, payment_methods=None, wheelchair_accessible=None, parking_available=None, social_media=None, rating_category=None, rating=None, count=None, last_updated=None, data_source_version=None, scraping_session_id=None, alternate_phones=None, contact_person_name=None, contact_person_title=None, contact_email=None, founded_year=None, business_type=None, certifications=None, license_number=None, revenue_range=RevenueRange.UNSPECIFIED, funding_stage=None, is_public_company=None, website_load_speed=None, has_ssl_certificate=None, cms_used=None, ecommerce_platforms=None, timezone=None, neighborhood=None, nearby_landmarks=None, transportation_access=None, employee_benefits=None, parent_company=None, subsidiaries=None, is_franchise=None, seo_keywords=None, uses_google_ads=None, google_my_business_category=None, naics_code=None, sic_code=None, unspsc_code=None, is_green_certified=None, energy_sources=None, sustainability_rating=None, recent_announcements=None, last_product_launch=None, has_litigation_history=None, export_control_status=None):  # noqa: E501
        """Lead - a model defined in OpenAPI

        :param id: The id of this Lead.  # noqa: E501
        :type id: str
        :param name: The name of this Lead.  # noqa: E501
        :type name: str
        :param website: The website of this Lead.  # noqa: E501
        :type website: str
        :param phone: The phone of this Lead.  # noqa: E501
        :type phone: str
        :param address: The address of this Lead.  # noqa: E501
        :type address: str
        :param city: The city of this Lead.  # noqa: E501
        :type city: str
        :param state: The state of this Lead.  # noqa: E501
        :type state: str
        :param country: The country of this Lead.  # noqa: E501
        :type country: str
        :param latitude: The latitude of this Lead.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this Lead.  # noqa: E501
        :type longitude: float
        :param google_rating: The google_rating of this Lead.  # noqa: E501
        :type google_rating: float
        :param review_count: The review_count of this Lead.  # noqa: E501
        :type review_count: int
        :param industry: The industry of this Lead.  # noqa: E501
        :type industry: str
        :param employee_count: The employee_count of this Lead.  # noqa: E501
        :type employee_count: int
        :param estimated_revenue: The estimated_revenue of this Lead.  # noqa: E501
        :type estimated_revenue: str
        :param org_id: The org_id of this Lead.  # noqa: E501
        :type org_id: str
        :param tenant_id: The tenant_id of this Lead.  # noqa: E501
        :type tenant_id: str
        :param created_at: The created_at of this Lead.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this Lead.  # noqa: E501
        :type updated_at: datetime
        :param deleted_at: The deleted_at of this Lead.  # noqa: E501
        :type deleted_at: datetime
        :param job: The job of this Lead.  # noqa: E501
        :type job: ScrapingJob
        :param workspace: The workspace of this Lead.  # noqa: E501
        :type workspace: Workspace
        :param place_id: The place_id of this Lead.  # noqa: E501
        :type place_id: str
        :param google_maps_url: The google_maps_url of this Lead.  # noqa: E501
        :type google_maps_url: str
        :param business_status: The business_status of this Lead.  # noqa: E501
        :type business_status: str
        :param regular_hours: The regular_hours of this Lead.  # noqa: E501
        :type regular_hours: List[BusinessHours]
        :param special_hours: The special_hours of this Lead.  # noqa: E501
        :type special_hours: List[BusinessHours]
        :param photo_references: The photo_references of this Lead.  # noqa: E501
        :type photo_references: List[str]
        :param main_photo_url: The main_photo_url of this Lead.  # noqa: E501
        :type main_photo_url: str
        :param reviews: The reviews of this Lead.  # noqa: E501
        :type reviews: List[Review]
        :param types: The types of this Lead.  # noqa: E501
        :type types: List[str]
        :param amenities: The amenities of this Lead.  # noqa: E501
        :type amenities: List[str]
        :param serves_vegetarian_food: The serves_vegetarian_food of this Lead.  # noqa: E501
        :type serves_vegetarian_food: bool
        :param outdoor_seating: The outdoor_seating of this Lead.  # noqa: E501
        :type outdoor_seating: bool
        :param payment_methods: The payment_methods of this Lead.  # noqa: E501
        :type payment_methods: List[str]
        :param wheelchair_accessible: The wheelchair_accessible of this Lead.  # noqa: E501
        :type wheelchair_accessible: bool
        :param parking_available: The parking_available of this Lead.  # noqa: E501
        :type parking_available: bool
        :param social_media: The social_media of this Lead.  # noqa: E501
        :type social_media: Dict[str, str]
        :param rating_category: The rating_category of this Lead.  # noqa: E501
        :type rating_category: str
        :param rating: The rating of this Lead.  # noqa: E501
        :type rating: float
        :param count: The count of this Lead.  # noqa: E501
        :type count: int
        :param last_updated: The last_updated of this Lead.  # noqa: E501
        :type last_updated: datetime
        :param data_source_version: The data_source_version of this Lead.  # noqa: E501
        :type data_source_version: str
        :param scraping_session_id: The scraping_session_id of this Lead.  # noqa: E501
        :type scraping_session_id: str
        :param alternate_phones: The alternate_phones of this Lead.  # noqa: E501
        :type alternate_phones: List[str]
        :param contact_person_name: The contact_person_name of this Lead.  # noqa: E501
        :type contact_person_name: str
        :param contact_person_title: The contact_person_title of this Lead.  # noqa: E501
        :type contact_person_title: str
        :param contact_email: The contact_email of this Lead.  # noqa: E501
        :type contact_email: str
        :param founded_year: The founded_year of this Lead.  # noqa: E501
        :type founded_year: int
        :param business_type: The business_type of this Lead.  # noqa: E501
        :type business_type: str
        :param certifications: The certifications of this Lead.  # noqa: E501
        :type certifications: List[str]
        :param license_number: The license_number of this Lead.  # noqa: E501
        :type license_number: str
        :param revenue_range: The revenue_range of this Lead.  # noqa: E501
        :type revenue_range: RevenueRange
        :param funding_stage: The funding_stage of this Lead.  # noqa: E501
        :type funding_stage: str
        :param is_public_company: The is_public_company of this Lead.  # noqa: E501
        :type is_public_company: bool
        :param website_load_speed: The website_load_speed of this Lead.  # noqa: E501
        :type website_load_speed: float
        :param has_ssl_certificate: The has_ssl_certificate of this Lead.  # noqa: E501
        :type has_ssl_certificate: bool
        :param cms_used: The cms_used of this Lead.  # noqa: E501
        :type cms_used: str
        :param ecommerce_platforms: The ecommerce_platforms of this Lead.  # noqa: E501
        :type ecommerce_platforms: List[str]
        :param timezone: The timezone of this Lead.  # noqa: E501
        :type timezone: str
        :param neighborhood: The neighborhood of this Lead.  # noqa: E501
        :type neighborhood: str
        :param nearby_landmarks: The nearby_landmarks of this Lead.  # noqa: E501
        :type nearby_landmarks: List[str]
        :param transportation_access: The transportation_access of this Lead.  # noqa: E501
        :type transportation_access: str
        :param employee_benefits: The employee_benefits of this Lead.  # noqa: E501
        :type employee_benefits: List[EmployeeBenefit]
        :param parent_company: The parent_company of this Lead.  # noqa: E501
        :type parent_company: str
        :param subsidiaries: The subsidiaries of this Lead.  # noqa: E501
        :type subsidiaries: List[str]
        :param is_franchise: The is_franchise of this Lead.  # noqa: E501
        :type is_franchise: bool
        :param seo_keywords: The seo_keywords of this Lead.  # noqa: E501
        :type seo_keywords: List[str]
        :param uses_google_ads: The uses_google_ads of this Lead.  # noqa: E501
        :type uses_google_ads: bool
        :param google_my_business_category: The google_my_business_category of this Lead.  # noqa: E501
        :type google_my_business_category: str
        :param naics_code: The naics_code of this Lead.  # noqa: E501
        :type naics_code: str
        :param sic_code: The sic_code of this Lead.  # noqa: E501
        :type sic_code: str
        :param unspsc_code: The unspsc_code of this Lead.  # noqa: E501
        :type unspsc_code: str
        :param is_green_certified: The is_green_certified of this Lead.  # noqa: E501
        :type is_green_certified: bool
        :param energy_sources: The energy_sources of this Lead.  # noqa: E501
        :type energy_sources: List[str]
        :param sustainability_rating: The sustainability_rating of this Lead.  # noqa: E501
        :type sustainability_rating: str
        :param recent_announcements: The recent_announcements of this Lead.  # noqa: E501
        :type recent_announcements: List[str]
        :param last_product_launch: The last_product_launch of this Lead.  # noqa: E501
        :type last_product_launch: datetime
        :param has_litigation_history: The has_litigation_history of this Lead.  # noqa: E501
        :type has_litigation_history: bool
        :param export_control_status: The export_control_status of this Lead.  # noqa: E501
        :type export_control_status: str
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'website': str,
            'phone': str,
            'address': str,
            'city': str,
            'state': str,
            'country': str,
            'latitude': float,
            'longitude': float,
            'google_rating': float,
            'review_count': int,
            'industry': str,
            'employee_count': int,
            'estimated_revenue': str,
            'org_id': str,
            'tenant_id': str,
            'created_at': datetime,
            'updated_at': datetime,
            'deleted_at': datetime,
            'job': ScrapingJob,
            'workspace': Workspace,
            'place_id': str,
            'google_maps_url': str,
            'business_status': str,
            'regular_hours': List[BusinessHours],
            'special_hours': List[BusinessHours],
            'photo_references': List[str],
            'main_photo_url': str,
            'reviews': List[Review],
            'types': List[str],
            'amenities': List[str],
            'serves_vegetarian_food': bool,
            'outdoor_seating': bool,
            'payment_methods': List[str],
            'wheelchair_accessible': bool,
            'parking_available': bool,
            'social_media': Dict[str, str],
            'rating_category': str,
            'rating': float,
            'count': int,
            'last_updated': datetime,
            'data_source_version': str,
            'scraping_session_id': str,
            'alternate_phones': List[str],
            'contact_person_name': str,
            'contact_person_title': str,
            'contact_email': str,
            'founded_year': int,
            'business_type': str,
            'certifications': List[str],
            'license_number': str,
            'revenue_range': RevenueRange,
            'funding_stage': str,
            'is_public_company': bool,
            'website_load_speed': float,
            'has_ssl_certificate': bool,
            'cms_used': str,
            'ecommerce_platforms': List[str],
            'timezone': str,
            'neighborhood': str,
            'nearby_landmarks': List[str],
            'transportation_access': str,
            'employee_benefits': List[EmployeeBenefit],
            'parent_company': str,
            'subsidiaries': List[str],
            'is_franchise': bool,
            'seo_keywords': List[str],
            'uses_google_ads': bool,
            'google_my_business_category': str,
            'naics_code': str,
            'sic_code': str,
            'unspsc_code': str,
            'is_green_certified': bool,
            'energy_sources': List[str],
            'sustainability_rating': str,
            'recent_announcements': List[str],
            'last_product_launch': datetime,
            'has_litigation_history': bool,
            'export_control_status': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'website': 'website',
            'phone': 'phone',
            'address': 'address',
            'city': 'city',
            'state': 'state',
            'country': 'country',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'google_rating': 'googleRating',
            'review_count': 'reviewCount',
            'industry': 'industry',
            'employee_count': 'employeeCount',
            'estimated_revenue': 'estimatedRevenue',
            'org_id': 'orgId',
            'tenant_id': 'tenantId',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'deleted_at': 'deletedAt',
            'job': 'job',
            'workspace': 'workspace',
            'place_id': 'placeId',
            'google_maps_url': 'googleMapsUrl',
            'business_status': 'businessStatus',
            'regular_hours': 'regularHours',
            'special_hours': 'specialHours',
            'photo_references': 'photoReferences',
            'main_photo_url': 'mainPhotoUrl',
            'reviews': 'reviews',
            'types': 'types',
            'amenities': 'amenities',
            'serves_vegetarian_food': 'servesVegetarianFood',
            'outdoor_seating': 'outdoorSeating',
            'payment_methods': 'paymentMethods',
            'wheelchair_accessible': 'wheelchairAccessible',
            'parking_available': 'parkingAvailable',
            'social_media': 'socialMedia',
            'rating_category': 'ratingCategory',
            'rating': 'rating',
            'count': 'count',
            'last_updated': 'lastUpdated',
            'data_source_version': 'dataSourceVersion',
            'scraping_session_id': 'scrapingSessionId',
            'alternate_phones': 'alternatePhones',
            'contact_person_name': 'contactPersonName',
            'contact_person_title': 'contactPersonTitle',
            'contact_email': 'contactEmail',
            'founded_year': 'foundedYear',
            'business_type': 'businessType',
            'certifications': 'certifications',
            'license_number': 'licenseNumber',
            'revenue_range': 'revenueRange',
            'funding_stage': 'fundingStage',
            'is_public_company': 'isPublicCompany',
            'website_load_speed': 'websiteLoadSpeed',
            'has_ssl_certificate': 'hasSslCertificate',
            'cms_used': 'cmsUsed',
            'ecommerce_platforms': 'ecommercePlatforms',
            'timezone': 'timezone',
            'neighborhood': 'neighborhood',
            'nearby_landmarks': 'nearbyLandmarks',
            'transportation_access': 'transportationAccess',
            'employee_benefits': 'employeeBenefits',
            'parent_company': 'parentCompany',
            'subsidiaries': 'subsidiaries',
            'is_franchise': 'isFranchise',
            'seo_keywords': 'seoKeywords',
            'uses_google_ads': 'usesGoogleAds',
            'google_my_business_category': 'googleMyBusinessCategory',
            'naics_code': 'naicsCode',
            'sic_code': 'sicCode',
            'unspsc_code': 'unspscCode',
            'is_green_certified': 'isGreenCertified',
            'energy_sources': 'energySources',
            'sustainability_rating': 'sustainabilityRating',
            'recent_announcements': 'recentAnnouncements',
            'last_product_launch': 'lastProductLaunch',
            'has_litigation_history': 'hasLitigationHistory',
            'export_control_status': 'exportControlStatus'
        }

        self._id = id
        self._name = name
        self._website = website
        self._phone = phone
        self._address = address
        self._city = city
        self._state = state
        self._country = country
        self._latitude = latitude
        self._longitude = longitude
        self._google_rating = google_rating
        self._review_count = review_count
        self._industry = industry
        self._employee_count = employee_count
        self._estimated_revenue = estimated_revenue
        self._org_id = org_id
        self._tenant_id = tenant_id
        self._created_at = created_at
        self._updated_at = updated_at
        self._deleted_at = deleted_at
        self._job = job
        self._workspace = workspace
        self._place_id = place_id
        self._google_maps_url = google_maps_url
        self._business_status = business_status
        self._regular_hours = regular_hours
        self._special_hours = special_hours
        self._photo_references = photo_references
        self._main_photo_url = main_photo_url
        self._reviews = reviews
        self._types = types
        self._amenities = amenities
        self._serves_vegetarian_food = serves_vegetarian_food
        self._outdoor_seating = outdoor_seating
        self._payment_methods = payment_methods
        self._wheelchair_accessible = wheelchair_accessible
        self._parking_available = parking_available
        self._social_media = social_media
        self._rating_category = rating_category
        self._rating = rating
        self._count = count
        self._last_updated = last_updated
        self._data_source_version = data_source_version
        self._scraping_session_id = scraping_session_id
        self._alternate_phones = alternate_phones
        self._contact_person_name = contact_person_name
        self._contact_person_title = contact_person_title
        self._contact_email = contact_email
        self._founded_year = founded_year
        self._business_type = business_type
        self._certifications = certifications
        self._license_number = license_number
        self._revenue_range = revenue_range
        self._funding_stage = funding_stage
        self._is_public_company = is_public_company
        self._website_load_speed = website_load_speed
        self._has_ssl_certificate = has_ssl_certificate
        self._cms_used = cms_used
        self._ecommerce_platforms = ecommerce_platforms
        self._timezone = timezone
        self._neighborhood = neighborhood
        self._nearby_landmarks = nearby_landmarks
        self._transportation_access = transportation_access
        self._employee_benefits = employee_benefits
        self._parent_company = parent_company
        self._subsidiaries = subsidiaries
        self._is_franchise = is_franchise
        self._seo_keywords = seo_keywords
        self._uses_google_ads = uses_google_ads
        self._google_my_business_category = google_my_business_category
        self._naics_code = naics_code
        self._sic_code = sic_code
        self._unspsc_code = unspsc_code
        self._is_green_certified = is_green_certified
        self._energy_sources = energy_sources
        self._sustainability_rating = sustainability_rating
        self._recent_announcements = recent_announcements
        self._last_product_launch = last_product_launch
        self._has_litigation_history = has_litigation_history
        self._export_control_status = export_control_status

    @classmethod
    def from_dict(cls, dikt) -> 'Lead':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Lead of this Lead.  # noqa: E501
        :rtype: Lead
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Lead.


        :return: The id of this Lead.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Lead.


        :param id: The id of this Lead.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Lead.


        :return: The name of this Lead.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Lead.


        :param name: The name of this Lead.
        :type name: str
        """

        self._name = name

    @property
    def website(self) -> str:
        """Gets the website of this Lead.


        :return: The website of this Lead.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website: str):
        """Sets the website of this Lead.


        :param website: The website of this Lead.
        :type website: str
        """

        self._website = website

    @property
    def phone(self) -> str:
        """Gets the phone of this Lead.


        :return: The phone of this Lead.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this Lead.


        :param phone: The phone of this Lead.
        :type phone: str
        """

        self._phone = phone

    @property
    def address(self) -> str:
        """Gets the address of this Lead.


        :return: The address of this Lead.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this Lead.


        :param address: The address of this Lead.
        :type address: str
        """

        self._address = address

    @property
    def city(self) -> str:
        """Gets the city of this Lead.


        :return: The city of this Lead.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this Lead.


        :param city: The city of this Lead.
        :type city: str
        """

        self._city = city

    @property
    def state(self) -> str:
        """Gets the state of this Lead.


        :return: The state of this Lead.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Lead.


        :param state: The state of this Lead.
        :type state: str
        """

        self._state = state

    @property
    def country(self) -> str:
        """Gets the country of this Lead.


        :return: The country of this Lead.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this Lead.


        :param country: The country of this Lead.
        :type country: str
        """

        self._country = country

    @property
    def latitude(self) -> float:
        """Gets the latitude of this Lead.


        :return: The latitude of this Lead.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this Lead.


        :param latitude: The latitude of this Lead.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self) -> float:
        """Gets the longitude of this Lead.


        :return: The longitude of this Lead.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this Lead.


        :param longitude: The longitude of this Lead.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def google_rating(self) -> float:
        """Gets the google_rating of this Lead.


        :return: The google_rating of this Lead.
        :rtype: float
        """
        return self._google_rating

    @google_rating.setter
    def google_rating(self, google_rating: float):
        """Sets the google_rating of this Lead.


        :param google_rating: The google_rating of this Lead.
        :type google_rating: float
        """

        self._google_rating = google_rating

    @property
    def review_count(self) -> int:
        """Gets the review_count of this Lead.


        :return: The review_count of this Lead.
        :rtype: int
        """
        return self._review_count

    @review_count.setter
    def review_count(self, review_count: int):
        """Sets the review_count of this Lead.


        :param review_count: The review_count of this Lead.
        :type review_count: int
        """

        self._review_count = review_count

    @property
    def industry(self) -> str:
        """Gets the industry of this Lead.


        :return: The industry of this Lead.
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry: str):
        """Sets the industry of this Lead.


        :param industry: The industry of this Lead.
        :type industry: str
        """

        self._industry = industry

    @property
    def employee_count(self) -> int:
        """Gets the employee_count of this Lead.


        :return: The employee_count of this Lead.
        :rtype: int
        """
        return self._employee_count

    @employee_count.setter
    def employee_count(self, employee_count: int):
        """Sets the employee_count of this Lead.


        :param employee_count: The employee_count of this Lead.
        :type employee_count: int
        """

        self._employee_count = employee_count

    @property
    def estimated_revenue(self) -> str:
        """Gets the estimated_revenue of this Lead.


        :return: The estimated_revenue of this Lead.
        :rtype: str
        """
        return self._estimated_revenue

    @estimated_revenue.setter
    def estimated_revenue(self, estimated_revenue: str):
        """Sets the estimated_revenue of this Lead.


        :param estimated_revenue: The estimated_revenue of this Lead.
        :type estimated_revenue: str
        """

        self._estimated_revenue = estimated_revenue

    @property
    def org_id(self) -> str:
        """Gets the org_id of this Lead.


        :return: The org_id of this Lead.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: str):
        """Sets the org_id of this Lead.


        :param org_id: The org_id of this Lead.
        :type org_id: str
        """

        self._org_id = org_id

    @property
    def tenant_id(self) -> str:
        """Gets the tenant_id of this Lead.


        :return: The tenant_id of this Lead.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id: str):
        """Sets the tenant_id of this Lead.


        :param tenant_id: The tenant_id of this Lead.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Lead.


        :return: The created_at of this Lead.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Lead.


        :param created_at: The created_at of this Lead.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Lead.


        :return: The updated_at of this Lead.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Lead.


        :param updated_at: The updated_at of this Lead.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self) -> datetime:
        """Gets the deleted_at of this Lead.


        :return: The deleted_at of this Lead.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: datetime):
        """Sets the deleted_at of this Lead.


        :param deleted_at: The deleted_at of this Lead.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def job(self) -> ScrapingJob:
        """Gets the job of this Lead.


        :return: The job of this Lead.
        :rtype: ScrapingJob
        """
        return self._job

    @job.setter
    def job(self, job: ScrapingJob):
        """Sets the job of this Lead.


        :param job: The job of this Lead.
        :type job: ScrapingJob
        """

        self._job = job

    @property
    def workspace(self) -> Workspace:
        """Gets the workspace of this Lead.


        :return: The workspace of this Lead.
        :rtype: Workspace
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace: Workspace):
        """Sets the workspace of this Lead.


        :param workspace: The workspace of this Lead.
        :type workspace: Workspace
        """

        self._workspace = workspace

    @property
    def place_id(self) -> str:
        """Gets the place_id of this Lead.

        Google Places ID  # noqa: E501

        :return: The place_id of this Lead.
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id: str):
        """Sets the place_id of this Lead.

        Google Places ID  # noqa: E501

        :param place_id: The place_id of this Lead.
        :type place_id: str
        """

        self._place_id = place_id

    @property
    def google_maps_url(self) -> str:
        """Gets the google_maps_url of this Lead.


        :return: The google_maps_url of this Lead.
        :rtype: str
        """
        return self._google_maps_url

    @google_maps_url.setter
    def google_maps_url(self, google_maps_url: str):
        """Sets the google_maps_url of this Lead.


        :param google_maps_url: The google_maps_url of this Lead.
        :type google_maps_url: str
        """

        self._google_maps_url = google_maps_url

    @property
    def business_status(self) -> str:
        """Gets the business_status of this Lead.


        :return: The business_status of this Lead.
        :rtype: str
        """
        return self._business_status

    @business_status.setter
    def business_status(self, business_status: str):
        """Sets the business_status of this Lead.


        :param business_status: The business_status of this Lead.
        :type business_status: str
        """

        self._business_status = business_status

    @property
    def regular_hours(self) -> List[BusinessHours]:
        """Gets the regular_hours of this Lead.


        :return: The regular_hours of this Lead.
        :rtype: List[BusinessHours]
        """
        return self._regular_hours

    @regular_hours.setter
    def regular_hours(self, regular_hours: List[BusinessHours]):
        """Sets the regular_hours of this Lead.


        :param regular_hours: The regular_hours of this Lead.
        :type regular_hours: List[BusinessHours]
        """

        self._regular_hours = regular_hours

    @property
    def special_hours(self) -> List[BusinessHours]:
        """Gets the special_hours of this Lead.


        :return: The special_hours of this Lead.
        :rtype: List[BusinessHours]
        """
        return self._special_hours

    @special_hours.setter
    def special_hours(self, special_hours: List[BusinessHours]):
        """Sets the special_hours of this Lead.


        :param special_hours: The special_hours of this Lead.
        :type special_hours: List[BusinessHours]
        """

        self._special_hours = special_hours

    @property
    def photo_references(self) -> List[str]:
        """Gets the photo_references of this Lead.

        Google Places photo IDs  # noqa: E501

        :return: The photo_references of this Lead.
        :rtype: List[str]
        """
        return self._photo_references

    @photo_references.setter
    def photo_references(self, photo_references: List[str]):
        """Sets the photo_references of this Lead.

        Google Places photo IDs  # noqa: E501

        :param photo_references: The photo_references of this Lead.
        :type photo_references: List[str]
        """

        self._photo_references = photo_references

    @property
    def main_photo_url(self) -> str:
        """Gets the main_photo_url of this Lead.


        :return: The main_photo_url of this Lead.
        :rtype: str
        """
        return self._main_photo_url

    @main_photo_url.setter
    def main_photo_url(self, main_photo_url: str):
        """Sets the main_photo_url of this Lead.


        :param main_photo_url: The main_photo_url of this Lead.
        :type main_photo_url: str
        """

        self._main_photo_url = main_photo_url

    @property
    def reviews(self) -> List[Review]:
        """Gets the reviews of this Lead.


        :return: The reviews of this Lead.
        :rtype: List[Review]
        """
        return self._reviews

    @reviews.setter
    def reviews(self, reviews: List[Review]):
        """Sets the reviews of this Lead.


        :param reviews: The reviews of this Lead.
        :type reviews: List[Review]
        """

        self._reviews = reviews

    @property
    def types(self) -> List[str]:
        """Gets the types of this Lead.

        Google Places types  # noqa: E501

        :return: The types of this Lead.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types: List[str]):
        """Sets the types of this Lead.

        Google Places types  # noqa: E501

        :param types: The types of this Lead.
        :type types: List[str]
        """

        self._types = types

    @property
    def amenities(self) -> List[str]:
        """Gets the amenities of this Lead.


        :return: The amenities of this Lead.
        :rtype: List[str]
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities: List[str]):
        """Sets the amenities of this Lead.


        :param amenities: The amenities of this Lead.
        :type amenities: List[str]
        """

        self._amenities = amenities

    @property
    def serves_vegetarian_food(self) -> bool:
        """Gets the serves_vegetarian_food of this Lead.


        :return: The serves_vegetarian_food of this Lead.
        :rtype: bool
        """
        return self._serves_vegetarian_food

    @serves_vegetarian_food.setter
    def serves_vegetarian_food(self, serves_vegetarian_food: bool):
        """Sets the serves_vegetarian_food of this Lead.


        :param serves_vegetarian_food: The serves_vegetarian_food of this Lead.
        :type serves_vegetarian_food: bool
        """

        self._serves_vegetarian_food = serves_vegetarian_food

    @property
    def outdoor_seating(self) -> bool:
        """Gets the outdoor_seating of this Lead.


        :return: The outdoor_seating of this Lead.
        :rtype: bool
        """
        return self._outdoor_seating

    @outdoor_seating.setter
    def outdoor_seating(self, outdoor_seating: bool):
        """Sets the outdoor_seating of this Lead.


        :param outdoor_seating: The outdoor_seating of this Lead.
        :type outdoor_seating: bool
        """

        self._outdoor_seating = outdoor_seating

    @property
    def payment_methods(self) -> List[str]:
        """Gets the payment_methods of this Lead.

        visa, amex, cash, etc  # noqa: E501

        :return: The payment_methods of this Lead.
        :rtype: List[str]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods: List[str]):
        """Sets the payment_methods of this Lead.

        visa, amex, cash, etc  # noqa: E501

        :param payment_methods: The payment_methods of this Lead.
        :type payment_methods: List[str]
        """

        self._payment_methods = payment_methods

    @property
    def wheelchair_accessible(self) -> bool:
        """Gets the wheelchair_accessible of this Lead.


        :return: The wheelchair_accessible of this Lead.
        :rtype: bool
        """
        return self._wheelchair_accessible

    @wheelchair_accessible.setter
    def wheelchair_accessible(self, wheelchair_accessible: bool):
        """Sets the wheelchair_accessible of this Lead.


        :param wheelchair_accessible: The wheelchair_accessible of this Lead.
        :type wheelchair_accessible: bool
        """

        self._wheelchair_accessible = wheelchair_accessible

    @property
    def parking_available(self) -> bool:
        """Gets the parking_available of this Lead.


        :return: The parking_available of this Lead.
        :rtype: bool
        """
        return self._parking_available

    @parking_available.setter
    def parking_available(self, parking_available: bool):
        """Sets the parking_available of this Lead.


        :param parking_available: The parking_available of this Lead.
        :type parking_available: bool
        """

        self._parking_available = parking_available

    @property
    def social_media(self) -> Dict[str, str]:
        """Gets the social_media of this Lead.

        platform -> url  # noqa: E501

        :return: The social_media of this Lead.
        :rtype: Dict[str, str]
        """
        return self._social_media

    @social_media.setter
    def social_media(self, social_media: Dict[str, str]):
        """Sets the social_media of this Lead.

        platform -> url  # noqa: E501

        :param social_media: The social_media of this Lead.
        :type social_media: Dict[str, str]
        """

        self._social_media = social_media

    @property
    def rating_category(self) -> str:
        """Gets the rating_category of this Lead.


        :return: The rating_category of this Lead.
        :rtype: str
        """
        return self._rating_category

    @rating_category.setter
    def rating_category(self, rating_category: str):
        """Sets the rating_category of this Lead.


        :param rating_category: The rating_category of this Lead.
        :type rating_category: str
        """

        self._rating_category = rating_category

    @property
    def rating(self) -> float:
        """Gets the rating of this Lead.


        :return: The rating of this Lead.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating: float):
        """Sets the rating of this Lead.


        :param rating: The rating of this Lead.
        :type rating: float
        """

        self._rating = rating

    @property
    def count(self) -> int:
        """Gets the count of this Lead.


        :return: The count of this Lead.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this Lead.


        :param count: The count of this Lead.
        :type count: int
        """

        self._count = count

    @property
    def last_updated(self) -> datetime:
        """Gets the last_updated of this Lead.


        :return: The last_updated of this Lead.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: datetime):
        """Sets the last_updated of this Lead.


        :param last_updated: The last_updated of this Lead.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def data_source_version(self) -> str:
        """Gets the data_source_version of this Lead.


        :return: The data_source_version of this Lead.
        :rtype: str
        """
        return self._data_source_version

    @data_source_version.setter
    def data_source_version(self, data_source_version: str):
        """Sets the data_source_version of this Lead.


        :param data_source_version: The data_source_version of this Lead.
        :type data_source_version: str
        """

        self._data_source_version = data_source_version

    @property
    def scraping_session_id(self) -> str:
        """Gets the scraping_session_id of this Lead.


        :return: The scraping_session_id of this Lead.
        :rtype: str
        """
        return self._scraping_session_id

    @scraping_session_id.setter
    def scraping_session_id(self, scraping_session_id: str):
        """Sets the scraping_session_id of this Lead.


        :param scraping_session_id: The scraping_session_id of this Lead.
        :type scraping_session_id: str
        """

        self._scraping_session_id = scraping_session_id

    @property
    def alternate_phones(self) -> List[str]:
        """Gets the alternate_phones of this Lead.


        :return: The alternate_phones of this Lead.
        :rtype: List[str]
        """
        return self._alternate_phones

    @alternate_phones.setter
    def alternate_phones(self, alternate_phones: List[str]):
        """Sets the alternate_phones of this Lead.


        :param alternate_phones: The alternate_phones of this Lead.
        :type alternate_phones: List[str]
        """

        self._alternate_phones = alternate_phones

    @property
    def contact_person_name(self) -> str:
        """Gets the contact_person_name of this Lead.


        :return: The contact_person_name of this Lead.
        :rtype: str
        """
        return self._contact_person_name

    @contact_person_name.setter
    def contact_person_name(self, contact_person_name: str):
        """Sets the contact_person_name of this Lead.


        :param contact_person_name: The contact_person_name of this Lead.
        :type contact_person_name: str
        """

        self._contact_person_name = contact_person_name

    @property
    def contact_person_title(self) -> str:
        """Gets the contact_person_title of this Lead.


        :return: The contact_person_title of this Lead.
        :rtype: str
        """
        return self._contact_person_title

    @contact_person_title.setter
    def contact_person_title(self, contact_person_title: str):
        """Sets the contact_person_title of this Lead.


        :param contact_person_title: The contact_person_title of this Lead.
        :type contact_person_title: str
        """

        self._contact_person_title = contact_person_title

    @property
    def contact_email(self) -> str:
        """Gets the contact_email of this Lead.


        :return: The contact_email of this Lead.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email: str):
        """Sets the contact_email of this Lead.


        :param contact_email: The contact_email of this Lead.
        :type contact_email: str
        """

        self._contact_email = contact_email

    @property
    def founded_year(self) -> int:
        """Gets the founded_year of this Lead.


        :return: The founded_year of this Lead.
        :rtype: int
        """
        return self._founded_year

    @founded_year.setter
    def founded_year(self, founded_year: int):
        """Sets the founded_year of this Lead.


        :param founded_year: The founded_year of this Lead.
        :type founded_year: int
        """

        self._founded_year = founded_year

    @property
    def business_type(self) -> str:
        """Gets the business_type of this Lead.


        :return: The business_type of this Lead.
        :rtype: str
        """
        return self._business_type

    @business_type.setter
    def business_type(self, business_type: str):
        """Sets the business_type of this Lead.


        :param business_type: The business_type of this Lead.
        :type business_type: str
        """

        self._business_type = business_type

    @property
    def certifications(self) -> List[str]:
        """Gets the certifications of this Lead.


        :return: The certifications of this Lead.
        :rtype: List[str]
        """
        return self._certifications

    @certifications.setter
    def certifications(self, certifications: List[str]):
        """Sets the certifications of this Lead.


        :param certifications: The certifications of this Lead.
        :type certifications: List[str]
        """

        self._certifications = certifications

    @property
    def license_number(self) -> str:
        """Gets the license_number of this Lead.


        :return: The license_number of this Lead.
        :rtype: str
        """
        return self._license_number

    @license_number.setter
    def license_number(self, license_number: str):
        """Sets the license_number of this Lead.


        :param license_number: The license_number of this Lead.
        :type license_number: str
        """

        self._license_number = license_number

    @property
    def revenue_range(self) -> RevenueRange:
        """Gets the revenue_range of this Lead.


        :return: The revenue_range of this Lead.
        :rtype: RevenueRange
        """
        return self._revenue_range

    @revenue_range.setter
    def revenue_range(self, revenue_range: RevenueRange):
        """Sets the revenue_range of this Lead.


        :param revenue_range: The revenue_range of this Lead.
        :type revenue_range: RevenueRange
        """

        self._revenue_range = revenue_range

    @property
    def funding_stage(self) -> str:
        """Gets the funding_stage of this Lead.


        :return: The funding_stage of this Lead.
        :rtype: str
        """
        return self._funding_stage

    @funding_stage.setter
    def funding_stage(self, funding_stage: str):
        """Sets the funding_stage of this Lead.


        :param funding_stage: The funding_stage of this Lead.
        :type funding_stage: str
        """

        self._funding_stage = funding_stage

    @property
    def is_public_company(self) -> bool:
        """Gets the is_public_company of this Lead.


        :return: The is_public_company of this Lead.
        :rtype: bool
        """
        return self._is_public_company

    @is_public_company.setter
    def is_public_company(self, is_public_company: bool):
        """Sets the is_public_company of this Lead.


        :param is_public_company: The is_public_company of this Lead.
        :type is_public_company: bool
        """

        self._is_public_company = is_public_company

    @property
    def website_load_speed(self) -> float:
        """Gets the website_load_speed of this Lead.

        In seconds  # noqa: E501

        :return: The website_load_speed of this Lead.
        :rtype: float
        """
        return self._website_load_speed

    @website_load_speed.setter
    def website_load_speed(self, website_load_speed: float):
        """Sets the website_load_speed of this Lead.

        In seconds  # noqa: E501

        :param website_load_speed: The website_load_speed of this Lead.
        :type website_load_speed: float
        """

        self._website_load_speed = website_load_speed

    @property
    def has_ssl_certificate(self) -> bool:
        """Gets the has_ssl_certificate of this Lead.


        :return: The has_ssl_certificate of this Lead.
        :rtype: bool
        """
        return self._has_ssl_certificate

    @has_ssl_certificate.setter
    def has_ssl_certificate(self, has_ssl_certificate: bool):
        """Sets the has_ssl_certificate of this Lead.


        :param has_ssl_certificate: The has_ssl_certificate of this Lead.
        :type has_ssl_certificate: bool
        """

        self._has_ssl_certificate = has_ssl_certificate

    @property
    def cms_used(self) -> str:
        """Gets the cms_used of this Lead.


        :return: The cms_used of this Lead.
        :rtype: str
        """
        return self._cms_used

    @cms_used.setter
    def cms_used(self, cms_used: str):
        """Sets the cms_used of this Lead.


        :param cms_used: The cms_used of this Lead.
        :type cms_used: str
        """

        self._cms_used = cms_used

    @property
    def ecommerce_platforms(self) -> List[str]:
        """Gets the ecommerce_platforms of this Lead.


        :return: The ecommerce_platforms of this Lead.
        :rtype: List[str]
        """
        return self._ecommerce_platforms

    @ecommerce_platforms.setter
    def ecommerce_platforms(self, ecommerce_platforms: List[str]):
        """Sets the ecommerce_platforms of this Lead.


        :param ecommerce_platforms: The ecommerce_platforms of this Lead.
        :type ecommerce_platforms: List[str]
        """

        self._ecommerce_platforms = ecommerce_platforms

    @property
    def timezone(self) -> str:
        """Gets the timezone of this Lead.


        :return: The timezone of this Lead.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone: str):
        """Sets the timezone of this Lead.


        :param timezone: The timezone of this Lead.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def neighborhood(self) -> str:
        """Gets the neighborhood of this Lead.


        :return: The neighborhood of this Lead.
        :rtype: str
        """
        return self._neighborhood

    @neighborhood.setter
    def neighborhood(self, neighborhood: str):
        """Sets the neighborhood of this Lead.


        :param neighborhood: The neighborhood of this Lead.
        :type neighborhood: str
        """

        self._neighborhood = neighborhood

    @property
    def nearby_landmarks(self) -> List[str]:
        """Gets the nearby_landmarks of this Lead.


        :return: The nearby_landmarks of this Lead.
        :rtype: List[str]
        """
        return self._nearby_landmarks

    @nearby_landmarks.setter
    def nearby_landmarks(self, nearby_landmarks: List[str]):
        """Sets the nearby_landmarks of this Lead.


        :param nearby_landmarks: The nearby_landmarks of this Lead.
        :type nearby_landmarks: List[str]
        """

        self._nearby_landmarks = nearby_landmarks

    @property
    def transportation_access(self) -> str:
        """Gets the transportation_access of this Lead.


        :return: The transportation_access of this Lead.
        :rtype: str
        """
        return self._transportation_access

    @transportation_access.setter
    def transportation_access(self, transportation_access: str):
        """Sets the transportation_access of this Lead.


        :param transportation_access: The transportation_access of this Lead.
        :type transportation_access: str
        """

        self._transportation_access = transportation_access

    @property
    def employee_benefits(self) -> List[EmployeeBenefit]:
        """Gets the employee_benefits of this Lead.


        :return: The employee_benefits of this Lead.
        :rtype: List[EmployeeBenefit]
        """
        return self._employee_benefits

    @employee_benefits.setter
    def employee_benefits(self, employee_benefits: List[EmployeeBenefit]):
        """Sets the employee_benefits of this Lead.


        :param employee_benefits: The employee_benefits of this Lead.
        :type employee_benefits: List[EmployeeBenefit]
        """

        self._employee_benefits = employee_benefits

    @property
    def parent_company(self) -> str:
        """Gets the parent_company of this Lead.


        :return: The parent_company of this Lead.
        :rtype: str
        """
        return self._parent_company

    @parent_company.setter
    def parent_company(self, parent_company: str):
        """Sets the parent_company of this Lead.


        :param parent_company: The parent_company of this Lead.
        :type parent_company: str
        """

        self._parent_company = parent_company

    @property
    def subsidiaries(self) -> List[str]:
        """Gets the subsidiaries of this Lead.


        :return: The subsidiaries of this Lead.
        :rtype: List[str]
        """
        return self._subsidiaries

    @subsidiaries.setter
    def subsidiaries(self, subsidiaries: List[str]):
        """Sets the subsidiaries of this Lead.


        :param subsidiaries: The subsidiaries of this Lead.
        :type subsidiaries: List[str]
        """

        self._subsidiaries = subsidiaries

    @property
    def is_franchise(self) -> bool:
        """Gets the is_franchise of this Lead.


        :return: The is_franchise of this Lead.
        :rtype: bool
        """
        return self._is_franchise

    @is_franchise.setter
    def is_franchise(self, is_franchise: bool):
        """Sets the is_franchise of this Lead.


        :param is_franchise: The is_franchise of this Lead.
        :type is_franchise: bool
        """

        self._is_franchise = is_franchise

    @property
    def seo_keywords(self) -> List[str]:
        """Gets the seo_keywords of this Lead.


        :return: The seo_keywords of this Lead.
        :rtype: List[str]
        """
        return self._seo_keywords

    @seo_keywords.setter
    def seo_keywords(self, seo_keywords: List[str]):
        """Sets the seo_keywords of this Lead.


        :param seo_keywords: The seo_keywords of this Lead.
        :type seo_keywords: List[str]
        """

        self._seo_keywords = seo_keywords

    @property
    def uses_google_ads(self) -> bool:
        """Gets the uses_google_ads of this Lead.


        :return: The uses_google_ads of this Lead.
        :rtype: bool
        """
        return self._uses_google_ads

    @uses_google_ads.setter
    def uses_google_ads(self, uses_google_ads: bool):
        """Sets the uses_google_ads of this Lead.


        :param uses_google_ads: The uses_google_ads of this Lead.
        :type uses_google_ads: bool
        """

        self._uses_google_ads = uses_google_ads

    @property
    def google_my_business_category(self) -> str:
        """Gets the google_my_business_category of this Lead.


        :return: The google_my_business_category of this Lead.
        :rtype: str
        """
        return self._google_my_business_category

    @google_my_business_category.setter
    def google_my_business_category(self, google_my_business_category: str):
        """Sets the google_my_business_category of this Lead.


        :param google_my_business_category: The google_my_business_category of this Lead.
        :type google_my_business_category: str
        """

        self._google_my_business_category = google_my_business_category

    @property
    def naics_code(self) -> str:
        """Gets the naics_code of this Lead.


        :return: The naics_code of this Lead.
        :rtype: str
        """
        return self._naics_code

    @naics_code.setter
    def naics_code(self, naics_code: str):
        """Sets the naics_code of this Lead.


        :param naics_code: The naics_code of this Lead.
        :type naics_code: str
        """

        self._naics_code = naics_code

    @property
    def sic_code(self) -> str:
        """Gets the sic_code of this Lead.


        :return: The sic_code of this Lead.
        :rtype: str
        """
        return self._sic_code

    @sic_code.setter
    def sic_code(self, sic_code: str):
        """Sets the sic_code of this Lead.


        :param sic_code: The sic_code of this Lead.
        :type sic_code: str
        """

        self._sic_code = sic_code

    @property
    def unspsc_code(self) -> str:
        """Gets the unspsc_code of this Lead.


        :return: The unspsc_code of this Lead.
        :rtype: str
        """
        return self._unspsc_code

    @unspsc_code.setter
    def unspsc_code(self, unspsc_code: str):
        """Sets the unspsc_code of this Lead.


        :param unspsc_code: The unspsc_code of this Lead.
        :type unspsc_code: str
        """

        self._unspsc_code = unspsc_code

    @property
    def is_green_certified(self) -> bool:
        """Gets the is_green_certified of this Lead.


        :return: The is_green_certified of this Lead.
        :rtype: bool
        """
        return self._is_green_certified

    @is_green_certified.setter
    def is_green_certified(self, is_green_certified: bool):
        """Sets the is_green_certified of this Lead.


        :param is_green_certified: The is_green_certified of this Lead.
        :type is_green_certified: bool
        """

        self._is_green_certified = is_green_certified

    @property
    def energy_sources(self) -> List[str]:
        """Gets the energy_sources of this Lead.


        :return: The energy_sources of this Lead.
        :rtype: List[str]
        """
        return self._energy_sources

    @energy_sources.setter
    def energy_sources(self, energy_sources: List[str]):
        """Sets the energy_sources of this Lead.


        :param energy_sources: The energy_sources of this Lead.
        :type energy_sources: List[str]
        """

        self._energy_sources = energy_sources

    @property
    def sustainability_rating(self) -> str:
        """Gets the sustainability_rating of this Lead.


        :return: The sustainability_rating of this Lead.
        :rtype: str
        """
        return self._sustainability_rating

    @sustainability_rating.setter
    def sustainability_rating(self, sustainability_rating: str):
        """Sets the sustainability_rating of this Lead.


        :param sustainability_rating: The sustainability_rating of this Lead.
        :type sustainability_rating: str
        """

        self._sustainability_rating = sustainability_rating

    @property
    def recent_announcements(self) -> List[str]:
        """Gets the recent_announcements of this Lead.


        :return: The recent_announcements of this Lead.
        :rtype: List[str]
        """
        return self._recent_announcements

    @recent_announcements.setter
    def recent_announcements(self, recent_announcements: List[str]):
        """Sets the recent_announcements of this Lead.


        :param recent_announcements: The recent_announcements of this Lead.
        :type recent_announcements: List[str]
        """

        self._recent_announcements = recent_announcements

    @property
    def last_product_launch(self) -> datetime:
        """Gets the last_product_launch of this Lead.


        :return: The last_product_launch of this Lead.
        :rtype: datetime
        """
        return self._last_product_launch

    @last_product_launch.setter
    def last_product_launch(self, last_product_launch: datetime):
        """Sets the last_product_launch of this Lead.


        :param last_product_launch: The last_product_launch of this Lead.
        :type last_product_launch: datetime
        """

        self._last_product_launch = last_product_launch

    @property
    def has_litigation_history(self) -> bool:
        """Gets the has_litigation_history of this Lead.


        :return: The has_litigation_history of this Lead.
        :rtype: bool
        """
        return self._has_litigation_history

    @has_litigation_history.setter
    def has_litigation_history(self, has_litigation_history: bool):
        """Sets the has_litigation_history of this Lead.


        :param has_litigation_history: The has_litigation_history of this Lead.
        :type has_litigation_history: bool
        """

        self._has_litigation_history = has_litigation_history

    @property
    def export_control_status(self) -> str:
        """Gets the export_control_status of this Lead.


        :return: The export_control_status of this Lead.
        :rtype: str
        """
        return self._export_control_status

    @export_control_status.setter
    def export_control_status(self, export_control_status: str):
        """Sets the export_control_status of this Lead.


        :param export_control_status: The export_control_status of this Lead.
        :type export_control_status: str
        """

        self._export_control_status = export_control_status
