from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class OperationDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation_id=None, start_time=None, end_time=None, stack_trace=None, parameters=None):  # noqa: E501
        """OperationDetails - a model defined in OpenAPI

        :param operation_id: The operation_id of this OperationDetails.  # noqa: E501
        :type operation_id: str
        :param start_time: The start_time of this OperationDetails.  # noqa: E501
        :type start_time: datetime
        :param end_time: The end_time of this OperationDetails.  # noqa: E501
        :type end_time: datetime
        :param stack_trace: The stack_trace of this OperationDetails.  # noqa: E501
        :type stack_trace: List[str]
        :param parameters: The parameters of this OperationDetails.  # noqa: E501
        :type parameters: Dict[str, str]
        """
        self.openapi_types = {
            'operation_id': str,
            'start_time': datetime,
            'end_time': datetime,
            'stack_trace': List[str],
            'parameters': Dict[str, str]
        }

        self.attribute_map = {
            'operation_id': 'operationId',
            'start_time': 'startTime',
            'end_time': 'endTime',
            'stack_trace': 'stackTrace',
            'parameters': 'parameters'
        }

        self._operation_id = operation_id
        self._start_time = start_time
        self._end_time = end_time
        self._stack_trace = stack_trace
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'OperationDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OperationDetails of this OperationDetails.  # noqa: E501
        :rtype: OperationDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation_id(self) -> str:
        """Gets the operation_id of this OperationDetails.


        :return: The operation_id of this OperationDetails.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id: str):
        """Sets the operation_id of this OperationDetails.


        :param operation_id: The operation_id of this OperationDetails.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def start_time(self) -> datetime:
        """Gets the start_time of this OperationDetails.


        :return: The start_time of this OperationDetails.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: datetime):
        """Sets the start_time of this OperationDetails.


        :param start_time: The start_time of this OperationDetails.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self) -> datetime:
        """Gets the end_time of this OperationDetails.


        :return: The end_time of this OperationDetails.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: datetime):
        """Sets the end_time of this OperationDetails.


        :param end_time: The end_time of this OperationDetails.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def stack_trace(self) -> List[str]:
        """Gets the stack_trace of this OperationDetails.


        :return: The stack_trace of this OperationDetails.
        :rtype: List[str]
        """
        return self._stack_trace

    @stack_trace.setter
    def stack_trace(self, stack_trace: List[str]):
        """Sets the stack_trace of this OperationDetails.


        :param stack_trace: The stack_trace of this OperationDetails.
        :type stack_trace: List[str]
        """

        self._stack_trace = stack_trace

    @property
    def parameters(self) -> Dict[str, str]:
        """Gets the parameters of this OperationDetails.


        :return: The parameters of this OperationDetails.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: Dict[str, str]):
        """Sets the parameters of this OperationDetails.


        :param parameters: The parameters of this OperationDetails.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters
