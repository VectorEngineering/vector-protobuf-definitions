from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class ResourceValidation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, missing_resources=None, invalid_references=None, id_violations=None):  # noqa: E501
        """ResourceValidation - a model defined in OpenAPI

        :param missing_resources: The missing_resources of this ResourceValidation.  # noqa: E501
        :type missing_resources: List[str]
        :param invalid_references: The invalid_references of this ResourceValidation.  # noqa: E501
        :type invalid_references: List[str]
        :param id_violations: The id_violations of this ResourceValidation.  # noqa: E501
        :type id_violations: Dict[str, str]
        """
        self.openapi_types = {
            'missing_resources': List[str],
            'invalid_references': List[str],
            'id_violations': Dict[str, str]
        }

        self.attribute_map = {
            'missing_resources': 'missingResources',
            'invalid_references': 'invalidReferences',
            'id_violations': 'idViolations'
        }

        self._missing_resources = missing_resources
        self._invalid_references = invalid_references
        self._id_violations = id_violations

    @classmethod
    def from_dict(cls, dikt) -> 'ResourceValidation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResourceValidation of this ResourceValidation.  # noqa: E501
        :rtype: ResourceValidation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def missing_resources(self) -> List[str]:
        """Gets the missing_resources of this ResourceValidation.


        :return: The missing_resources of this ResourceValidation.
        :rtype: List[str]
        """
        return self._missing_resources

    @missing_resources.setter
    def missing_resources(self, missing_resources: List[str]):
        """Sets the missing_resources of this ResourceValidation.


        :param missing_resources: The missing_resources of this ResourceValidation.
        :type missing_resources: List[str]
        """

        self._missing_resources = missing_resources

    @property
    def invalid_references(self) -> List[str]:
        """Gets the invalid_references of this ResourceValidation.


        :return: The invalid_references of this ResourceValidation.
        :rtype: List[str]
        """
        return self._invalid_references

    @invalid_references.setter
    def invalid_references(self, invalid_references: List[str]):
        """Sets the invalid_references of this ResourceValidation.


        :param invalid_references: The invalid_references of this ResourceValidation.
        :type invalid_references: List[str]
        """

        self._invalid_references = invalid_references

    @property
    def id_violations(self) -> Dict[str, str]:
        """Gets the id_violations of this ResourceValidation.


        :return: The id_violations of this ResourceValidation.
        :rtype: Dict[str, str]
        """
        return self._id_violations

    @id_violations.setter
    def id_violations(self, id_violations: Dict[str, str]):
        """Sets the id_violations of this ResourceValidation.


        :param id_violations: The id_violations of this ResourceValidation.
        :type id_violations: Dict[str, str]
        """

        self._id_violations = id_violations
