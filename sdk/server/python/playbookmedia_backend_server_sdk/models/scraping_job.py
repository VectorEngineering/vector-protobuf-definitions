from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.background_job_status import BackgroundJobStatus
from playbookmedia_backend_server_sdk.models.lead import Lead
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.background_job_status import BackgroundJobStatus  # noqa: E501
from playbookmedia_backend_server_sdk.models.lead import Lead  # noqa: E501

class ScrapingJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, priority=None, payload_type=None, payload=None, created_at=None, status=BackgroundJobStatus.UNSPECIFIED, name=None, keywords=None, lang=None, zoom=None, lat=None, lon=None, fast_mode=None, radius=None, depth=None, email=None, max_time=None, proxies=None, updated_at=None, deleted_at=None, leads=None):  # noqa: E501
        """ScrapingJob - a model defined in OpenAPI

        :param id: The id of this ScrapingJob.  # noqa: E501
        :type id: str
        :param priority: The priority of this ScrapingJob.  # noqa: E501
        :type priority: int
        :param payload_type: The payload_type of this ScrapingJob.  # noqa: E501
        :type payload_type: str
        :param payload: The payload of this ScrapingJob.  # noqa: E501
        :type payload: str
        :param created_at: The created_at of this ScrapingJob.  # noqa: E501
        :type created_at: datetime
        :param status: The status of this ScrapingJob.  # noqa: E501
        :type status: BackgroundJobStatus
        :param name: The name of this ScrapingJob.  # noqa: E501
        :type name: str
        :param keywords: The keywords of this ScrapingJob.  # noqa: E501
        :type keywords: List[str]
        :param lang: The lang of this ScrapingJob.  # noqa: E501
        :type lang: str
        :param zoom: The zoom of this ScrapingJob.  # noqa: E501
        :type zoom: int
        :param lat: The lat of this ScrapingJob.  # noqa: E501
        :type lat: str
        :param lon: The lon of this ScrapingJob.  # noqa: E501
        :type lon: str
        :param fast_mode: The fast_mode of this ScrapingJob.  # noqa: E501
        :type fast_mode: bool
        :param radius: The radius of this ScrapingJob.  # noqa: E501
        :type radius: int
        :param depth: The depth of this ScrapingJob.  # noqa: E501
        :type depth: int
        :param email: The email of this ScrapingJob.  # noqa: E501
        :type email: bool
        :param max_time: The max_time of this ScrapingJob.  # noqa: E501
        :type max_time: int
        :param proxies: The proxies of this ScrapingJob.  # noqa: E501
        :type proxies: List[str]
        :param updated_at: The updated_at of this ScrapingJob.  # noqa: E501
        :type updated_at: datetime
        :param deleted_at: The deleted_at of this ScrapingJob.  # noqa: E501
        :type deleted_at: datetime
        :param leads: The leads of this ScrapingJob.  # noqa: E501
        :type leads: List[Lead]
        """
        self.openapi_types = {
            'id': str,
            'priority': int,
            'payload_type': str,
            'payload': str,
            'created_at': datetime,
            'status': BackgroundJobStatus,
            'name': str,
            'keywords': List[str],
            'lang': str,
            'zoom': int,
            'lat': str,
            'lon': str,
            'fast_mode': bool,
            'radius': int,
            'depth': int,
            'email': bool,
            'max_time': int,
            'proxies': List[str],
            'updated_at': datetime,
            'deleted_at': datetime,
            'leads': List[Lead]
        }

        self.attribute_map = {
            'id': 'id',
            'priority': 'priority',
            'payload_type': 'payloadType',
            'payload': 'payload',
            'created_at': 'createdAt',
            'status': 'status',
            'name': 'name',
            'keywords': 'keywords',
            'lang': 'lang',
            'zoom': 'zoom',
            'lat': 'lat',
            'lon': 'lon',
            'fast_mode': 'fastMode',
            'radius': 'radius',
            'depth': 'depth',
            'email': 'email',
            'max_time': 'maxTime',
            'proxies': 'proxies',
            'updated_at': 'updatedAt',
            'deleted_at': 'deletedAt',
            'leads': 'leads'
        }

        self._id = id
        self._priority = priority
        self._payload_type = payload_type
        self._payload = payload
        self._created_at = created_at
        self._status = status
        self._name = name
        self._keywords = keywords
        self._lang = lang
        self._zoom = zoom
        self._lat = lat
        self._lon = lon
        self._fast_mode = fast_mode
        self._radius = radius
        self._depth = depth
        self._email = email
        self._max_time = max_time
        self._proxies = proxies
        self._updated_at = updated_at
        self._deleted_at = deleted_at
        self._leads = leads

    @classmethod
    def from_dict(cls, dikt) -> 'ScrapingJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScrapingJob of this ScrapingJob.  # noqa: E501
        :rtype: ScrapingJob
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ScrapingJob.


        :return: The id of this ScrapingJob.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ScrapingJob.


        :param id: The id of this ScrapingJob.
        :type id: str
        """

        self._id = id

    @property
    def priority(self) -> int:
        """Gets the priority of this ScrapingJob.


        :return: The priority of this ScrapingJob.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority: int):
        """Sets the priority of this ScrapingJob.


        :param priority: The priority of this ScrapingJob.
        :type priority: int
        """

        self._priority = priority

    @property
    def payload_type(self) -> str:
        """Gets the payload_type of this ScrapingJob.


        :return: The payload_type of this ScrapingJob.
        :rtype: str
        """
        return self._payload_type

    @payload_type.setter
    def payload_type(self, payload_type: str):
        """Sets the payload_type of this ScrapingJob.


        :param payload_type: The payload_type of this ScrapingJob.
        :type payload_type: str
        """

        self._payload_type = payload_type

    @property
    def payload(self) -> str:
        """Gets the payload of this ScrapingJob.


        :return: The payload of this ScrapingJob.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload: str):
        """Sets the payload of this ScrapingJob.


        :param payload: The payload of this ScrapingJob.
        :type payload: str
        """

        self._payload = payload

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this ScrapingJob.


        :return: The created_at of this ScrapingJob.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this ScrapingJob.


        :param created_at: The created_at of this ScrapingJob.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def status(self) -> BackgroundJobStatus:
        """Gets the status of this ScrapingJob.


        :return: The status of this ScrapingJob.
        :rtype: BackgroundJobStatus
        """
        return self._status

    @status.setter
    def status(self, status: BackgroundJobStatus):
        """Sets the status of this ScrapingJob.


        :param status: The status of this ScrapingJob.
        :type status: BackgroundJobStatus
        """

        self._status = status

    @property
    def name(self) -> str:
        """Gets the name of this ScrapingJob.


        :return: The name of this ScrapingJob.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ScrapingJob.


        :param name: The name of this ScrapingJob.
        :type name: str
        """

        self._name = name

    @property
    def keywords(self) -> List[str]:
        """Gets the keywords of this ScrapingJob.


        :return: The keywords of this ScrapingJob.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords: List[str]):
        """Sets the keywords of this ScrapingJob.


        :param keywords: The keywords of this ScrapingJob.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def lang(self) -> str:
        """Gets the lang of this ScrapingJob.


        :return: The lang of this ScrapingJob.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang: str):
        """Sets the lang of this ScrapingJob.


        :param lang: The lang of this ScrapingJob.
        :type lang: str
        """

        self._lang = lang

    @property
    def zoom(self) -> int:
        """Gets the zoom of this ScrapingJob.


        :return: The zoom of this ScrapingJob.
        :rtype: int
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom: int):
        """Sets the zoom of this ScrapingJob.


        :param zoom: The zoom of this ScrapingJob.
        :type zoom: int
        """

        self._zoom = zoom

    @property
    def lat(self) -> str:
        """Gets the lat of this ScrapingJob.


        :return: The lat of this ScrapingJob.
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat: str):
        """Sets the lat of this ScrapingJob.


        :param lat: The lat of this ScrapingJob.
        :type lat: str
        """

        self._lat = lat

    @property
    def lon(self) -> str:
        """Gets the lon of this ScrapingJob.


        :return: The lon of this ScrapingJob.
        :rtype: str
        """
        return self._lon

    @lon.setter
    def lon(self, lon: str):
        """Sets the lon of this ScrapingJob.


        :param lon: The lon of this ScrapingJob.
        :type lon: str
        """

        self._lon = lon

    @property
    def fast_mode(self) -> bool:
        """Gets the fast_mode of this ScrapingJob.


        :return: The fast_mode of this ScrapingJob.
        :rtype: bool
        """
        return self._fast_mode

    @fast_mode.setter
    def fast_mode(self, fast_mode: bool):
        """Sets the fast_mode of this ScrapingJob.


        :param fast_mode: The fast_mode of this ScrapingJob.
        :type fast_mode: bool
        """

        self._fast_mode = fast_mode

    @property
    def radius(self) -> int:
        """Gets the radius of this ScrapingJob.


        :return: The radius of this ScrapingJob.
        :rtype: int
        """
        return self._radius

    @radius.setter
    def radius(self, radius: int):
        """Sets the radius of this ScrapingJob.


        :param radius: The radius of this ScrapingJob.
        :type radius: int
        """

        self._radius = radius

    @property
    def depth(self) -> int:
        """Gets the depth of this ScrapingJob.


        :return: The depth of this ScrapingJob.
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth: int):
        """Sets the depth of this ScrapingJob.


        :param depth: The depth of this ScrapingJob.
        :type depth: int
        """

        self._depth = depth

    @property
    def email(self) -> bool:
        """Gets the email of this ScrapingJob.


        :return: The email of this ScrapingJob.
        :rtype: bool
        """
        return self._email

    @email.setter
    def email(self, email: bool):
        """Sets the email of this ScrapingJob.


        :param email: The email of this ScrapingJob.
        :type email: bool
        """

        self._email = email

    @property
    def max_time(self) -> int:
        """Gets the max_time of this ScrapingJob.


        :return: The max_time of this ScrapingJob.
        :rtype: int
        """
        return self._max_time

    @max_time.setter
    def max_time(self, max_time: int):
        """Sets the max_time of this ScrapingJob.


        :param max_time: The max_time of this ScrapingJob.
        :type max_time: int
        """

        self._max_time = max_time

    @property
    def proxies(self) -> List[str]:
        """Gets the proxies of this ScrapingJob.


        :return: The proxies of this ScrapingJob.
        :rtype: List[str]
        """
        return self._proxies

    @proxies.setter
    def proxies(self, proxies: List[str]):
        """Sets the proxies of this ScrapingJob.


        :param proxies: The proxies of this ScrapingJob.
        :type proxies: List[str]
        """

        self._proxies = proxies

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this ScrapingJob.


        :return: The updated_at of this ScrapingJob.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this ScrapingJob.


        :param updated_at: The updated_at of this ScrapingJob.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self) -> datetime:
        """Gets the deleted_at of this ScrapingJob.


        :return: The deleted_at of this ScrapingJob.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: datetime):
        """Sets the deleted_at of this ScrapingJob.


        :param deleted_at: The deleted_at of this ScrapingJob.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def leads(self) -> List[Lead]:
        """Gets the leads of this ScrapingJob.


        :return: The leads of this ScrapingJob.
        :rtype: List[Lead]
        """
        return self._leads

    @leads.setter
    def leads(self, leads: List[Lead]):
        """Sets the leads of this ScrapingJob.


        :param leads: The leads of this ScrapingJob.
        :type leads: List[Lead]
        """

        self._leads = leads
