from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.output_format import OutputFormat
from playbookmedia_backend_server_sdk.models.scraping_job import ScrapingJob
from playbookmedia_backend_server_sdk.models.workflow_status import WorkflowStatus
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.output_format import OutputFormat  # noqa: E501
from playbookmedia_backend_server_sdk.models.scraping_job import ScrapingJob  # noqa: E501
from playbookmedia_backend_server_sdk.models.workflow_status import WorkflowStatus  # noqa: E501

class ScrapingWorkflow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, cron_expression=None, next_run_time=None, last_run_time=None, status=WorkflowStatus.UNSPECIFIED, retry_count=None, max_retries=None, alert_emails=None, created_at=None, updated_at=None, deleted_at=None, jobs=None, geo_fencing_radius=None, geo_fencing_lat=None, geo_fencing_lon=None, geo_fencing_zoom_min=None, geo_fencing_zoom_max=None, include_reviews=None, include_photos=None, include_business_hours=None, max_reviews_per_business=None, output_format=OutputFormat.UNSPECIFIED, output_destination=None, data_retention=None, anonymize_pii=None, notification_slack_channel=None, notification_email_group=None, notification_notify_on_start=None, notification_notify_on_complete=None, notification_notify_on_failure=None, content_filter_allowed_countries=None, content_filter_excluded_types=None, content_filter_minimum_rating=None, content_filter_minimum_reviews=None, qos_max_concurrent_requests=None, qos_max_retries=None, qos_request_timeout=None, qos_enable_javascript=None, respect_robots_txt=None, accept_terms_of_service=None, user_agent=None, search_terms=None, scheduled_entry_id=None):  # noqa: E501
        """ScrapingWorkflow - a model defined in OpenAPI

        :param id: The id of this ScrapingWorkflow.  # noqa: E501
        :type id: str
        :param name: The name of this ScrapingWorkflow.  # noqa: E501
        :type name: str
        :param cron_expression: The cron_expression of this ScrapingWorkflow.  # noqa: E501
        :type cron_expression: str
        :param next_run_time: The next_run_time of this ScrapingWorkflow.  # noqa: E501
        :type next_run_time: datetime
        :param last_run_time: The last_run_time of this ScrapingWorkflow.  # noqa: E501
        :type last_run_time: datetime
        :param status: The status of this ScrapingWorkflow.  # noqa: E501
        :type status: WorkflowStatus
        :param retry_count: The retry_count of this ScrapingWorkflow.  # noqa: E501
        :type retry_count: int
        :param max_retries: The max_retries of this ScrapingWorkflow.  # noqa: E501
        :type max_retries: int
        :param alert_emails: The alert_emails of this ScrapingWorkflow.  # noqa: E501
        :type alert_emails: str
        :param created_at: The created_at of this ScrapingWorkflow.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this ScrapingWorkflow.  # noqa: E501
        :type updated_at: datetime
        :param deleted_at: The deleted_at of this ScrapingWorkflow.  # noqa: E501
        :type deleted_at: datetime
        :param jobs: The jobs of this ScrapingWorkflow.  # noqa: E501
        :type jobs: List[ScrapingJob]
        :param geo_fencing_radius: The geo_fencing_radius of this ScrapingWorkflow.  # noqa: E501
        :type geo_fencing_radius: float
        :param geo_fencing_lat: The geo_fencing_lat of this ScrapingWorkflow.  # noqa: E501
        :type geo_fencing_lat: float
        :param geo_fencing_lon: The geo_fencing_lon of this ScrapingWorkflow.  # noqa: E501
        :type geo_fencing_lon: float
        :param geo_fencing_zoom_min: The geo_fencing_zoom_min of this ScrapingWorkflow.  # noqa: E501
        :type geo_fencing_zoom_min: int
        :param geo_fencing_zoom_max: The geo_fencing_zoom_max of this ScrapingWorkflow.  # noqa: E501
        :type geo_fencing_zoom_max: int
        :param include_reviews: The include_reviews of this ScrapingWorkflow.  # noqa: E501
        :type include_reviews: bool
        :param include_photos: The include_photos of this ScrapingWorkflow.  # noqa: E501
        :type include_photos: bool
        :param include_business_hours: The include_business_hours of this ScrapingWorkflow.  # noqa: E501
        :type include_business_hours: bool
        :param max_reviews_per_business: The max_reviews_per_business of this ScrapingWorkflow.  # noqa: E501
        :type max_reviews_per_business: int
        :param output_format: The output_format of this ScrapingWorkflow.  # noqa: E501
        :type output_format: OutputFormat
        :param output_destination: The output_destination of this ScrapingWorkflow.  # noqa: E501
        :type output_destination: str
        :param data_retention: The data_retention of this ScrapingWorkflow.  # noqa: E501
        :type data_retention: str
        :param anonymize_pii: The anonymize_pii of this ScrapingWorkflow.  # noqa: E501
        :type anonymize_pii: bool
        :param notification_slack_channel: The notification_slack_channel of this ScrapingWorkflow.  # noqa: E501
        :type notification_slack_channel: str
        :param notification_email_group: The notification_email_group of this ScrapingWorkflow.  # noqa: E501
        :type notification_email_group: str
        :param notification_notify_on_start: The notification_notify_on_start of this ScrapingWorkflow.  # noqa: E501
        :type notification_notify_on_start: bool
        :param notification_notify_on_complete: The notification_notify_on_complete of this ScrapingWorkflow.  # noqa: E501
        :type notification_notify_on_complete: bool
        :param notification_notify_on_failure: The notification_notify_on_failure of this ScrapingWorkflow.  # noqa: E501
        :type notification_notify_on_failure: bool
        :param content_filter_allowed_countries: The content_filter_allowed_countries of this ScrapingWorkflow.  # noqa: E501
        :type content_filter_allowed_countries: List[str]
        :param content_filter_excluded_types: The content_filter_excluded_types of this ScrapingWorkflow.  # noqa: E501
        :type content_filter_excluded_types: List[str]
        :param content_filter_minimum_rating: The content_filter_minimum_rating of this ScrapingWorkflow.  # noqa: E501
        :type content_filter_minimum_rating: float
        :param content_filter_minimum_reviews: The content_filter_minimum_reviews of this ScrapingWorkflow.  # noqa: E501
        :type content_filter_minimum_reviews: int
        :param qos_max_concurrent_requests: The qos_max_concurrent_requests of this ScrapingWorkflow.  # noqa: E501
        :type qos_max_concurrent_requests: int
        :param qos_max_retries: The qos_max_retries of this ScrapingWorkflow.  # noqa: E501
        :type qos_max_retries: int
        :param qos_request_timeout: The qos_request_timeout of this ScrapingWorkflow.  # noqa: E501
        :type qos_request_timeout: str
        :param qos_enable_javascript: The qos_enable_javascript of this ScrapingWorkflow.  # noqa: E501
        :type qos_enable_javascript: bool
        :param respect_robots_txt: The respect_robots_txt of this ScrapingWorkflow.  # noqa: E501
        :type respect_robots_txt: bool
        :param accept_terms_of_service: The accept_terms_of_service of this ScrapingWorkflow.  # noqa: E501
        :type accept_terms_of_service: bool
        :param user_agent: The user_agent of this ScrapingWorkflow.  # noqa: E501
        :type user_agent: str
        :param search_terms: The search_terms of this ScrapingWorkflow.  # noqa: E501
        :type search_terms: List[str]
        :param scheduled_entry_id: The scheduled_entry_id of this ScrapingWorkflow.  # noqa: E501
        :type scheduled_entry_id: str
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'cron_expression': str,
            'next_run_time': datetime,
            'last_run_time': datetime,
            'status': WorkflowStatus,
            'retry_count': int,
            'max_retries': int,
            'alert_emails': str,
            'created_at': datetime,
            'updated_at': datetime,
            'deleted_at': datetime,
            'jobs': List[ScrapingJob],
            'geo_fencing_radius': float,
            'geo_fencing_lat': float,
            'geo_fencing_lon': float,
            'geo_fencing_zoom_min': int,
            'geo_fencing_zoom_max': int,
            'include_reviews': bool,
            'include_photos': bool,
            'include_business_hours': bool,
            'max_reviews_per_business': int,
            'output_format': OutputFormat,
            'output_destination': str,
            'data_retention': str,
            'anonymize_pii': bool,
            'notification_slack_channel': str,
            'notification_email_group': str,
            'notification_notify_on_start': bool,
            'notification_notify_on_complete': bool,
            'notification_notify_on_failure': bool,
            'content_filter_allowed_countries': List[str],
            'content_filter_excluded_types': List[str],
            'content_filter_minimum_rating': float,
            'content_filter_minimum_reviews': int,
            'qos_max_concurrent_requests': int,
            'qos_max_retries': int,
            'qos_request_timeout': str,
            'qos_enable_javascript': bool,
            'respect_robots_txt': bool,
            'accept_terms_of_service': bool,
            'user_agent': str,
            'search_terms': List[str],
            'scheduled_entry_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'cron_expression': 'cronExpression',
            'next_run_time': 'nextRunTime',
            'last_run_time': 'lastRunTime',
            'status': 'status',
            'retry_count': 'retryCount',
            'max_retries': 'maxRetries',
            'alert_emails': 'alertEmails',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'deleted_at': 'deletedAt',
            'jobs': 'jobs',
            'geo_fencing_radius': 'geoFencingRadius',
            'geo_fencing_lat': 'geoFencingLat',
            'geo_fencing_lon': 'geoFencingLon',
            'geo_fencing_zoom_min': 'geoFencingZoomMin',
            'geo_fencing_zoom_max': 'geoFencingZoomMax',
            'include_reviews': 'includeReviews',
            'include_photos': 'includePhotos',
            'include_business_hours': 'includeBusinessHours',
            'max_reviews_per_business': 'maxReviewsPerBusiness',
            'output_format': 'outputFormat',
            'output_destination': 'outputDestination',
            'data_retention': 'dataRetention',
            'anonymize_pii': 'anonymizePii',
            'notification_slack_channel': 'notificationSlackChannel',
            'notification_email_group': 'notificationEmailGroup',
            'notification_notify_on_start': 'notificationNotifyOnStart',
            'notification_notify_on_complete': 'notificationNotifyOnComplete',
            'notification_notify_on_failure': 'notificationNotifyOnFailure',
            'content_filter_allowed_countries': 'contentFilterAllowedCountries',
            'content_filter_excluded_types': 'contentFilterExcludedTypes',
            'content_filter_minimum_rating': 'contentFilterMinimumRating',
            'content_filter_minimum_reviews': 'contentFilterMinimumReviews',
            'qos_max_concurrent_requests': 'qosMaxConcurrentRequests',
            'qos_max_retries': 'qosMaxRetries',
            'qos_request_timeout': 'qosRequestTimeout',
            'qos_enable_javascript': 'qosEnableJavascript',
            'respect_robots_txt': 'respectRobotsTxt',
            'accept_terms_of_service': 'acceptTermsOfService',
            'user_agent': 'userAgent',
            'search_terms': 'searchTerms',
            'scheduled_entry_id': 'scheduledEntryId'
        }

        self._id = id
        self._name = name
        self._cron_expression = cron_expression
        self._next_run_time = next_run_time
        self._last_run_time = last_run_time
        self._status = status
        self._retry_count = retry_count
        self._max_retries = max_retries
        self._alert_emails = alert_emails
        self._created_at = created_at
        self._updated_at = updated_at
        self._deleted_at = deleted_at
        self._jobs = jobs
        self._geo_fencing_radius = geo_fencing_radius
        self._geo_fencing_lat = geo_fencing_lat
        self._geo_fencing_lon = geo_fencing_lon
        self._geo_fencing_zoom_min = geo_fencing_zoom_min
        self._geo_fencing_zoom_max = geo_fencing_zoom_max
        self._include_reviews = include_reviews
        self._include_photos = include_photos
        self._include_business_hours = include_business_hours
        self._max_reviews_per_business = max_reviews_per_business
        self._output_format = output_format
        self._output_destination = output_destination
        self._data_retention = data_retention
        self._anonymize_pii = anonymize_pii
        self._notification_slack_channel = notification_slack_channel
        self._notification_email_group = notification_email_group
        self._notification_notify_on_start = notification_notify_on_start
        self._notification_notify_on_complete = notification_notify_on_complete
        self._notification_notify_on_failure = notification_notify_on_failure
        self._content_filter_allowed_countries = content_filter_allowed_countries
        self._content_filter_excluded_types = content_filter_excluded_types
        self._content_filter_minimum_rating = content_filter_minimum_rating
        self._content_filter_minimum_reviews = content_filter_minimum_reviews
        self._qos_max_concurrent_requests = qos_max_concurrent_requests
        self._qos_max_retries = qos_max_retries
        self._qos_request_timeout = qos_request_timeout
        self._qos_enable_javascript = qos_enable_javascript
        self._respect_robots_txt = respect_robots_txt
        self._accept_terms_of_service = accept_terms_of_service
        self._user_agent = user_agent
        self._search_terms = search_terms
        self._scheduled_entry_id = scheduled_entry_id

    @classmethod
    def from_dict(cls, dikt) -> 'ScrapingWorkflow':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScrapingWorkflow of this ScrapingWorkflow.  # noqa: E501
        :rtype: ScrapingWorkflow
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ScrapingWorkflow.


        :return: The id of this ScrapingWorkflow.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ScrapingWorkflow.


        :param id: The id of this ScrapingWorkflow.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this ScrapingWorkflow.


        :return: The name of this ScrapingWorkflow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ScrapingWorkflow.


        :param name: The name of this ScrapingWorkflow.
        :type name: str
        """

        self._name = name

    @property
    def cron_expression(self) -> str:
        """Gets the cron_expression of this ScrapingWorkflow.


        :return: The cron_expression of this ScrapingWorkflow.
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression: str):
        """Sets the cron_expression of this ScrapingWorkflow.


        :param cron_expression: The cron_expression of this ScrapingWorkflow.
        :type cron_expression: str
        """

        self._cron_expression = cron_expression

    @property
    def next_run_time(self) -> datetime:
        """Gets the next_run_time of this ScrapingWorkflow.


        :return: The next_run_time of this ScrapingWorkflow.
        :rtype: datetime
        """
        return self._next_run_time

    @next_run_time.setter
    def next_run_time(self, next_run_time: datetime):
        """Sets the next_run_time of this ScrapingWorkflow.


        :param next_run_time: The next_run_time of this ScrapingWorkflow.
        :type next_run_time: datetime
        """

        self._next_run_time = next_run_time

    @property
    def last_run_time(self) -> datetime:
        """Gets the last_run_time of this ScrapingWorkflow.


        :return: The last_run_time of this ScrapingWorkflow.
        :rtype: datetime
        """
        return self._last_run_time

    @last_run_time.setter
    def last_run_time(self, last_run_time: datetime):
        """Sets the last_run_time of this ScrapingWorkflow.


        :param last_run_time: The last_run_time of this ScrapingWorkflow.
        :type last_run_time: datetime
        """

        self._last_run_time = last_run_time

    @property
    def status(self) -> WorkflowStatus:
        """Gets the status of this ScrapingWorkflow.


        :return: The status of this ScrapingWorkflow.
        :rtype: WorkflowStatus
        """
        return self._status

    @status.setter
    def status(self, status: WorkflowStatus):
        """Sets the status of this ScrapingWorkflow.


        :param status: The status of this ScrapingWorkflow.
        :type status: WorkflowStatus
        """

        self._status = status

    @property
    def retry_count(self) -> int:
        """Gets the retry_count of this ScrapingWorkflow.


        :return: The retry_count of this ScrapingWorkflow.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count: int):
        """Sets the retry_count of this ScrapingWorkflow.


        :param retry_count: The retry_count of this ScrapingWorkflow.
        :type retry_count: int
        """

        self._retry_count = retry_count

    @property
    def max_retries(self) -> int:
        """Gets the max_retries of this ScrapingWorkflow.


        :return: The max_retries of this ScrapingWorkflow.
        :rtype: int
        """
        return self._max_retries

    @max_retries.setter
    def max_retries(self, max_retries: int):
        """Sets the max_retries of this ScrapingWorkflow.


        :param max_retries: The max_retries of this ScrapingWorkflow.
        :type max_retries: int
        """

        self._max_retries = max_retries

    @property
    def alert_emails(self) -> str:
        """Gets the alert_emails of this ScrapingWorkflow.


        :return: The alert_emails of this ScrapingWorkflow.
        :rtype: str
        """
        return self._alert_emails

    @alert_emails.setter
    def alert_emails(self, alert_emails: str):
        """Sets the alert_emails of this ScrapingWorkflow.


        :param alert_emails: The alert_emails of this ScrapingWorkflow.
        :type alert_emails: str
        """

        self._alert_emails = alert_emails

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this ScrapingWorkflow.


        :return: The created_at of this ScrapingWorkflow.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this ScrapingWorkflow.


        :param created_at: The created_at of this ScrapingWorkflow.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this ScrapingWorkflow.


        :return: The updated_at of this ScrapingWorkflow.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this ScrapingWorkflow.


        :param updated_at: The updated_at of this ScrapingWorkflow.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self) -> datetime:
        """Gets the deleted_at of this ScrapingWorkflow.


        :return: The deleted_at of this ScrapingWorkflow.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: datetime):
        """Sets the deleted_at of this ScrapingWorkflow.


        :param deleted_at: The deleted_at of this ScrapingWorkflow.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def jobs(self) -> List[ScrapingJob]:
        """Gets the jobs of this ScrapingWorkflow.


        :return: The jobs of this ScrapingWorkflow.
        :rtype: List[ScrapingJob]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs: List[ScrapingJob]):
        """Sets the jobs of this ScrapingWorkflow.


        :param jobs: The jobs of this ScrapingWorkflow.
        :type jobs: List[ScrapingJob]
        """

        self._jobs = jobs

    @property
    def geo_fencing_radius(self) -> float:
        """Gets the geo_fencing_radius of this ScrapingWorkflow.


        :return: The geo_fencing_radius of this ScrapingWorkflow.
        :rtype: float
        """
        return self._geo_fencing_radius

    @geo_fencing_radius.setter
    def geo_fencing_radius(self, geo_fencing_radius: float):
        """Sets the geo_fencing_radius of this ScrapingWorkflow.


        :param geo_fencing_radius: The geo_fencing_radius of this ScrapingWorkflow.
        :type geo_fencing_radius: float
        """

        self._geo_fencing_radius = geo_fencing_radius

    @property
    def geo_fencing_lat(self) -> float:
        """Gets the geo_fencing_lat of this ScrapingWorkflow.


        :return: The geo_fencing_lat of this ScrapingWorkflow.
        :rtype: float
        """
        return self._geo_fencing_lat

    @geo_fencing_lat.setter
    def geo_fencing_lat(self, geo_fencing_lat: float):
        """Sets the geo_fencing_lat of this ScrapingWorkflow.


        :param geo_fencing_lat: The geo_fencing_lat of this ScrapingWorkflow.
        :type geo_fencing_lat: float
        """

        self._geo_fencing_lat = geo_fencing_lat

    @property
    def geo_fencing_lon(self) -> float:
        """Gets the geo_fencing_lon of this ScrapingWorkflow.


        :return: The geo_fencing_lon of this ScrapingWorkflow.
        :rtype: float
        """
        return self._geo_fencing_lon

    @geo_fencing_lon.setter
    def geo_fencing_lon(self, geo_fencing_lon: float):
        """Sets the geo_fencing_lon of this ScrapingWorkflow.


        :param geo_fencing_lon: The geo_fencing_lon of this ScrapingWorkflow.
        :type geo_fencing_lon: float
        """

        self._geo_fencing_lon = geo_fencing_lon

    @property
    def geo_fencing_zoom_min(self) -> int:
        """Gets the geo_fencing_zoom_min of this ScrapingWorkflow.


        :return: The geo_fencing_zoom_min of this ScrapingWorkflow.
        :rtype: int
        """
        return self._geo_fencing_zoom_min

    @geo_fencing_zoom_min.setter
    def geo_fencing_zoom_min(self, geo_fencing_zoom_min: int):
        """Sets the geo_fencing_zoom_min of this ScrapingWorkflow.


        :param geo_fencing_zoom_min: The geo_fencing_zoom_min of this ScrapingWorkflow.
        :type geo_fencing_zoom_min: int
        """

        self._geo_fencing_zoom_min = geo_fencing_zoom_min

    @property
    def geo_fencing_zoom_max(self) -> int:
        """Gets the geo_fencing_zoom_max of this ScrapingWorkflow.


        :return: The geo_fencing_zoom_max of this ScrapingWorkflow.
        :rtype: int
        """
        return self._geo_fencing_zoom_max

    @geo_fencing_zoom_max.setter
    def geo_fencing_zoom_max(self, geo_fencing_zoom_max: int):
        """Sets the geo_fencing_zoom_max of this ScrapingWorkflow.


        :param geo_fencing_zoom_max: The geo_fencing_zoom_max of this ScrapingWorkflow.
        :type geo_fencing_zoom_max: int
        """

        self._geo_fencing_zoom_max = geo_fencing_zoom_max

    @property
    def include_reviews(self) -> bool:
        """Gets the include_reviews of this ScrapingWorkflow.


        :return: The include_reviews of this ScrapingWorkflow.
        :rtype: bool
        """
        return self._include_reviews

    @include_reviews.setter
    def include_reviews(self, include_reviews: bool):
        """Sets the include_reviews of this ScrapingWorkflow.


        :param include_reviews: The include_reviews of this ScrapingWorkflow.
        :type include_reviews: bool
        """

        self._include_reviews = include_reviews

    @property
    def include_photos(self) -> bool:
        """Gets the include_photos of this ScrapingWorkflow.


        :return: The include_photos of this ScrapingWorkflow.
        :rtype: bool
        """
        return self._include_photos

    @include_photos.setter
    def include_photos(self, include_photos: bool):
        """Sets the include_photos of this ScrapingWorkflow.


        :param include_photos: The include_photos of this ScrapingWorkflow.
        :type include_photos: bool
        """

        self._include_photos = include_photos

    @property
    def include_business_hours(self) -> bool:
        """Gets the include_business_hours of this ScrapingWorkflow.


        :return: The include_business_hours of this ScrapingWorkflow.
        :rtype: bool
        """
        return self._include_business_hours

    @include_business_hours.setter
    def include_business_hours(self, include_business_hours: bool):
        """Sets the include_business_hours of this ScrapingWorkflow.


        :param include_business_hours: The include_business_hours of this ScrapingWorkflow.
        :type include_business_hours: bool
        """

        self._include_business_hours = include_business_hours

    @property
    def max_reviews_per_business(self) -> int:
        """Gets the max_reviews_per_business of this ScrapingWorkflow.


        :return: The max_reviews_per_business of this ScrapingWorkflow.
        :rtype: int
        """
        return self._max_reviews_per_business

    @max_reviews_per_business.setter
    def max_reviews_per_business(self, max_reviews_per_business: int):
        """Sets the max_reviews_per_business of this ScrapingWorkflow.


        :param max_reviews_per_business: The max_reviews_per_business of this ScrapingWorkflow.
        :type max_reviews_per_business: int
        """

        self._max_reviews_per_business = max_reviews_per_business

    @property
    def output_format(self) -> OutputFormat:
        """Gets the output_format of this ScrapingWorkflow.


        :return: The output_format of this ScrapingWorkflow.
        :rtype: OutputFormat
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format: OutputFormat):
        """Sets the output_format of this ScrapingWorkflow.


        :param output_format: The output_format of this ScrapingWorkflow.
        :type output_format: OutputFormat
        """

        self._output_format = output_format

    @property
    def output_destination(self) -> str:
        """Gets the output_destination of this ScrapingWorkflow.


        :return: The output_destination of this ScrapingWorkflow.
        :rtype: str
        """
        return self._output_destination

    @output_destination.setter
    def output_destination(self, output_destination: str):
        """Sets the output_destination of this ScrapingWorkflow.


        :param output_destination: The output_destination of this ScrapingWorkflow.
        :type output_destination: str
        """

        self._output_destination = output_destination

    @property
    def data_retention(self) -> str:
        """Gets the data_retention of this ScrapingWorkflow.


        :return: The data_retention of this ScrapingWorkflow.
        :rtype: str
        """
        return self._data_retention

    @data_retention.setter
    def data_retention(self, data_retention: str):
        """Sets the data_retention of this ScrapingWorkflow.


        :param data_retention: The data_retention of this ScrapingWorkflow.
        :type data_retention: str
        """

        self._data_retention = data_retention

    @property
    def anonymize_pii(self) -> bool:
        """Gets the anonymize_pii of this ScrapingWorkflow.


        :return: The anonymize_pii of this ScrapingWorkflow.
        :rtype: bool
        """
        return self._anonymize_pii

    @anonymize_pii.setter
    def anonymize_pii(self, anonymize_pii: bool):
        """Sets the anonymize_pii of this ScrapingWorkflow.


        :param anonymize_pii: The anonymize_pii of this ScrapingWorkflow.
        :type anonymize_pii: bool
        """

        self._anonymize_pii = anonymize_pii

    @property
    def notification_slack_channel(self) -> str:
        """Gets the notification_slack_channel of this ScrapingWorkflow.


        :return: The notification_slack_channel of this ScrapingWorkflow.
        :rtype: str
        """
        return self._notification_slack_channel

    @notification_slack_channel.setter
    def notification_slack_channel(self, notification_slack_channel: str):
        """Sets the notification_slack_channel of this ScrapingWorkflow.


        :param notification_slack_channel: The notification_slack_channel of this ScrapingWorkflow.
        :type notification_slack_channel: str
        """

        self._notification_slack_channel = notification_slack_channel

    @property
    def notification_email_group(self) -> str:
        """Gets the notification_email_group of this ScrapingWorkflow.


        :return: The notification_email_group of this ScrapingWorkflow.
        :rtype: str
        """
        return self._notification_email_group

    @notification_email_group.setter
    def notification_email_group(self, notification_email_group: str):
        """Sets the notification_email_group of this ScrapingWorkflow.


        :param notification_email_group: The notification_email_group of this ScrapingWorkflow.
        :type notification_email_group: str
        """

        self._notification_email_group = notification_email_group

    @property
    def notification_notify_on_start(self) -> bool:
        """Gets the notification_notify_on_start of this ScrapingWorkflow.


        :return: The notification_notify_on_start of this ScrapingWorkflow.
        :rtype: bool
        """
        return self._notification_notify_on_start

    @notification_notify_on_start.setter
    def notification_notify_on_start(self, notification_notify_on_start: bool):
        """Sets the notification_notify_on_start of this ScrapingWorkflow.


        :param notification_notify_on_start: The notification_notify_on_start of this ScrapingWorkflow.
        :type notification_notify_on_start: bool
        """

        self._notification_notify_on_start = notification_notify_on_start

    @property
    def notification_notify_on_complete(self) -> bool:
        """Gets the notification_notify_on_complete of this ScrapingWorkflow.


        :return: The notification_notify_on_complete of this ScrapingWorkflow.
        :rtype: bool
        """
        return self._notification_notify_on_complete

    @notification_notify_on_complete.setter
    def notification_notify_on_complete(self, notification_notify_on_complete: bool):
        """Sets the notification_notify_on_complete of this ScrapingWorkflow.


        :param notification_notify_on_complete: The notification_notify_on_complete of this ScrapingWorkflow.
        :type notification_notify_on_complete: bool
        """

        self._notification_notify_on_complete = notification_notify_on_complete

    @property
    def notification_notify_on_failure(self) -> bool:
        """Gets the notification_notify_on_failure of this ScrapingWorkflow.


        :return: The notification_notify_on_failure of this ScrapingWorkflow.
        :rtype: bool
        """
        return self._notification_notify_on_failure

    @notification_notify_on_failure.setter
    def notification_notify_on_failure(self, notification_notify_on_failure: bool):
        """Sets the notification_notify_on_failure of this ScrapingWorkflow.


        :param notification_notify_on_failure: The notification_notify_on_failure of this ScrapingWorkflow.
        :type notification_notify_on_failure: bool
        """

        self._notification_notify_on_failure = notification_notify_on_failure

    @property
    def content_filter_allowed_countries(self) -> List[str]:
        """Gets the content_filter_allowed_countries of this ScrapingWorkflow.


        :return: The content_filter_allowed_countries of this ScrapingWorkflow.
        :rtype: List[str]
        """
        return self._content_filter_allowed_countries

    @content_filter_allowed_countries.setter
    def content_filter_allowed_countries(self, content_filter_allowed_countries: List[str]):
        """Sets the content_filter_allowed_countries of this ScrapingWorkflow.


        :param content_filter_allowed_countries: The content_filter_allowed_countries of this ScrapingWorkflow.
        :type content_filter_allowed_countries: List[str]
        """

        self._content_filter_allowed_countries = content_filter_allowed_countries

    @property
    def content_filter_excluded_types(self) -> List[str]:
        """Gets the content_filter_excluded_types of this ScrapingWorkflow.


        :return: The content_filter_excluded_types of this ScrapingWorkflow.
        :rtype: List[str]
        """
        return self._content_filter_excluded_types

    @content_filter_excluded_types.setter
    def content_filter_excluded_types(self, content_filter_excluded_types: List[str]):
        """Sets the content_filter_excluded_types of this ScrapingWorkflow.


        :param content_filter_excluded_types: The content_filter_excluded_types of this ScrapingWorkflow.
        :type content_filter_excluded_types: List[str]
        """

        self._content_filter_excluded_types = content_filter_excluded_types

    @property
    def content_filter_minimum_rating(self) -> float:
        """Gets the content_filter_minimum_rating of this ScrapingWorkflow.


        :return: The content_filter_minimum_rating of this ScrapingWorkflow.
        :rtype: float
        """
        return self._content_filter_minimum_rating

    @content_filter_minimum_rating.setter
    def content_filter_minimum_rating(self, content_filter_minimum_rating: float):
        """Sets the content_filter_minimum_rating of this ScrapingWorkflow.


        :param content_filter_minimum_rating: The content_filter_minimum_rating of this ScrapingWorkflow.
        :type content_filter_minimum_rating: float
        """

        self._content_filter_minimum_rating = content_filter_minimum_rating

    @property
    def content_filter_minimum_reviews(self) -> int:
        """Gets the content_filter_minimum_reviews of this ScrapingWorkflow.


        :return: The content_filter_minimum_reviews of this ScrapingWorkflow.
        :rtype: int
        """
        return self._content_filter_minimum_reviews

    @content_filter_minimum_reviews.setter
    def content_filter_minimum_reviews(self, content_filter_minimum_reviews: int):
        """Sets the content_filter_minimum_reviews of this ScrapingWorkflow.


        :param content_filter_minimum_reviews: The content_filter_minimum_reviews of this ScrapingWorkflow.
        :type content_filter_minimum_reviews: int
        """

        self._content_filter_minimum_reviews = content_filter_minimum_reviews

    @property
    def qos_max_concurrent_requests(self) -> int:
        """Gets the qos_max_concurrent_requests of this ScrapingWorkflow.


        :return: The qos_max_concurrent_requests of this ScrapingWorkflow.
        :rtype: int
        """
        return self._qos_max_concurrent_requests

    @qos_max_concurrent_requests.setter
    def qos_max_concurrent_requests(self, qos_max_concurrent_requests: int):
        """Sets the qos_max_concurrent_requests of this ScrapingWorkflow.


        :param qos_max_concurrent_requests: The qos_max_concurrent_requests of this ScrapingWorkflow.
        :type qos_max_concurrent_requests: int
        """

        self._qos_max_concurrent_requests = qos_max_concurrent_requests

    @property
    def qos_max_retries(self) -> int:
        """Gets the qos_max_retries of this ScrapingWorkflow.


        :return: The qos_max_retries of this ScrapingWorkflow.
        :rtype: int
        """
        return self._qos_max_retries

    @qos_max_retries.setter
    def qos_max_retries(self, qos_max_retries: int):
        """Sets the qos_max_retries of this ScrapingWorkflow.


        :param qos_max_retries: The qos_max_retries of this ScrapingWorkflow.
        :type qos_max_retries: int
        """

        self._qos_max_retries = qos_max_retries

    @property
    def qos_request_timeout(self) -> str:
        """Gets the qos_request_timeout of this ScrapingWorkflow.


        :return: The qos_request_timeout of this ScrapingWorkflow.
        :rtype: str
        """
        return self._qos_request_timeout

    @qos_request_timeout.setter
    def qos_request_timeout(self, qos_request_timeout: str):
        """Sets the qos_request_timeout of this ScrapingWorkflow.


        :param qos_request_timeout: The qos_request_timeout of this ScrapingWorkflow.
        :type qos_request_timeout: str
        """

        self._qos_request_timeout = qos_request_timeout

    @property
    def qos_enable_javascript(self) -> bool:
        """Gets the qos_enable_javascript of this ScrapingWorkflow.


        :return: The qos_enable_javascript of this ScrapingWorkflow.
        :rtype: bool
        """
        return self._qos_enable_javascript

    @qos_enable_javascript.setter
    def qos_enable_javascript(self, qos_enable_javascript: bool):
        """Sets the qos_enable_javascript of this ScrapingWorkflow.


        :param qos_enable_javascript: The qos_enable_javascript of this ScrapingWorkflow.
        :type qos_enable_javascript: bool
        """

        self._qos_enable_javascript = qos_enable_javascript

    @property
    def respect_robots_txt(self) -> bool:
        """Gets the respect_robots_txt of this ScrapingWorkflow.


        :return: The respect_robots_txt of this ScrapingWorkflow.
        :rtype: bool
        """
        return self._respect_robots_txt

    @respect_robots_txt.setter
    def respect_robots_txt(self, respect_robots_txt: bool):
        """Sets the respect_robots_txt of this ScrapingWorkflow.


        :param respect_robots_txt: The respect_robots_txt of this ScrapingWorkflow.
        :type respect_robots_txt: bool
        """

        self._respect_robots_txt = respect_robots_txt

    @property
    def accept_terms_of_service(self) -> bool:
        """Gets the accept_terms_of_service of this ScrapingWorkflow.


        :return: The accept_terms_of_service of this ScrapingWorkflow.
        :rtype: bool
        """
        return self._accept_terms_of_service

    @accept_terms_of_service.setter
    def accept_terms_of_service(self, accept_terms_of_service: bool):
        """Sets the accept_terms_of_service of this ScrapingWorkflow.


        :param accept_terms_of_service: The accept_terms_of_service of this ScrapingWorkflow.
        :type accept_terms_of_service: bool
        """

        self._accept_terms_of_service = accept_terms_of_service

    @property
    def user_agent(self) -> str:
        """Gets the user_agent of this ScrapingWorkflow.


        :return: The user_agent of this ScrapingWorkflow.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent: str):
        """Sets the user_agent of this ScrapingWorkflow.


        :param user_agent: The user_agent of this ScrapingWorkflow.
        :type user_agent: str
        """

        self._user_agent = user_agent

    @property
    def search_terms(self) -> List[str]:
        """Gets the search_terms of this ScrapingWorkflow.


        :return: The search_terms of this ScrapingWorkflow.
        :rtype: List[str]
        """
        return self._search_terms

    @search_terms.setter
    def search_terms(self, search_terms: List[str]):
        """Sets the search_terms of this ScrapingWorkflow.


        :param search_terms: The search_terms of this ScrapingWorkflow.
        :type search_terms: List[str]
        """

        self._search_terms = search_terms

    @property
    def scheduled_entry_id(self) -> str:
        """Gets the scheduled_entry_id of this ScrapingWorkflow.


        :return: The scheduled_entry_id of this ScrapingWorkflow.
        :rtype: str
        """
        return self._scheduled_entry_id

    @scheduled_entry_id.setter
    def scheduled_entry_id(self, scheduled_entry_id: str):
        """Sets the scheduled_entry_id of this ScrapingWorkflow.


        :param scheduled_entry_id: The scheduled_entry_id of this ScrapingWorkflow.
        :type scheduled_entry_id: str
        """

        self._scheduled_entry_id = scheduled_entry_id
