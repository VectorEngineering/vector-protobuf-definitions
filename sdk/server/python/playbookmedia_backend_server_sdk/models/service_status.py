from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.dependency import Dependency
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.dependency import Dependency  # noqa: E501

class ServiceStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, status=None, metrics=None, dependencies=None):  # noqa: E501
        """ServiceStatus - a model defined in OpenAPI

        :param name: The name of this ServiceStatus.  # noqa: E501
        :type name: str
        :param status: The status of this ServiceStatus.  # noqa: E501
        :type status: str
        :param metrics: The metrics of this ServiceStatus.  # noqa: E501
        :type metrics: Dict[str, str]
        :param dependencies: The dependencies of this ServiceStatus.  # noqa: E501
        :type dependencies: List[Dependency]
        """
        self.openapi_types = {
            'name': str,
            'status': str,
            'metrics': Dict[str, str],
            'dependencies': List[Dependency]
        }

        self.attribute_map = {
            'name': 'name',
            'status': 'status',
            'metrics': 'metrics',
            'dependencies': 'dependencies'
        }

        self._name = name
        self._status = status
        self._metrics = metrics
        self._dependencies = dependencies

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceStatus of this ServiceStatus.  # noqa: E501
        :rtype: ServiceStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ServiceStatus.


        :return: The name of this ServiceStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ServiceStatus.


        :param name: The name of this ServiceStatus.
        :type name: str
        """

        self._name = name

    @property
    def status(self) -> str:
        """Gets the status of this ServiceStatus.


        :return: The status of this ServiceStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ServiceStatus.


        :param status: The status of this ServiceStatus.
        :type status: str
        """

        self._status = status

    @property
    def metrics(self) -> Dict[str, str]:
        """Gets the metrics of this ServiceStatus.


        :return: The metrics of this ServiceStatus.
        :rtype: Dict[str, str]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics: Dict[str, str]):
        """Sets the metrics of this ServiceStatus.


        :param metrics: The metrics of this ServiceStatus.
        :type metrics: Dict[str, str]
        """

        self._metrics = metrics

    @property
    def dependencies(self) -> List[Dependency]:
        """Gets the dependencies of this ServiceStatus.


        :return: The dependencies of this ServiceStatus.
        :rtype: List[Dependency]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies: List[Dependency]):
        """Sets the dependencies of this ServiceStatus.


        :param dependencies: The dependencies of this ServiceStatus.
        :type dependencies: List[Dependency]
        """

        self._dependencies = dependencies
