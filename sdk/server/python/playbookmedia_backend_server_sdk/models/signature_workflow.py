from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class SignatureWorkflow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, request_id=None, signing_order=None, current_signer=None, workflow_status=None, parallel_signing=None, require_all_signatures=None, deadline=None, created_at=None, updated_at=None):  # noqa: E501
        """SignatureWorkflow - a model defined in OpenAPI

        :param id: The id of this SignatureWorkflow.  # noqa: E501
        :type id: str
        :param request_id: The request_id of this SignatureWorkflow.  # noqa: E501
        :type request_id: str
        :param signing_order: The signing_order of this SignatureWorkflow.  # noqa: E501
        :type signing_order: List[str]
        :param current_signer: The current_signer of this SignatureWorkflow.  # noqa: E501
        :type current_signer: str
        :param workflow_status: The workflow_status of this SignatureWorkflow.  # noqa: E501
        :type workflow_status: str
        :param parallel_signing: The parallel_signing of this SignatureWorkflow.  # noqa: E501
        :type parallel_signing: bool
        :param require_all_signatures: The require_all_signatures of this SignatureWorkflow.  # noqa: E501
        :type require_all_signatures: bool
        :param deadline: The deadline of this SignatureWorkflow.  # noqa: E501
        :type deadline: datetime
        :param created_at: The created_at of this SignatureWorkflow.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this SignatureWorkflow.  # noqa: E501
        :type updated_at: datetime
        """
        self.openapi_types = {
            'id': str,
            'request_id': str,
            'signing_order': List[str],
            'current_signer': str,
            'workflow_status': str,
            'parallel_signing': bool,
            'require_all_signatures': bool,
            'deadline': datetime,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'request_id': 'requestId',
            'signing_order': 'signingOrder',
            'current_signer': 'currentSigner',
            'workflow_status': 'workflowStatus',
            'parallel_signing': 'parallelSigning',
            'require_all_signatures': 'requireAllSignatures',
            'deadline': 'deadline',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._id = id
        self._request_id = request_id
        self._signing_order = signing_order
        self._current_signer = current_signer
        self._workflow_status = workflow_status
        self._parallel_signing = parallel_signing
        self._require_all_signatures = require_all_signatures
        self._deadline = deadline
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'SignatureWorkflow':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SignatureWorkflow of this SignatureWorkflow.  # noqa: E501
        :rtype: SignatureWorkflow
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this SignatureWorkflow.


        :return: The id of this SignatureWorkflow.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this SignatureWorkflow.


        :param id: The id of this SignatureWorkflow.
        :type id: str
        """

        self._id = id

    @property
    def request_id(self) -> str:
        """Gets the request_id of this SignatureWorkflow.


        :return: The request_id of this SignatureWorkflow.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id: str):
        """Sets the request_id of this SignatureWorkflow.


        :param request_id: The request_id of this SignatureWorkflow.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def signing_order(self) -> List[str]:
        """Gets the signing_order of this SignatureWorkflow.


        :return: The signing_order of this SignatureWorkflow.
        :rtype: List[str]
        """
        return self._signing_order

    @signing_order.setter
    def signing_order(self, signing_order: List[str]):
        """Sets the signing_order of this SignatureWorkflow.


        :param signing_order: The signing_order of this SignatureWorkflow.
        :type signing_order: List[str]
        """

        self._signing_order = signing_order

    @property
    def current_signer(self) -> str:
        """Gets the current_signer of this SignatureWorkflow.


        :return: The current_signer of this SignatureWorkflow.
        :rtype: str
        """
        return self._current_signer

    @current_signer.setter
    def current_signer(self, current_signer: str):
        """Sets the current_signer of this SignatureWorkflow.


        :param current_signer: The current_signer of this SignatureWorkflow.
        :type current_signer: str
        """

        self._current_signer = current_signer

    @property
    def workflow_status(self) -> str:
        """Gets the workflow_status of this SignatureWorkflow.


        :return: The workflow_status of this SignatureWorkflow.
        :rtype: str
        """
        return self._workflow_status

    @workflow_status.setter
    def workflow_status(self, workflow_status: str):
        """Sets the workflow_status of this SignatureWorkflow.


        :param workflow_status: The workflow_status of this SignatureWorkflow.
        :type workflow_status: str
        """

        self._workflow_status = workflow_status

    @property
    def parallel_signing(self) -> bool:
        """Gets the parallel_signing of this SignatureWorkflow.


        :return: The parallel_signing of this SignatureWorkflow.
        :rtype: bool
        """
        return self._parallel_signing

    @parallel_signing.setter
    def parallel_signing(self, parallel_signing: bool):
        """Sets the parallel_signing of this SignatureWorkflow.


        :param parallel_signing: The parallel_signing of this SignatureWorkflow.
        :type parallel_signing: bool
        """

        self._parallel_signing = parallel_signing

    @property
    def require_all_signatures(self) -> bool:
        """Gets the require_all_signatures of this SignatureWorkflow.


        :return: The require_all_signatures of this SignatureWorkflow.
        :rtype: bool
        """
        return self._require_all_signatures

    @require_all_signatures.setter
    def require_all_signatures(self, require_all_signatures: bool):
        """Sets the require_all_signatures of this SignatureWorkflow.


        :param require_all_signatures: The require_all_signatures of this SignatureWorkflow.
        :type require_all_signatures: bool
        """

        self._require_all_signatures = require_all_signatures

    @property
    def deadline(self) -> datetime:
        """Gets the deadline of this SignatureWorkflow.


        :return: The deadline of this SignatureWorkflow.
        :rtype: datetime
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline: datetime):
        """Sets the deadline of this SignatureWorkflow.


        :param deadline: The deadline of this SignatureWorkflow.
        :type deadline: datetime
        """

        self._deadline = deadline

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this SignatureWorkflow.


        :return: The created_at of this SignatureWorkflow.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this SignatureWorkflow.


        :param created_at: The created_at of this SignatureWorkflow.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this SignatureWorkflow.


        :return: The updated_at of this SignatureWorkflow.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this SignatureWorkflow.


        :param updated_at: The updated_at of this SignatureWorkflow.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
