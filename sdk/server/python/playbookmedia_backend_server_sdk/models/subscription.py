from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.billing_mode import BillingMode
from playbookmedia_backend_server_sdk.models.interval import Interval
from playbookmedia_backend_server_sdk.models.payment_status import PaymentStatus
from playbookmedia_backend_server_sdk.models.plan_tier import PlanTier
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.billing_mode import BillingMode  # noqa: E501
from playbookmedia_backend_server_sdk.models.interval import Interval  # noqa: E501
from playbookmedia_backend_server_sdk.models.payment_status import PaymentStatus  # noqa: E501
from playbookmedia_backend_server_sdk.models.plan_tier import PlanTier  # noqa: E501

class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, stripe_customer_id=None, stripe_subscription_id=None, stripe_price_id=None, stripe_product_id=None, plan_tier=PlanTier.UNSPECIFIED, billing_mode=BillingMode.UNSPECIFIED, included_jobs=None, per_job_rate=None, max_concurrent_jobs=None, included_storage=None, per_gb_rate=None, advanced_filtering_enabled=None, priority_support_enabled=None, custom_exports_enabled=None, api_access_enabled=None, custom_proxies_enabled=None, advanced_analytics_enabled=None, retention_days=None, max_results_per_job=None, current_period_start=None, current_period_end=None, current_period_usage=None, currency=None, base_price=None, billing_interval=Interval.UNSPECIFIED, auto_renew=None, payment_status=PaymentStatus.UNSPECIFIED, is_trial=None, trial_start=None, trial_end=None, created_at=None, updated_at=None, canceled_at=None, ended_at=None):  # noqa: E501
        """Subscription - a model defined in OpenAPI

        :param id: The id of this Subscription.  # noqa: E501
        :type id: str
        :param stripe_customer_id: The stripe_customer_id of this Subscription.  # noqa: E501
        :type stripe_customer_id: str
        :param stripe_subscription_id: The stripe_subscription_id of this Subscription.  # noqa: E501
        :type stripe_subscription_id: str
        :param stripe_price_id: The stripe_price_id of this Subscription.  # noqa: E501
        :type stripe_price_id: str
        :param stripe_product_id: The stripe_product_id of this Subscription.  # noqa: E501
        :type stripe_product_id: str
        :param plan_tier: The plan_tier of this Subscription.  # noqa: E501
        :type plan_tier: PlanTier
        :param billing_mode: The billing_mode of this Subscription.  # noqa: E501
        :type billing_mode: BillingMode
        :param included_jobs: The included_jobs of this Subscription.  # noqa: E501
        :type included_jobs: int
        :param per_job_rate: The per_job_rate of this Subscription.  # noqa: E501
        :type per_job_rate: float
        :param max_concurrent_jobs: The max_concurrent_jobs of this Subscription.  # noqa: E501
        :type max_concurrent_jobs: int
        :param included_storage: The included_storage of this Subscription.  # noqa: E501
        :type included_storage: str
        :param per_gb_rate: The per_gb_rate of this Subscription.  # noqa: E501
        :type per_gb_rate: float
        :param advanced_filtering_enabled: The advanced_filtering_enabled of this Subscription.  # noqa: E501
        :type advanced_filtering_enabled: bool
        :param priority_support_enabled: The priority_support_enabled of this Subscription.  # noqa: E501
        :type priority_support_enabled: bool
        :param custom_exports_enabled: The custom_exports_enabled of this Subscription.  # noqa: E501
        :type custom_exports_enabled: bool
        :param api_access_enabled: The api_access_enabled of this Subscription.  # noqa: E501
        :type api_access_enabled: bool
        :param custom_proxies_enabled: The custom_proxies_enabled of this Subscription.  # noqa: E501
        :type custom_proxies_enabled: bool
        :param advanced_analytics_enabled: The advanced_analytics_enabled of this Subscription.  # noqa: E501
        :type advanced_analytics_enabled: bool
        :param retention_days: The retention_days of this Subscription.  # noqa: E501
        :type retention_days: int
        :param max_results_per_job: The max_results_per_job of this Subscription.  # noqa: E501
        :type max_results_per_job: int
        :param current_period_start: The current_period_start of this Subscription.  # noqa: E501
        :type current_period_start: datetime
        :param current_period_end: The current_period_end of this Subscription.  # noqa: E501
        :type current_period_end: datetime
        :param current_period_usage: The current_period_usage of this Subscription.  # noqa: E501
        :type current_period_usage: float
        :param currency: The currency of this Subscription.  # noqa: E501
        :type currency: str
        :param base_price: The base_price of this Subscription.  # noqa: E501
        :type base_price: float
        :param billing_interval: The billing_interval of this Subscription.  # noqa: E501
        :type billing_interval: Interval
        :param auto_renew: The auto_renew of this Subscription.  # noqa: E501
        :type auto_renew: bool
        :param payment_status: The payment_status of this Subscription.  # noqa: E501
        :type payment_status: PaymentStatus
        :param is_trial: The is_trial of this Subscription.  # noqa: E501
        :type is_trial: bool
        :param trial_start: The trial_start of this Subscription.  # noqa: E501
        :type trial_start: datetime
        :param trial_end: The trial_end of this Subscription.  # noqa: E501
        :type trial_end: datetime
        :param created_at: The created_at of this Subscription.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this Subscription.  # noqa: E501
        :type updated_at: datetime
        :param canceled_at: The canceled_at of this Subscription.  # noqa: E501
        :type canceled_at: datetime
        :param ended_at: The ended_at of this Subscription.  # noqa: E501
        :type ended_at: datetime
        """
        self.openapi_types = {
            'id': str,
            'stripe_customer_id': str,
            'stripe_subscription_id': str,
            'stripe_price_id': str,
            'stripe_product_id': str,
            'plan_tier': PlanTier,
            'billing_mode': BillingMode,
            'included_jobs': int,
            'per_job_rate': float,
            'max_concurrent_jobs': int,
            'included_storage': str,
            'per_gb_rate': float,
            'advanced_filtering_enabled': bool,
            'priority_support_enabled': bool,
            'custom_exports_enabled': bool,
            'api_access_enabled': bool,
            'custom_proxies_enabled': bool,
            'advanced_analytics_enabled': bool,
            'retention_days': int,
            'max_results_per_job': int,
            'current_period_start': datetime,
            'current_period_end': datetime,
            'current_period_usage': float,
            'currency': str,
            'base_price': float,
            'billing_interval': Interval,
            'auto_renew': bool,
            'payment_status': PaymentStatus,
            'is_trial': bool,
            'trial_start': datetime,
            'trial_end': datetime,
            'created_at': datetime,
            'updated_at': datetime,
            'canceled_at': datetime,
            'ended_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'stripe_customer_id': 'stripeCustomerId',
            'stripe_subscription_id': 'stripeSubscriptionId',
            'stripe_price_id': 'stripePriceId',
            'stripe_product_id': 'stripeProductId',
            'plan_tier': 'planTier',
            'billing_mode': 'billingMode',
            'included_jobs': 'includedJobs',
            'per_job_rate': 'perJobRate',
            'max_concurrent_jobs': 'maxConcurrentJobs',
            'included_storage': 'includedStorage',
            'per_gb_rate': 'perGbRate',
            'advanced_filtering_enabled': 'advancedFilteringEnabled',
            'priority_support_enabled': 'prioritySupportEnabled',
            'custom_exports_enabled': 'customExportsEnabled',
            'api_access_enabled': 'apiAccessEnabled',
            'custom_proxies_enabled': 'customProxiesEnabled',
            'advanced_analytics_enabled': 'advancedAnalyticsEnabled',
            'retention_days': 'retentionDays',
            'max_results_per_job': 'maxResultsPerJob',
            'current_period_start': 'currentPeriodStart',
            'current_period_end': 'currentPeriodEnd',
            'current_period_usage': 'currentPeriodUsage',
            'currency': 'currency',
            'base_price': 'basePrice',
            'billing_interval': 'billingInterval',
            'auto_renew': 'autoRenew',
            'payment_status': 'paymentStatus',
            'is_trial': 'isTrial',
            'trial_start': 'trialStart',
            'trial_end': 'trialEnd',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'canceled_at': 'canceledAt',
            'ended_at': 'endedAt'
        }

        self._id = id
        self._stripe_customer_id = stripe_customer_id
        self._stripe_subscription_id = stripe_subscription_id
        self._stripe_price_id = stripe_price_id
        self._stripe_product_id = stripe_product_id
        self._plan_tier = plan_tier
        self._billing_mode = billing_mode
        self._included_jobs = included_jobs
        self._per_job_rate = per_job_rate
        self._max_concurrent_jobs = max_concurrent_jobs
        self._included_storage = included_storage
        self._per_gb_rate = per_gb_rate
        self._advanced_filtering_enabled = advanced_filtering_enabled
        self._priority_support_enabled = priority_support_enabled
        self._custom_exports_enabled = custom_exports_enabled
        self._api_access_enabled = api_access_enabled
        self._custom_proxies_enabled = custom_proxies_enabled
        self._advanced_analytics_enabled = advanced_analytics_enabled
        self._retention_days = retention_days
        self._max_results_per_job = max_results_per_job
        self._current_period_start = current_period_start
        self._current_period_end = current_period_end
        self._current_period_usage = current_period_usage
        self._currency = currency
        self._base_price = base_price
        self._billing_interval = billing_interval
        self._auto_renew = auto_renew
        self._payment_status = payment_status
        self._is_trial = is_trial
        self._trial_start = trial_start
        self._trial_end = trial_end
        self._created_at = created_at
        self._updated_at = updated_at
        self._canceled_at = canceled_at
        self._ended_at = ended_at

    @classmethod
    def from_dict(cls, dikt) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Subscription of this Subscription.  # noqa: E501
        :rtype: Subscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Subscription.


        :return: The id of this Subscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Subscription.


        :param id: The id of this Subscription.
        :type id: str
        """

        self._id = id

    @property
    def stripe_customer_id(self) -> str:
        """Gets the stripe_customer_id of this Subscription.


        :return: The stripe_customer_id of this Subscription.
        :rtype: str
        """
        return self._stripe_customer_id

    @stripe_customer_id.setter
    def stripe_customer_id(self, stripe_customer_id: str):
        """Sets the stripe_customer_id of this Subscription.


        :param stripe_customer_id: The stripe_customer_id of this Subscription.
        :type stripe_customer_id: str
        """

        self._stripe_customer_id = stripe_customer_id

    @property
    def stripe_subscription_id(self) -> str:
        """Gets the stripe_subscription_id of this Subscription.


        :return: The stripe_subscription_id of this Subscription.
        :rtype: str
        """
        return self._stripe_subscription_id

    @stripe_subscription_id.setter
    def stripe_subscription_id(self, stripe_subscription_id: str):
        """Sets the stripe_subscription_id of this Subscription.


        :param stripe_subscription_id: The stripe_subscription_id of this Subscription.
        :type stripe_subscription_id: str
        """

        self._stripe_subscription_id = stripe_subscription_id

    @property
    def stripe_price_id(self) -> str:
        """Gets the stripe_price_id of this Subscription.


        :return: The stripe_price_id of this Subscription.
        :rtype: str
        """
        return self._stripe_price_id

    @stripe_price_id.setter
    def stripe_price_id(self, stripe_price_id: str):
        """Sets the stripe_price_id of this Subscription.


        :param stripe_price_id: The stripe_price_id of this Subscription.
        :type stripe_price_id: str
        """

        self._stripe_price_id = stripe_price_id

    @property
    def stripe_product_id(self) -> str:
        """Gets the stripe_product_id of this Subscription.


        :return: The stripe_product_id of this Subscription.
        :rtype: str
        """
        return self._stripe_product_id

    @stripe_product_id.setter
    def stripe_product_id(self, stripe_product_id: str):
        """Sets the stripe_product_id of this Subscription.


        :param stripe_product_id: The stripe_product_id of this Subscription.
        :type stripe_product_id: str
        """

        self._stripe_product_id = stripe_product_id

    @property
    def plan_tier(self) -> PlanTier:
        """Gets the plan_tier of this Subscription.


        :return: The plan_tier of this Subscription.
        :rtype: PlanTier
        """
        return self._plan_tier

    @plan_tier.setter
    def plan_tier(self, plan_tier: PlanTier):
        """Sets the plan_tier of this Subscription.


        :param plan_tier: The plan_tier of this Subscription.
        :type plan_tier: PlanTier
        """

        self._plan_tier = plan_tier

    @property
    def billing_mode(self) -> BillingMode:
        """Gets the billing_mode of this Subscription.


        :return: The billing_mode of this Subscription.
        :rtype: BillingMode
        """
        return self._billing_mode

    @billing_mode.setter
    def billing_mode(self, billing_mode: BillingMode):
        """Sets the billing_mode of this Subscription.


        :param billing_mode: The billing_mode of this Subscription.
        :type billing_mode: BillingMode
        """

        self._billing_mode = billing_mode

    @property
    def included_jobs(self) -> int:
        """Gets the included_jobs of this Subscription.

        Jobs included in base price  # noqa: E501

        :return: The included_jobs of this Subscription.
        :rtype: int
        """
        return self._included_jobs

    @included_jobs.setter
    def included_jobs(self, included_jobs: int):
        """Sets the included_jobs of this Subscription.

        Jobs included in base price  # noqa: E501

        :param included_jobs: The included_jobs of this Subscription.
        :type included_jobs: int
        """

        self._included_jobs = included_jobs

    @property
    def per_job_rate(self) -> float:
        """Gets the per_job_rate of this Subscription.


        :return: The per_job_rate of this Subscription.
        :rtype: float
        """
        return self._per_job_rate

    @per_job_rate.setter
    def per_job_rate(self, per_job_rate: float):
        """Sets the per_job_rate of this Subscription.


        :param per_job_rate: The per_job_rate of this Subscription.
        :type per_job_rate: float
        """

        self._per_job_rate = per_job_rate

    @property
    def max_concurrent_jobs(self) -> int:
        """Gets the max_concurrent_jobs of this Subscription.


        :return: The max_concurrent_jobs of this Subscription.
        :rtype: int
        """
        return self._max_concurrent_jobs

    @max_concurrent_jobs.setter
    def max_concurrent_jobs(self, max_concurrent_jobs: int):
        """Sets the max_concurrent_jobs of this Subscription.


        :param max_concurrent_jobs: The max_concurrent_jobs of this Subscription.
        :type max_concurrent_jobs: int
        """

        self._max_concurrent_jobs = max_concurrent_jobs

    @property
    def included_storage(self) -> str:
        """Gets the included_storage of this Subscription.


        :return: The included_storage of this Subscription.
        :rtype: str
        """
        return self._included_storage

    @included_storage.setter
    def included_storage(self, included_storage: str):
        """Sets the included_storage of this Subscription.


        :param included_storage: The included_storage of this Subscription.
        :type included_storage: str
        """

        self._included_storage = included_storage

    @property
    def per_gb_rate(self) -> float:
        """Gets the per_gb_rate of this Subscription.


        :return: The per_gb_rate of this Subscription.
        :rtype: float
        """
        return self._per_gb_rate

    @per_gb_rate.setter
    def per_gb_rate(self, per_gb_rate: float):
        """Sets the per_gb_rate of this Subscription.


        :param per_gb_rate: The per_gb_rate of this Subscription.
        :type per_gb_rate: float
        """

        self._per_gb_rate = per_gb_rate

    @property
    def advanced_filtering_enabled(self) -> bool:
        """Gets the advanced_filtering_enabled of this Subscription.


        :return: The advanced_filtering_enabled of this Subscription.
        :rtype: bool
        """
        return self._advanced_filtering_enabled

    @advanced_filtering_enabled.setter
    def advanced_filtering_enabled(self, advanced_filtering_enabled: bool):
        """Sets the advanced_filtering_enabled of this Subscription.


        :param advanced_filtering_enabled: The advanced_filtering_enabled of this Subscription.
        :type advanced_filtering_enabled: bool
        """

        self._advanced_filtering_enabled = advanced_filtering_enabled

    @property
    def priority_support_enabled(self) -> bool:
        """Gets the priority_support_enabled of this Subscription.


        :return: The priority_support_enabled of this Subscription.
        :rtype: bool
        """
        return self._priority_support_enabled

    @priority_support_enabled.setter
    def priority_support_enabled(self, priority_support_enabled: bool):
        """Sets the priority_support_enabled of this Subscription.


        :param priority_support_enabled: The priority_support_enabled of this Subscription.
        :type priority_support_enabled: bool
        """

        self._priority_support_enabled = priority_support_enabled

    @property
    def custom_exports_enabled(self) -> bool:
        """Gets the custom_exports_enabled of this Subscription.


        :return: The custom_exports_enabled of this Subscription.
        :rtype: bool
        """
        return self._custom_exports_enabled

    @custom_exports_enabled.setter
    def custom_exports_enabled(self, custom_exports_enabled: bool):
        """Sets the custom_exports_enabled of this Subscription.


        :param custom_exports_enabled: The custom_exports_enabled of this Subscription.
        :type custom_exports_enabled: bool
        """

        self._custom_exports_enabled = custom_exports_enabled

    @property
    def api_access_enabled(self) -> bool:
        """Gets the api_access_enabled of this Subscription.


        :return: The api_access_enabled of this Subscription.
        :rtype: bool
        """
        return self._api_access_enabled

    @api_access_enabled.setter
    def api_access_enabled(self, api_access_enabled: bool):
        """Sets the api_access_enabled of this Subscription.


        :param api_access_enabled: The api_access_enabled of this Subscription.
        :type api_access_enabled: bool
        """

        self._api_access_enabled = api_access_enabled

    @property
    def custom_proxies_enabled(self) -> bool:
        """Gets the custom_proxies_enabled of this Subscription.


        :return: The custom_proxies_enabled of this Subscription.
        :rtype: bool
        """
        return self._custom_proxies_enabled

    @custom_proxies_enabled.setter
    def custom_proxies_enabled(self, custom_proxies_enabled: bool):
        """Sets the custom_proxies_enabled of this Subscription.


        :param custom_proxies_enabled: The custom_proxies_enabled of this Subscription.
        :type custom_proxies_enabled: bool
        """

        self._custom_proxies_enabled = custom_proxies_enabled

    @property
    def advanced_analytics_enabled(self) -> bool:
        """Gets the advanced_analytics_enabled of this Subscription.


        :return: The advanced_analytics_enabled of this Subscription.
        :rtype: bool
        """
        return self._advanced_analytics_enabled

    @advanced_analytics_enabled.setter
    def advanced_analytics_enabled(self, advanced_analytics_enabled: bool):
        """Sets the advanced_analytics_enabled of this Subscription.


        :param advanced_analytics_enabled: The advanced_analytics_enabled of this Subscription.
        :type advanced_analytics_enabled: bool
        """

        self._advanced_analytics_enabled = advanced_analytics_enabled

    @property
    def retention_days(self) -> int:
        """Gets the retention_days of this Subscription.


        :return: The retention_days of this Subscription.
        :rtype: int
        """
        return self._retention_days

    @retention_days.setter
    def retention_days(self, retention_days: int):
        """Sets the retention_days of this Subscription.


        :param retention_days: The retention_days of this Subscription.
        :type retention_days: int
        """

        self._retention_days = retention_days

    @property
    def max_results_per_job(self) -> int:
        """Gets the max_results_per_job of this Subscription.


        :return: The max_results_per_job of this Subscription.
        :rtype: int
        """
        return self._max_results_per_job

    @max_results_per_job.setter
    def max_results_per_job(self, max_results_per_job: int):
        """Sets the max_results_per_job of this Subscription.


        :param max_results_per_job: The max_results_per_job of this Subscription.
        :type max_results_per_job: int
        """

        self._max_results_per_job = max_results_per_job

    @property
    def current_period_start(self) -> datetime:
        """Gets the current_period_start of this Subscription.


        :return: The current_period_start of this Subscription.
        :rtype: datetime
        """
        return self._current_period_start

    @current_period_start.setter
    def current_period_start(self, current_period_start: datetime):
        """Sets the current_period_start of this Subscription.


        :param current_period_start: The current_period_start of this Subscription.
        :type current_period_start: datetime
        """

        self._current_period_start = current_period_start

    @property
    def current_period_end(self) -> datetime:
        """Gets the current_period_end of this Subscription.


        :return: The current_period_end of this Subscription.
        :rtype: datetime
        """
        return self._current_period_end

    @current_period_end.setter
    def current_period_end(self, current_period_end: datetime):
        """Sets the current_period_end of this Subscription.


        :param current_period_end: The current_period_end of this Subscription.
        :type current_period_end: datetime
        """

        self._current_period_end = current_period_end

    @property
    def current_period_usage(self) -> float:
        """Gets the current_period_usage of this Subscription.


        :return: The current_period_usage of this Subscription.
        :rtype: float
        """
        return self._current_period_usage

    @current_period_usage.setter
    def current_period_usage(self, current_period_usage: float):
        """Sets the current_period_usage of this Subscription.


        :param current_period_usage: The current_period_usage of this Subscription.
        :type current_period_usage: float
        """

        self._current_period_usage = current_period_usage

    @property
    def currency(self) -> str:
        """Gets the currency of this Subscription.

        e.g., \"usd\"  # noqa: E501

        :return: The currency of this Subscription.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this Subscription.

        e.g., \"usd\"  # noqa: E501

        :param currency: The currency of this Subscription.
        :type currency: str
        """

        self._currency = currency

    @property
    def base_price(self) -> float:
        """Gets the base_price of this Subscription.


        :return: The base_price of this Subscription.
        :rtype: float
        """
        return self._base_price

    @base_price.setter
    def base_price(self, base_price: float):
        """Sets the base_price of this Subscription.


        :param base_price: The base_price of this Subscription.
        :type base_price: float
        """

        self._base_price = base_price

    @property
    def billing_interval(self) -> Interval:
        """Gets the billing_interval of this Subscription.


        :return: The billing_interval of this Subscription.
        :rtype: Interval
        """
        return self._billing_interval

    @billing_interval.setter
    def billing_interval(self, billing_interval: Interval):
        """Sets the billing_interval of this Subscription.


        :param billing_interval: The billing_interval of this Subscription.
        :type billing_interval: Interval
        """

        self._billing_interval = billing_interval

    @property
    def auto_renew(self) -> bool:
        """Gets the auto_renew of this Subscription.


        :return: The auto_renew of this Subscription.
        :rtype: bool
        """
        return self._auto_renew

    @auto_renew.setter
    def auto_renew(self, auto_renew: bool):
        """Sets the auto_renew of this Subscription.


        :param auto_renew: The auto_renew of this Subscription.
        :type auto_renew: bool
        """

        self._auto_renew = auto_renew

    @property
    def payment_status(self) -> PaymentStatus:
        """Gets the payment_status of this Subscription.


        :return: The payment_status of this Subscription.
        :rtype: PaymentStatus
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status: PaymentStatus):
        """Sets the payment_status of this Subscription.


        :param payment_status: The payment_status of this Subscription.
        :type payment_status: PaymentStatus
        """

        self._payment_status = payment_status

    @property
    def is_trial(self) -> bool:
        """Gets the is_trial of this Subscription.


        :return: The is_trial of this Subscription.
        :rtype: bool
        """
        return self._is_trial

    @is_trial.setter
    def is_trial(self, is_trial: bool):
        """Sets the is_trial of this Subscription.


        :param is_trial: The is_trial of this Subscription.
        :type is_trial: bool
        """

        self._is_trial = is_trial

    @property
    def trial_start(self) -> datetime:
        """Gets the trial_start of this Subscription.


        :return: The trial_start of this Subscription.
        :rtype: datetime
        """
        return self._trial_start

    @trial_start.setter
    def trial_start(self, trial_start: datetime):
        """Sets the trial_start of this Subscription.


        :param trial_start: The trial_start of this Subscription.
        :type trial_start: datetime
        """

        self._trial_start = trial_start

    @property
    def trial_end(self) -> datetime:
        """Gets the trial_end of this Subscription.


        :return: The trial_end of this Subscription.
        :rtype: datetime
        """
        return self._trial_end

    @trial_end.setter
    def trial_end(self, trial_end: datetime):
        """Sets the trial_end of this Subscription.


        :param trial_end: The trial_end of this Subscription.
        :type trial_end: datetime
        """

        self._trial_end = trial_end

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Subscription.


        :return: The created_at of this Subscription.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Subscription.


        :param created_at: The created_at of this Subscription.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Subscription.


        :return: The updated_at of this Subscription.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Subscription.


        :param updated_at: The updated_at of this Subscription.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def canceled_at(self) -> datetime:
        """Gets the canceled_at of this Subscription.


        :return: The canceled_at of this Subscription.
        :rtype: datetime
        """
        return self._canceled_at

    @canceled_at.setter
    def canceled_at(self, canceled_at: datetime):
        """Sets the canceled_at of this Subscription.


        :param canceled_at: The canceled_at of this Subscription.
        :type canceled_at: datetime
        """

        self._canceled_at = canceled_at

    @property
    def ended_at(self) -> datetime:
        """Gets the ended_at of this Subscription.


        :return: The ended_at of this Subscription.
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at: datetime):
        """Sets the ended_at of this Subscription.


        :param ended_at: The ended_at of this Subscription.
        :type ended_at: datetime
        """

        self._ended_at = ended_at
