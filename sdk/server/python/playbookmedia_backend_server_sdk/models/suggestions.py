from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class Suggestions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, similar_resources=None, alternative_paths=None, documentation_url=None, hints=None):  # noqa: E501
        """Suggestions - a model defined in OpenAPI

        :param similar_resources: The similar_resources of this Suggestions.  # noqa: E501
        :type similar_resources: List[str]
        :param alternative_paths: The alternative_paths of this Suggestions.  # noqa: E501
        :type alternative_paths: List[str]
        :param documentation_url: The documentation_url of this Suggestions.  # noqa: E501
        :type documentation_url: str
        :param hints: The hints of this Suggestions.  # noqa: E501
        :type hints: Dict[str, str]
        """
        self.openapi_types = {
            'similar_resources': List[str],
            'alternative_paths': List[str],
            'documentation_url': str,
            'hints': Dict[str, str]
        }

        self.attribute_map = {
            'similar_resources': 'similarResources',
            'alternative_paths': 'alternativePaths',
            'documentation_url': 'documentationUrl',
            'hints': 'hints'
        }

        self._similar_resources = similar_resources
        self._alternative_paths = alternative_paths
        self._documentation_url = documentation_url
        self._hints = hints

    @classmethod
    def from_dict(cls, dikt) -> 'Suggestions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Suggestions of this Suggestions.  # noqa: E501
        :rtype: Suggestions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def similar_resources(self) -> List[str]:
        """Gets the similar_resources of this Suggestions.


        :return: The similar_resources of this Suggestions.
        :rtype: List[str]
        """
        return self._similar_resources

    @similar_resources.setter
    def similar_resources(self, similar_resources: List[str]):
        """Sets the similar_resources of this Suggestions.


        :param similar_resources: The similar_resources of this Suggestions.
        :type similar_resources: List[str]
        """

        self._similar_resources = similar_resources

    @property
    def alternative_paths(self) -> List[str]:
        """Gets the alternative_paths of this Suggestions.


        :return: The alternative_paths of this Suggestions.
        :rtype: List[str]
        """
        return self._alternative_paths

    @alternative_paths.setter
    def alternative_paths(self, alternative_paths: List[str]):
        """Sets the alternative_paths of this Suggestions.


        :param alternative_paths: The alternative_paths of this Suggestions.
        :type alternative_paths: List[str]
        """

        self._alternative_paths = alternative_paths

    @property
    def documentation_url(self) -> str:
        """Gets the documentation_url of this Suggestions.


        :return: The documentation_url of this Suggestions.
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url: str):
        """Sets the documentation_url of this Suggestions.


        :param documentation_url: The documentation_url of this Suggestions.
        :type documentation_url: str
        """

        self._documentation_url = documentation_url

    @property
    def hints(self) -> Dict[str, str]:
        """Gets the hints of this Suggestions.


        :return: The hints of this Suggestions.
        :rtype: Dict[str, str]
        """
        return self._hints

    @hints.setter
    def hints(self, hints: Dict[str, str]):
        """Sets the hints of this Suggestions.


        :param hints: The hints of this Suggestions.
        :type hints: Dict[str, str]
        """

        self._hints = hints
