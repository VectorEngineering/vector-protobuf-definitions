from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class TemplateVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, template_id=None, version=None, base_content=None, metadata=None, author_id=None, change_description=None, created_at=None):  # noqa: E501
        """TemplateVersion - a model defined in OpenAPI

        :param id: The id of this TemplateVersion.  # noqa: E501
        :type id: str
        :param template_id: The template_id of this TemplateVersion.  # noqa: E501
        :type template_id: str
        :param version: The version of this TemplateVersion.  # noqa: E501
        :type version: str
        :param base_content: The base_content of this TemplateVersion.  # noqa: E501
        :type base_content: str
        :param metadata: The metadata of this TemplateVersion.  # noqa: E501
        :type metadata: Dict[str, str]
        :param author_id: The author_id of this TemplateVersion.  # noqa: E501
        :type author_id: str
        :param change_description: The change_description of this TemplateVersion.  # noqa: E501
        :type change_description: str
        :param created_at: The created_at of this TemplateVersion.  # noqa: E501
        :type created_at: datetime
        """
        self.openapi_types = {
            'id': str,
            'template_id': str,
            'version': str,
            'base_content': str,
            'metadata': Dict[str, str],
            'author_id': str,
            'change_description': str,
            'created_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'template_id': 'templateId',
            'version': 'version',
            'base_content': 'baseContent',
            'metadata': 'metadata',
            'author_id': 'authorId',
            'change_description': 'changeDescription',
            'created_at': 'createdAt'
        }

        self._id = id
        self._template_id = template_id
        self._version = version
        self._base_content = base_content
        self._metadata = metadata
        self._author_id = author_id
        self._change_description = change_description
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt) -> 'TemplateVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TemplateVersion of this TemplateVersion.  # noqa: E501
        :rtype: TemplateVersion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this TemplateVersion.


        :return: The id of this TemplateVersion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this TemplateVersion.


        :param id: The id of this TemplateVersion.
        :type id: str
        """

        self._id = id

    @property
    def template_id(self) -> str:
        """Gets the template_id of this TemplateVersion.


        :return: The template_id of this TemplateVersion.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id: str):
        """Sets the template_id of this TemplateVersion.


        :param template_id: The template_id of this TemplateVersion.
        :type template_id: str
        """

        self._template_id = template_id

    @property
    def version(self) -> str:
        """Gets the version of this TemplateVersion.


        :return: The version of this TemplateVersion.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this TemplateVersion.


        :param version: The version of this TemplateVersion.
        :type version: str
        """

        self._version = version

    @property
    def base_content(self) -> str:
        """Gets the base_content of this TemplateVersion.


        :return: The base_content of this TemplateVersion.
        :rtype: str
        """
        return self._base_content

    @base_content.setter
    def base_content(self, base_content: str):
        """Sets the base_content of this TemplateVersion.


        :param base_content: The base_content of this TemplateVersion.
        :type base_content: str
        """

        self._base_content = base_content

    @property
    def metadata(self) -> Dict[str, str]:
        """Gets the metadata of this TemplateVersion.


        :return: The metadata of this TemplateVersion.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Dict[str, str]):
        """Sets the metadata of this TemplateVersion.


        :param metadata: The metadata of this TemplateVersion.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def author_id(self) -> str:
        """Gets the author_id of this TemplateVersion.


        :return: The author_id of this TemplateVersion.
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id: str):
        """Sets the author_id of this TemplateVersion.


        :param author_id: The author_id of this TemplateVersion.
        :type author_id: str
        """

        self._author_id = author_id

    @property
    def change_description(self) -> str:
        """Gets the change_description of this TemplateVersion.


        :return: The change_description of this TemplateVersion.
        :rtype: str
        """
        return self._change_description

    @change_description.setter
    def change_description(self, change_description: str):
        """Sets the change_description of this TemplateVersion.


        :param change_description: The change_description of this TemplateVersion.
        :type change_description: str
        """

        self._change_description = change_description

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this TemplateVersion.


        :return: The created_at of this TemplateVersion.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this TemplateVersion.


        :param created_at: The created_at of this TemplateVersion.
        :type created_at: datetime
        """

        self._created_at = created_at
