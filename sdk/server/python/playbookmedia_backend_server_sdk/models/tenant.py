from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.account import Account
from playbookmedia_backend_server_sdk.models.organization import Organization
from playbookmedia_backend_server_sdk.models.tenant_api_key import TenantAPIKey
from playbookmedia_backend_server_sdk.models.v1_status import V1Status
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.account import Account  # noqa: E501
from playbookmedia_backend_server_sdk.models.organization import Organization  # noqa: E501
from playbookmedia_backend_server_sdk.models.tenant_api_key import TenantAPIKey  # noqa: E501
from playbookmedia_backend_server_sdk.models.v1_status import V1Status  # noqa: E501

class Tenant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, display_name=None, description=None, organization=None, api_base_url=None, environment_variables=None, allowed_origins=None, storage_quota=None, monthly_request_limit=None, max_concurrent_jobs=None, enable_caching=None, enable_rate_limiting=None, enable_request_logging=None, accounts=None, api_keys=None, total_requests=None, total_storage_used=None, average_response_time=None, created_at=None, updated_at=None, deleted_at=None, status=V1Status.UNSPECIFIED):  # noqa: E501
        """Tenant - a model defined in OpenAPI

        :param id: The id of this Tenant.  # noqa: E501
        :type id: str
        :param name: The name of this Tenant.  # noqa: E501
        :type name: str
        :param display_name: The display_name of this Tenant.  # noqa: E501
        :type display_name: str
        :param description: The description of this Tenant.  # noqa: E501
        :type description: str
        :param organization: The organization of this Tenant.  # noqa: E501
        :type organization: Organization
        :param api_base_url: The api_base_url of this Tenant.  # noqa: E501
        :type api_base_url: str
        :param environment_variables: The environment_variables of this Tenant.  # noqa: E501
        :type environment_variables: Dict[str, str]
        :param allowed_origins: The allowed_origins of this Tenant.  # noqa: E501
        :type allowed_origins: List[str]
        :param storage_quota: The storage_quota of this Tenant.  # noqa: E501
        :type storage_quota: str
        :param monthly_request_limit: The monthly_request_limit of this Tenant.  # noqa: E501
        :type monthly_request_limit: str
        :param max_concurrent_jobs: The max_concurrent_jobs of this Tenant.  # noqa: E501
        :type max_concurrent_jobs: int
        :param enable_caching: The enable_caching of this Tenant.  # noqa: E501
        :type enable_caching: bool
        :param enable_rate_limiting: The enable_rate_limiting of this Tenant.  # noqa: E501
        :type enable_rate_limiting: bool
        :param enable_request_logging: The enable_request_logging of this Tenant.  # noqa: E501
        :type enable_request_logging: bool
        :param accounts: The accounts of this Tenant.  # noqa: E501
        :type accounts: List[Account]
        :param api_keys: The api_keys of this Tenant.  # noqa: E501
        :type api_keys: List[TenantAPIKey]
        :param total_requests: The total_requests of this Tenant.  # noqa: E501
        :type total_requests: str
        :param total_storage_used: The total_storage_used of this Tenant.  # noqa: E501
        :type total_storage_used: str
        :param average_response_time: The average_response_time of this Tenant.  # noqa: E501
        :type average_response_time: float
        :param created_at: The created_at of this Tenant.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this Tenant.  # noqa: E501
        :type updated_at: datetime
        :param deleted_at: The deleted_at of this Tenant.  # noqa: E501
        :type deleted_at: datetime
        :param status: The status of this Tenant.  # noqa: E501
        :type status: V1Status
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'display_name': str,
            'description': str,
            'organization': Organization,
            'api_base_url': str,
            'environment_variables': Dict[str, str],
            'allowed_origins': List[str],
            'storage_quota': str,
            'monthly_request_limit': str,
            'max_concurrent_jobs': int,
            'enable_caching': bool,
            'enable_rate_limiting': bool,
            'enable_request_logging': bool,
            'accounts': List[Account],
            'api_keys': List[TenantAPIKey],
            'total_requests': str,
            'total_storage_used': str,
            'average_response_time': float,
            'created_at': datetime,
            'updated_at': datetime,
            'deleted_at': datetime,
            'status': V1Status
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'display_name': 'displayName',
            'description': 'description',
            'organization': 'organization',
            'api_base_url': 'apiBaseUrl',
            'environment_variables': 'environmentVariables',
            'allowed_origins': 'allowedOrigins',
            'storage_quota': 'storageQuota',
            'monthly_request_limit': 'monthlyRequestLimit',
            'max_concurrent_jobs': 'maxConcurrentJobs',
            'enable_caching': 'enableCaching',
            'enable_rate_limiting': 'enableRateLimiting',
            'enable_request_logging': 'enableRequestLogging',
            'accounts': 'accounts',
            'api_keys': 'apiKeys',
            'total_requests': 'totalRequests',
            'total_storage_used': 'totalStorageUsed',
            'average_response_time': 'averageResponseTime',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'deleted_at': 'deletedAt',
            'status': 'status'
        }

        self._id = id
        self._name = name
        self._display_name = display_name
        self._description = description
        self._organization = organization
        self._api_base_url = api_base_url
        self._environment_variables = environment_variables
        self._allowed_origins = allowed_origins
        self._storage_quota = storage_quota
        self._monthly_request_limit = monthly_request_limit
        self._max_concurrent_jobs = max_concurrent_jobs
        self._enable_caching = enable_caching
        self._enable_rate_limiting = enable_rate_limiting
        self._enable_request_logging = enable_request_logging
        self._accounts = accounts
        self._api_keys = api_keys
        self._total_requests = total_requests
        self._total_storage_used = total_storage_used
        self._average_response_time = average_response_time
        self._created_at = created_at
        self._updated_at = updated_at
        self._deleted_at = deleted_at
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Tenant':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tenant of this Tenant.  # noqa: E501
        :rtype: Tenant
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Tenant.


        :return: The id of this Tenant.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Tenant.


        :param id: The id of this Tenant.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Tenant.


        :return: The name of this Tenant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Tenant.


        :param name: The name of this Tenant.
        :type name: str
        """

        self._name = name

    @property
    def display_name(self) -> str:
        """Gets the display_name of this Tenant.


        :return: The display_name of this Tenant.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this Tenant.


        :param display_name: The display_name of this Tenant.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def description(self) -> str:
        """Gets the description of this Tenant.


        :return: The description of this Tenant.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Tenant.


        :param description: The description of this Tenant.
        :type description: str
        """

        self._description = description

    @property
    def organization(self) -> Organization:
        """Gets the organization of this Tenant.


        :return: The organization of this Tenant.
        :rtype: Organization
        """
        return self._organization

    @organization.setter
    def organization(self, organization: Organization):
        """Sets the organization of this Tenant.


        :param organization: The organization of this Tenant.
        :type organization: Organization
        """

        self._organization = organization

    @property
    def api_base_url(self) -> str:
        """Gets the api_base_url of this Tenant.


        :return: The api_base_url of this Tenant.
        :rtype: str
        """
        return self._api_base_url

    @api_base_url.setter
    def api_base_url(self, api_base_url: str):
        """Sets the api_base_url of this Tenant.


        :param api_base_url: The api_base_url of this Tenant.
        :type api_base_url: str
        """

        self._api_base_url = api_base_url

    @property
    def environment_variables(self) -> Dict[str, str]:
        """Gets the environment_variables of this Tenant.


        :return: The environment_variables of this Tenant.
        :rtype: Dict[str, str]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables: Dict[str, str]):
        """Sets the environment_variables of this Tenant.


        :param environment_variables: The environment_variables of this Tenant.
        :type environment_variables: Dict[str, str]
        """

        self._environment_variables = environment_variables

    @property
    def allowed_origins(self) -> List[str]:
        """Gets the allowed_origins of this Tenant.


        :return: The allowed_origins of this Tenant.
        :rtype: List[str]
        """
        return self._allowed_origins

    @allowed_origins.setter
    def allowed_origins(self, allowed_origins: List[str]):
        """Sets the allowed_origins of this Tenant.


        :param allowed_origins: The allowed_origins of this Tenant.
        :type allowed_origins: List[str]
        """

        self._allowed_origins = allowed_origins

    @property
    def storage_quota(self) -> str:
        """Gets the storage_quota of this Tenant.


        :return: The storage_quota of this Tenant.
        :rtype: str
        """
        return self._storage_quota

    @storage_quota.setter
    def storage_quota(self, storage_quota: str):
        """Sets the storage_quota of this Tenant.


        :param storage_quota: The storage_quota of this Tenant.
        :type storage_quota: str
        """

        self._storage_quota = storage_quota

    @property
    def monthly_request_limit(self) -> str:
        """Gets the monthly_request_limit of this Tenant.


        :return: The monthly_request_limit of this Tenant.
        :rtype: str
        """
        return self._monthly_request_limit

    @monthly_request_limit.setter
    def monthly_request_limit(self, monthly_request_limit: str):
        """Sets the monthly_request_limit of this Tenant.


        :param monthly_request_limit: The monthly_request_limit of this Tenant.
        :type monthly_request_limit: str
        """

        self._monthly_request_limit = monthly_request_limit

    @property
    def max_concurrent_jobs(self) -> int:
        """Gets the max_concurrent_jobs of this Tenant.


        :return: The max_concurrent_jobs of this Tenant.
        :rtype: int
        """
        return self._max_concurrent_jobs

    @max_concurrent_jobs.setter
    def max_concurrent_jobs(self, max_concurrent_jobs: int):
        """Sets the max_concurrent_jobs of this Tenant.


        :param max_concurrent_jobs: The max_concurrent_jobs of this Tenant.
        :type max_concurrent_jobs: int
        """

        self._max_concurrent_jobs = max_concurrent_jobs

    @property
    def enable_caching(self) -> bool:
        """Gets the enable_caching of this Tenant.


        :return: The enable_caching of this Tenant.
        :rtype: bool
        """
        return self._enable_caching

    @enable_caching.setter
    def enable_caching(self, enable_caching: bool):
        """Sets the enable_caching of this Tenant.


        :param enable_caching: The enable_caching of this Tenant.
        :type enable_caching: bool
        """

        self._enable_caching = enable_caching

    @property
    def enable_rate_limiting(self) -> bool:
        """Gets the enable_rate_limiting of this Tenant.


        :return: The enable_rate_limiting of this Tenant.
        :rtype: bool
        """
        return self._enable_rate_limiting

    @enable_rate_limiting.setter
    def enable_rate_limiting(self, enable_rate_limiting: bool):
        """Sets the enable_rate_limiting of this Tenant.


        :param enable_rate_limiting: The enable_rate_limiting of this Tenant.
        :type enable_rate_limiting: bool
        """

        self._enable_rate_limiting = enable_rate_limiting

    @property
    def enable_request_logging(self) -> bool:
        """Gets the enable_request_logging of this Tenant.


        :return: The enable_request_logging of this Tenant.
        :rtype: bool
        """
        return self._enable_request_logging

    @enable_request_logging.setter
    def enable_request_logging(self, enable_request_logging: bool):
        """Sets the enable_request_logging of this Tenant.


        :param enable_request_logging: The enable_request_logging of this Tenant.
        :type enable_request_logging: bool
        """

        self._enable_request_logging = enable_request_logging

    @property
    def accounts(self) -> List[Account]:
        """Gets the accounts of this Tenant.


        :return: The accounts of this Tenant.
        :rtype: List[Account]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts: List[Account]):
        """Sets the accounts of this Tenant.


        :param accounts: The accounts of this Tenant.
        :type accounts: List[Account]
        """

        self._accounts = accounts

    @property
    def api_keys(self) -> List[TenantAPIKey]:
        """Gets the api_keys of this Tenant.


        :return: The api_keys of this Tenant.
        :rtype: List[TenantAPIKey]
        """
        return self._api_keys

    @api_keys.setter
    def api_keys(self, api_keys: List[TenantAPIKey]):
        """Sets the api_keys of this Tenant.


        :param api_keys: The api_keys of this Tenant.
        :type api_keys: List[TenantAPIKey]
        """

        self._api_keys = api_keys

    @property
    def total_requests(self) -> str:
        """Gets the total_requests of this Tenant.


        :return: The total_requests of this Tenant.
        :rtype: str
        """
        return self._total_requests

    @total_requests.setter
    def total_requests(self, total_requests: str):
        """Sets the total_requests of this Tenant.


        :param total_requests: The total_requests of this Tenant.
        :type total_requests: str
        """

        self._total_requests = total_requests

    @property
    def total_storage_used(self) -> str:
        """Gets the total_storage_used of this Tenant.


        :return: The total_storage_used of this Tenant.
        :rtype: str
        """
        return self._total_storage_used

    @total_storage_used.setter
    def total_storage_used(self, total_storage_used: str):
        """Sets the total_storage_used of this Tenant.


        :param total_storage_used: The total_storage_used of this Tenant.
        :type total_storage_used: str
        """

        self._total_storage_used = total_storage_used

    @property
    def average_response_time(self) -> float:
        """Gets the average_response_time of this Tenant.


        :return: The average_response_time of this Tenant.
        :rtype: float
        """
        return self._average_response_time

    @average_response_time.setter
    def average_response_time(self, average_response_time: float):
        """Sets the average_response_time of this Tenant.


        :param average_response_time: The average_response_time of this Tenant.
        :type average_response_time: float
        """

        self._average_response_time = average_response_time

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Tenant.


        :return: The created_at of this Tenant.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Tenant.


        :param created_at: The created_at of this Tenant.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Tenant.


        :return: The updated_at of this Tenant.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Tenant.


        :param updated_at: The updated_at of this Tenant.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self) -> datetime:
        """Gets the deleted_at of this Tenant.


        :return: The deleted_at of this Tenant.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: datetime):
        """Sets the deleted_at of this Tenant.


        :param deleted_at: The deleted_at of this Tenant.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def status(self) -> V1Status:
        """Gets the status of this Tenant.


        :return: The status of this Tenant.
        :rtype: V1Status
        """
        return self._status

    @status.setter
    def status(self, status: V1Status):
        """Sets the status of this Tenant.


        :param status: The status of this Tenant.
        :type status: V1Status
        """

        self._status = status
