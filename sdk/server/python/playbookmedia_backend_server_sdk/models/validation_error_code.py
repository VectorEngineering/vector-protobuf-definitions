from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk import util


class ValidationErrorCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    NO_ERROR = 'NO_ERROR'
    VALIDATION_ERROR = 'VALIDATION_ERROR'
    INVALID_WRITE_INPUT = 'INVALID_WRITE_INPUT'
    INVALID_CHECK_INPUT = 'INVALID_CHECK_INPUT'
    INVALID_EXPAND_INPUT = 'INVALID_EXPAND_INPUT'
    INVALID_OBJECT_FORMAT = 'INVALID_OBJECT_FORMAT'
    INVALID_USER = 'INVALID_USER'
    INVALID_TUPLE = 'INVALID_TUPLE'
    AUTHORIZATION_MODEL_NOT_FOUND = 'AUTHORIZATION_MODEL_NOT_FOUND'
    TYPE_NOT_FOUND = 'TYPE_NOT_FOUND'
    RELATION_NOT_FOUND = 'RELATION_NOT_FOUND'
    STORE_ID_INVALID_LENGTH = 'STORE_ID_INVALID_LENGTH'
    ID_TOO_LONG = 'ID_TOO_LONG'
    INVALID_CONTINUATION_TOKEN = 'INVALID_CONTINUATION_TOKEN'
    PAGE_SIZE_INVALID = 'PAGE_SIZE_INVALID'
    PARAM_MISSING_VALUE = 'PARAM_MISSING_VALUE'
    EXCEEDED_ENTITY_LIMIT = 'EXCEEDED_ENTITY_LIMIT'
    DUPLICATE_ENTRY = 'DUPLICATE_ENTRY'
    CANNOT_ALLOW_DUPLICATE_TUPLES = 'CANNOT_ALLOW_DUPLICATE_TUPLES'
    CANNOT_ALLOW_DUPLICATE_TYPES = 'CANNOT_ALLOW_DUPLICATE_TYPES'
    INVALID_SCHEMA_VERSION = 'INVALID_SCHEMA_VERSION'
    INVALID_TYPE_PATTERN = 'INVALID_TYPE_PATTERN'
    INVALID_RELATION_PATTERN = 'INVALID_RELATION_PATTERN'
    INVALID_OBJECT_PATTERN = 'INVALID_OBJECT_PATTERN'
    INVALID_FORMAT = 'INVALID_FORMAT'
    INVALID_EMAIL_FORMAT = 'INVALID_EMAIL_FORMAT'
    INVALID_PASSWORD_STRENGTH = 'INVALID_PASSWORD_STRENGTH'
    FIELD_TOO_SHORT = 'FIELD_TOO_SHORT'
    FIELD_TOO_LONG = 'FIELD_TOO_LONG'
    UNSUPPORTED_MEDIA_TYPE = 'UNSUPPORTED_MEDIA_TYPE'
    def __init__(self):  # noqa: E501
        """ValidationErrorCode - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt) -> 'ValidationErrorCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ValidationErrorCode of this ValidationErrorCode.  # noqa: E501
        :rtype: ValidationErrorCode
        """
        return util.deserialize_model(dikt, cls)
