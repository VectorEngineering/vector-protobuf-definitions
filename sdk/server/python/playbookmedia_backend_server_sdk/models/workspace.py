from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.api_key import APIKey
from playbookmedia_backend_server_sdk.models.scraping_job import ScrapingJob
from playbookmedia_backend_server_sdk.models.scraping_workflow import ScrapingWorkflow
from playbookmedia_backend_server_sdk.models.webhook_config import WebhookConfig
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.api_key import APIKey  # noqa: E501
from playbookmedia_backend_server_sdk.models.scraping_job import ScrapingJob  # noqa: E501
from playbookmedia_backend_server_sdk.models.scraping_workflow import ScrapingWorkflow  # noqa: E501
from playbookmedia_backend_server_sdk.models.webhook_config import WebhookConfig  # noqa: E501

class Workspace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, industry=None, domain=None, gdpr_compliant=None, hipaa_compliant=None, soc2_compliant=None, storage_quota=None, used_storage=None, created_at=None, updated_at=None, deleted_at=None, workflows=None, jobs_run_this_month=None, workspace_job_limit=None, daily_job_quota=None, active_scrapers=None, total_leads_collected=None, last_job_run=None, scraping_jobs=None, api_keys=None, webhooks=None):  # noqa: E501
        """Workspace - a model defined in OpenAPI

        :param id: The id of this Workspace.  # noqa: E501
        :type id: str
        :param name: The name of this Workspace.  # noqa: E501
        :type name: str
        :param industry: The industry of this Workspace.  # noqa: E501
        :type industry: str
        :param domain: The domain of this Workspace.  # noqa: E501
        :type domain: str
        :param gdpr_compliant: The gdpr_compliant of this Workspace.  # noqa: E501
        :type gdpr_compliant: bool
        :param hipaa_compliant: The hipaa_compliant of this Workspace.  # noqa: E501
        :type hipaa_compliant: bool
        :param soc2_compliant: The soc2_compliant of this Workspace.  # noqa: E501
        :type soc2_compliant: bool
        :param storage_quota: The storage_quota of this Workspace.  # noqa: E501
        :type storage_quota: str
        :param used_storage: The used_storage of this Workspace.  # noqa: E501
        :type used_storage: str
        :param created_at: The created_at of this Workspace.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this Workspace.  # noqa: E501
        :type updated_at: datetime
        :param deleted_at: The deleted_at of this Workspace.  # noqa: E501
        :type deleted_at: datetime
        :param workflows: The workflows of this Workspace.  # noqa: E501
        :type workflows: List[ScrapingWorkflow]
        :param jobs_run_this_month: The jobs_run_this_month of this Workspace.  # noqa: E501
        :type jobs_run_this_month: int
        :param workspace_job_limit: The workspace_job_limit of this Workspace.  # noqa: E501
        :type workspace_job_limit: int
        :param daily_job_quota: The daily_job_quota of this Workspace.  # noqa: E501
        :type daily_job_quota: int
        :param active_scrapers: The active_scrapers of this Workspace.  # noqa: E501
        :type active_scrapers: int
        :param total_leads_collected: The total_leads_collected of this Workspace.  # noqa: E501
        :type total_leads_collected: int
        :param last_job_run: The last_job_run of this Workspace.  # noqa: E501
        :type last_job_run: datetime
        :param scraping_jobs: The scraping_jobs of this Workspace.  # noqa: E501
        :type scraping_jobs: List[ScrapingJob]
        :param api_keys: The api_keys of this Workspace.  # noqa: E501
        :type api_keys: List[APIKey]
        :param webhooks: The webhooks of this Workspace.  # noqa: E501
        :type webhooks: List[WebhookConfig]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'industry': str,
            'domain': str,
            'gdpr_compliant': bool,
            'hipaa_compliant': bool,
            'soc2_compliant': bool,
            'storage_quota': str,
            'used_storage': str,
            'created_at': datetime,
            'updated_at': datetime,
            'deleted_at': datetime,
            'workflows': List[ScrapingWorkflow],
            'jobs_run_this_month': int,
            'workspace_job_limit': int,
            'daily_job_quota': int,
            'active_scrapers': int,
            'total_leads_collected': int,
            'last_job_run': datetime,
            'scraping_jobs': List[ScrapingJob],
            'api_keys': List[APIKey],
            'webhooks': List[WebhookConfig]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'industry': 'industry',
            'domain': 'domain',
            'gdpr_compliant': 'gdprCompliant',
            'hipaa_compliant': 'hipaaCompliant',
            'soc2_compliant': 'soc2Compliant',
            'storage_quota': 'storageQuota',
            'used_storage': 'usedStorage',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'deleted_at': 'deletedAt',
            'workflows': 'workflows',
            'jobs_run_this_month': 'jobsRunThisMonth',
            'workspace_job_limit': 'workspaceJobLimit',
            'daily_job_quota': 'dailyJobQuota',
            'active_scrapers': 'activeScrapers',
            'total_leads_collected': 'totalLeadsCollected',
            'last_job_run': 'lastJobRun',
            'scraping_jobs': 'scrapingJobs',
            'api_keys': 'apiKeys',
            'webhooks': 'webhooks'
        }

        self._id = id
        self._name = name
        self._industry = industry
        self._domain = domain
        self._gdpr_compliant = gdpr_compliant
        self._hipaa_compliant = hipaa_compliant
        self._soc2_compliant = soc2_compliant
        self._storage_quota = storage_quota
        self._used_storage = used_storage
        self._created_at = created_at
        self._updated_at = updated_at
        self._deleted_at = deleted_at
        self._workflows = workflows
        self._jobs_run_this_month = jobs_run_this_month
        self._workspace_job_limit = workspace_job_limit
        self._daily_job_quota = daily_job_quota
        self._active_scrapers = active_scrapers
        self._total_leads_collected = total_leads_collected
        self._last_job_run = last_job_run
        self._scraping_jobs = scraping_jobs
        self._api_keys = api_keys
        self._webhooks = webhooks

    @classmethod
    def from_dict(cls, dikt) -> 'Workspace':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Workspace of this Workspace.  # noqa: E501
        :rtype: Workspace
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Workspace.


        :return: The id of this Workspace.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Workspace.


        :param id: The id of this Workspace.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Workspace.


        :return: The name of this Workspace.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Workspace.


        :param name: The name of this Workspace.
        :type name: str
        """

        self._name = name

    @property
    def industry(self) -> str:
        """Gets the industry of this Workspace.


        :return: The industry of this Workspace.
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry: str):
        """Sets the industry of this Workspace.


        :param industry: The industry of this Workspace.
        :type industry: str
        """

        self._industry = industry

    @property
    def domain(self) -> str:
        """Gets the domain of this Workspace.


        :return: The domain of this Workspace.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: str):
        """Sets the domain of this Workspace.


        :param domain: The domain of this Workspace.
        :type domain: str
        """

        self._domain = domain

    @property
    def gdpr_compliant(self) -> bool:
        """Gets the gdpr_compliant of this Workspace.


        :return: The gdpr_compliant of this Workspace.
        :rtype: bool
        """
        return self._gdpr_compliant

    @gdpr_compliant.setter
    def gdpr_compliant(self, gdpr_compliant: bool):
        """Sets the gdpr_compliant of this Workspace.


        :param gdpr_compliant: The gdpr_compliant of this Workspace.
        :type gdpr_compliant: bool
        """

        self._gdpr_compliant = gdpr_compliant

    @property
    def hipaa_compliant(self) -> bool:
        """Gets the hipaa_compliant of this Workspace.


        :return: The hipaa_compliant of this Workspace.
        :rtype: bool
        """
        return self._hipaa_compliant

    @hipaa_compliant.setter
    def hipaa_compliant(self, hipaa_compliant: bool):
        """Sets the hipaa_compliant of this Workspace.


        :param hipaa_compliant: The hipaa_compliant of this Workspace.
        :type hipaa_compliant: bool
        """

        self._hipaa_compliant = hipaa_compliant

    @property
    def soc2_compliant(self) -> bool:
        """Gets the soc2_compliant of this Workspace.


        :return: The soc2_compliant of this Workspace.
        :rtype: bool
        """
        return self._soc2_compliant

    @soc2_compliant.setter
    def soc2_compliant(self, soc2_compliant: bool):
        """Sets the soc2_compliant of this Workspace.


        :param soc2_compliant: The soc2_compliant of this Workspace.
        :type soc2_compliant: bool
        """

        self._soc2_compliant = soc2_compliant

    @property
    def storage_quota(self) -> str:
        """Gets the storage_quota of this Workspace.

        in bytes  # noqa: E501

        :return: The storage_quota of this Workspace.
        :rtype: str
        """
        return self._storage_quota

    @storage_quota.setter
    def storage_quota(self, storage_quota: str):
        """Sets the storage_quota of this Workspace.

        in bytes  # noqa: E501

        :param storage_quota: The storage_quota of this Workspace.
        :type storage_quota: str
        """

        self._storage_quota = storage_quota

    @property
    def used_storage(self) -> str:
        """Gets the used_storage of this Workspace.


        :return: The used_storage of this Workspace.
        :rtype: str
        """
        return self._used_storage

    @used_storage.setter
    def used_storage(self, used_storage: str):
        """Sets the used_storage of this Workspace.


        :param used_storage: The used_storage of this Workspace.
        :type used_storage: str
        """

        self._used_storage = used_storage

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Workspace.


        :return: The created_at of this Workspace.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Workspace.


        :param created_at: The created_at of this Workspace.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Workspace.


        :return: The updated_at of this Workspace.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Workspace.


        :param updated_at: The updated_at of this Workspace.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self) -> datetime:
        """Gets the deleted_at of this Workspace.


        :return: The deleted_at of this Workspace.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: datetime):
        """Sets the deleted_at of this Workspace.


        :param deleted_at: The deleted_at of this Workspace.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def workflows(self) -> List[ScrapingWorkflow]:
        """Gets the workflows of this Workspace.


        :return: The workflows of this Workspace.
        :rtype: List[ScrapingWorkflow]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows: List[ScrapingWorkflow]):
        """Sets the workflows of this Workspace.


        :param workflows: The workflows of this Workspace.
        :type workflows: List[ScrapingWorkflow]
        """

        self._workflows = workflows

    @property
    def jobs_run_this_month(self) -> int:
        """Gets the jobs_run_this_month of this Workspace.


        :return: The jobs_run_this_month of this Workspace.
        :rtype: int
        """
        return self._jobs_run_this_month

    @jobs_run_this_month.setter
    def jobs_run_this_month(self, jobs_run_this_month: int):
        """Sets the jobs_run_this_month of this Workspace.


        :param jobs_run_this_month: The jobs_run_this_month of this Workspace.
        :type jobs_run_this_month: int
        """

        self._jobs_run_this_month = jobs_run_this_month

    @property
    def workspace_job_limit(self) -> int:
        """Gets the workspace_job_limit of this Workspace.


        :return: The workspace_job_limit of this Workspace.
        :rtype: int
        """
        return self._workspace_job_limit

    @workspace_job_limit.setter
    def workspace_job_limit(self, workspace_job_limit: int):
        """Sets the workspace_job_limit of this Workspace.


        :param workspace_job_limit: The workspace_job_limit of this Workspace.
        :type workspace_job_limit: int
        """

        self._workspace_job_limit = workspace_job_limit

    @property
    def daily_job_quota(self) -> int:
        """Gets the daily_job_quota of this Workspace.


        :return: The daily_job_quota of this Workspace.
        :rtype: int
        """
        return self._daily_job_quota

    @daily_job_quota.setter
    def daily_job_quota(self, daily_job_quota: int):
        """Sets the daily_job_quota of this Workspace.


        :param daily_job_quota: The daily_job_quota of this Workspace.
        :type daily_job_quota: int
        """

        self._daily_job_quota = daily_job_quota

    @property
    def active_scrapers(self) -> int:
        """Gets the active_scrapers of this Workspace.


        :return: The active_scrapers of this Workspace.
        :rtype: int
        """
        return self._active_scrapers

    @active_scrapers.setter
    def active_scrapers(self, active_scrapers: int):
        """Sets the active_scrapers of this Workspace.


        :param active_scrapers: The active_scrapers of this Workspace.
        :type active_scrapers: int
        """

        self._active_scrapers = active_scrapers

    @property
    def total_leads_collected(self) -> int:
        """Gets the total_leads_collected of this Workspace.


        :return: The total_leads_collected of this Workspace.
        :rtype: int
        """
        return self._total_leads_collected

    @total_leads_collected.setter
    def total_leads_collected(self, total_leads_collected: int):
        """Sets the total_leads_collected of this Workspace.


        :param total_leads_collected: The total_leads_collected of this Workspace.
        :type total_leads_collected: int
        """

        self._total_leads_collected = total_leads_collected

    @property
    def last_job_run(self) -> datetime:
        """Gets the last_job_run of this Workspace.


        :return: The last_job_run of this Workspace.
        :rtype: datetime
        """
        return self._last_job_run

    @last_job_run.setter
    def last_job_run(self, last_job_run: datetime):
        """Sets the last_job_run of this Workspace.


        :param last_job_run: The last_job_run of this Workspace.
        :type last_job_run: datetime
        """

        self._last_job_run = last_job_run

    @property
    def scraping_jobs(self) -> List[ScrapingJob]:
        """Gets the scraping_jobs of this Workspace.


        :return: The scraping_jobs of this Workspace.
        :rtype: List[ScrapingJob]
        """
        return self._scraping_jobs

    @scraping_jobs.setter
    def scraping_jobs(self, scraping_jobs: List[ScrapingJob]):
        """Sets the scraping_jobs of this Workspace.


        :param scraping_jobs: The scraping_jobs of this Workspace.
        :type scraping_jobs: List[ScrapingJob]
        """

        self._scraping_jobs = scraping_jobs

    @property
    def api_keys(self) -> List[APIKey]:
        """Gets the api_keys of this Workspace.


        :return: The api_keys of this Workspace.
        :rtype: List[APIKey]
        """
        return self._api_keys

    @api_keys.setter
    def api_keys(self, api_keys: List[APIKey]):
        """Sets the api_keys of this Workspace.


        :param api_keys: The api_keys of this Workspace.
        :type api_keys: List[APIKey]
        """

        self._api_keys = api_keys

    @property
    def webhooks(self) -> List[WebhookConfig]:
        """Gets the webhooks of this Workspace.


        :return: The webhooks of this Workspace.
        :rtype: List[WebhookConfig]
        """
        return self._webhooks

    @webhooks.setter
    def webhooks(self, webhooks: List[WebhookConfig]):
        """Sets the webhooks of this Workspace.


        :param webhooks: The webhooks of this Workspace.
        :type webhooks: List[WebhookConfig]
        """

        self._webhooks = webhooks
