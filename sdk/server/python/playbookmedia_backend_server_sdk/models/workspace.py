from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.api_key import APIKey
from playbookmedia_backend_server_sdk.models.scraping_job import ScrapingJob
from playbookmedia_backend_server_sdk.models.scraping_workflow import ScrapingWorkflow
from playbookmedia_backend_server_sdk.models.webhook_config import WebhookConfig
from playbookmedia_backend_server_sdk.models.workspace_type import WorkspaceType
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.api_key import APIKey  # noqa: E501
from playbookmedia_backend_server_sdk.models.scraping_job import ScrapingJob  # noqa: E501
from playbookmedia_backend_server_sdk.models.scraping_workflow import ScrapingWorkflow  # noqa: E501
from playbookmedia_backend_server_sdk.models.webhook_config import WebhookConfig  # noqa: E501
from playbookmedia_backend_server_sdk.models.workspace_type import WorkspaceType  # noqa: E501

class Workspace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, industry=None, domain=None, gdpr_compliant=None, hipaa_compliant=None, soc2_compliant=None, storage_quota=None, used_storage=None, created_at=None, updated_at=None, deleted_at=None, workflows=None, jobs_run_this_month=None, workspace_job_limit=None, daily_job_quota=None, active_scrapers=None, total_leads_collected=None, last_job_run=None, scraping_jobs=None, api_keys=None, webhooks=None, workspace_type=WorkspaceType.UNSPECIFIED, description=None, metadata=None, tags=None, max_team_members=None, current_team_members=None, allow_guest_access=None, allowed_email_domains=None, proxy_urls=None, proxy_type=None, rotate_proxies=None, proxy_rotation_interval=None, proxy_provider=None, proxy_auth=None, max_concurrent_scrapes=None, requests_per_second=None, max_retries=None, retry_interval=None, export_formats=None, export_schedule=None, export_destinations=None, export_destination_config=None, compress_exports=None, compression_format=None, salesforce_enabled=None, salesforce_config=None, hubspot_enabled=None, hubspot_config=None, zapier_enabled=None, zapier_webhook=None, active_integrations=None, integration_settings=None, monthly_budget=None, cost_per_lead=None, alert_on_budget_threshold=None, budget_alert_threshold=None, billing_currency=None):  # noqa: E501
        """Workspace - a model defined in OpenAPI

        :param id: The id of this Workspace.  # noqa: E501
        :type id: str
        :param name: The name of this Workspace.  # noqa: E501
        :type name: str
        :param industry: The industry of this Workspace.  # noqa: E501
        :type industry: str
        :param domain: The domain of this Workspace.  # noqa: E501
        :type domain: str
        :param gdpr_compliant: The gdpr_compliant of this Workspace.  # noqa: E501
        :type gdpr_compliant: bool
        :param hipaa_compliant: The hipaa_compliant of this Workspace.  # noqa: E501
        :type hipaa_compliant: bool
        :param soc2_compliant: The soc2_compliant of this Workspace.  # noqa: E501
        :type soc2_compliant: bool
        :param storage_quota: The storage_quota of this Workspace.  # noqa: E501
        :type storage_quota: str
        :param used_storage: The used_storage of this Workspace.  # noqa: E501
        :type used_storage: str
        :param created_at: The created_at of this Workspace.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this Workspace.  # noqa: E501
        :type updated_at: datetime
        :param deleted_at: The deleted_at of this Workspace.  # noqa: E501
        :type deleted_at: datetime
        :param workflows: The workflows of this Workspace.  # noqa: E501
        :type workflows: List[ScrapingWorkflow]
        :param jobs_run_this_month: The jobs_run_this_month of this Workspace.  # noqa: E501
        :type jobs_run_this_month: int
        :param workspace_job_limit: The workspace_job_limit of this Workspace.  # noqa: E501
        :type workspace_job_limit: int
        :param daily_job_quota: The daily_job_quota of this Workspace.  # noqa: E501
        :type daily_job_quota: int
        :param active_scrapers: The active_scrapers of this Workspace.  # noqa: E501
        :type active_scrapers: int
        :param total_leads_collected: The total_leads_collected of this Workspace.  # noqa: E501
        :type total_leads_collected: int
        :param last_job_run: The last_job_run of this Workspace.  # noqa: E501
        :type last_job_run: datetime
        :param scraping_jobs: The scraping_jobs of this Workspace.  # noqa: E501
        :type scraping_jobs: List[ScrapingJob]
        :param api_keys: The api_keys of this Workspace.  # noqa: E501
        :type api_keys: List[APIKey]
        :param webhooks: The webhooks of this Workspace.  # noqa: E501
        :type webhooks: List[WebhookConfig]
        :param workspace_type: The workspace_type of this Workspace.  # noqa: E501
        :type workspace_type: WorkspaceType
        :param description: The description of this Workspace.  # noqa: E501
        :type description: str
        :param metadata: The metadata of this Workspace.  # noqa: E501
        :type metadata: Dict[str, str]
        :param tags: The tags of this Workspace.  # noqa: E501
        :type tags: List[str]
        :param max_team_members: The max_team_members of this Workspace.  # noqa: E501
        :type max_team_members: int
        :param current_team_members: The current_team_members of this Workspace.  # noqa: E501
        :type current_team_members: int
        :param allow_guest_access: The allow_guest_access of this Workspace.  # noqa: E501
        :type allow_guest_access: bool
        :param allowed_email_domains: The allowed_email_domains of this Workspace.  # noqa: E501
        :type allowed_email_domains: List[str]
        :param proxy_urls: The proxy_urls of this Workspace.  # noqa: E501
        :type proxy_urls: List[str]
        :param proxy_type: The proxy_type of this Workspace.  # noqa: E501
        :type proxy_type: str
        :param rotate_proxies: The rotate_proxies of this Workspace.  # noqa: E501
        :type rotate_proxies: bool
        :param proxy_rotation_interval: The proxy_rotation_interval of this Workspace.  # noqa: E501
        :type proxy_rotation_interval: int
        :param proxy_provider: The proxy_provider of this Workspace.  # noqa: E501
        :type proxy_provider: str
        :param proxy_auth: The proxy_auth of this Workspace.  # noqa: E501
        :type proxy_auth: Dict[str, str]
        :param max_concurrent_scrapes: The max_concurrent_scrapes of this Workspace.  # noqa: E501
        :type max_concurrent_scrapes: int
        :param requests_per_second: The requests_per_second of this Workspace.  # noqa: E501
        :type requests_per_second: int
        :param max_retries: The max_retries of this Workspace.  # noqa: E501
        :type max_retries: int
        :param retry_interval: The retry_interval of this Workspace.  # noqa: E501
        :type retry_interval: str
        :param export_formats: The export_formats of this Workspace.  # noqa: E501
        :type export_formats: List[str]
        :param export_schedule: The export_schedule of this Workspace.  # noqa: E501
        :type export_schedule: str
        :param export_destinations: The export_destinations of this Workspace.  # noqa: E501
        :type export_destinations: List[str]
        :param export_destination_config: The export_destination_config of this Workspace.  # noqa: E501
        :type export_destination_config: Dict[str, str]
        :param compress_exports: The compress_exports of this Workspace.  # noqa: E501
        :type compress_exports: bool
        :param compression_format: The compression_format of this Workspace.  # noqa: E501
        :type compression_format: str
        :param salesforce_enabled: The salesforce_enabled of this Workspace.  # noqa: E501
        :type salesforce_enabled: bool
        :param salesforce_config: The salesforce_config of this Workspace.  # noqa: E501
        :type salesforce_config: str
        :param hubspot_enabled: The hubspot_enabled of this Workspace.  # noqa: E501
        :type hubspot_enabled: bool
        :param hubspot_config: The hubspot_config of this Workspace.  # noqa: E501
        :type hubspot_config: str
        :param zapier_enabled: The zapier_enabled of this Workspace.  # noqa: E501
        :type zapier_enabled: bool
        :param zapier_webhook: The zapier_webhook of this Workspace.  # noqa: E501
        :type zapier_webhook: str
        :param active_integrations: The active_integrations of this Workspace.  # noqa: E501
        :type active_integrations: List[str]
        :param integration_settings: The integration_settings of this Workspace.  # noqa: E501
        :type integration_settings: Dict[str, str]
        :param monthly_budget: The monthly_budget of this Workspace.  # noqa: E501
        :type monthly_budget: float
        :param cost_per_lead: The cost_per_lead of this Workspace.  # noqa: E501
        :type cost_per_lead: float
        :param alert_on_budget_threshold: The alert_on_budget_threshold of this Workspace.  # noqa: E501
        :type alert_on_budget_threshold: bool
        :param budget_alert_threshold: The budget_alert_threshold of this Workspace.  # noqa: E501
        :type budget_alert_threshold: float
        :param billing_currency: The billing_currency of this Workspace.  # noqa: E501
        :type billing_currency: str
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'industry': str,
            'domain': str,
            'gdpr_compliant': bool,
            'hipaa_compliant': bool,
            'soc2_compliant': bool,
            'storage_quota': str,
            'used_storage': str,
            'created_at': datetime,
            'updated_at': datetime,
            'deleted_at': datetime,
            'workflows': List[ScrapingWorkflow],
            'jobs_run_this_month': int,
            'workspace_job_limit': int,
            'daily_job_quota': int,
            'active_scrapers': int,
            'total_leads_collected': int,
            'last_job_run': datetime,
            'scraping_jobs': List[ScrapingJob],
            'api_keys': List[APIKey],
            'webhooks': List[WebhookConfig],
            'workspace_type': WorkspaceType,
            'description': str,
            'metadata': Dict[str, str],
            'tags': List[str],
            'max_team_members': int,
            'current_team_members': int,
            'allow_guest_access': bool,
            'allowed_email_domains': List[str],
            'proxy_urls': List[str],
            'proxy_type': str,
            'rotate_proxies': bool,
            'proxy_rotation_interval': int,
            'proxy_provider': str,
            'proxy_auth': Dict[str, str],
            'max_concurrent_scrapes': int,
            'requests_per_second': int,
            'max_retries': int,
            'retry_interval': str,
            'export_formats': List[str],
            'export_schedule': str,
            'export_destinations': List[str],
            'export_destination_config': Dict[str, str],
            'compress_exports': bool,
            'compression_format': str,
            'salesforce_enabled': bool,
            'salesforce_config': str,
            'hubspot_enabled': bool,
            'hubspot_config': str,
            'zapier_enabled': bool,
            'zapier_webhook': str,
            'active_integrations': List[str],
            'integration_settings': Dict[str, str],
            'monthly_budget': float,
            'cost_per_lead': float,
            'alert_on_budget_threshold': bool,
            'budget_alert_threshold': float,
            'billing_currency': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'industry': 'industry',
            'domain': 'domain',
            'gdpr_compliant': 'gdprCompliant',
            'hipaa_compliant': 'hipaaCompliant',
            'soc2_compliant': 'soc2Compliant',
            'storage_quota': 'storageQuota',
            'used_storage': 'usedStorage',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'deleted_at': 'deletedAt',
            'workflows': 'workflows',
            'jobs_run_this_month': 'jobsRunThisMonth',
            'workspace_job_limit': 'workspaceJobLimit',
            'daily_job_quota': 'dailyJobQuota',
            'active_scrapers': 'activeScrapers',
            'total_leads_collected': 'totalLeadsCollected',
            'last_job_run': 'lastJobRun',
            'scraping_jobs': 'scrapingJobs',
            'api_keys': 'apiKeys',
            'webhooks': 'webhooks',
            'workspace_type': 'workspaceType',
            'description': 'description',
            'metadata': 'metadata',
            'tags': 'tags',
            'max_team_members': 'maxTeamMembers',
            'current_team_members': 'currentTeamMembers',
            'allow_guest_access': 'allowGuestAccess',
            'allowed_email_domains': 'allowedEmailDomains',
            'proxy_urls': 'proxyUrls',
            'proxy_type': 'proxyType',
            'rotate_proxies': 'rotateProxies',
            'proxy_rotation_interval': 'proxyRotationInterval',
            'proxy_provider': 'proxyProvider',
            'proxy_auth': 'proxyAuth',
            'max_concurrent_scrapes': 'maxConcurrentScrapes',
            'requests_per_second': 'requestsPerSecond',
            'max_retries': 'maxRetries',
            'retry_interval': 'retryInterval',
            'export_formats': 'exportFormats',
            'export_schedule': 'exportSchedule',
            'export_destinations': 'exportDestinations',
            'export_destination_config': 'exportDestinationConfig',
            'compress_exports': 'compressExports',
            'compression_format': 'compressionFormat',
            'salesforce_enabled': 'salesforceEnabled',
            'salesforce_config': 'salesforceConfig',
            'hubspot_enabled': 'hubspotEnabled',
            'hubspot_config': 'hubspotConfig',
            'zapier_enabled': 'zapierEnabled',
            'zapier_webhook': 'zapierWebhook',
            'active_integrations': 'activeIntegrations',
            'integration_settings': 'integrationSettings',
            'monthly_budget': 'monthlyBudget',
            'cost_per_lead': 'costPerLead',
            'alert_on_budget_threshold': 'alertOnBudgetThreshold',
            'budget_alert_threshold': 'budgetAlertThreshold',
            'billing_currency': 'billingCurrency'
        }

        self._id = id
        self._name = name
        self._industry = industry
        self._domain = domain
        self._gdpr_compliant = gdpr_compliant
        self._hipaa_compliant = hipaa_compliant
        self._soc2_compliant = soc2_compliant
        self._storage_quota = storage_quota
        self._used_storage = used_storage
        self._created_at = created_at
        self._updated_at = updated_at
        self._deleted_at = deleted_at
        self._workflows = workflows
        self._jobs_run_this_month = jobs_run_this_month
        self._workspace_job_limit = workspace_job_limit
        self._daily_job_quota = daily_job_quota
        self._active_scrapers = active_scrapers
        self._total_leads_collected = total_leads_collected
        self._last_job_run = last_job_run
        self._scraping_jobs = scraping_jobs
        self._api_keys = api_keys
        self._webhooks = webhooks
        self._workspace_type = workspace_type
        self._description = description
        self._metadata = metadata
        self._tags = tags
        self._max_team_members = max_team_members
        self._current_team_members = current_team_members
        self._allow_guest_access = allow_guest_access
        self._allowed_email_domains = allowed_email_domains
        self._proxy_urls = proxy_urls
        self._proxy_type = proxy_type
        self._rotate_proxies = rotate_proxies
        self._proxy_rotation_interval = proxy_rotation_interval
        self._proxy_provider = proxy_provider
        self._proxy_auth = proxy_auth
        self._max_concurrent_scrapes = max_concurrent_scrapes
        self._requests_per_second = requests_per_second
        self._max_retries = max_retries
        self._retry_interval = retry_interval
        self._export_formats = export_formats
        self._export_schedule = export_schedule
        self._export_destinations = export_destinations
        self._export_destination_config = export_destination_config
        self._compress_exports = compress_exports
        self._compression_format = compression_format
        self._salesforce_enabled = salesforce_enabled
        self._salesforce_config = salesforce_config
        self._hubspot_enabled = hubspot_enabled
        self._hubspot_config = hubspot_config
        self._zapier_enabled = zapier_enabled
        self._zapier_webhook = zapier_webhook
        self._active_integrations = active_integrations
        self._integration_settings = integration_settings
        self._monthly_budget = monthly_budget
        self._cost_per_lead = cost_per_lead
        self._alert_on_budget_threshold = alert_on_budget_threshold
        self._budget_alert_threshold = budget_alert_threshold
        self._billing_currency = billing_currency

    @classmethod
    def from_dict(cls, dikt) -> 'Workspace':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Workspace of this Workspace.  # noqa: E501
        :rtype: Workspace
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Workspace.


        :return: The id of this Workspace.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Workspace.


        :param id: The id of this Workspace.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Workspace.


        :return: The name of this Workspace.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Workspace.


        :param name: The name of this Workspace.
        :type name: str
        """

        self._name = name

    @property
    def industry(self) -> str:
        """Gets the industry of this Workspace.


        :return: The industry of this Workspace.
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry: str):
        """Sets the industry of this Workspace.


        :param industry: The industry of this Workspace.
        :type industry: str
        """

        self._industry = industry

    @property
    def domain(self) -> str:
        """Gets the domain of this Workspace.


        :return: The domain of this Workspace.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: str):
        """Sets the domain of this Workspace.


        :param domain: The domain of this Workspace.
        :type domain: str
        """

        self._domain = domain

    @property
    def gdpr_compliant(self) -> bool:
        """Gets the gdpr_compliant of this Workspace.


        :return: The gdpr_compliant of this Workspace.
        :rtype: bool
        """
        return self._gdpr_compliant

    @gdpr_compliant.setter
    def gdpr_compliant(self, gdpr_compliant: bool):
        """Sets the gdpr_compliant of this Workspace.


        :param gdpr_compliant: The gdpr_compliant of this Workspace.
        :type gdpr_compliant: bool
        """

        self._gdpr_compliant = gdpr_compliant

    @property
    def hipaa_compliant(self) -> bool:
        """Gets the hipaa_compliant of this Workspace.


        :return: The hipaa_compliant of this Workspace.
        :rtype: bool
        """
        return self._hipaa_compliant

    @hipaa_compliant.setter
    def hipaa_compliant(self, hipaa_compliant: bool):
        """Sets the hipaa_compliant of this Workspace.


        :param hipaa_compliant: The hipaa_compliant of this Workspace.
        :type hipaa_compliant: bool
        """

        self._hipaa_compliant = hipaa_compliant

    @property
    def soc2_compliant(self) -> bool:
        """Gets the soc2_compliant of this Workspace.


        :return: The soc2_compliant of this Workspace.
        :rtype: bool
        """
        return self._soc2_compliant

    @soc2_compliant.setter
    def soc2_compliant(self, soc2_compliant: bool):
        """Sets the soc2_compliant of this Workspace.


        :param soc2_compliant: The soc2_compliant of this Workspace.
        :type soc2_compliant: bool
        """

        self._soc2_compliant = soc2_compliant

    @property
    def storage_quota(self) -> str:
        """Gets the storage_quota of this Workspace.

        in bytes  # noqa: E501

        :return: The storage_quota of this Workspace.
        :rtype: str
        """
        return self._storage_quota

    @storage_quota.setter
    def storage_quota(self, storage_quota: str):
        """Sets the storage_quota of this Workspace.

        in bytes  # noqa: E501

        :param storage_quota: The storage_quota of this Workspace.
        :type storage_quota: str
        """

        self._storage_quota = storage_quota

    @property
    def used_storage(self) -> str:
        """Gets the used_storage of this Workspace.


        :return: The used_storage of this Workspace.
        :rtype: str
        """
        return self._used_storage

    @used_storage.setter
    def used_storage(self, used_storage: str):
        """Sets the used_storage of this Workspace.


        :param used_storage: The used_storage of this Workspace.
        :type used_storage: str
        """

        self._used_storage = used_storage

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Workspace.


        :return: The created_at of this Workspace.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Workspace.


        :param created_at: The created_at of this Workspace.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Workspace.


        :return: The updated_at of this Workspace.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Workspace.


        :param updated_at: The updated_at of this Workspace.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self) -> datetime:
        """Gets the deleted_at of this Workspace.


        :return: The deleted_at of this Workspace.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: datetime):
        """Sets the deleted_at of this Workspace.


        :param deleted_at: The deleted_at of this Workspace.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def workflows(self) -> List[ScrapingWorkflow]:
        """Gets the workflows of this Workspace.


        :return: The workflows of this Workspace.
        :rtype: List[ScrapingWorkflow]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows: List[ScrapingWorkflow]):
        """Sets the workflows of this Workspace.


        :param workflows: The workflows of this Workspace.
        :type workflows: List[ScrapingWorkflow]
        """

        self._workflows = workflows

    @property
    def jobs_run_this_month(self) -> int:
        """Gets the jobs_run_this_month of this Workspace.


        :return: The jobs_run_this_month of this Workspace.
        :rtype: int
        """
        return self._jobs_run_this_month

    @jobs_run_this_month.setter
    def jobs_run_this_month(self, jobs_run_this_month: int):
        """Sets the jobs_run_this_month of this Workspace.


        :param jobs_run_this_month: The jobs_run_this_month of this Workspace.
        :type jobs_run_this_month: int
        """

        self._jobs_run_this_month = jobs_run_this_month

    @property
    def workspace_job_limit(self) -> int:
        """Gets the workspace_job_limit of this Workspace.


        :return: The workspace_job_limit of this Workspace.
        :rtype: int
        """
        return self._workspace_job_limit

    @workspace_job_limit.setter
    def workspace_job_limit(self, workspace_job_limit: int):
        """Sets the workspace_job_limit of this Workspace.


        :param workspace_job_limit: The workspace_job_limit of this Workspace.
        :type workspace_job_limit: int
        """

        self._workspace_job_limit = workspace_job_limit

    @property
    def daily_job_quota(self) -> int:
        """Gets the daily_job_quota of this Workspace.


        :return: The daily_job_quota of this Workspace.
        :rtype: int
        """
        return self._daily_job_quota

    @daily_job_quota.setter
    def daily_job_quota(self, daily_job_quota: int):
        """Sets the daily_job_quota of this Workspace.


        :param daily_job_quota: The daily_job_quota of this Workspace.
        :type daily_job_quota: int
        """

        self._daily_job_quota = daily_job_quota

    @property
    def active_scrapers(self) -> int:
        """Gets the active_scrapers of this Workspace.


        :return: The active_scrapers of this Workspace.
        :rtype: int
        """
        return self._active_scrapers

    @active_scrapers.setter
    def active_scrapers(self, active_scrapers: int):
        """Sets the active_scrapers of this Workspace.


        :param active_scrapers: The active_scrapers of this Workspace.
        :type active_scrapers: int
        """

        self._active_scrapers = active_scrapers

    @property
    def total_leads_collected(self) -> int:
        """Gets the total_leads_collected of this Workspace.


        :return: The total_leads_collected of this Workspace.
        :rtype: int
        """
        return self._total_leads_collected

    @total_leads_collected.setter
    def total_leads_collected(self, total_leads_collected: int):
        """Sets the total_leads_collected of this Workspace.


        :param total_leads_collected: The total_leads_collected of this Workspace.
        :type total_leads_collected: int
        """

        self._total_leads_collected = total_leads_collected

    @property
    def last_job_run(self) -> datetime:
        """Gets the last_job_run of this Workspace.


        :return: The last_job_run of this Workspace.
        :rtype: datetime
        """
        return self._last_job_run

    @last_job_run.setter
    def last_job_run(self, last_job_run: datetime):
        """Sets the last_job_run of this Workspace.


        :param last_job_run: The last_job_run of this Workspace.
        :type last_job_run: datetime
        """

        self._last_job_run = last_job_run

    @property
    def scraping_jobs(self) -> List[ScrapingJob]:
        """Gets the scraping_jobs of this Workspace.


        :return: The scraping_jobs of this Workspace.
        :rtype: List[ScrapingJob]
        """
        return self._scraping_jobs

    @scraping_jobs.setter
    def scraping_jobs(self, scraping_jobs: List[ScrapingJob]):
        """Sets the scraping_jobs of this Workspace.


        :param scraping_jobs: The scraping_jobs of this Workspace.
        :type scraping_jobs: List[ScrapingJob]
        """

        self._scraping_jobs = scraping_jobs

    @property
    def api_keys(self) -> List[APIKey]:
        """Gets the api_keys of this Workspace.


        :return: The api_keys of this Workspace.
        :rtype: List[APIKey]
        """
        return self._api_keys

    @api_keys.setter
    def api_keys(self, api_keys: List[APIKey]):
        """Sets the api_keys of this Workspace.


        :param api_keys: The api_keys of this Workspace.
        :type api_keys: List[APIKey]
        """

        self._api_keys = api_keys

    @property
    def webhooks(self) -> List[WebhookConfig]:
        """Gets the webhooks of this Workspace.


        :return: The webhooks of this Workspace.
        :rtype: List[WebhookConfig]
        """
        return self._webhooks

    @webhooks.setter
    def webhooks(self, webhooks: List[WebhookConfig]):
        """Sets the webhooks of this Workspace.


        :param webhooks: The webhooks of this Workspace.
        :type webhooks: List[WebhookConfig]
        """

        self._webhooks = webhooks

    @property
    def workspace_type(self) -> WorkspaceType:
        """Gets the workspace_type of this Workspace.


        :return: The workspace_type of this Workspace.
        :rtype: WorkspaceType
        """
        return self._workspace_type

    @workspace_type.setter
    def workspace_type(self, workspace_type: WorkspaceType):
        """Sets the workspace_type of this Workspace.


        :param workspace_type: The workspace_type of this Workspace.
        :type workspace_type: WorkspaceType
        """

        self._workspace_type = workspace_type

    @property
    def description(self) -> str:
        """Gets the description of this Workspace.


        :return: The description of this Workspace.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Workspace.


        :param description: The description of this Workspace.
        :type description: str
        """

        self._description = description

    @property
    def metadata(self) -> Dict[str, str]:
        """Gets the metadata of this Workspace.


        :return: The metadata of this Workspace.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Dict[str, str]):
        """Sets the metadata of this Workspace.


        :param metadata: The metadata of this Workspace.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this Workspace.


        :return: The tags of this Workspace.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this Workspace.


        :param tags: The tags of this Workspace.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def max_team_members(self) -> int:
        """Gets the max_team_members of this Workspace.


        :return: The max_team_members of this Workspace.
        :rtype: int
        """
        return self._max_team_members

    @max_team_members.setter
    def max_team_members(self, max_team_members: int):
        """Sets the max_team_members of this Workspace.


        :param max_team_members: The max_team_members of this Workspace.
        :type max_team_members: int
        """

        self._max_team_members = max_team_members

    @property
    def current_team_members(self) -> int:
        """Gets the current_team_members of this Workspace.


        :return: The current_team_members of this Workspace.
        :rtype: int
        """
        return self._current_team_members

    @current_team_members.setter
    def current_team_members(self, current_team_members: int):
        """Sets the current_team_members of this Workspace.


        :param current_team_members: The current_team_members of this Workspace.
        :type current_team_members: int
        """

        self._current_team_members = current_team_members

    @property
    def allow_guest_access(self) -> bool:
        """Gets the allow_guest_access of this Workspace.


        :return: The allow_guest_access of this Workspace.
        :rtype: bool
        """
        return self._allow_guest_access

    @allow_guest_access.setter
    def allow_guest_access(self, allow_guest_access: bool):
        """Sets the allow_guest_access of this Workspace.


        :param allow_guest_access: The allow_guest_access of this Workspace.
        :type allow_guest_access: bool
        """

        self._allow_guest_access = allow_guest_access

    @property
    def allowed_email_domains(self) -> List[str]:
        """Gets the allowed_email_domains of this Workspace.


        :return: The allowed_email_domains of this Workspace.
        :rtype: List[str]
        """
        return self._allowed_email_domains

    @allowed_email_domains.setter
    def allowed_email_domains(self, allowed_email_domains: List[str]):
        """Sets the allowed_email_domains of this Workspace.


        :param allowed_email_domains: The allowed_email_domains of this Workspace.
        :type allowed_email_domains: List[str]
        """

        self._allowed_email_domains = allowed_email_domains

    @property
    def proxy_urls(self) -> List[str]:
        """Gets the proxy_urls of this Workspace.


        :return: The proxy_urls of this Workspace.
        :rtype: List[str]
        """
        return self._proxy_urls

    @proxy_urls.setter
    def proxy_urls(self, proxy_urls: List[str]):
        """Sets the proxy_urls of this Workspace.


        :param proxy_urls: The proxy_urls of this Workspace.
        :type proxy_urls: List[str]
        """

        self._proxy_urls = proxy_urls

    @property
    def proxy_type(self) -> str:
        """Gets the proxy_type of this Workspace.


        :return: The proxy_type of this Workspace.
        :rtype: str
        """
        return self._proxy_type

    @proxy_type.setter
    def proxy_type(self, proxy_type: str):
        """Sets the proxy_type of this Workspace.


        :param proxy_type: The proxy_type of this Workspace.
        :type proxy_type: str
        """

        self._proxy_type = proxy_type

    @property
    def rotate_proxies(self) -> bool:
        """Gets the rotate_proxies of this Workspace.


        :return: The rotate_proxies of this Workspace.
        :rtype: bool
        """
        return self._rotate_proxies

    @rotate_proxies.setter
    def rotate_proxies(self, rotate_proxies: bool):
        """Sets the rotate_proxies of this Workspace.


        :param rotate_proxies: The rotate_proxies of this Workspace.
        :type rotate_proxies: bool
        """

        self._rotate_proxies = rotate_proxies

    @property
    def proxy_rotation_interval(self) -> int:
        """Gets the proxy_rotation_interval of this Workspace.


        :return: The proxy_rotation_interval of this Workspace.
        :rtype: int
        """
        return self._proxy_rotation_interval

    @proxy_rotation_interval.setter
    def proxy_rotation_interval(self, proxy_rotation_interval: int):
        """Sets the proxy_rotation_interval of this Workspace.


        :param proxy_rotation_interval: The proxy_rotation_interval of this Workspace.
        :type proxy_rotation_interval: int
        """

        self._proxy_rotation_interval = proxy_rotation_interval

    @property
    def proxy_provider(self) -> str:
        """Gets the proxy_provider of this Workspace.


        :return: The proxy_provider of this Workspace.
        :rtype: str
        """
        return self._proxy_provider

    @proxy_provider.setter
    def proxy_provider(self, proxy_provider: str):
        """Sets the proxy_provider of this Workspace.


        :param proxy_provider: The proxy_provider of this Workspace.
        :type proxy_provider: str
        """

        self._proxy_provider = proxy_provider

    @property
    def proxy_auth(self) -> Dict[str, str]:
        """Gets the proxy_auth of this Workspace.


        :return: The proxy_auth of this Workspace.
        :rtype: Dict[str, str]
        """
        return self._proxy_auth

    @proxy_auth.setter
    def proxy_auth(self, proxy_auth: Dict[str, str]):
        """Sets the proxy_auth of this Workspace.


        :param proxy_auth: The proxy_auth of this Workspace.
        :type proxy_auth: Dict[str, str]
        """

        self._proxy_auth = proxy_auth

    @property
    def max_concurrent_scrapes(self) -> int:
        """Gets the max_concurrent_scrapes of this Workspace.


        :return: The max_concurrent_scrapes of this Workspace.
        :rtype: int
        """
        return self._max_concurrent_scrapes

    @max_concurrent_scrapes.setter
    def max_concurrent_scrapes(self, max_concurrent_scrapes: int):
        """Sets the max_concurrent_scrapes of this Workspace.


        :param max_concurrent_scrapes: The max_concurrent_scrapes of this Workspace.
        :type max_concurrent_scrapes: int
        """

        self._max_concurrent_scrapes = max_concurrent_scrapes

    @property
    def requests_per_second(self) -> int:
        """Gets the requests_per_second of this Workspace.


        :return: The requests_per_second of this Workspace.
        :rtype: int
        """
        return self._requests_per_second

    @requests_per_second.setter
    def requests_per_second(self, requests_per_second: int):
        """Sets the requests_per_second of this Workspace.


        :param requests_per_second: The requests_per_second of this Workspace.
        :type requests_per_second: int
        """

        self._requests_per_second = requests_per_second

    @property
    def max_retries(self) -> int:
        """Gets the max_retries of this Workspace.


        :return: The max_retries of this Workspace.
        :rtype: int
        """
        return self._max_retries

    @max_retries.setter
    def max_retries(self, max_retries: int):
        """Sets the max_retries of this Workspace.


        :param max_retries: The max_retries of this Workspace.
        :type max_retries: int
        """

        self._max_retries = max_retries

    @property
    def retry_interval(self) -> str:
        """Gets the retry_interval of this Workspace.


        :return: The retry_interval of this Workspace.
        :rtype: str
        """
        return self._retry_interval

    @retry_interval.setter
    def retry_interval(self, retry_interval: str):
        """Sets the retry_interval of this Workspace.


        :param retry_interval: The retry_interval of this Workspace.
        :type retry_interval: str
        """

        self._retry_interval = retry_interval

    @property
    def export_formats(self) -> List[str]:
        """Gets the export_formats of this Workspace.

        e.g., \"csv\", \"json\", \"excel\"  # noqa: E501

        :return: The export_formats of this Workspace.
        :rtype: List[str]
        """
        return self._export_formats

    @export_formats.setter
    def export_formats(self, export_formats: List[str]):
        """Sets the export_formats of this Workspace.

        e.g., \"csv\", \"json\", \"excel\"  # noqa: E501

        :param export_formats: The export_formats of this Workspace.
        :type export_formats: List[str]
        """

        self._export_formats = export_formats

    @property
    def export_schedule(self) -> str:
        """Gets the export_schedule of this Workspace.


        :return: The export_schedule of this Workspace.
        :rtype: str
        """
        return self._export_schedule

    @export_schedule.setter
    def export_schedule(self, export_schedule: str):
        """Sets the export_schedule of this Workspace.


        :param export_schedule: The export_schedule of this Workspace.
        :type export_schedule: str
        """

        self._export_schedule = export_schedule

    @property
    def export_destinations(self) -> List[str]:
        """Gets the export_destinations of this Workspace.


        :return: The export_destinations of this Workspace.
        :rtype: List[str]
        """
        return self._export_destinations

    @export_destinations.setter
    def export_destinations(self, export_destinations: List[str]):
        """Sets the export_destinations of this Workspace.


        :param export_destinations: The export_destinations of this Workspace.
        :type export_destinations: List[str]
        """

        self._export_destinations = export_destinations

    @property
    def export_destination_config(self) -> Dict[str, str]:
        """Gets the export_destination_config of this Workspace.


        :return: The export_destination_config of this Workspace.
        :rtype: Dict[str, str]
        """
        return self._export_destination_config

    @export_destination_config.setter
    def export_destination_config(self, export_destination_config: Dict[str, str]):
        """Sets the export_destination_config of this Workspace.


        :param export_destination_config: The export_destination_config of this Workspace.
        :type export_destination_config: Dict[str, str]
        """

        self._export_destination_config = export_destination_config

    @property
    def compress_exports(self) -> bool:
        """Gets the compress_exports of this Workspace.


        :return: The compress_exports of this Workspace.
        :rtype: bool
        """
        return self._compress_exports

    @compress_exports.setter
    def compress_exports(self, compress_exports: bool):
        """Sets the compress_exports of this Workspace.


        :param compress_exports: The compress_exports of this Workspace.
        :type compress_exports: bool
        """

        self._compress_exports = compress_exports

    @property
    def compression_format(self) -> str:
        """Gets the compression_format of this Workspace.


        :return: The compression_format of this Workspace.
        :rtype: str
        """
        return self._compression_format

    @compression_format.setter
    def compression_format(self, compression_format: str):
        """Sets the compression_format of this Workspace.


        :param compression_format: The compression_format of this Workspace.
        :type compression_format: str
        """

        self._compression_format = compression_format

    @property
    def salesforce_enabled(self) -> bool:
        """Gets the salesforce_enabled of this Workspace.


        :return: The salesforce_enabled of this Workspace.
        :rtype: bool
        """
        return self._salesforce_enabled

    @salesforce_enabled.setter
    def salesforce_enabled(self, salesforce_enabled: bool):
        """Sets the salesforce_enabled of this Workspace.


        :param salesforce_enabled: The salesforce_enabled of this Workspace.
        :type salesforce_enabled: bool
        """

        self._salesforce_enabled = salesforce_enabled

    @property
    def salesforce_config(self) -> str:
        """Gets the salesforce_config of this Workspace.


        :return: The salesforce_config of this Workspace.
        :rtype: str
        """
        return self._salesforce_config

    @salesforce_config.setter
    def salesforce_config(self, salesforce_config: str):
        """Sets the salesforce_config of this Workspace.


        :param salesforce_config: The salesforce_config of this Workspace.
        :type salesforce_config: str
        """

        self._salesforce_config = salesforce_config

    @property
    def hubspot_enabled(self) -> bool:
        """Gets the hubspot_enabled of this Workspace.


        :return: The hubspot_enabled of this Workspace.
        :rtype: bool
        """
        return self._hubspot_enabled

    @hubspot_enabled.setter
    def hubspot_enabled(self, hubspot_enabled: bool):
        """Sets the hubspot_enabled of this Workspace.


        :param hubspot_enabled: The hubspot_enabled of this Workspace.
        :type hubspot_enabled: bool
        """

        self._hubspot_enabled = hubspot_enabled

    @property
    def hubspot_config(self) -> str:
        """Gets the hubspot_config of this Workspace.


        :return: The hubspot_config of this Workspace.
        :rtype: str
        """
        return self._hubspot_config

    @hubspot_config.setter
    def hubspot_config(self, hubspot_config: str):
        """Sets the hubspot_config of this Workspace.


        :param hubspot_config: The hubspot_config of this Workspace.
        :type hubspot_config: str
        """

        self._hubspot_config = hubspot_config

    @property
    def zapier_enabled(self) -> bool:
        """Gets the zapier_enabled of this Workspace.


        :return: The zapier_enabled of this Workspace.
        :rtype: bool
        """
        return self._zapier_enabled

    @zapier_enabled.setter
    def zapier_enabled(self, zapier_enabled: bool):
        """Sets the zapier_enabled of this Workspace.


        :param zapier_enabled: The zapier_enabled of this Workspace.
        :type zapier_enabled: bool
        """

        self._zapier_enabled = zapier_enabled

    @property
    def zapier_webhook(self) -> str:
        """Gets the zapier_webhook of this Workspace.


        :return: The zapier_webhook of this Workspace.
        :rtype: str
        """
        return self._zapier_webhook

    @zapier_webhook.setter
    def zapier_webhook(self, zapier_webhook: str):
        """Sets the zapier_webhook of this Workspace.


        :param zapier_webhook: The zapier_webhook of this Workspace.
        :type zapier_webhook: str
        """

        self._zapier_webhook = zapier_webhook

    @property
    def active_integrations(self) -> List[str]:
        """Gets the active_integrations of this Workspace.


        :return: The active_integrations of this Workspace.
        :rtype: List[str]
        """
        return self._active_integrations

    @active_integrations.setter
    def active_integrations(self, active_integrations: List[str]):
        """Sets the active_integrations of this Workspace.


        :param active_integrations: The active_integrations of this Workspace.
        :type active_integrations: List[str]
        """

        self._active_integrations = active_integrations

    @property
    def integration_settings(self) -> Dict[str, str]:
        """Gets the integration_settings of this Workspace.


        :return: The integration_settings of this Workspace.
        :rtype: Dict[str, str]
        """
        return self._integration_settings

    @integration_settings.setter
    def integration_settings(self, integration_settings: Dict[str, str]):
        """Sets the integration_settings of this Workspace.


        :param integration_settings: The integration_settings of this Workspace.
        :type integration_settings: Dict[str, str]
        """

        self._integration_settings = integration_settings

    @property
    def monthly_budget(self) -> float:
        """Gets the monthly_budget of this Workspace.


        :return: The monthly_budget of this Workspace.
        :rtype: float
        """
        return self._monthly_budget

    @monthly_budget.setter
    def monthly_budget(self, monthly_budget: float):
        """Sets the monthly_budget of this Workspace.


        :param monthly_budget: The monthly_budget of this Workspace.
        :type monthly_budget: float
        """

        self._monthly_budget = monthly_budget

    @property
    def cost_per_lead(self) -> float:
        """Gets the cost_per_lead of this Workspace.


        :return: The cost_per_lead of this Workspace.
        :rtype: float
        """
        return self._cost_per_lead

    @cost_per_lead.setter
    def cost_per_lead(self, cost_per_lead: float):
        """Sets the cost_per_lead of this Workspace.


        :param cost_per_lead: The cost_per_lead of this Workspace.
        :type cost_per_lead: float
        """

        self._cost_per_lead = cost_per_lead

    @property
    def alert_on_budget_threshold(self) -> bool:
        """Gets the alert_on_budget_threshold of this Workspace.


        :return: The alert_on_budget_threshold of this Workspace.
        :rtype: bool
        """
        return self._alert_on_budget_threshold

    @alert_on_budget_threshold.setter
    def alert_on_budget_threshold(self, alert_on_budget_threshold: bool):
        """Sets the alert_on_budget_threshold of this Workspace.


        :param alert_on_budget_threshold: The alert_on_budget_threshold of this Workspace.
        :type alert_on_budget_threshold: bool
        """

        self._alert_on_budget_threshold = alert_on_budget_threshold

    @property
    def budget_alert_threshold(self) -> float:
        """Gets the budget_alert_threshold of this Workspace.


        :return: The budget_alert_threshold of this Workspace.
        :rtype: float
        """
        return self._budget_alert_threshold

    @budget_alert_threshold.setter
    def budget_alert_threshold(self, budget_alert_threshold: float):
        """Sets the budget_alert_threshold of this Workspace.


        :param budget_alert_threshold: The budget_alert_threshold of this Workspace.
        :type budget_alert_threshold: float
        """

        self._budget_alert_threshold = budget_alert_threshold

    @property
    def billing_currency(self) -> str:
        """Gets the billing_currency of this Workspace.


        :return: The billing_currency of this Workspace.
        :rtype: str
        """
        return self._billing_currency

    @billing_currency.setter
    def billing_currency(self, billing_currency: str):
        """Sets the billing_currency of this Workspace.


        :param billing_currency: The billing_currency of this Workspace.
        :type billing_currency: str
        """

        self._billing_currency = billing_currency
