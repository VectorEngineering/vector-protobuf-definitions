from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from playbookmedia_backend_server_sdk.models.base_model import Model
from playbookmedia_backend_server_sdk.models.document_template import DocumentTemplate
from playbookmedia_backend_server_sdk.models.folder_metadata import FolderMetadata
from playbookmedia_backend_server_sdk.models.marketplace_app import MarketplaceApp
from playbookmedia_backend_server_sdk.models.workspace_activity import WorkspaceActivity
from playbookmedia_backend_server_sdk.models.workspace_compliance import WorkspaceCompliance
from playbookmedia_backend_server_sdk.models.workspace_sharing import WorkspaceSharing
from playbookmedia_backend_server_sdk import util

from playbookmedia_backend_server_sdk.models.document_template import DocumentTemplate  # noqa: E501
from playbookmedia_backend_server_sdk.models.folder_metadata import FolderMetadata  # noqa: E501
from playbookmedia_backend_server_sdk.models.marketplace_app import MarketplaceApp  # noqa: E501
from playbookmedia_backend_server_sdk.models.workspace_activity import WorkspaceActivity  # noqa: E501
from playbookmedia_backend_server_sdk.models.workspace_compliance import WorkspaceCompliance  # noqa: E501
from playbookmedia_backend_server_sdk.models.workspace_sharing import WorkspaceSharing  # noqa: E501

class Workspace1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, unique_identifier=None, s3_bucket_name=None, s3_folder_path=None, storage_quota=None, used_storage=None, allow_public_sharing=None, require_approval=None, gdpr_compliant=None, hipaa_compliant=None, created_at=None, updated_at=None, deleted_at=None, folders=None, templates=None, sharing=None, activities=None, compliance=None, installed_apps=None):  # noqa: E501
        """Workspace1 - a model defined in OpenAPI

        :param id: The id of this Workspace1.  # noqa: E501
        :type id: str
        :param name: The name of this Workspace1.  # noqa: E501
        :type name: str
        :param unique_identifier: The unique_identifier of this Workspace1.  # noqa: E501
        :type unique_identifier: str
        :param s3_bucket_name: The s3_bucket_name of this Workspace1.  # noqa: E501
        :type s3_bucket_name: str
        :param s3_folder_path: The s3_folder_path of this Workspace1.  # noqa: E501
        :type s3_folder_path: str
        :param storage_quota: The storage_quota of this Workspace1.  # noqa: E501
        :type storage_quota: str
        :param used_storage: The used_storage of this Workspace1.  # noqa: E501
        :type used_storage: str
        :param allow_public_sharing: The allow_public_sharing of this Workspace1.  # noqa: E501
        :type allow_public_sharing: bool
        :param require_approval: The require_approval of this Workspace1.  # noqa: E501
        :type require_approval: bool
        :param gdpr_compliant: The gdpr_compliant of this Workspace1.  # noqa: E501
        :type gdpr_compliant: bool
        :param hipaa_compliant: The hipaa_compliant of this Workspace1.  # noqa: E501
        :type hipaa_compliant: bool
        :param created_at: The created_at of this Workspace1.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this Workspace1.  # noqa: E501
        :type updated_at: datetime
        :param deleted_at: The deleted_at of this Workspace1.  # noqa: E501
        :type deleted_at: datetime
        :param folders: The folders of this Workspace1.  # noqa: E501
        :type folders: List[FolderMetadata]
        :param templates: The templates of this Workspace1.  # noqa: E501
        :type templates: List[DocumentTemplate]
        :param sharing: The sharing of this Workspace1.  # noqa: E501
        :type sharing: List[WorkspaceSharing]
        :param activities: The activities of this Workspace1.  # noqa: E501
        :type activities: List[WorkspaceActivity]
        :param compliance: The compliance of this Workspace1.  # noqa: E501
        :type compliance: List[WorkspaceCompliance]
        :param installed_apps: The installed_apps of this Workspace1.  # noqa: E501
        :type installed_apps: List[MarketplaceApp]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'unique_identifier': str,
            's3_bucket_name': str,
            's3_folder_path': str,
            'storage_quota': str,
            'used_storage': str,
            'allow_public_sharing': bool,
            'require_approval': bool,
            'gdpr_compliant': bool,
            'hipaa_compliant': bool,
            'created_at': datetime,
            'updated_at': datetime,
            'deleted_at': datetime,
            'folders': List[FolderMetadata],
            'templates': List[DocumentTemplate],
            'sharing': List[WorkspaceSharing],
            'activities': List[WorkspaceActivity],
            'compliance': List[WorkspaceCompliance],
            'installed_apps': List[MarketplaceApp]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'unique_identifier': 'uniqueIdentifier',
            's3_bucket_name': 's3BucketName',
            's3_folder_path': 's3FolderPath',
            'storage_quota': 'storageQuota',
            'used_storage': 'usedStorage',
            'allow_public_sharing': 'allowPublicSharing',
            'require_approval': 'requireApproval',
            'gdpr_compliant': 'gdprCompliant',
            'hipaa_compliant': 'hipaaCompliant',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'deleted_at': 'deletedAt',
            'folders': 'folders',
            'templates': 'templates',
            'sharing': 'sharing',
            'activities': 'activities',
            'compliance': 'compliance',
            'installed_apps': 'installedApps'
        }

        self._id = id
        self._name = name
        self._unique_identifier = unique_identifier
        self._s3_bucket_name = s3_bucket_name
        self._s3_folder_path = s3_folder_path
        self._storage_quota = storage_quota
        self._used_storage = used_storage
        self._allow_public_sharing = allow_public_sharing
        self._require_approval = require_approval
        self._gdpr_compliant = gdpr_compliant
        self._hipaa_compliant = hipaa_compliant
        self._created_at = created_at
        self._updated_at = updated_at
        self._deleted_at = deleted_at
        self._folders = folders
        self._templates = templates
        self._sharing = sharing
        self._activities = activities
        self._compliance = compliance
        self._installed_apps = installed_apps

    @classmethod
    def from_dict(cls, dikt) -> 'Workspace1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Workspace1 of this Workspace1.  # noqa: E501
        :rtype: Workspace1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Workspace1.


        :return: The id of this Workspace1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Workspace1.


        :param id: The id of this Workspace1.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Workspace1.


        :return: The name of this Workspace1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Workspace1.


        :param name: The name of this Workspace1.
        :type name: str
        """

        self._name = name

    @property
    def unique_identifier(self) -> str:
        """Gets the unique_identifier of this Workspace1.


        :return: The unique_identifier of this Workspace1.
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier: str):
        """Sets the unique_identifier of this Workspace1.


        :param unique_identifier: The unique_identifier of this Workspace1.
        :type unique_identifier: str
        """

        self._unique_identifier = unique_identifier

    @property
    def s3_bucket_name(self) -> str:
        """Gets the s3_bucket_name of this Workspace1.


        :return: The s3_bucket_name of this Workspace1.
        :rtype: str
        """
        return self._s3_bucket_name

    @s3_bucket_name.setter
    def s3_bucket_name(self, s3_bucket_name: str):
        """Sets the s3_bucket_name of this Workspace1.


        :param s3_bucket_name: The s3_bucket_name of this Workspace1.
        :type s3_bucket_name: str
        """

        self._s3_bucket_name = s3_bucket_name

    @property
    def s3_folder_path(self) -> str:
        """Gets the s3_folder_path of this Workspace1.


        :return: The s3_folder_path of this Workspace1.
        :rtype: str
        """
        return self._s3_folder_path

    @s3_folder_path.setter
    def s3_folder_path(self, s3_folder_path: str):
        """Sets the s3_folder_path of this Workspace1.


        :param s3_folder_path: The s3_folder_path of this Workspace1.
        :type s3_folder_path: str
        """

        self._s3_folder_path = s3_folder_path

    @property
    def storage_quota(self) -> str:
        """Gets the storage_quota of this Workspace1.


        :return: The storage_quota of this Workspace1.
        :rtype: str
        """
        return self._storage_quota

    @storage_quota.setter
    def storage_quota(self, storage_quota: str):
        """Sets the storage_quota of this Workspace1.


        :param storage_quota: The storage_quota of this Workspace1.
        :type storage_quota: str
        """

        self._storage_quota = storage_quota

    @property
    def used_storage(self) -> str:
        """Gets the used_storage of this Workspace1.


        :return: The used_storage of this Workspace1.
        :rtype: str
        """
        return self._used_storage

    @used_storage.setter
    def used_storage(self, used_storage: str):
        """Sets the used_storage of this Workspace1.


        :param used_storage: The used_storage of this Workspace1.
        :type used_storage: str
        """

        self._used_storage = used_storage

    @property
    def allow_public_sharing(self) -> bool:
        """Gets the allow_public_sharing of this Workspace1.


        :return: The allow_public_sharing of this Workspace1.
        :rtype: bool
        """
        return self._allow_public_sharing

    @allow_public_sharing.setter
    def allow_public_sharing(self, allow_public_sharing: bool):
        """Sets the allow_public_sharing of this Workspace1.


        :param allow_public_sharing: The allow_public_sharing of this Workspace1.
        :type allow_public_sharing: bool
        """

        self._allow_public_sharing = allow_public_sharing

    @property
    def require_approval(self) -> bool:
        """Gets the require_approval of this Workspace1.


        :return: The require_approval of this Workspace1.
        :rtype: bool
        """
        return self._require_approval

    @require_approval.setter
    def require_approval(self, require_approval: bool):
        """Sets the require_approval of this Workspace1.


        :param require_approval: The require_approval of this Workspace1.
        :type require_approval: bool
        """

        self._require_approval = require_approval

    @property
    def gdpr_compliant(self) -> bool:
        """Gets the gdpr_compliant of this Workspace1.


        :return: The gdpr_compliant of this Workspace1.
        :rtype: bool
        """
        return self._gdpr_compliant

    @gdpr_compliant.setter
    def gdpr_compliant(self, gdpr_compliant: bool):
        """Sets the gdpr_compliant of this Workspace1.


        :param gdpr_compliant: The gdpr_compliant of this Workspace1.
        :type gdpr_compliant: bool
        """

        self._gdpr_compliant = gdpr_compliant

    @property
    def hipaa_compliant(self) -> bool:
        """Gets the hipaa_compliant of this Workspace1.


        :return: The hipaa_compliant of this Workspace1.
        :rtype: bool
        """
        return self._hipaa_compliant

    @hipaa_compliant.setter
    def hipaa_compliant(self, hipaa_compliant: bool):
        """Sets the hipaa_compliant of this Workspace1.


        :param hipaa_compliant: The hipaa_compliant of this Workspace1.
        :type hipaa_compliant: bool
        """

        self._hipaa_compliant = hipaa_compliant

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Workspace1.


        :return: The created_at of this Workspace1.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Workspace1.


        :param created_at: The created_at of this Workspace1.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Workspace1.


        :return: The updated_at of this Workspace1.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Workspace1.


        :param updated_at: The updated_at of this Workspace1.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self) -> datetime:
        """Gets the deleted_at of this Workspace1.


        :return: The deleted_at of this Workspace1.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: datetime):
        """Sets the deleted_at of this Workspace1.


        :param deleted_at: The deleted_at of this Workspace1.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def folders(self) -> List[FolderMetadata]:
        """Gets the folders of this Workspace1.


        :return: The folders of this Workspace1.
        :rtype: List[FolderMetadata]
        """
        return self._folders

    @folders.setter
    def folders(self, folders: List[FolderMetadata]):
        """Sets the folders of this Workspace1.


        :param folders: The folders of this Workspace1.
        :type folders: List[FolderMetadata]
        """

        self._folders = folders

    @property
    def templates(self) -> List[DocumentTemplate]:
        """Gets the templates of this Workspace1.


        :return: The templates of this Workspace1.
        :rtype: List[DocumentTemplate]
        """
        return self._templates

    @templates.setter
    def templates(self, templates: List[DocumentTemplate]):
        """Sets the templates of this Workspace1.


        :param templates: The templates of this Workspace1.
        :type templates: List[DocumentTemplate]
        """

        self._templates = templates

    @property
    def sharing(self) -> List[WorkspaceSharing]:
        """Gets the sharing of this Workspace1.


        :return: The sharing of this Workspace1.
        :rtype: List[WorkspaceSharing]
        """
        return self._sharing

    @sharing.setter
    def sharing(self, sharing: List[WorkspaceSharing]):
        """Sets the sharing of this Workspace1.


        :param sharing: The sharing of this Workspace1.
        :type sharing: List[WorkspaceSharing]
        """

        self._sharing = sharing

    @property
    def activities(self) -> List[WorkspaceActivity]:
        """Gets the activities of this Workspace1.


        :return: The activities of this Workspace1.
        :rtype: List[WorkspaceActivity]
        """
        return self._activities

    @activities.setter
    def activities(self, activities: List[WorkspaceActivity]):
        """Sets the activities of this Workspace1.


        :param activities: The activities of this Workspace1.
        :type activities: List[WorkspaceActivity]
        """

        self._activities = activities

    @property
    def compliance(self) -> List[WorkspaceCompliance]:
        """Gets the compliance of this Workspace1.


        :return: The compliance of this Workspace1.
        :rtype: List[WorkspaceCompliance]
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance: List[WorkspaceCompliance]):
        """Sets the compliance of this Workspace1.


        :param compliance: The compliance of this Workspace1.
        :type compliance: List[WorkspaceCompliance]
        """

        self._compliance = compliance

    @property
    def installed_apps(self) -> List[MarketplaceApp]:
        """Gets the installed_apps of this Workspace1.


        :return: The installed_apps of this Workspace1.
        :rtype: List[MarketplaceApp]
        """
        return self._installed_apps

    @installed_apps.setter
    def installed_apps(self, installed_apps: List[MarketplaceApp]):
        """Sets the installed_apps of this Workspace1.


        :param installed_apps: The installed_apps of this Workspace1.
        :type installed_apps: List[MarketplaceApp]
        """

        self._installed_apps = installed_apps
