openapi: 3.0.0
info:
  title: Lead Scraping Service API
  description: Vector Lead Scraping Service API - Manages Lead Scraping Jobs
  version: "1.0"
  contact:
    name: Vector AI Engineering
    url: https://vector.ai
    email: yoanyomba@vector.ai
  license:
    name: Apache 2.0 License
    url: https://github.com/SolomonAIEngineering/backend-monorepo/blob/main/LICENSE
  x-api-version: v2
tags:
  - name: Workspace Management
    description: APIs for managing workspaces, workspace settings, and configurations
    externalDocs:
      description: Learn more about workspace management
      url: https://internal-docs.solomon-ai.io/workspace-service/management
  - name: Workspace Collaboration
    description: APIs for managing workspace sharing, permissions, and team collaboration
  - name: Workspace Analytics
    description: APIs for workspace usage analytics and reporting
  - name: WorkspaceService
paths:
  /lead-scraper-microservice/api/v1/accounts:
    get:
      summary: List accounts
      description: Retrieves a list of accounts with optional filtering
      operationId: ListAccounts
      responses:
        "200":
          description: Accounts retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAccountsResponse"
        "400":
          description: Bad Request - Invalid input parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":400,"message":"Bad
                    Request"},"error_code":2000,"message":"Invalid input
                    parameters","field_violations":[{"field":"email","message":"Invalid
                    email
                    format","constraint":"email","value":"invalid-email"}],"schema_validation":{"schema_version":"v1","invalid_patterns":["email_format"]}}'
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":401,"message":"Unauthorized"},"error_code":1001,"message":"Authentication
                    failed","token_info":{"token_type":"Bearer"},"auth_context":{"required_scopes":["read:user"]},"oauth2_info":{"authorization_url":"https://solomon-ai.io/oauth/authorize"}}'
        "402":
          description: Payment Required - Payment is necessary to proceed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentRequiredErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":402,"message":"Payment
                    Required","payment_info":{"amount_due":29.99,"currency":"USD","due_date":"2024-01-01T00:00:00Z"}}'
        "403":
          description: Forbidden - Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":403,"message":"Forbidden","reason":"Insufficient
                    permissions","required_permissions":["admin"]}'
        "404":
          description: Not Found - Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":404,"message":"Not
                    Found"},"error_code":5102,"message":"Resource not
                    found","resource_info":{"type":"user","id":"123","path":"/user-microservice/api/v2/users/123"},"suggestions":{"alternative_paths":["/user-microservice/api/v2/users"]}}'
        "405":
          description: Method Not Allowed - HTTP method not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodNotAllowedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":405,"message":"Method Not
                    Allowed","allowed_methods":["GET","POST"]}'
        "409":
          description: Conflict - Resource already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":409,"message":"Conflict"},"error_code":2300,"message":"Resource
                    already
                    exists","conflict_info":{"resource_type":"user","identifier":"user@example.com","conflict_reason":"Email
                    already registered"}}'
        "410":
          description: Gone - Resource is no longer available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoneErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":410,"message":"Gone","resource":"/api/v1/users"}'
        "412":
          description: Precondition Failed - Preconditions in headers did not match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":412,"message":"Precondition
                    Failed","failed_conditions":["If-Match header does not
                    match"]}'
        "422":
          description: Unprocessable Entity - Semantic errors in the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":422,"message":"Unprocessable
                    Entity","errors":[{"field":"email","error":"Invalid
                    format"}]}'
        "425":
          description: Too Early - Request is being replayed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooEarlyErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":425,"message":"Too Early"}'
        "429":
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":429,"message":"Too Many
                    Requests"},"error_code":4102,"message":"Rate limit
                    exceeded","limit_info":{"current":150,"limit":100,"window_size":"1m"}}'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":500,"message":"Internal Server
                    Error"},"error_code":4000,"message":"An unexpected error
                    occurred","incident_id":"inc-123","service_status":{"name":"user-service","status":"degraded"}}'
        "501":
          description: Not Implemented - Functionality not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":501,"message":"Not Implemented","feature":"User Deletion"}'
        "502":
          description: Bad Gateway - Invalid response from upstream server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":502,"message":"Bad Gateway","upstream_service":"Auth Service"}'
        "503":
          description: Service Unavailable - Try again later
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":503,"message":"Service
                    Unavailable"},"error_code":4300,"message":"Service is
                    temporarily
                    unavailable","availability_info":{"retry_after":60,"affected_services":["user-service"]}}'
        "504":
          description: Gateway Timeout - Upstream server timed out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayTimeoutErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":504,"message":"Gateway Timeout","upstream_service":"Database"}'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: orgId
          description: Organization context
          in: query
          required: true
          schema:
            type: string
        - name: tenantId
          description: Tenant context
          in: query
          required: true
          schema:
            type: string
        - name: offset
          description: Pagination offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          description: Maximum number of results
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - lead-scraper-service
    post:
      summary: Create a new account
      description: Creates a new user account in the workspace service
      operationId: CreateAccount
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateAccountResponse"
        "201":
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateAccountResponse"
        "400":
          description: Bad Request - Invalid input parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":400,"message":"Bad
                    Request"},"error_code":2000,"message":"Invalid input
                    parameters","field_violations":[{"field":"email","message":"Invalid
                    email
                    format","constraint":"email","value":"invalid-email"}],"schema_validation":{"schema_version":"v1","invalid_patterns":["email_format"]}}'
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":401,"message":"Unauthorized"},"error_code":1001,"message":"Authentication
                    failed","token_info":{"token_type":"Bearer"},"auth_context":{"required_scopes":["read:user"]},"oauth2_info":{"authorization_url":"https://solomon-ai.io/oauth/authorize"}}'
        "402":
          description: Payment Required - Payment is necessary to proceed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentRequiredErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":402,"message":"Payment
                    Required","payment_info":{"amount_due":29.99,"currency":"USD","due_date":"2024-01-01T00:00:00Z"}}'
        "403":
          description: Forbidden - Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":403,"message":"Forbidden","reason":"Insufficient
                    permissions","required_permissions":["admin"]}'
        "404":
          description: Not Found - Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":404,"message":"Not
                    Found"},"error_code":5102,"message":"Resource not
                    found","resource_info":{"type":"user","id":"123","path":"/user-microservice/api/v2/users/123"},"suggestions":{"alternative_paths":["/user-microservice/api/v2/users"]}}'
        "405":
          description: Method Not Allowed - HTTP method not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodNotAllowedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":405,"message":"Method Not
                    Allowed","allowed_methods":["GET","POST"]}'
        "409":
          description: Conflict - Resource already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":409,"message":"Conflict"},"error_code":2300,"message":"Resource
                    already
                    exists","conflict_info":{"resource_type":"user","identifier":"user@example.com","conflict_reason":"Email
                    already registered"}}'
        "410":
          description: Gone - Resource is no longer available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoneErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":410,"message":"Gone","resource":"/api/v1/users"}'
        "412":
          description: Precondition Failed - Preconditions in headers did not match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":412,"message":"Precondition
                    Failed","failed_conditions":["If-Match header does not
                    match"]}'
        "422":
          description: Unprocessable Entity - Semantic errors in the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":422,"message":"Unprocessable
                    Entity","errors":[{"field":"email","error":"Invalid
                    format"}]}'
        "425":
          description: Too Early - Request is being replayed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooEarlyErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":425,"message":"Too Early"}'
        "429":
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":429,"message":"Too Many
                    Requests"},"error_code":4102,"message":"Rate limit
                    exceeded","limit_info":{"current":150,"limit":100,"window_size":"1m"}}'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":500,"message":"Internal Server
                    Error"},"error_code":4000,"message":"An unexpected error
                    occurred","incident_id":"inc-123","service_status":{"name":"user-service","status":"degraded"}}'
        "501":
          description: Not Implemented - Functionality not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":501,"message":"Not Implemented","feature":"User Deletion"}'
        "502":
          description: Bad Gateway - Invalid response from upstream server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":502,"message":"Bad Gateway","upstream_service":"Auth Service"}'
        "503":
          description: Service Unavailable - Try again later
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":503,"message":"Service
                    Unavailable"},"error_code":4300,"message":"Service is
                    temporarily
                    unavailable","availability_info":{"retry_after":60,"affected_services":["user-service"]}}'
        "504":
          description: Gateway Timeout - Upstream server timed out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayTimeoutErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":504,"message":"Gateway Timeout","upstream_service":"Database"}'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccountRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CreateAccountRequest"
        required: true
      tags:
        - lead-scraper-service
    patch:
      summary: Update account details
      description: Updates specified fields of an existing account
      operationId: UpdateAccount
      responses:
        "200":
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateAccountResponse"
        "400":
          description: Bad Request - Invalid input parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":400,"message":"Bad
                    Request"},"error_code":2000,"message":"Invalid input
                    parameters","field_violations":[{"field":"email","message":"Invalid
                    email
                    format","constraint":"email","value":"invalid-email"}],"schema_validation":{"schema_version":"v1","invalid_patterns":["email_format"]}}'
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":401,"message":"Unauthorized"},"error_code":1001,"message":"Authentication
                    failed","token_info":{"token_type":"Bearer"},"auth_context":{"required_scopes":["read:user"]},"oauth2_info":{"authorization_url":"https://solomon-ai.io/oauth/authorize"}}'
        "402":
          description: Payment Required - Payment is necessary to proceed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentRequiredErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":402,"message":"Payment
                    Required","payment_info":{"amount_due":29.99,"currency":"USD","due_date":"2024-01-01T00:00:00Z"}}'
        "403":
          description: Forbidden - Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":403,"message":"Forbidden","reason":"Insufficient
                    permissions","required_permissions":["admin"]}'
        "404":
          description: Not Found - Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":404,"message":"Not
                    Found"},"error_code":5102,"message":"Resource not
                    found","resource_info":{"type":"user","id":"123","path":"/user-microservice/api/v2/users/123"},"suggestions":{"alternative_paths":["/user-microservice/api/v2/users"]}}'
        "405":
          description: Method Not Allowed - HTTP method not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodNotAllowedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":405,"message":"Method Not
                    Allowed","allowed_methods":["GET","POST"]}'
        "409":
          description: Conflict - Resource already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":409,"message":"Conflict"},"error_code":2300,"message":"Resource
                    already
                    exists","conflict_info":{"resource_type":"user","identifier":"user@example.com","conflict_reason":"Email
                    already registered"}}'
        "410":
          description: Gone - Resource is no longer available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoneErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":410,"message":"Gone","resource":"/api/v1/users"}'
        "412":
          description: Precondition Failed - Preconditions in headers did not match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":412,"message":"Precondition
                    Failed","failed_conditions":["If-Match header does not
                    match"]}'
        "422":
          description: Unprocessable Entity - Semantic errors in the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":422,"message":"Unprocessable
                    Entity","errors":[{"field":"email","error":"Invalid
                    format"}]}'
        "425":
          description: Too Early - Request is being replayed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooEarlyErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":425,"message":"Too Early"}'
        "429":
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":429,"message":"Too Many
                    Requests"},"error_code":4102,"message":"Rate limit
                    exceeded","limit_info":{"current":150,"limit":100,"window_size":"1m"}}'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":500,"message":"Internal Server
                    Error"},"error_code":4000,"message":"An unexpected error
                    occurred","incident_id":"inc-123","service_status":{"name":"user-service","status":"degraded"}}'
        "501":
          description: Not Implemented - Functionality not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":501,"message":"Not Implemented","feature":"User Deletion"}'
        "502":
          description: Bad Gateway - Invalid response from upstream server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":502,"message":"Bad Gateway","upstream_service":"Auth Service"}'
        "503":
          description: Service Unavailable - Try again later
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":503,"message":"Service
                    Unavailable"},"error_code":4300,"message":"Service is
                    temporarily
                    unavailable","availability_info":{"retry_after":60,"affected_services":["user-service"]}}'
        "504":
          description: Gateway Timeout - Upstream server timed out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayTimeoutErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":504,"message":"Gateway Timeout","upstream_service":"Database"}'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAccountRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UpdateAccountRequest"
        required: true
      tags:
        - lead-scraper-service
  "/lead-scraper-microservice/api/v1/accounts/{accountId}":
    get:
      summary: Get account details
      description: Retrieves details of a specific account
      operationId: GetAccount
      responses:
        "200":
          description: Account details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAccountResponse"
        "400":
          description: Bad Request - Invalid input parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":400,"message":"Bad
                    Request"},"error_code":2000,"message":"Invalid input
                    parameters","field_violations":[{"field":"email","message":"Invalid
                    email
                    format","constraint":"email","value":"invalid-email"}],"schema_validation":{"schema_version":"v1","invalid_patterns":["email_format"]}}'
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":401,"message":"Unauthorized"},"error_code":1001,"message":"Authentication
                    failed","token_info":{"token_type":"Bearer"},"auth_context":{"required_scopes":["read:user"]},"oauth2_info":{"authorization_url":"https://solomon-ai.io/oauth/authorize"}}'
        "402":
          description: Payment Required - Payment is necessary to proceed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentRequiredErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":402,"message":"Payment
                    Required","payment_info":{"amount_due":29.99,"currency":"USD","due_date":"2024-01-01T00:00:00Z"}}'
        "403":
          description: Forbidden - Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":403,"message":"Forbidden","reason":"Insufficient
                    permissions","required_permissions":["admin"]}'
        "404":
          description: Not Found - Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":404,"message":"Not
                    Found"},"error_code":5102,"message":"Resource not
                    found","resource_info":{"type":"user","id":"123","path":"/user-microservice/api/v2/users/123"},"suggestions":{"alternative_paths":["/user-microservice/api/v2/users"]}}'
        "405":
          description: Method Not Allowed - HTTP method not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodNotAllowedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":405,"message":"Method Not
                    Allowed","allowed_methods":["GET","POST"]}'
        "409":
          description: Conflict - Resource already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":409,"message":"Conflict"},"error_code":2300,"message":"Resource
                    already
                    exists","conflict_info":{"resource_type":"user","identifier":"user@example.com","conflict_reason":"Email
                    already registered"}}'
        "410":
          description: Gone - Resource is no longer available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoneErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":410,"message":"Gone","resource":"/api/v1/users"}'
        "412":
          description: Precondition Failed - Preconditions in headers did not match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":412,"message":"Precondition
                    Failed","failed_conditions":["If-Match header does not
                    match"]}'
        "422":
          description: Unprocessable Entity - Semantic errors in the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":422,"message":"Unprocessable
                    Entity","errors":[{"field":"email","error":"Invalid
                    format"}]}'
        "425":
          description: Too Early - Request is being replayed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooEarlyErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":425,"message":"Too Early"}'
        "429":
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":429,"message":"Too Many
                    Requests"},"error_code":4102,"message":"Rate limit
                    exceeded","limit_info":{"current":150,"limit":100,"window_size":"1m"}}'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":500,"message":"Internal Server
                    Error"},"error_code":4000,"message":"An unexpected error
                    occurred","incident_id":"inc-123","service_status":{"name":"user-service","status":"degraded"}}'
        "501":
          description: Not Implemented - Functionality not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":501,"message":"Not Implemented","feature":"User Deletion"}'
        "502":
          description: Bad Gateway - Invalid response from upstream server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":502,"message":"Bad Gateway","upstream_service":"Auth Service"}'
        "503":
          description: Service Unavailable - Try again later
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":503,"message":"Service
                    Unavailable"},"error_code":4300,"message":"Service is
                    temporarily
                    unavailable","availability_info":{"retry_after":60,"affected_services":["user-service"]}}'
        "504":
          description: Gateway Timeout - Upstream server timed out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayTimeoutErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":504,"message":"Gateway Timeout","upstream_service":"Database"}'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: accountId
          description: Account identifier
          in: path
          required: true
          schema:
            type: string
            format: uint64
        - name: orgId
          description: Organization context
          in: query
          required: true
          schema:
            type: string
        - name: tenantId
          description: Tenant context
          in: query
          required: true
          schema:
            type: string
      tags:
        - lead-scraper-service
    delete:
      summary: Delete account
      description: Permanently deletes an account and associated resources
      operationId: DeleteAccount
      responses:
        "200":
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteAccountResponse"
        "400":
          description: Bad Request - Invalid input parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":400,"message":"Bad
                    Request"},"error_code":2000,"message":"Invalid input
                    parameters","field_violations":[{"field":"email","message":"Invalid
                    email
                    format","constraint":"email","value":"invalid-email"}],"schema_validation":{"schema_version":"v1","invalid_patterns":["email_format"]}}'
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":401,"message":"Unauthorized"},"error_code":1001,"message":"Authentication
                    failed","token_info":{"token_type":"Bearer"},"auth_context":{"required_scopes":["read:user"]},"oauth2_info":{"authorization_url":"https://solomon-ai.io/oauth/authorize"}}'
        "402":
          description: Payment Required - Payment is necessary to proceed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentRequiredErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":402,"message":"Payment
                    Required","payment_info":{"amount_due":29.99,"currency":"USD","due_date":"2024-01-01T00:00:00Z"}}'
        "403":
          description: Forbidden - Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":403,"message":"Forbidden","reason":"Insufficient
                    permissions","required_permissions":["admin"]}'
        "404":
          description: Not Found - Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":404,"message":"Not
                    Found"},"error_code":5102,"message":"Resource not
                    found","resource_info":{"type":"user","id":"123","path":"/user-microservice/api/v2/users/123"},"suggestions":{"alternative_paths":["/user-microservice/api/v2/users"]}}'
        "405":
          description: Method Not Allowed - HTTP method not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodNotAllowedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":405,"message":"Method Not
                    Allowed","allowed_methods":["GET","POST"]}'
        "409":
          description: Conflict - Resource already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":409,"message":"Conflict"},"error_code":2300,"message":"Resource
                    already
                    exists","conflict_info":{"resource_type":"user","identifier":"user@example.com","conflict_reason":"Email
                    already registered"}}'
        "410":
          description: Gone - Resource is no longer available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoneErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":410,"message":"Gone","resource":"/api/v1/users"}'
        "412":
          description: Precondition Failed - Preconditions in headers did not match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":412,"message":"Precondition
                    Failed","failed_conditions":["If-Match header does not
                    match"]}'
        "422":
          description: Unprocessable Entity - Semantic errors in the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":422,"message":"Unprocessable
                    Entity","errors":[{"field":"email","error":"Invalid
                    format"}]}'
        "425":
          description: Too Early - Request is being replayed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooEarlyErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":425,"message":"Too Early"}'
        "429":
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":429,"message":"Too Many
                    Requests"},"error_code":4102,"message":"Rate limit
                    exceeded","limit_info":{"current":150,"limit":100,"window_size":"1m"}}'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":500,"message":"Internal Server
                    Error"},"error_code":4000,"message":"An unexpected error
                    occurred","incident_id":"inc-123","service_status":{"name":"user-service","status":"degraded"}}'
        "501":
          description: Not Implemented - Functionality not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":501,"message":"Not Implemented","feature":"User Deletion"}'
        "502":
          description: Bad Gateway - Invalid response from upstream server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":502,"message":"Bad Gateway","upstream_service":"Auth Service"}'
        "503":
          description: Service Unavailable - Try again later
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":503,"message":"Service
                    Unavailable"},"error_code":4300,"message":"Service is
                    temporarily
                    unavailable","availability_info":{"retry_after":60,"affected_services":["user-service"]}}'
        "504":
          description: Gateway Timeout - Upstream server timed out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayTimeoutErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":504,"message":"Gateway Timeout","upstream_service":"Database"}'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: accountId
          description: Account identifier
          in: path
          required: true
          schema:
            type: string
            format: uint64
        - name: orgId
          description: Organization context
          in: query
          required: true
          schema:
            type: string
        - name: tenantId
          description: Tenant context
          in: query
          required: true
          schema:
            type: string
      tags:
        - lead-scraper-service
  /lead-scraper-microservice/api/v1/jobs:
    get:
      summary: Get all jobs
      description: This endpoint retrieves all Google Maps scraping jobs
      operationId: ListScrapingJobs
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListScrapingJobsResponse"
        "400":
          description: Bad Request - Invalid input parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":400,"message":"Bad
                    Request"},"error_code":2000,"message":"Invalid input
                    parameters","field_violations":[{"field":"email","message":"Invalid
                    email
                    format","constraint":"email","value":"invalid-email"}],"schema_validation":{"schema_version":"v1","invalid_patterns":["email_format"]}}'
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":401,"message":"Unauthorized"},"error_code":1001,"message":"Authentication
                    failed","token_info":{"token_type":"Bearer"},"auth_context":{"required_scopes":["read:user"]},"oauth2_info":{"authorization_url":"https://solomon-ai.io/oauth/authorize"}}'
        "402":
          description: Payment Required - Payment is necessary to proceed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentRequiredErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":402,"message":"Payment
                    Required","payment_info":{"amount_due":29.99,"currency":"USD","due_date":"2024-01-01T00:00:00Z"}}'
        "403":
          description: Forbidden - Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":403,"message":"Forbidden","reason":"Insufficient
                    permissions","required_permissions":["admin"]}'
        "404":
          description: Not Found - Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":404,"message":"Not
                    Found"},"error_code":5102,"message":"Resource not
                    found","resource_info":{"type":"user","id":"123","path":"/user-microservice/api/v2/users/123"},"suggestions":{"alternative_paths":["/user-microservice/api/v2/users"]}}'
        "405":
          description: Method Not Allowed - HTTP method not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodNotAllowedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":405,"message":"Method Not
                    Allowed","allowed_methods":["GET","POST"]}'
        "409":
          description: Conflict - Resource already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":409,"message":"Conflict"},"error_code":2300,"message":"Resource
                    already
                    exists","conflict_info":{"resource_type":"user","identifier":"user@example.com","conflict_reason":"Email
                    already registered"}}'
        "410":
          description: Gone - Resource is no longer available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoneErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":410,"message":"Gone","resource":"/api/v1/users"}'
        "412":
          description: Precondition Failed - Preconditions in headers did not match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":412,"message":"Precondition
                    Failed","failed_conditions":["If-Match header does not
                    match"]}'
        "422":
          description: Unprocessable Entity - Semantic errors in the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":422,"message":"Unprocessable
                    Entity","errors":[{"field":"email","error":"Invalid
                    format"}]}'
        "425":
          description: Too Early - Request is being replayed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooEarlyErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":425,"message":"Too Early"}'
        "429":
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":429,"message":"Too Many
                    Requests"},"error_code":4102,"message":"Rate limit
                    exceeded","limit_info":{"current":150,"limit":100,"window_size":"1m"}}'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":500,"message":"Internal Server
                    Error"},"error_code":4000,"message":"An unexpected error
                    occurred","incident_id":"inc-123","service_status":{"name":"user-service","status":"degraded"}}'
        "501":
          description: Not Implemented - Functionality not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":501,"message":"Not Implemented","feature":"User Deletion"}'
        "502":
          description: Bad Gateway - Invalid response from upstream server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":502,"message":"Bad Gateway","upstream_service":"Auth Service"}'
        "503":
          description: Service Unavailable - Try again later
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":503,"message":"Service
                    Unavailable"},"error_code":4300,"message":"Service is
                    temporarily
                    unavailable","availability_info":{"retry_after":60,"affected_services":["user-service"]}}'
        "504":
          description: Gateway Timeout - Upstream server timed out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayTimeoutErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":504,"message":"Gateway Timeout","upstream_service":"Database"}'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
        - name: orgId
          in: query
          required: true
          schema:
            type: string
        - name: tenantId
          in: query
          required: true
          schema:
            type: string
      tags:
        - lead-scraper-service
    post:
      summary: Create a new job scraping task
      description: This endpoint creates a new Google Maps scraping job
      operationId: CreateScrapingJob
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateScrapingJobResponse"
        "201":
          description: Job created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateScrapingJobResponse"
        "400":
          description: Bad Request - Invalid input parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":400,"message":"Bad
                    Request"},"error_code":2000,"message":"Invalid input
                    parameters","field_violations":[{"field":"email","message":"Invalid
                    email
                    format","constraint":"email","value":"invalid-email"}],"schema_validation":{"schema_version":"v1","invalid_patterns":["email_format"]}}'
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":401,"message":"Unauthorized"},"error_code":1001,"message":"Authentication
                    failed","token_info":{"token_type":"Bearer"},"auth_context":{"required_scopes":["read:user"]},"oauth2_info":{"authorization_url":"https://solomon-ai.io/oauth/authorize"}}'
        "402":
          description: Payment Required - Payment is necessary to proceed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentRequiredErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":402,"message":"Payment
                    Required","payment_info":{"amount_due":29.99,"currency":"USD","due_date":"2024-01-01T00:00:00Z"}}'
        "403":
          description: Forbidden - Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":403,"message":"Forbidden","reason":"Insufficient
                    permissions","required_permissions":["admin"]}'
        "404":
          description: Not Found - Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":404,"message":"Not
                    Found"},"error_code":5102,"message":"Resource not
                    found","resource_info":{"type":"user","id":"123","path":"/user-microservice/api/v2/users/123"},"suggestions":{"alternative_paths":["/user-microservice/api/v2/users"]}}'
        "405":
          description: Method Not Allowed - HTTP method not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodNotAllowedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":405,"message":"Method Not
                    Allowed","allowed_methods":["GET","POST"]}'
        "409":
          description: Conflict - Resource already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":409,"message":"Conflict"},"error_code":2300,"message":"Resource
                    already
                    exists","conflict_info":{"resource_type":"user","identifier":"user@example.com","conflict_reason":"Email
                    already registered"}}'
        "410":
          description: Gone - Resource is no longer available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoneErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":410,"message":"Gone","resource":"/api/v1/users"}'
        "412":
          description: Precondition Failed - Preconditions in headers did not match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":412,"message":"Precondition
                    Failed","failed_conditions":["If-Match header does not
                    match"]}'
        "422":
          description: Unprocessable Entity - Semantic errors in the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":422,"message":"Unprocessable
                    Entity","errors":[{"field":"email","error":"Invalid
                    format"}]}'
        "425":
          description: Too Early - Request is being replayed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooEarlyErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":425,"message":"Too Early"}'
        "429":
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":429,"message":"Too Many
                    Requests"},"error_code":4102,"message":"Rate limit
                    exceeded","limit_info":{"current":150,"limit":100,"window_size":"1m"}}'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":500,"message":"Internal Server
                    Error"},"error_code":4000,"message":"An unexpected error
                    occurred","incident_id":"inc-123","service_status":{"name":"user-service","status":"degraded"}}'
        "501":
          description: Not Implemented - Functionality not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":501,"message":"Not Implemented","feature":"User Deletion"}'
        "502":
          description: Bad Gateway - Invalid response from upstream server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":502,"message":"Bad Gateway","upstream_service":"Auth Service"}'
        "503":
          description: Service Unavailable - Try again later
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":503,"message":"Service
                    Unavailable"},"error_code":4300,"message":"Service is
                    temporarily
                    unavailable","availability_info":{"retry_after":60,"affected_services":["user-service"]}}'
        "504":
          description: Gateway Timeout - Upstream server timed out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayTimeoutErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":504,"message":"Gateway Timeout","upstream_service":"Database"}'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateScrapingJobRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CreateScrapingJobRequest"
        required: true
      tags:
        - lead-scraper-service
  "/lead-scraper-microservice/api/v1/jobs/{jobId}":
    get:
      summary: Get a specific job
      description: This endpoint retrieves a specific Google Maps scraping job
      operationId: GetScrapingJob
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetScrapingJobResponse"
        "400":
          description: Bad Request - Invalid input parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":400,"message":"Bad
                    Request"},"error_code":2000,"message":"Invalid input
                    parameters","field_violations":[{"field":"email","message":"Invalid
                    email
                    format","constraint":"email","value":"invalid-email"}],"schema_validation":{"schema_version":"v1","invalid_patterns":["email_format"]}}'
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":401,"message":"Unauthorized"},"error_code":1001,"message":"Authentication
                    failed","token_info":{"token_type":"Bearer"},"auth_context":{"required_scopes":["read:user"]},"oauth2_info":{"authorization_url":"https://solomon-ai.io/oauth/authorize"}}'
        "402":
          description: Payment Required - Payment is necessary to proceed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentRequiredErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":402,"message":"Payment
                    Required","payment_info":{"amount_due":29.99,"currency":"USD","due_date":"2024-01-01T00:00:00Z"}}'
        "403":
          description: Forbidden - Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":403,"message":"Forbidden","reason":"Insufficient
                    permissions","required_permissions":["admin"]}'
        "404":
          description: Not Found - Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":404,"message":"Not
                    Found"},"error_code":5102,"message":"Resource not
                    found","resource_info":{"type":"user","id":"123","path":"/user-microservice/api/v2/users/123"},"suggestions":{"alternative_paths":["/user-microservice/api/v2/users"]}}'
        "405":
          description: Method Not Allowed - HTTP method not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodNotAllowedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":405,"message":"Method Not
                    Allowed","allowed_methods":["GET","POST"]}'
        "409":
          description: Conflict - Resource already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":409,"message":"Conflict"},"error_code":2300,"message":"Resource
                    already
                    exists","conflict_info":{"resource_type":"user","identifier":"user@example.com","conflict_reason":"Email
                    already registered"}}'
        "410":
          description: Gone - Resource is no longer available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoneErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":410,"message":"Gone","resource":"/api/v1/users"}'
        "412":
          description: Precondition Failed - Preconditions in headers did not match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":412,"message":"Precondition
                    Failed","failed_conditions":["If-Match header does not
                    match"]}'
        "422":
          description: Unprocessable Entity - Semantic errors in the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":422,"message":"Unprocessable
                    Entity","errors":[{"field":"email","error":"Invalid
                    format"}]}'
        "425":
          description: Too Early - Request is being replayed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooEarlyErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":425,"message":"Too Early"}'
        "429":
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":429,"message":"Too Many
                    Requests"},"error_code":4102,"message":"Rate limit
                    exceeded","limit_info":{"current":150,"limit":100,"window_size":"1m"}}'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":500,"message":"Internal Server
                    Error"},"error_code":4000,"message":"An unexpected error
                    occurred","incident_id":"inc-123","service_status":{"name":"user-service","status":"degraded"}}'
        "501":
          description: Not Implemented - Functionality not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":501,"message":"Not Implemented","feature":"User Deletion"}'
        "502":
          description: Bad Gateway - Invalid response from upstream server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":502,"message":"Bad Gateway","upstream_service":"Auth Service"}'
        "503":
          description: Service Unavailable - Try again later
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":503,"message":"Service
                    Unavailable"},"error_code":4300,"message":"Service is
                    temporarily
                    unavailable","availability_info":{"retry_after":60,"affected_services":["user-service"]}}'
        "504":
          description: Gateway Timeout - Upstream server timed out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayTimeoutErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":504,"message":"Gateway Timeout","upstream_service":"Database"}'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: query
          required: true
          schema:
            type: string
        - name: orgId
          in: query
          required: true
          schema:
            type: string
        - name: tenantId
          in: query
          required: true
          schema:
            type: string
      tags:
        - lead-scraper-service
    delete:
      summary: Delete a specific job
      description: This endpoint deletes a specific Google Maps scraping job
      operationId: DeleteScrapingJob
      responses:
        "200":
          description: Job deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteScrapingJobResponse"
        "400":
          description: Bad Request - Invalid input parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":400,"message":"Bad
                    Request"},"error_code":2000,"message":"Invalid input
                    parameters","field_violations":[{"field":"email","message":"Invalid
                    email
                    format","constraint":"email","value":"invalid-email"}],"schema_validation":{"schema_version":"v1","invalid_patterns":["email_format"]}}'
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":401,"message":"Unauthorized"},"error_code":1001,"message":"Authentication
                    failed","token_info":{"token_type":"Bearer"},"auth_context":{"required_scopes":["read:user"]},"oauth2_info":{"authorization_url":"https://solomon-ai.io/oauth/authorize"}}'
        "402":
          description: Payment Required - Payment is necessary to proceed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentRequiredErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":402,"message":"Payment
                    Required","payment_info":{"amount_due":29.99,"currency":"USD","due_date":"2024-01-01T00:00:00Z"}}'
        "403":
          description: Forbidden - Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":403,"message":"Forbidden","reason":"Insufficient
                    permissions","required_permissions":["admin"]}'
        "404":
          description: Not Found - Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":404,"message":"Not
                    Found"},"error_code":5102,"message":"Resource not
                    found","resource_info":{"type":"user","id":"123","path":"/user-microservice/api/v2/users/123"},"suggestions":{"alternative_paths":["/user-microservice/api/v2/users"]}}'
        "405":
          description: Method Not Allowed - HTTP method not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodNotAllowedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":405,"message":"Method Not
                    Allowed","allowed_methods":["GET","POST"]}'
        "409":
          description: Conflict - Resource already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":409,"message":"Conflict"},"error_code":2300,"message":"Resource
                    already
                    exists","conflict_info":{"resource_type":"user","identifier":"user@example.com","conflict_reason":"Email
                    already registered"}}'
        "410":
          description: Gone - Resource is no longer available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoneErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":410,"message":"Gone","resource":"/api/v1/users"}'
        "412":
          description: Precondition Failed - Preconditions in headers did not match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":412,"message":"Precondition
                    Failed","failed_conditions":["If-Match header does not
                    match"]}'
        "422":
          description: Unprocessable Entity - Semantic errors in the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":422,"message":"Unprocessable
                    Entity","errors":[{"field":"email","error":"Invalid
                    format"}]}'
        "425":
          description: Too Early - Request is being replayed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooEarlyErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":425,"message":"Too Early"}'
        "429":
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":429,"message":"Too Many
                    Requests"},"error_code":4102,"message":"Rate limit
                    exceeded","limit_info":{"current":150,"limit":100,"window_size":"1m"}}'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":500,"message":"Internal Server
                    Error"},"error_code":4000,"message":"An unexpected error
                    occurred","incident_id":"inc-123","service_status":{"name":"user-service","status":"degraded"}}'
        "501":
          description: Not Implemented - Functionality not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":501,"message":"Not Implemented","feature":"User Deletion"}'
        "502":
          description: Bad Gateway - Invalid response from upstream server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":502,"message":"Bad Gateway","upstream_service":"Auth Service"}'
        "503":
          description: Service Unavailable - Try again later
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":503,"message":"Service
                    Unavailable"},"error_code":4300,"message":"Service is
                    temporarily
                    unavailable","availability_info":{"retry_after":60,"affected_services":["user-service"]}}'
        "504":
          description: Gateway Timeout - Upstream server timed out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayTimeoutErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":504,"message":"Gateway Timeout","upstream_service":"Database"}'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: query
          required: true
          schema:
            type: string
        - name: orgId
          in: query
          required: true
          schema:
            type: string
        - name: tenantId
          in: query
          required: true
          schema:
            type: string
      tags:
        - lead-scraper-service
  "/lead-scraper-microservice/api/v1/jobs/{jobId}/download":
    get:
      summary: Download job results as CSV
      description: This endpoint downloads the results of a Google Maps scraping job as CSV
      operationId: DownloadScrapingResults
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DownloadScrapingResultsResponse"
        "400":
          description: Bad Request - Invalid input parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":400,"message":"Bad
                    Request"},"error_code":2000,"message":"Invalid input
                    parameters","field_violations":[{"field":"email","message":"Invalid
                    email
                    format","constraint":"email","value":"invalid-email"}],"schema_validation":{"schema_version":"v1","invalid_patterns":["email_format"]}}'
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":401,"message":"Unauthorized"},"error_code":1001,"message":"Authentication
                    failed","token_info":{"token_type":"Bearer"},"auth_context":{"required_scopes":["read:user"]},"oauth2_info":{"authorization_url":"https://solomon-ai.io/oauth/authorize"}}'
        "402":
          description: Payment Required - Payment is necessary to proceed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentRequiredErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":402,"message":"Payment
                    Required","payment_info":{"amount_due":29.99,"currency":"USD","due_date":"2024-01-01T00:00:00Z"}}'
        "403":
          description: Forbidden - Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":403,"message":"Forbidden","reason":"Insufficient
                    permissions","required_permissions":["admin"]}'
        "404":
          description: Not Found - Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":404,"message":"Not
                    Found"},"error_code":5102,"message":"Resource not
                    found","resource_info":{"type":"user","id":"123","path":"/user-microservice/api/v2/users/123"},"suggestions":{"alternative_paths":["/user-microservice/api/v2/users"]}}'
        "405":
          description: Method Not Allowed - HTTP method not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodNotAllowedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":405,"message":"Method Not
                    Allowed","allowed_methods":["GET","POST"]}'
        "409":
          description: Conflict - Resource already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":409,"message":"Conflict"},"error_code":2300,"message":"Resource
                    already
                    exists","conflict_info":{"resource_type":"user","identifier":"user@example.com","conflict_reason":"Email
                    already registered"}}'
        "410":
          description: Gone - Resource is no longer available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoneErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":410,"message":"Gone","resource":"/api/v1/users"}'
        "412":
          description: Precondition Failed - Preconditions in headers did not match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":412,"message":"Precondition
                    Failed","failed_conditions":["If-Match header does not
                    match"]}'
        "422":
          description: Unprocessable Entity - Semantic errors in the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntityErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":422,"message":"Unprocessable
                    Entity","errors":[{"field":"email","error":"Invalid
                    format"}]}'
        "425":
          description: Too Early - Request is being replayed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooEarlyErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":425,"message":"Too Early"}'
        "429":
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":429,"message":"Too Many
                    Requests"},"error_code":4102,"message":"Rate limit
                    exceeded","limit_info":{"current":150,"limit":100,"window_size":"1m"}}'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":500,"message":"Internal Server
                    Error"},"error_code":4000,"message":"An unexpected error
                    occurred","incident_id":"inc-123","service_status":{"name":"user-service","status":"degraded"}}'
        "501":
          description: Not Implemented - Functionality not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":501,"message":"Not Implemented","feature":"User Deletion"}'
        "502":
          description: Bad Gateway - Invalid response from upstream server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":502,"message":"Bad Gateway","upstream_service":"Auth Service"}'
        "503":
          description: Service Unavailable - Try again later
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"status":{"code":503,"message":"Service
                    Unavailable"},"error_code":4300,"message":"Service is
                    temporarily
                    unavailable","availability_info":{"retry_after":60,"affected_services":["user-service"]}}'
        "504":
          description: Gateway Timeout - Upstream server timed out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayTimeoutErrorMessageResponse"
            "":
              examples:
                response:
                  value: '{"code":504,"message":"Gateway Timeout","upstream_service":"Database"}'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: query
          required: true
          schema:
            type: string
        - name: orgId
          in: query
          required: true
          schema:
            type: string
        - name: tenantId
          in: query
          required: true
          schema:
            type: string
      tags:
        - lead-scraper-service
externalDocs:
  description: Vector User Service Documentation
  url: https://internal-docs.solomon-ai.io/user-service
servers:
  - url: http://lead-scraping-microservice.vector.svc.cluster.local:9896
  - url: https://lead-scraping-microservice.vector.svc.cluster.local:9896
  - url: wss://lead-scraping-microservice.vector.svc.cluster.local:9896
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-Key
      in: header
      x-amazon-apigateway-authorizer:
        authorizerResultTtlInSeconds: 60
        type: token
      x-amazon-apigateway-authtype: oauth2
  schemas:
    APIInfo:
      type: object
      properties:
        version:
          type: string
          title: API version used
        supportedVersions:
          type: array
          items:
            type: string
          title: Supported API versions
        isDeprecated:
          type: boolean
          title: Whether endpoint is deprecated
        sunsetDate:
          type: string
          format: date-time
          title: When endpoint will be removed
    Account:
      type: object
      properties:
        id:
          type: string
          format: uint64
          title: Unique identifier for the account
        authPlatformUserId:
          type: string
          title: Auth0 user identifier for authentication
        orgId:
          type: string
          title: Organization identifier for multi-org support
        tenantId:
          type: string
          title: Tenant identifier for multi-tenant support
        email:
          type: string
          title: User's email address
        lastModifiedAt:
          type: string
          format: date-time
          title: Timestamp of last modification
        deletedAt:
          type: string
          format: date-time
          title: Soft delete timestamp
        createdAt:
          type: string
          format: date-time
          title: Account creation timestamp
        scrapingJobs:
          type: array
          items:
            $ref: "#/components/schemas/ScrapingJob"
          title: Associated scraping jobs for this account
      description: >-
        Account represents a user account within the workspace service.

        It serves as the top-level container for all user-specific workspaces and settings.


        Key features:

        - Unique identification via Auth0

        - Organization and tenant context

        - Audit timestamps

        - Associated scraping jobs


        Database considerations:

        - Uses GORM for ORM mapping

        - Includes indexes for efficient querying

        - Supports soft deletes via deleted_at


        Usage example:

        ```go

        account := &Account{
            AuthPlatformUserId: "auth0|123",
            OrgId: "org_123",
            TenantId: "tenant_456",
        }

        ```
    Any:
      type: object
      properties:
        "@type":
          type: string
          description: >-
            A URL/resource name that uniquely identifies the type of the
            serialized

            protocol buffer message. This string must contain at least

            one "/" character. The last segment of the URL's path must represent

            the fully qualified name of the type (as in

            `path/google.protobuf.Duration`). The name should be in a canonical form

            (e.g., leading "." is not accepted).


            In practice, teams usually precompile into the binary all types that they

            expect it to use in the context of Any. However, for URLs which use the

            scheme `http`, `https`, or no scheme, one can optionally set up a type

            server that maps type URLs to message definitions as follows:


            * If no scheme is provided, `https` is assumed.

            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official

            protobuf release, and it is not used for type URLs beginning with

            type.googleapis.com.


            Schemes other than `http`, `https` (or the empty scheme) might be

            used with implementation specific semantics.
      additionalProperties: {}
      description: >-
        `Any` contains an arbitrary serialized protocol buffer message along
        with a

        URL that describes the type of the serialized message.


        Protobuf library provides support to pack/unpack Any values in the form

        of utility functions or additional generated methods of the Any type.


        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

        Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

        Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use

        'type.googleapis.com/full.type.name' as the type URL and the unpack

        methods only use the fully qualified type name after the last '/'

        in the type URL, for example "foo.bar.com/x/y.z" will yield type

        name "y.z".



        JSON


        The JSON representation of an `Any` value uses the regular

        representation of the deserialized, embedded message, with an

        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON

        representation, that representation will be embedded adding a field

        `value` which holds the custom JSON in addition to the `@type`

        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    AuthContext:
      type: object
      properties:
        requiredScopes:
          type: array
          items:
            type: string
          title: Scopes required for the operation
        providedScopes:
          type: array
          items:
            type: string
          title: Scopes present in the token
        missingPermissions:
          type: array
          items:
            type: string
          title: Permissions that were missing
        tenantId:
          type: string
          title: Tenant context if applicable
    AuthErrorCode:
      type: string
      enum:
        - NO_AUTH_ERROR
        - AUTH_FAILED_INVALID_BEARER_TOKEN
        - AUTH_FAILED_INVALID_SUBJECT
        - AUTH_FAILED_INVALID_AUDIENCE
        - AUTH_FAILED_INVALID_ISSUER
        - BEARER_TOKEN_MISSING
        - TOKEN_EXPIRED
        - TOKEN_NOT_ACTIVE
        - TOKEN_REVOKED
        - INVALID_CLAIMS
        - MISSING_REQUIRED_CLAIMS
        - INVALID_SCOPE
        - INVALID_PERMISSIONS
        - SESSION_EXPIRED
        - SESSION_INVALID
        - SESSION_REVOKED
        - UNAUTHENTICATED
        - MULTI_FACTOR_REQUIRED
        - MULTI_FACTOR_FAILED
        - ACCOUNT_LOCKED
        - ACCOUNT_DISABLED
        - PASSWORD_EXPIRED
        - PASSWORD_RESET_REQUIRED
        - UNRECOGNIZED_DEVICE
      default: NO_AUTH_ERROR
      description: |-
        - AUTH_FAILED_INVALID_BEARER_TOKEN: Authentication errors
         - SESSION_EXPIRED: Session errors
         - UNAUTHENTICATED: Other authentication errors
         - ACCOUNT_LOCKED: New authentication error codes

        Account is locked due to too many failed login attempts
         - ACCOUNT_DISABLED: Account has been disabled by admin
         - PASSWORD_EXPIRED: Password has expired and must be changed
         - PASSWORD_RESET_REQUIRED: Password reset is required
         - UNRECOGNIZED_DEVICE: Login attempt from an unrecognized device
      title: Enhanced AuthErrorCode represents authentication-related error codes
    AuthenticationErrorMessageResponse:
      type: object
      example:
        code: 1001
        message: Authentication failed
        token_info:
          token_id: t-123
          expiry: 2024-01-01T00:00:00Z
        auth_context:
          required_scopes:
            - read
            - write
          provided_scopes:
            - read
        session_info:
          session_id: s-456
          last_active: 2024-01-01T00:00:00Z
      properties:
        code:
          $ref: "#/components/schemas/AuthErrorCode"
        message:
          type: string
          title: Human-readable error message
        tokenInfo:
          $ref: "#/components/schemas/TokenInfo"
        authContext:
          $ref: "#/components/schemas/AuthContext"
        sessionInfo:
          $ref: "#/components/schemas/SessionInfo"
        mfaInfo:
          $ref: "#/components/schemas/MFAInfo"
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Represents authentication and authorization failures
      title: Authentication Error Response
    AvailabilityInfo:
      type: object
      properties:
        retryAfter:
          type: integer
          format: int32
          title: Seconds to wait before retrying
        maintenanceWindow:
          type: string
          title: Scheduled maintenance information
        affectedServices:
          type: array
          items:
            type: string
          title: List of affected services
        statusPageUrl:
          type: string
          title: URL to service status page
    BackgroundJobStatus:
      type: string
      enum:
        - BACKGROUND_JOB_STATUS_UNSPECIFIED
        - BACKGROUND_JOB_STATUS_QUEUED
        - BACKGROUND_JOB_STATUS_IN_PROGRESS
        - BACKGROUND_JOB_STATUS_COMPLETED
        - BACKGROUND_JOB_STATUS_FAILED
        - BACKGROUND_JOB_STATUS_CANCELLED
        - BACKGROUND_JOB_STATUS_TIMED_OUT
      default: BACKGROUND_JOB_STATUS_UNSPECIFIED
      description: >-
        BackgroundJobStatus represents the possible states of a background job.

        This enum is used to track the lifecycle of asynchronous tasks like scraping jobs.


        State transitions:

        1. QUEUED -> IN_PROGRESS

        2. IN_PROGRESS -> COMPLETED/FAILED/CANCELLED/TIMED_OUT


        Usage example:

        ```go

        job := &ScrapingJob{
            Status: BackgroundJobStatus_BACKGROUND_JOB_STATUS_IN_PROGRESS,
        }

        ```

         - BACKGROUND_JOB_STATUS_UNSPECIFIED: Default state, should not be used explicitly
         - BACKGROUND_JOB_STATUS_QUEUED: Job is queued and waiting to be processed
         - BACKGROUND_JOB_STATUS_IN_PROGRESS: Job is currently being processed
         - BACKGROUND_JOB_STATUS_COMPLETED: Job has completed successfully
         - BACKGROUND_JOB_STATUS_FAILED: Job encountered an error and failed
         - BACKGROUND_JOB_STATUS_CANCELLED: Job was manually cancelled by user
         - BACKGROUND_JOB_STATUS_TIMED_OUT: Job exceeded its maximum execution time
    BadGatewayErrorMessageResponse:
      type: object
      example:
        code: 502
        message: Bad Gateway
        upstream_service: Auth Service
      properties:
        code:
          type: integer
          format: int32
          title: HTTP status code (502)
        message:
          type: string
          title: Human-readable error message
        upstreamService:
          type: string
          title: Name of the upstream service
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Represents errors when the server received an invalid response from
        an upstream server
      title: Bad Gateway Error Response
    ConflictErrorMessageResponse:
      type: object
      example:
        code: 2300
        message: Resource already exists
        conflict_info:
          resource_type: user
          identifier: email@example.com
      properties:
        code:
          $ref: "#/components/schemas/ValidationErrorCode"
        message:
          type: string
          title: Human-readable error message
        conflictInfo:
          $ref: "#/components/schemas/ConflictInfo"
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Represents resource conflict errors
      title: Conflict Error Response
    ConflictInfo:
      type: object
      properties:
        resourceType:
          type: string
        identifier:
          type: string
        conflictReason:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
    CreateAccountRequest:
      type: object
      properties:
        authPlatformUserId:
          type: string
          title: Auth0 user identifier
        orgId:
          type: string
          title: Organization identifier
        tenantId:
          type: string
          title: Tenant identifier
        email:
          type: string
          title: User's email address
      title: CreateAccountRequest represents a request to create a new account
      required:
        - authPlatformUserId
        - orgId
        - tenantId
        - email
    CreateAccountResponse:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Account"
      title: CreateAccountResponse represents the response after creating an account
    CreateScrapingJobRequest:
      type: object
      properties:
        userId:
          type: string
          title: User and context identification
        orgId:
          type: string
        tenantId:
          type: string
        name:
          type: string
          title: Job configuration
        keywords:
          type: array
          items:
            type: string
        lang:
          type: string
          title: ISO 639-1 language code
        zoom:
          type: integer
          format: int32
        lat:
          type: string
        lon:
          type: string
        fastMode:
          type: boolean
        radius:
          type: integer
          format: int32
        depth:
          type: integer
          format: int32
        email:
          type: boolean
        maxTime:
          type: integer
          format: int32
        proxies:
          type: array
          items:
            type: string
      title: CreateScrapingJobRequest represents a request to create a new Google Maps
        scraping job
      required:
        - userId
        - orgId
        - tenantId
    CreateScrapingJobResponse:
      type: object
      properties:
        jobId:
          type: string
        status:
          $ref: "#/components/schemas/BackgroundJobStatus"
      title: CreateScrapingJobResponse represents the response after creating a
        scraping job
    DeleteAccountResponse:
      type: object
      properties:
        success:
          type: boolean
      title: DeleteAccountResponse represents the response after deleting an account
    DeleteScrapingJobResponse:
      type: object
      properties:
        success:
          type: boolean
      title: DeleteScrapingJobResponse represents the response after deleting a
        scraping job
    Dependency:
      type: object
      properties:
        name:
          type: string
          title: Dependency name
        status:
          type: string
          title: Dependency status
        error:
          type: string
          title: Error if any
        latency:
          type: integer
          format: int32
          title: Current latency in ms
    DownloadScrapingResultsResponse:
      type: object
      properties:
        content:
          type: string
          format: byte
        filename:
          type: string
        contentType:
          type: string
      title: DownloadScrapingResultsResponse represents the response containing job
        results
    ErrorResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Status"
      title: Base error message response, extending google.rpc.Status
    FieldError:
      type: object
      properties:
        field:
          type: string
          title: Field with error
        error:
          type: string
          title: Error description
    FieldViolation:
      type: object
      properties:
        field:
          type: string
          title: Field that failed validation
        validation:
          type: string
          title: Type of validation that failed
        message:
          type: string
          title: Specific error message
        expected:
          type: string
          title: Expected value or format
        actual:
          type: string
          title: Actual value provided
    ForbiddenErrorMessageResponse:
      type: object
      example:
        code: 403
        message: Forbidden
        reason: Insufficient permissions
        required_permissions:
          - admin
      properties:
        code:
          type: integer
          format: int32
          title: HTTP status code (403)
        message:
          type: string
          title: Human-readable error message
        reason:
          type: string
          title: Reason for the forbidden access
        requiredPermissions:
          type: array
          items:
            type: string
          title: Permissions required to access the resource
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Indicates that the server understood the request but refuses to
        authorize it
      title: Forbidden Error Response
    GatewayTimeoutErrorMessageResponse:
      type: object
      example:
        code: 504
        message: Gateway Timeout
        upstream_service: Database
      properties:
        code:
          type: integer
          format: int32
          title: HTTP status code (504)
        message:
          type: string
          title: Human-readable error message
        upstreamService:
          type: string
          title: Name of the upstream service
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Represents errors when the server did not receive a timely response
        from an upstream server
      title: Gateway Timeout Error Response
    GetAccountResponse:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Account"
      title: GetAccountResponse represents the response containing account details
    GetScrapingJobResponse:
      type: object
      properties:
        job:
          $ref: "#/components/schemas/ScrapingJob"
      title: GetScrapingJobResponse represents the response containing scraping job
        details
    GoneErrorMessageResponse:
      type: object
      example:
        code: 410
        message: Gone
        resource: /api/v1/users
      properties:
        code:
          type: integer
          format: int32
          title: HTTP status code (410)
        message:
          type: string
          title: Human-readable error message
        resource:
          type: string
          title: Resource that is gone
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Indicates that the resource requested is no longer available and
        will not be available again
      title: Gone Error Response
    InternalErrorCode:
      type: string
      enum:
        - NO_INTERNAL_ERROR
        - INTERNAL_ERROR
        - DATA_CORRUPTION
        - DATABASE_ERROR
        - CACHE_ERROR
        - RESOURCE_EXHAUSTED
        - QUOTA_EXCEEDED
        - RATE_LIMIT_EXCEEDED
        - CANCELLED
        - DEADLINE_EXCEEDED
        - ALREADY_EXISTS
        - FAILED_PRECONDITION
        - ABORTED
        - OUT_OF_RANGE
        - UNAVAILABLE
        - DATA_LOSS
        - SERVICE_DEGRADED
        - DEPENDENCY_FAILURE
        - CONFIGURATION_ERROR
        - SECURITY_BREACH_DETECTED
      default: NO_INTERNAL_ERROR
      description: |-
        - INTERNAL_ERROR: General internal errors
         - RESOURCE_EXHAUSTED: Resource exhaustion errors
         - CANCELLED: Operation errors
         - UNAVAILABLE: Availability errors
         - DEPENDENCY_FAILURE: New internal error codes

        Failure in external dependency
         - CONFIGURATION_ERROR: Service configuration error
         - SECURITY_BREACH_DETECTED: Potential security breach detected
      title: Enhanced InternalErrorCode represents server-side error codes
    InternalErrorMessageResponse:
      type: object
      example:
        code: 4000
        message: Internal server error
        incident_id: inc-789
        service_status:
          name: user-service
          status: degraded
          dependencies:
            - name: db
              status: down
      properties:
        code:
          $ref: "#/components/schemas/InternalErrorCode"
        message:
          type: string
          title: Human-readable error message
        incidentId:
          type: string
          title: Unique error tracking ID
        serviceStatus:
          $ref: "#/components/schemas/ServiceStatus"
        resourceUtilization:
          $ref: "#/components/schemas/ResourceUtilization"
        operationDetails:
          $ref: "#/components/schemas/OperationDetails"
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Represents internal server and system-level errors
      title: Internal Error Response
    LimitInfo:
      type: object
      properties:
        current:
          type: integer
          format: int32
          title: Current request count
        limit:
          type: integer
          format: int32
          title: Rate limit threshold
        resetTime:
          type: string
          format: date-time
          title: When the limit resets
        windowSize:
          type: string
          title: Time window for the limit
    ListAccountsResponse:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: "#/components/schemas/Account"
          title: List of accounts
        total:
          type: integer
          format: int32
          title: Total number of accounts matching the request
      title: ListAccountsResponse represents the response containing a list of
        accounts
    ListScrapingJobsResponse:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: "#/components/schemas/ScrapingJob"
      title: ListScrapingJobsResponse represents the response containing a list of
        scraping jobs
    MFAInfo:
      type: object
      properties:
        mfaRequired:
          type: boolean
          title: Whether MFA was required
        allowedMethods:
          type: array
          items:
            type: string
          title: Allowed MFA methods
        failedReason:
          type: string
          title: Why MFA failed if applicable
    MethodNotAllowedErrorMessageResponse:
      type: object
      example:
        code: 405
        message: Method Not Allowed
        allowed_methods:
          - GET
          - POST
      properties:
        code:
          type: integer
          format: int32
          title: HTTP status code (405)
        message:
          type: string
          title: Human-readable error message
        allowedMethods:
          type: array
          items:
            type: string
          title: List of allowed HTTP methods
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Represents errors when HTTP method is not allowed on the endpoint
      title: Method Not Allowed Error Response
    NotFoundErrorCode:
      type: string
      enum:
        - NO_NOT_FOUND_ERROR
        - UNDEFINED_ENDPOINT
        - UNIMPLEMENTED
        - STORE_ID_NOT_FOUND
        - USER_NOT_FOUND
        - RESOURCE_NOT_FOUND
        - TENANT_NOT_FOUND
      default: NO_NOT_FOUND_ERROR
      description: |-
        - NO_NOT_FOUND_ERROR: Default value as per proto3 convention
         - UNDEFINED_ENDPOINT: Endpoint errors

        Requested endpoint doesn't exist
         - UNIMPLEMENTED: Endpoint not implemented
         - STORE_ID_NOT_FOUND: Resource errors

        Requested store ID doesn't exist
         - USER_NOT_FOUND: Requested user doesn't exist
         - RESOURCE_NOT_FOUND: Generic resource not found
         - TENANT_NOT_FOUND: Requested tenant doesn't exist
      title: Enhanced NotFoundErrorCode represents resource not found error codes
    NotFoundErrorMessageResponse:
      type: object
      example:
        code: 5000
        message: Resource not found
        resource_info:
          type: user
          id: "123"
          path: /api/users/123
        suggestions:
          similar_resources:
            - "124"
            - "125"
          alternative_paths:
            - /api/v2/users/123
      properties:
        code:
          $ref: "#/components/schemas/NotFoundErrorCode"
        message:
          type: string
          title: Human-readable error message
        resourceInfo:
          $ref: "#/components/schemas/ResourceInfo"
        suggestions:
          $ref: "#/components/schemas/Suggestions"
        apiInfo:
          $ref: "#/components/schemas/APIInfo"
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Represents resource not found errors
      title: Not Found Error Response
    NotImplementedErrorMessageResponse:
      type: object
      example:
        code: 501
        message: Not Implemented
        feature: User Deletion
      properties:
        code:
          type: integer
          format: int32
          title: HTTP status code (501)
        message:
          type: string
          title: Human-readable error message
        feature:
          type: string
          title: Feature or functionality not implemented
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Represents errors when the requested functionality is not implemented
      title: Not Implemented Error Response
    OperationDetails:
      type: object
      properties:
        operationId:
          type: string
          title: ID of failed operation
        startTime:
          type: string
          format: date-time
          title: When operation started
        endTime:
          type: string
          format: date-time
          title: When operation failed
        stackTrace:
          type: array
          items:
            type: string
          title: Stack trace if available
        parameters:
          type: object
          additionalProperties:
            type: string
          title: Operation parameters
    PaymentInfo:
      type: object
      properties:
        amountDue:
          type: number
          format: double
          title: Amount that needs to be paid
        currency:
          type: string
          title: Currency code
        dueDate:
          type: string
          format: date-time
          title: Payment due date
        paymentUrl:
          type: string
          title: URL to make the payment
    PaymentRequiredErrorMessageResponse:
      type: object
      example:
        code: 402
        message: Payment Required
        payment_info:
          amount_due: 29.99
          currency: USD
          due_date: 2024-01-01T00:00:00Z
      properties:
        code:
          type: integer
          format: int32
          title: HTTP status code (402)
        message:
          type: string
          title: Human-readable error message
        paymentInfo:
          $ref: "#/components/schemas/PaymentInfo"
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Indicates that payment is required to proceed
      title: Payment Required Error Response
    PreconditionFailedErrorMessageResponse:
      type: object
      example:
        code: 412
        message: Precondition Failed
        failed_conditions:
          - If-Match header does not match
      properties:
        code:
          type: integer
          format: int32
          title: HTTP status code (412)
        message:
          type: string
          title: Human-readable error message
        failedConditions:
          type: array
          items:
            type: string
          title: List of failed preconditions
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Represents errors when a precondition provided in the request fails
      title: Precondition Failed Error Response
    QuotaInfo:
      type: object
      properties:
        resource:
          type: string
          title: Resource being limited
        used:
          type: string
          format: int64
          title: Amount used
        limit:
          type: string
          format: int64
          title: Quota limit
        resetTime:
          type: string
          format: date-time
          title: When quota resets
        resourceUsage:
          type: object
          additionalProperties:
            type: string
            format: int64
          title: Usage by resource type
    RateLimitContext:
      type: object
      properties:
        userId:
          type: string
          title: Affected user
        ipAddress:
          type: string
          title: IP address
        affectedEndpoints:
          type: array
          items:
            type: string
          title: Endpoints being rate limited
        headers:
          type: object
          additionalProperties:
            type: string
          title: Relevant headers
    RateLimitErrorMessageResponse:
      type: object
      example:
        code: 4102
        message: Rate limit exceeded
        limit_info:
          current: 150
          limit: 100
          reset_time: 2024-01-01T00:00:00Z
        quota_info:
          resource: api_calls
          used: 1500
          limit: 1000
      properties:
        code:
          $ref: "#/components/schemas/InternalErrorCode"
        message:
          type: string
          title: Human-readable error message
        limitInfo:
          $ref: "#/components/schemas/LimitInfo"
        quotaInfo:
          $ref: "#/components/schemas/QuotaInfo"
        context:
          $ref: "#/components/schemas/RateLimitContext"
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Represents rate limiting and quota exceeded errors
      title: Rate Limit Error Response
    ResourceInfo:
      type: object
      properties:
        type:
          type: string
          title: Type of resource not found
        id:
          type: string
          title: ID of resource not found
        path:
          type: string
          title: Path that was accessed
        tenantId:
          type: string
          title: Tenant context if applicable
        scopes:
          type: array
          items:
            type: string
          title: Required scopes for access
    ResourceUtilization:
      type: object
      properties:
        cpuUsage:
          type: number
          format: double
          title: CPU usage percentage
        memoryUsage:
          type: number
          format: double
          title: Memory usage percentage
        activeConnections:
          type: integer
          format: int32
          title: Number of active connections
        quotas:
          type: object
          additionalProperties:
            type: number
            format: double
          title: Current quota utilization
    ResourceValidation:
      type: object
      properties:
        missingResources:
          type: array
          items:
            type: string
          title: Resources that weren't found
        invalidReferences:
          type: array
          items:
            type: string
          title: Invalid resource references
        idViolations:
          type: object
          additionalProperties:
            type: string
          title: ID format violations
    SchemaValidation:
      type: object
      properties:
        schemaVersion:
          type: string
          title: Version of schema used
        invalidPatterns:
          type: array
          items:
            type: string
          title: Patterns that were invalid
        typeMismatches:
          type: array
          items:
            type: string
          title: Type mismatches found
    ScrapingJob:
      type: object
      properties:
        id:
          type: string
          title: Unique identifier for the job
        name:
          type: string
          title: Human-readable name for the job
        createdAt:
          type: string
          format: date-time
          title: Job creation timestamp
        status:
          $ref: "#/components/schemas/BackgroundJobStatus"
        keywords:
          type: array
          items:
            type: string
          title: Search terms for Google Maps
        lang:
          type: string
          title: ISO 639-1 language code (e.g., "en", "el")
        zoom:
          type: integer
          format: int32
          title: Map zoom level (1-20)
        lat:
          type: string
          title: Latitude coordinate
        lon:
          type: string
          title: Longitude coordinate
        fastMode:
          type: boolean
          title: Enable faster but potentially less thorough scraping
        radius:
          type: integer
          format: int32
          title: Search radius in meters
        depth:
          type: integer
          format: int32
          title: Depth of recursive search (1-10)
        email:
          type: boolean
          title: Whether to extract email addresses
        maxTime:
          type: integer
          format: int32
          title: Maximum execution time in seconds
        proxies:
          type: array
          items:
            type: string
          title: List of proxy servers to use
        updatedAt:
          type: string
          format: date-time
          title: Last update timestamp
        deletedAt:
          type: string
          format: date-time
          title: Soft delete timestamp
        payloadType:
          type: string
          title: Account that created the jobs
        priority:
          type: integer
          format: int32
          title: Priority level of the job
        payload:
          type: string
          format: byte
          title: Payload data
      description: >-
        ScrapingJob represents a Google Maps scraping task.

        This message defines both the configuration and current state of a scraping operation.


        Key components:

        - Basic metadata (id, name, timestamps)

        - Job status tracking

        - Search configuration parameters

        - Geographic settings

        - Performance options

        - Multi-tenant context


        Database considerations:

        - Stored in "scraping_jobs" table

        - Uses GORM for ORM mapping

        - Includes foreign key to Account

        - Supports soft deletes


        Usage example:

        ```go

        job := &ScrapingJob{
            Name: "Athens Cafes",
            Status: BackgroundJobStatus_BACKGROUND_JOB_STATUS_QUEUED,
            Keywords: []string{"cafe", "coffee"},
            Lang: "el",
            Zoom: 15,
            FastMode: true,
            MaxTime: 3600,
        }

        ```
    ServiceStatus:
      type: object
      properties:
        name:
          type: string
          title: Name of the service
        status:
          type: string
          title: Current service status
        metrics:
          type: object
          additionalProperties:
            type: string
          title: Service metrics
        dependencies:
          type: array
          items:
            $ref: "#/components/schemas/Dependency"
          title: Status of dependencies
    ServiceUnavailableErrorMessageResponse:
      type: object
      example:
        code: 4300
        message: Service is temporarily unavailable
        availability_info:
          retry_after: 60
          affected_services:
            - user-service
      properties:
        code:
          $ref: "#/components/schemas/InternalErrorCode"
        message:
          type: string
          title: Human-readable error message
        availabilityInfo:
          $ref: "#/components/schemas/AvailabilityInfo"
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Represents service availability errors
      title: Service Unavailable Error Response
    SessionInfo:
      type: object
      properties:
        sessionId:
          type: string
          title: ID of the invalid session
        lastActive:
          type: string
          format: date-time
          title: Last activity timestamp
        deviceId:
          type: string
          title: Device associated with session
        ipAddress:
          type: string
          title: IP address of the request
    Status:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: |-
            The status code, which should be an enum value of
            [google.rpc.Code][google.rpc.Code].
        message:
          type: string
          description: >-
            A developer-facing error message, which should be in English. Any

            user-facing error message should be localized and sent in the

            [google.rpc.Status.details][google.rpc.Status.details] field, or localized

            by the client.
        details:
          type: array
          items:
            $ref: "#/components/schemas/Any"
          description: >-
            A list of messages that carry the error details.  There is a common
            set of

            message types for APIs to use.
      description: >-
        The `Status` type defines a logical error model that is suitable for

        different programming environments, including REST APIs and RPC APIs. It is

        used by [gRPC](https://github.com/grpc). Each `Status` message contains

        three pieces of data: error code, error message, and error details.


        You can find out more about this error model and how to work with it in the

        [API Design Guide](https://cloud.google.com/apis/design/errors).
    Suggestions:
      type: object
      properties:
        similarResources:
          type: array
          items:
            type: string
          title: Similar resource IDs
        alternativePaths:
          type: array
          items:
            type: string
          title: Alternative API paths
        documentationUrl:
          type: string
          title: Relevant documentation
        hints:
          type: object
          additionalProperties:
            type: string
          title: Additional hints
    TokenInfo:
      type: object
      properties:
        tokenId:
          type: string
          title: Identifier of the invalid token
        tokenType:
          type: string
          title: Type of token (Bearer, JWT, etc)
        expiry:
          type: string
          format: date-time
          title: Token expiration time
        issuer:
          type: string
          title: Token issuer
        audiences:
          type: array
          items:
            type: string
          title: Token audiences
    TooEarlyErrorMessageResponse:
      type: object
      example:
        code: 425
        message: Too Early
      properties:
        code:
          type: integer
          format: int32
          title: HTTP status code (425)
        message:
          type: string
          title: Human-readable error message
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Indicates that the server is unwilling to risk processing a request
        that might be replayed
      title: Too Early Error Response
    UnprocessableEntityErrorMessageResponse:
      type: object
      example:
        code: 422
        message: Unprocessable Entity
        errors:
          - field: email
            error: Invalid format
      properties:
        code:
          type: integer
          format: int32
          title: HTTP status code (422)
        message:
          type: string
          title: Human-readable error message
        errors:
          type: array
          items:
            $ref: "#/components/schemas/FieldError"
          title: List of field-specific errors
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Represents errors when the server understands the content type but
        cannot process the instructions
      title: Unprocessable Entity Error Response
    UpdateAccountRequest:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Account"
      title: UpdateAccountRequest represents a request to update account details
    UpdateAccountResponse:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Account"
      title: UpdateAccountResponse represents the response after updating an account
    ValidationErrorCode:
      type: string
      enum:
        - NO_ERROR
        - VALIDATION_ERROR
        - INVALID_WRITE_INPUT
        - INVALID_CHECK_INPUT
        - INVALID_EXPAND_INPUT
        - INVALID_OBJECT_FORMAT
        - INVALID_USER
        - INVALID_TUPLE
        - AUTHORIZATION_MODEL_NOT_FOUND
        - TYPE_NOT_FOUND
        - RELATION_NOT_FOUND
        - STORE_ID_INVALID_LENGTH
        - ID_TOO_LONG
        - INVALID_CONTINUATION_TOKEN
        - PAGE_SIZE_INVALID
        - PARAM_MISSING_VALUE
        - EXCEEDED_ENTITY_LIMIT
        - DUPLICATE_ENTRY
        - CANNOT_ALLOW_DUPLICATE_TUPLES
        - CANNOT_ALLOW_DUPLICATE_TYPES
        - INVALID_SCHEMA_VERSION
        - INVALID_TYPE_PATTERN
        - INVALID_RELATION_PATTERN
        - INVALID_OBJECT_PATTERN
        - INVALID_FORMAT
        - INVALID_EMAIL_FORMAT
        - INVALID_PASSWORD_STRENGTH
        - FIELD_TOO_SHORT
        - FIELD_TOO_LONG
        - UNSUPPORTED_MEDIA_TYPE
      default: NO_ERROR
      description: >-
        - VALIDATION_ERROR: General validation errors
         - AUTHORIZATION_MODEL_NOT_FOUND: Resource not found errors
         - INVALID_CONTINUATION_TOKEN: Input errors
         - DUPLICATE_ENTRY: Conflict errors
         - INVALID_SCHEMA_VERSION: Schema errors
         - INVALID_FORMAT: New validation error codes

        General invalid format
         - INVALID_EMAIL_FORMAT: Email format is invalid
         - INVALID_PASSWORD_STRENGTH: Password does not meet strength requirements
         - FIELD_TOO_SHORT: Field value is too short
         - FIELD_TOO_LONG: Field value is too long
         - UNSUPPORTED_MEDIA_TYPE: Media type is not supported
      title: Enhanced ValidationErrorCode represents validation and business logic
        error codes
    ValidationErrorMessageResponse:
      type: object
      example:
        code: 2000
        message: Validation failed
        field_violations:
          - field: email
            validation: format
            message: Invalid email format
        entity_violations:
          user:
            - duplicate_email
            - invalid_age
      properties:
        code:
          $ref: "#/components/schemas/ValidationErrorCode"
        message:
          type: string
          title: Human-readable error message
        fieldViolations:
          type: array
          items:
            $ref: "#/components/schemas/FieldViolation"
        schemaValidation:
          $ref: "#/components/schemas/SchemaValidation"
        resourceValidation:
          $ref: "#/components/schemas/ResourceValidation"
        errorResponse:
          $ref: "#/components/schemas/ErrorResponse"
      description: Represents data validation and business logic errors
      title: Validation Error Response
